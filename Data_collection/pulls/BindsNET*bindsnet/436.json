{"url":"https://api.github.com/repos/BindsNET/bindsnet/pulls/436","id":532991151,"node_id":"MDExOlB1bGxSZXF1ZXN0NTMyOTkxMTUx","html_url":"https://github.com/BindsNET/bindsnet/pull/436","diff_url":"https://github.com/BindsNET/bindsnet/pull/436.diff","patch_url":"https://github.com/BindsNET/bindsnet/pull/436.patch","issue_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/436","number":436,"state":"closed","locked":false,"title":"Two fixes: LocalConnection and LearningRule","user":{"login":"danielgafni","id":49863538,"node_id":"MDQ6VXNlcjQ5ODYzNTM4","avatar_url":"https://avatars.githubusercontent.com/u/49863538?v=4","gravatar_id":"","url":"https://api.github.com/users/danielgafni","html_url":"https://github.com/danielgafni","followers_url":"https://api.github.com/users/danielgafni/followers","following_url":"https://api.github.com/users/danielgafni/following{/other_user}","gists_url":"https://api.github.com/users/danielgafni/gists{/gist_id}","starred_url":"https://api.github.com/users/danielgafni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielgafni/subscriptions","organizations_url":"https://api.github.com/users/danielgafni/orgs","repos_url":"https://api.github.com/users/danielgafni/repos","events_url":"https://api.github.com/users/danielgafni/events{/privacy}","received_events_url":"https://api.github.com/users/danielgafni/received_events","type":"User","site_admin":false},"body":"Fixes:\r\n - `bindsnet.network.topology.LocalConnection.compute` - fixed a bug discussed in #435 \r\n - `bindsnet.learning.learning.LearningRule` - fixed a bug for weight_decay=None. Previously `pytest` failed with:\r\n\r\n```\r\n\r\ntest/network/test_connections.py:30: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nbindsnet/network/topology.py:748: in __init__\r\n    super().__init__(source, target, nu, reduction, weight_decay, **kwargs)\r\nbindsnet/network/topology.py:70: in __init__\r\n    self.update_rule = self.update_rule(\r\nbindsnet/learning/learning.py:111: in __init__\r\n    super().__init__(\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nself = <bindsnet.learning.learning.NoOp object at 0x7f49a8b22760>, connection = SparseConnection(\r\n  (source): LIFNodes()\r\n  (target): LIFNodes()\r\n), nu = [0.0, 0.0]\r\nreduction = None, weight_decay = None, kwargs = {'sparsity': 0.9}\r\n\r\n    def __init__(\r\n        self,\r\n        connection: AbstractConnection,\r\n        nu: Optional[Union[float, Sequence[float]]] = None,\r\n        reduction: Optional[callable] = None,\r\n        weight_decay: float = 0.0,\r\n        **kwargs\r\n    ) -> None:\r\n        # language=rst\r\n        \"\"\"\r\n        Abstract constructor for the ``LearningRule`` object.\r\n    \r\n        :param connection: An ``AbstractConnection`` object.\r\n        :param nu: Single or pair of learning rates for pre- and post-synaptic events.\r\n        :param reduction: Method for reducing parameter updates along the batch\r\n            dimension.\r\n        :param weight_decay: Constant multiple to decay weights by on each iteration.\r\n        \"\"\"\r\n        # Connection parameters.\r\n        self.connection = connection\r\n        self.source = connection.source\r\n        self.target = connection.target\r\n    \r\n        self.wmin = connection.wmin\r\n        self.wmax = connection.wmax\r\n    \r\n        # Learning rate(s).\r\n        if nu is None:\r\n            nu = [0.0, 0.0]\r\n        elif isinstance(nu, float) or isinstance(nu, int):\r\n            nu = [nu, nu]\r\n    \r\n        self.nu = torch.zeros(2, dtype=torch.float)\r\n        self.nu[0] = nu[0]\r\n        self.nu[1] = nu[1]\r\n    \r\n        # Parameter update reduction across minibatch dimension.\r\n        if reduction is None:\r\n            if self.source.batch_size == 1:\r\n                self.reduction = torch.squeeze\r\n            else:\r\n                self.reduction = torch.sum\r\n        else:\r\n            self.reduction = reduction\r\n    \r\n        # Weight decay.\r\n>       self.weight_decay = 1.0 - weight_decay\r\nE       TypeError: unsupported operand type(s) for -: 'float' and 'NoneType'\r\n\r\nbindsnet/learning/learning.py:69: TypeError\r\n------------------------------------------------------------------------ Captured stdout call ------------------------------------------------------------------------\r\nState dict in <class 'bindsnet.network.topology.Connection'> : odict_keys(['w', 'source.s', 'source.rest', 'source.reset', 'source.thresh', 'source.refrac', 'source.tc_decay', 'source.decay', 'source.v', 'source.refrac_count', 'target.s', 'target.rest', 'target.reset', 'target.thresh', 'target.refrac', 'target.tc_decay', 'target.decay', 'target.v', 'target.refrac_count'])\r\n__dict__ in <class 'bindsnet.network.topology.Connection'> : dict_keys(['training', '_parameters', '_buffers', '_non_persistent_buffers_set', '_backward_hooks', '_forward_hooks', '_forward_pre_hooks', '_state_dict_hooks', '_load_state_dict_pre_hooks', '_modules', 'weight_decay', 'reduction', 'update_rule', 'wmin', 'wmax', 'norm', 'decay', 'b'])\r\nTensors in <class 'bindsnet.network.topology.Connection'> : ['w']\r\nTensor devices [('w', device(type='cuda', index=0))]\r\ncuda:0 True\r\nState dict in <class 'bindsnet.network.topology.Conv2dConnection'> : odict_keys(['w', 'b', 'source.s', 'source.rest', 'source.reset', 'source.thresh', 'source.refrac', 'source.tc_decay', 'source.decay', 'source.v', 'source.refrac_count', 'target.s', 'target.rest', 'target.reset', 'target.thresh', 'target.refrac', 'target.tc_decay', 'target.decay', 'target.v', 'target.refrac_count'])\r\n__dict__ in <class 'bindsnet.network.topology.Conv2dConnection'> : dict_keys(['training', '_parameters', '_buffers', '_non_persistent_buffers_set', '_backward_hooks', '_forward_hooks', '_forward_pre_hooks', '_state_dict_hooks', '_load_state_dict_pre_hooks', '_modules', 'weight_decay', 'reduction', 'update_rule', 'wmin', 'wmax', 'norm', 'decay', 'kernel_size', 'stride', 'padding', 'dilation', 'in_channels', 'out_channels'])\r\nTensors in <class 'bindsnet.network.topology.Conv2dConnection'> : ['w', 'b']\r\nTensor devices [('w', device(type='cuda', index=0)), ('b', device(type='cuda', index=0))]\r\ncuda:0 True\r\ncuda:0 True\r\nState dict in <class 'bindsnet.network.topology.MaxPool2dConnection'> : odict_keys(['firing_rates', 'source.s', 'source.rest', 'source.reset', 'source.thresh', 'source.refrac', 'source.tc_decay', 'source.decay', 'source.v', 'source.refrac_count', 'target.s', 'target.rest', 'target.reset', 'target.thresh', 'target.refrac', 'target.tc_decay', 'target.decay', 'target.v', 'target.refrac_count'])\r\n__dict__ in <class 'bindsnet.network.topology.MaxPool2dConnection'> : dict_keys(['training', '_parameters', '_buffers', '_non_persistent_buffers_set', '_backward_hooks', '_forward_hooks', '_forward_pre_hooks', '_state_dict_hooks', '_load_state_dict_pre_hooks', '_modules', 'weight_decay', 'reduction', 'update_rule', 'wmin', 'wmax', 'norm', 'decay', 'kernel_size', 'stride', 'padding', 'dilation'])\r\nTensors in <class 'bindsnet.network.topology.MaxPool2dConnection'> : ['firing_rates']\r\nTensor devices [('firing_rates', device(type='cuda', index=0))]\r\ncuda:0 True\r\nState dict in <class 'bindsnet.network.topology.LocalConnection'> : odict_keys(['w', 'b', 'locations', 'mask', 'source.s', 'source.rest', 'source.reset', 'source.thresh', 'source.refrac', 'source.tc_decay', 'source.decay', 'source.v', 'source.refrac_count', 'target.s', 'target.rest', 'target.reset', 'target.thresh', 'target.refrac', 'target.tc_decay', 'target.decay', 'target.v', 'target.refrac_count'])\r\n__dict__ in <class 'bindsnet.network.topology.LocalConnection'> : dict_keys(['training', '_parameters', '_buffers', '_non_persistent_buffers_set', '_backward_hooks', '_forward_hooks', '_forward_pre_hooks', '_state_dict_hooks', '_load_state_dict_pre_hooks', '_modules', 'weight_decay', 'reduction', 'update_rule', 'wmin', 'wmax', 'norm', 'decay', 'kernel_size', 'stride', 'n_filters', 'conv_size'])\r\nTensors in <class 'bindsnet.network.topology.LocalConnection'> : ['w', 'b', 'locations', 'mask']\r\nTensor devices [('w', device(type='cuda', index=0)), ('b', device(type='cuda', index=0)), ('locations', device(type='cuda', index=0)), ('mask', device(type='cuda', index=0))]\r\ncuda:0 True\r\ncuda:0 True\r\ncuda:0 True\r\ncuda:0 True\r\nState dict in <class 'bindsnet.network.topology.MeanFieldConnection'> : odict_keys(['w', 'source.s', 'source.rest', 'source.reset', 'source.thresh', 'source.refrac', 'source.tc_decay', 'source.decay', 'source.v', 'source.refrac_count', 'target.s', 'target.rest', 'target.reset', 'target.thresh', 'target.refrac', 'target.tc_decay', 'target.decay', 'target.v', 'target.refrac_count'])\r\n__dict__ in <class 'bindsnet.network.topology.MeanFieldConnection'> : dict_keys(['training', '_parameters', '_buffers', '_non_persistent_buffers_set', '_backward_hooks', '_forward_hooks', '_forward_pre_hooks', '_state_dict_hooks', '_load_state_dict_pre_hooks', '_modules', 'weight_decay', 'reduction', 'update_rule', 'wmin', 'wmax', 'norm', 'decay'])\r\nTensors in <class 'bindsnet.network.topology.MeanFieldConnection'> : ['w']\r\nTensor devices [('w', device(type='cuda', index=0))]\r\ncuda:0 True\r\n========================================================================== warnings summary ==========================================================================\r\ntest/conversion/test_conversion.py::test_conversion\r\n  /home/dan/Projects/bindsnet/bindsnet/conversion/conversion.py:570: RuntimeWarning: Data is None. Weights will not be scaled.\r\n    warnings.warn(\"Data is None. Weights will not be scaled.\", RuntimeWarning)\r\n\r\ntest/network/test_learning.py::TestLearningRules::test_hebbian\r\ntest/network/test_learning.py::TestLearningRules::test_post_pre\r\ntest/network/test_learning.py::TestLearningRules::test_weight_dependent_post_pre\r\n  /home/dan/Projects/bindsnet/bindsnet/network/nodes.py:104: UserWarning: masked_fill_ received a mask with dtype torch.uint8, this behavior is now deprecated,please use a mask with dtype torch.bool instead. (Triggered internally at  /pytorch/aten/src/ATen/native/TensorAdvancedIndexing.cpp:650.)\r\n    self.x.masked_fill_(self.s, 1)\r\n\r\n-- Docs: https://docs.pytest.org/en/stable/warnings.html\r\n====================================================================== short test summary info =======================================================================\r\nFAILED test/network/test_connections.py::TestConnection::test_transfer - TypeError: unsupported operand type(s) for -: 'float' and 'NoneType'\r\n```\r\n\r\n`self.weight_decay = 1.0 - weight_decay` did not work if `weight_decay=None` - i fixed this line. Now `pytest` passes.","created_at":"2020-12-05T09:51:59Z","updated_at":"2020-12-14T00:58:22Z","closed_at":"2020-12-14T00:58:22Z","merged_at":"2020-12-14T00:58:22Z","merge_commit_sha":"624927d042dda1da7f70698e0f02aba4ab9d11b0","assignee":null,"assignees":[],"requested_reviewers":[],"requested_teams":[],"labels":[],"milestone":null,"draft":false,"commits_url":"https://api.github.com/repos/BindsNET/bindsnet/pulls/436/commits","review_comments_url":"https://api.github.com/repos/BindsNET/bindsnet/pulls/436/comments","review_comment_url":"https://api.github.com/repos/BindsNET/bindsnet/pulls/comments{/number}","comments_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/436/comments","statuses_url":"https://api.github.com/repos/BindsNET/bindsnet/statuses/fac8048136343908a1dc12ee46bfa384849a9053","head":{"label":"danielgafni:local-connection-compute-fix","ref":"local-connection-compute-fix","sha":"fac8048136343908a1dc12ee46bfa384849a9053","user":{"login":"danielgafni","id":49863538,"node_id":"MDQ6VXNlcjQ5ODYzNTM4","avatar_url":"https://avatars.githubusercontent.com/u/49863538?v=4","gravatar_id":"","url":"https://api.github.com/users/danielgafni","html_url":"https://github.com/danielgafni","followers_url":"https://api.github.com/users/danielgafni/followers","following_url":"https://api.github.com/users/danielgafni/following{/other_user}","gists_url":"https://api.github.com/users/danielgafni/gists{/gist_id}","starred_url":"https://api.github.com/users/danielgafni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielgafni/subscriptions","organizations_url":"https://api.github.com/users/danielgafni/orgs","repos_url":"https://api.github.com/users/danielgafni/repos","events_url":"https://api.github.com/users/danielgafni/events{/privacy}","received_events_url":"https://api.github.com/users/danielgafni/received_events","type":"User","site_admin":false},"repo":{"id":318749322,"node_id":"MDEwOlJlcG9zaXRvcnkzMTg3NDkzMjI=","name":"bindsnet","full_name":"danielgafni/bindsnet","private":false,"owner":{"login":"danielgafni","id":49863538,"node_id":"MDQ6VXNlcjQ5ODYzNTM4","avatar_url":"https://avatars.githubusercontent.com/u/49863538?v=4","gravatar_id":"","url":"https://api.github.com/users/danielgafni","html_url":"https://github.com/danielgafni","followers_url":"https://api.github.com/users/danielgafni/followers","following_url":"https://api.github.com/users/danielgafni/following{/other_user}","gists_url":"https://api.github.com/users/danielgafni/gists{/gist_id}","starred_url":"https://api.github.com/users/danielgafni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/danielgafni/subscriptions","organizations_url":"https://api.github.com/users/danielgafni/orgs","repos_url":"https://api.github.com/users/danielgafni/repos","events_url":"https://api.github.com/users/danielgafni/events{/privacy}","received_events_url":"https://api.github.com/users/danielgafni/received_events","type":"User","site_admin":false},"html_url":"https://github.com/danielgafni/bindsnet","description":"Simulation of spiking neural networks (SNNs) using PyTorch.","fork":true,"url":"https://api.github.com/repos/danielgafni/bindsnet","forks_url":"https://api.github.com/repos/danielgafni/bindsnet/forks","keys_url":"https://api.github.com/repos/danielgafni/bindsnet/keys{/key_id}","collaborators_url":"https://api.github.com/repos/danielgafni/bindsnet/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/danielgafni/bindsnet/teams","hooks_url":"https://api.github.com/repos/danielgafni/bindsnet/hooks","issue_events_url":"https://api.github.com/repos/danielgafni/bindsnet/issues/events{/number}","events_url":"https://api.github.com/repos/danielgafni/bindsnet/events","assignees_url":"https://api.github.com/repos/danielgafni/bindsnet/assignees{/user}","branches_url":"https://api.github.com/repos/danielgafni/bindsnet/branches{/branch}","tags_url":"https://api.github.com/repos/danielgafni/bindsnet/tags","blobs_url":"https://api.github.com/repos/danielgafni/bindsnet/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/danielgafni/bindsnet/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/danielgafni/bindsnet/git/refs{/sha}","trees_url":"https://api.github.com/repos/danielgafni/bindsnet/git/trees{/sha}","statuses_url":"https://api.github.com/repos/danielgafni/bindsnet/statuses/{sha}","languages_url":"https://api.github.com/repos/danielgafni/bindsnet/languages","stargazers_url":"https://api.github.com/repos/danielgafni/bindsnet/stargazers","contributors_url":"https://api.github.com/repos/danielgafni/bindsnet/contributors","subscribers_url":"https://api.github.com/repos/danielgafni/bindsnet/subscribers","subscription_url":"https://api.github.com/repos/danielgafni/bindsnet/subscription","commits_url":"https://api.github.com/repos/danielgafni/bindsnet/commits{/sha}","git_commits_url":"https://api.github.com/repos/danielgafni/bindsnet/git/commits{/sha}","comments_url":"https://api.github.com/repos/danielgafni/bindsnet/comments{/number}","issue_comment_url":"https://api.github.com/repos/danielgafni/bindsnet/issues/comments{/number}","contents_url":"https://api.github.com/repos/danielgafni/bindsnet/contents/{+path}","compare_url":"https://api.github.com/repos/danielgafni/bindsnet/compare/{base}...{head}","merges_url":"https://api.github.com/repos/danielgafni/bindsnet/merges","archive_url":"https://api.github.com/repos/danielgafni/bindsnet/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/danielgafni/bindsnet/downloads","issues_url":"https://api.github.com/repos/danielgafni/bindsnet/issues{/number}","pulls_url":"https://api.github.com/repos/danielgafni/bindsnet/pulls{/number}","milestones_url":"https://api.github.com/repos/danielgafni/bindsnet/milestones{/number}","notifications_url":"https://api.github.com/repos/danielgafni/bindsnet/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/danielgafni/bindsnet/labels{/name}","releases_url":"https://api.github.com/repos/danielgafni/bindsnet/releases{/id}","deployments_url":"https://api.github.com/repos/danielgafni/bindsnet/deployments","created_at":"2020-12-05T09:29:43Z","updated_at":"2021-09-10T23:47:53Z","pushed_at":"2021-09-20T01:09:29Z","git_url":"git://github.com/danielgafni/bindsnet.git","ssh_url":"git@github.com:danielgafni/bindsnet.git","clone_url":"https://github.com/danielgafni/bindsnet.git","svn_url":"https://github.com/danielgafni/bindsnet","homepage":"","size":82522,"stargazers_count":0,"watchers_count":0,"language":"Python","has_issues":false,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":false,"forks_count":0,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":0,"license":{"key":"agpl-3.0","name":"GNU Affero General Public License v3.0","spdx_id":"AGPL-3.0","url":"https://api.github.com/licenses/agpl-3.0","node_id":"MDc6TGljZW5zZTE="},"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":[],"visibility":"public","forks":0,"open_issues":0,"watchers":0,"default_branch":"master"}},"base":{"label":"BindsNET:master","ref":"master","sha":"31e125285f06df95cbf1db206788b0c516af80e6","user":{"login":"BindsNET","id":39340698,"node_id":"MDEyOk9yZ2FuaXphdGlvbjM5MzQwNjk4","avatar_url":"https://avatars.githubusercontent.com/u/39340698?v=4","gravatar_id":"","url":"https://api.github.com/users/BindsNET","html_url":"https://github.com/BindsNET","followers_url":"https://api.github.com/users/BindsNET/followers","following_url":"https://api.github.com/users/BindsNET/following{/other_user}","gists_url":"https://api.github.com/users/BindsNET/gists{/gist_id}","starred_url":"https://api.github.com/users/BindsNET/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BindsNET/subscriptions","organizations_url":"https://api.github.com/users/BindsNET/orgs","repos_url":"https://api.github.com/users/BindsNET/repos","events_url":"https://api.github.com/users/BindsNET/events{/privacy}","received_events_url":"https://api.github.com/users/BindsNET/received_events","type":"Organization","site_admin":false},"repo":{"id":120948040,"node_id":"MDEwOlJlcG9zaXRvcnkxMjA5NDgwNDA=","name":"bindsnet","full_name":"BindsNET/bindsnet","private":false,"owner":{"login":"BindsNET","id":39340698,"node_id":"MDEyOk9yZ2FuaXphdGlvbjM5MzQwNjk4","avatar_url":"https://avatars.githubusercontent.com/u/39340698?v=4","gravatar_id":"","url":"https://api.github.com/users/BindsNET","html_url":"https://github.com/BindsNET","followers_url":"https://api.github.com/users/BindsNET/followers","following_url":"https://api.github.com/users/BindsNET/following{/other_user}","gists_url":"https://api.github.com/users/BindsNET/gists{/gist_id}","starred_url":"https://api.github.com/users/BindsNET/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BindsNET/subscriptions","organizations_url":"https://api.github.com/users/BindsNET/orgs","repos_url":"https://api.github.com/users/BindsNET/repos","events_url":"https://api.github.com/users/BindsNET/events{/privacy}","received_events_url":"https://api.github.com/users/BindsNET/received_events","type":"Organization","site_admin":false},"html_url":"https://github.com/BindsNET/bindsnet","description":"Simulation of spiking neural networks (SNNs) using PyTorch.","fork":false,"url":"https://api.github.com/repos/BindsNET/bindsnet","forks_url":"https://api.github.com/repos/BindsNET/bindsnet/forks","keys_url":"https://api.github.com/repos/BindsNET/bindsnet/keys{/key_id}","collaborators_url":"https://api.github.com/repos/BindsNET/bindsnet/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/BindsNET/bindsnet/teams","hooks_url":"https://api.github.com/repos/BindsNET/bindsnet/hooks","issue_events_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/events{/number}","events_url":"https://api.github.com/repos/BindsNET/bindsnet/events","assignees_url":"https://api.github.com/repos/BindsNET/bindsnet/assignees{/user}","branches_url":"https://api.github.com/repos/BindsNET/bindsnet/branches{/branch}","tags_url":"https://api.github.com/repos/BindsNET/bindsnet/tags","blobs_url":"https://api.github.com/repos/BindsNET/bindsnet/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/BindsNET/bindsnet/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/BindsNET/bindsnet/git/refs{/sha}","trees_url":"https://api.github.com/repos/BindsNET/bindsnet/git/trees{/sha}","statuses_url":"https://api.github.com/repos/BindsNET/bindsnet/statuses/{sha}","languages_url":"https://api.github.com/repos/BindsNET/bindsnet/languages","stargazers_url":"https://api.github.com/repos/BindsNET/bindsnet/stargazers","contributors_url":"https://api.github.com/repos/BindsNET/bindsnet/contributors","subscribers_url":"https://api.github.com/repos/BindsNET/bindsnet/subscribers","subscription_url":"https://api.github.com/repos/BindsNET/bindsnet/subscription","commits_url":"https://api.github.com/repos/BindsNET/bindsnet/commits{/sha}","git_commits_url":"https://api.github.com/repos/BindsNET/bindsnet/git/commits{/sha}","comments_url":"https://api.github.com/repos/BindsNET/bindsnet/comments{/number}","issue_comment_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments{/number}","contents_url":"https://api.github.com/repos/BindsNET/bindsnet/contents/{+path}","compare_url":"https://api.github.com/repos/BindsNET/bindsnet/compare/{base}...{head}","merges_url":"https://api.github.com/repos/BindsNET/bindsnet/merges","archive_url":"https://api.github.com/repos/BindsNET/bindsnet/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/BindsNET/bindsnet/downloads","issues_url":"https://api.github.com/repos/BindsNET/bindsnet/issues{/number}","pulls_url":"https://api.github.com/repos/BindsNET/bindsnet/pulls{/number}","milestones_url":"https://api.github.com/repos/BindsNET/bindsnet/milestones{/number}","notifications_url":"https://api.github.com/repos/BindsNET/bindsnet/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/BindsNET/bindsnet/labels{/name}","releases_url":"https://api.github.com/repos/BindsNET/bindsnet/releases{/id}","deployments_url":"https://api.github.com/repos/BindsNET/bindsnet/deployments","created_at":"2018-02-09T19:42:37Z","updated_at":"2023-01-25T00:15:30Z","pushed_at":"2023-01-16T01:03:38Z","git_url":"git://github.com/BindsNET/bindsnet.git","ssh_url":"git@github.com:BindsNET/bindsnet.git","clone_url":"https://github.com/BindsNET/bindsnet.git","svn_url":"https://github.com/BindsNET/bindsnet","homepage":"","size":30518,"stargazers_count":1189,"watchers_count":1189,"language":"Python","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":false,"has_discussions":true,"forks_count":308,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":14,"license":{"key":"agpl-3.0","name":"GNU Affero General Public License v3.0","spdx_id":"AGPL-3.0","url":"https://api.github.com/licenses/agpl-3.0","node_id":"MDc6TGljZW5zZTE="},"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["dynamic","gpu-computing","machine-learning","neurons","pytorch","reinforcement-learning","simulation","snn","spiking-neural-networks","stdp","synapse"],"visibility":"public","forks":308,"open_issues":14,"watchers":1189,"default_branch":"master"}},"_links":{"self":{"href":"https://api.github.com/repos/BindsNET/bindsnet/pulls/436"},"html":{"href":"https://github.com/BindsNET/bindsnet/pull/436"},"issue":{"href":"https://api.github.com/repos/BindsNET/bindsnet/issues/436"},"comments":{"href":"https://api.github.com/repos/BindsNET/bindsnet/issues/436/comments"},"review_comments":{"href":"https://api.github.com/repos/BindsNET/bindsnet/pulls/436/comments"},"review_comment":{"href":"https://api.github.com/repos/BindsNET/bindsnet/pulls/comments{/number}"},"commits":{"href":"https://api.github.com/repos/BindsNET/bindsnet/pulls/436/commits"},"statuses":{"href":"https://api.github.com/repos/BindsNET/bindsnet/statuses/fac8048136343908a1dc12ee46bfa384849a9053"}},"author_association":"CONTRIBUTOR","auto_merge":null,"active_lock_reason":null,"merged":true,"mergeable":null,"rebaseable":null,"mergeable_state":"unknown","merged_by":{"login":"Hananel-Hazan","id":3954715,"node_id":"MDQ6VXNlcjM5NTQ3MTU=","avatar_url":"https://avatars.githubusercontent.com/u/3954715?v=4","gravatar_id":"","url":"https://api.github.com/users/Hananel-Hazan","html_url":"https://github.com/Hananel-Hazan","followers_url":"https://api.github.com/users/Hananel-Hazan/followers","following_url":"https://api.github.com/users/Hananel-Hazan/following{/other_user}","gists_url":"https://api.github.com/users/Hananel-Hazan/gists{/gist_id}","starred_url":"https://api.github.com/users/Hananel-Hazan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hananel-Hazan/subscriptions","organizations_url":"https://api.github.com/users/Hananel-Hazan/orgs","repos_url":"https://api.github.com/users/Hananel-Hazan/repos","events_url":"https://api.github.com/users/Hananel-Hazan/events{/privacy}","received_events_url":"https://api.github.com/users/Hananel-Hazan/received_events","type":"User","site_admin":false},"comments":2,"review_comments":0,"maintainer_can_modify":false,"commits":3,"additions":6,"deletions":10,"changed_files":2}