{"url":"https://api.github.com/repos/sktime/sktime/issues/652","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/652/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/652/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/652/events","html_url":"https://github.com/sktime/sktime/issues/652","id":799739066,"node_id":"MDU6SXNzdWU3OTk3MzkwNjY=","number":652,"title":"[ENH] Behaviour modifying compositors for forecasting","user":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"labels":[{"id":1118163266,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY2","url":"https://api.github.com/repos/sktime/sktime/labels/good%20first%20issue","name":"good first issue","color":"9eff91","default":true,"description":"Good for newcomers"},{"id":1180363817,"node_id":"MDU6TGFiZWwxMTgwMzYzODE3","url":"https://api.github.com/repos/sktime/sktime/labels/API%20design","name":"API design","color":"874db7","default":false,"description":"API design & software architecture"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-02-02T22:02:08Z","updated_at":"2022-07-30T21:47:46Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nIn the Feb 2 meeting it was discussed that some behaviours in evaluation might actually be \"business of the model\" rather than of the evaluation. Irrespectively, even if evaluation workflows implement some of these behaviours, it might also be useful to have certain rules as behaviour modifying compositors for forecasters.\r\n\r\n**Describe the solution you'd like**\r\nIt might be useful to implement wrapper compositors that modify the behaviour of fitting/updating:\r\n- [ ] \"sliding window update modifier\" - wraps a `Forecaster` and replaces `update` of the wrapped estimator with a sliding window re-fit. Hyper-parameters are sliding window parameters.\r\n- [x] \"re-fit after T time modifier\" - wraps a `Forecaster` and replaces `update` with the following meta-algorithm: if time since last `fit` is <T, then call `update` of wrapped forecaster. Otherwise, re-fit to a pre-specified window (fixed length or all past). Hyper-parameters are T and the window specs. \r\n- [ ] \"re-fit once forecast error is too large\" - wraps a `Forecaster` and replaces `update` with the following meta-algorihtm: re-fits if forecast error, evaluated in a certain way, exceeds a threshold; otherwise calls the wrapped `update`. To check the condition, internally calls the `evaluator`. Hyper-parameters are: evaluation parameters, including loss metric; threshold that needs to be passed for re-fit to be triggered. Could be dynamic, so might be interesting to think about how to make this more abstract to allow arbitrary smoothers/anomaly detectors on the loss metric.\r\n\r\n\r\n**Describe alternatives you've considered**\r\nThe alternative would be to have \"merged/contracted\" estimators or composites in cases where these compositors might be applied instead, e.g., as hyper-parameter options of grid search tuners.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/652/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/652/timeline","performed_via_github_app":null,"state_reason":null}