{"url":"https://api.github.com/repos/sktime/sktime/issues/6","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/6/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/6/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/6/events","html_url":"https://github.com/sktime/sktime/issues/6","id":395980500,"node_id":"MDU6SXNzdWUzOTU5ODA1MDA=","number":6,"title":"Implement important series-to-series transformers","user":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"labels":[{"id":1118163266,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY2","url":"https://api.github.com/repos/sktime/sktime/labels/good%20first%20issue","name":"good first issue","color":"9eff91","default":true,"description":"Good for newcomers"},{"id":1180366006,"node_id":"MDU6TGFiZWwxMTgwMzY2MDA2","url":"https://api.github.com/repos/sktime/sktime/labels/implementing%20framework","name":"implementing framework","color":"61c7f9","default":false,"description":"Implementing frameworks for new learning tasks"},{"id":1180387595,"node_id":"MDU6TGFiZWwxMTgwMzg3NTk1","url":"https://api.github.com/repos/sktime/sktime/labels/implementing%20algorithms","name":"implementing algorithms","color":"c5c0f7","default":false,"description":"Implementing new algorithms/estimators"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":17,"created_at":"2019-01-04T16:12:08Z","updated_at":"2020-11-13T08:40:28Z","closed_at":"2020-11-13T08:40:28Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"Some series-to-series transformers that would be useful.\r\n\r\n### unfitted, single-series, simple\r\n\r\n- [ ]  **binning/aggregation transformer**\r\n\r\nBehaviour:\r\nreturns the sequence of [aggregator application] (e.g., count) in the bins. Index is start time, end time, or index (from start) of bin, depending on index hyper-parameter\r\n\r\nHyper-parameters: \r\nbin specs - start: time/index, end  : time/index, numbins : integer\r\nindex - 'start', 'end', or 'bin'\r\naggregator - function to apply to values within bin, default = count\r\n\r\nalternative to bin specs: index sequence\r\n\r\n- [ ] **truncation transformer**\r\n\r\nBehaviour:\r\ncuts off any entry in the sequence with index outside [lower, upper]\r\n\r\nHyper-parameters:\r\n lower, upper : time\r\n\r\n- [ ] **simple equal spacing transformer**\r\n\r\nBehaviour:\r\nintra/extrapolates series to the nodes by the specified strategy, e.g., fill in nearest or next (careful with boundaries)\r\n\r\nHyper-parameters: \r\nnode specs - start: time/index, end  : time/index, numsteps : integer\r\nindex - 'start', 'end', or 'bin'\r\nstrategy - 'nearest', 'last' , 'next', 'pw_linear'\r\n\r\nalternative to node specs: index sequence\r\n\r\n- [ ] **re-indexing transformer**\r\n\r\nBehaviour:\r\nchanges the index by a the strategy indicated in the reindexing parameter\r\ninteger = replace with ascending count\r\nfield = get from data frame column\r\n\r\nHyper-parameters: \r\nstrategy - 'integer', 'field'\r\n\r\n- [ ] **index extractor transformer**\r\n\r\nBehaviour:\r\ncreates a series from the index of the series\r\n\r\n- [ ] **NA remover transformer**\r\n\r\nBehaviour:\r\nremoves sequence elements that are numpy.nan\r\n\r\n- [ ] **padding transformer**\r\n\r\nBehaviour:\r\npads a sequence/series with value at start or end until it has the desired length\r\n\r\nHyper-parameters: \r\nwhere - 'start', 'end'\r\nwhat - value\r\nlength - integer\r\noptional: index treatment\r\n\r\n\r\n- [ ] **NA imputer**\r\n\r\nBehaviour:\r\nFills in NA values by the specified strategy\r\n\r\nHyper-parameters:\r\nstrategy - 'nearest', 'last' , 'next', 'pw_linear'\r\n\r\n\r\n### unfitted, single-series, reduction\r\n\r\n- [ ] **interpolation transformer**\r\n\r\nBehaviour:\r\nuses a scikit-learn regressor or classifier to interpolate to the specified index set.\r\nFits series values against series index, and uses  the regressor/classifier to predict value from index\r\n\r\nHyper-parameters:\r\nindex set\r\nestimator - sklearn regressor\r\n\r\n- [ ] **Supervised NA imputer**\r\n\r\nBehaviour:\r\nFills in NA values by the specified strategy by using a scikit-learn regressor or classifier. Fits non-NA series values against series index, and uses the regressor/classifier to predict value from index\r\n\r\nHyper-parameters:\r\nstrategy - 'nearest', 'last' , 'next', 'pw_linear'\r\n\r\n- [ ] advanced: exogeneous or multi-column versions\r\n\r\n\r\n### unfitted, multiple-series\r\n\r\nNote: the below are \"unfitted\" since they run on the entire series\r\n\r\n- [ ] **index homogenization transformer**\r\nBehaviour:\r\nLooks up the indices for all the series and introduces them for all the series. Fills in values at new nodes by the specified strategy.\r\n\r\nHyper-parameters:\r\nstrategy - ' NA', 'nearest', 'last', 'next'\r\n\r\n\r\n### design questions\r\n\r\n* would it make sense to create an \"interpolator\" class which in predict takes a series and an index sequence and returns the values?\r\n* does it make sense to expose dedicated index parameter interfaces in some of the above?\r\n","closed_by":{"login":"mloning","id":21020482,"node_id":"MDQ6VXNlcjIxMDIwNDgy","avatar_url":"https://avatars.githubusercontent.com/u/21020482?v=4","gravatar_id":"","url":"https://api.github.com/users/mloning","html_url":"https://github.com/mloning","followers_url":"https://api.github.com/users/mloning/followers","following_url":"https://api.github.com/users/mloning/following{/other_user}","gists_url":"https://api.github.com/users/mloning/gists{/gist_id}","starred_url":"https://api.github.com/users/mloning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mloning/subscriptions","organizations_url":"https://api.github.com/users/mloning/orgs","repos_url":"https://api.github.com/users/mloning/repos","events_url":"https://api.github.com/users/mloning/events{/privacy}","received_events_url":"https://api.github.com/users/mloning/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/6/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/6/timeline","performed_via_github_app":null,"state_reason":"completed"}