{"url":"https://api.github.com/repos/sktime/sktime/issues/669","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/669/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/669/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/669/events","html_url":"https://github.com/sktime/sktime/issues/669","id":805363084,"node_id":"MDU6SXNzdWU4MDUzNjMwODQ=","number":669,"title":"TSF importance curve normalization (remove bias)","user":{"login":"aabanda","id":46486474,"node_id":"MDQ6VXNlcjQ2NDg2NDc0","avatar_url":"https://avatars.githubusercontent.com/u/46486474?v=4","gravatar_id":"","url":"https://api.github.com/users/aabanda","html_url":"https://github.com/aabanda","followers_url":"https://api.github.com/users/aabanda/followers","following_url":"https://api.github.com/users/aabanda/following{/other_user}","gists_url":"https://api.github.com/users/aabanda/gists{/gist_id}","starred_url":"https://api.github.com/users/aabanda/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aabanda/subscriptions","organizations_url":"https://api.github.com/users/aabanda/orgs","repos_url":"https://api.github.com/users/aabanda/repos","events_url":"https://api.github.com/users/aabanda/events{/privacy}","received_events_url":"https://api.github.com/users/aabanda/received_events","type":"User","site_admin":false},"labels":[{"id":1118163264,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY0","url":"https://api.github.com/repos/sktime/sktime/labels/feature%20request","name":"feature request","color":"38d191","default":false,"description":"New feature or request"},{"id":1118163266,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY2","url":"https://api.github.com/repos/sktime/sktime/labels/good%20first%20issue","name":"good first issue","color":"9eff91","default":true,"description":"Good for newcomers"},{"id":3102418261,"node_id":"MDU6TGFiZWwzMTAyNDE4MjYx","url":"https://api.github.com/repos/sktime/sktime/labels/module:classification","name":"module:classification","color":"BEB114","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-02-10T10:04:26Z","updated_at":"2021-09-10T19:02:58Z","closed_at":"2021-09-10T19:02:58Z","author_association":"NONE","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nThe TimeSeriesForestCLassifier computes the importance curve for each of the extracted features in each time index. However, as the authors point out \"different time indices are associated with different numbers of intervals\", and, in particular, \"the indices in the middle have more intervals than the indices on the edges of the time series\". The importance curves are, hence, biased towards the time points having more interval features. \r\n\r\n**Describe the solution you'd like**\r\nI propose to normalize the importance curve at each point by dividing the importance by the number of intervals that the point is part of.  The authors mention that the number of intervals each time t in part of is  t(L-t+1), where L is the length of the time series. However, I think that it's better to use the empirical number of intervals each point is part of, given that this information can be easily obtained.   For this, firstly, the empirical number of random intervals each point is included in is calculated and then the importance curves are divided by this value. \r\n\r\nThis can easily be done by adding the fis_count lines in the feature_importances_ function (line 290) in sktime/sktime/series_as_features/base/estimators/_ensemble.py. The new function would be:\r\n\r\n```python\r\ndef feature_importances_(self):\r\n\"\"\"Compute feature importances for time series forest\"\"\"\r\n# assumes particular structure of clf,\r\n# with each tree consisting of a particular pipeline,\r\n# as in modular tsf\r\n\r\nif not isinstance(\r\n  self.estimators_[0].steps[0][1], RandomIntervalFeatureExtractor\r\n):\r\n  raise NotImplementedError(\r\n      \"RandomIntervalFeatureExtractor must\"\r\n      \" be used as the transformer,\"\r\n      \" which must be the first step\"\r\n      \" in the base estimator.\"\r\n  )\r\n\r\n# get series length, assuming same length series\r\ntree = self.estimators_[0]\r\ntransformer = tree.steps[0][1]\r\ntime_index = transformer._time_index\r\nn_timepoints = len(time_index)\r\n\r\n# get feature names, features are the same for all trees\r\nfeature_names = [feature.__name__ for feature in transformer.features]\r\nn_features = len(feature_names)\r\n\r\n# get intervals from transformer,\r\n# the number of intervals is the same for all trees\r\n\r\nintervals = transformer.intervals_\r\nn_intervals = len(intervals)\r\n\r\n# get number of estimators\r\nn_estimators = len(self.estimators_)\r\n\r\n# preallocate array for feature importances\r\nfis = np.zeros((n_timepoints, n_features))\r\n<b>fis_count = np.zeros((n_timepoints, n_features))<b>\r\n\r\nfor i in range(n_estimators):\r\n  # select tree\r\n  tree = self.estimators_[i]\r\n  transformer = tree.steps[0][1]\r\n  classifier = tree.steps[-1][1]\r\n\r\n  # get intervals from transformer\r\n  intervals = transformer.intervals_\r\n\r\n  # get feature importances from classifier\r\n  fi = classifier.feature_importances_\r\n\r\n  for k in range(n_features):\r\n      for j in range(n_intervals):\r\n          # get start and end point from interval\r\n          start, end = intervals[j]\r\n\r\n          # get time index for interval\r\n          interval_time_points = np.arange(start, end)\r\n\r\n          # get index for feature importances,\r\n          # assuming particular order of features\r\n\r\n          column_index = (k * n_intervals) + j\r\n\r\n          fis_count[interval_time_points, k] += 1\r\n\r\n          # add feature importance for all time points of interval\r\n          fis[interval_time_points, k] += fi[column_index]\r\n\r\n# normalise by number of estimators and number of intervals\r\nfis = fis / n_estimators / n_intervals\r\nfis_count =  fis_count / n_estimators / n_intervals\r\n\r\n# format output\r\nfis = pd.DataFrame(fis, columns=feature_names, index=time_index)\r\nfis_count = pd.DataFrame(fis_count, columns=feature_names, index=time_index)\r\nfis_norm = fis/fis_count\r\n\r\nreturn fis_norm\r\n```\r\n\r\n\r\nAn example of the empirical number (normalized by n_estimators and n_intervals) of intervals each point is included in for an instance of the CBF dataset is shown above: \r\n\r\n![intervasl](https://user-images.githubusercontent.com/46486474/107494752-73aac980-6b8f-11eb-9913-d9aec32a4500.png)\r\n\r\nFinally, an example of the importance curve for the mean feature before and after the normalization for an instance of the CBF dataset is shown above: \r\n\r\n\r\n![importance_mean](https://user-images.githubusercontent.com/46486474/107494904-a5239500-6b8f-11eb-97f9-a8ec5c2d4747.png)\r\n\r\n\r\n","closed_by":{"login":"MatthewMiddlehurst","id":25731235,"node_id":"MDQ6VXNlcjI1NzMxMjM1","avatar_url":"https://avatars.githubusercontent.com/u/25731235?v=4","gravatar_id":"","url":"https://api.github.com/users/MatthewMiddlehurst","html_url":"https://github.com/MatthewMiddlehurst","followers_url":"https://api.github.com/users/MatthewMiddlehurst/followers","following_url":"https://api.github.com/users/MatthewMiddlehurst/following{/other_user}","gists_url":"https://api.github.com/users/MatthewMiddlehurst/gists{/gist_id}","starred_url":"https://api.github.com/users/MatthewMiddlehurst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MatthewMiddlehurst/subscriptions","organizations_url":"https://api.github.com/users/MatthewMiddlehurst/orgs","repos_url":"https://api.github.com/users/MatthewMiddlehurst/repos","events_url":"https://api.github.com/users/MatthewMiddlehurst/events{/privacy}","received_events_url":"https://api.github.com/users/MatthewMiddlehurst/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/669/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/669/timeline","performed_via_github_app":null,"state_reason":"completed"}