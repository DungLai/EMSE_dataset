{"url":"https://api.github.com/repos/sktime/sktime/issues/1167","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/1167/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/1167/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/1167/events","html_url":"https://github.com/sktime/sktime/issues/1167","id":947782511,"node_id":"MDU6SXNzdWU5NDc3ODI1MTE=","number":1167,"title":"Derive ForecastingHorizon from DatetimeIndex in predict method","user":{"login":"Flix6x","id":30658763,"node_id":"MDQ6VXNlcjMwNjU4NzYz","avatar_url":"https://avatars.githubusercontent.com/u/30658763?v=4","gravatar_id":"","url":"https://api.github.com/users/Flix6x","html_url":"https://github.com/Flix6x","followers_url":"https://api.github.com/users/Flix6x/followers","following_url":"https://api.github.com/users/Flix6x/following{/other_user}","gists_url":"https://api.github.com/users/Flix6x/gists{/gist_id}","starred_url":"https://api.github.com/users/Flix6x/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Flix6x/subscriptions","organizations_url":"https://api.github.com/users/Flix6x/orgs","repos_url":"https://api.github.com/users/Flix6x/repos","events_url":"https://api.github.com/users/Flix6x/events{/privacy}","received_events_url":"https://api.github.com/users/Flix6x/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-07-19T15:38:26Z","updated_at":"2021-07-20T21:00:58Z","closed_at":"2021-07-20T21:00:05Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nBasically just a simplification request: converting from DatetimeIndex to ForecastingHorizon seems to me like a step that the `BaseForecaster` should be able to handle by itself. So instead of:\r\n\r\n```\r\nmodel = NaiveForecaster()\r\nmodel.fit(train_data)\r\nfh = ForecastingHorizon(test_data.index, is_relative=False)\r\nforecast_data = model.predict(fh)\r\n```\r\n\r\nI would suggest users should be able to do:\r\n\r\n```\r\nmodel = NaiveForecaster()\r\nmodel.fit(train_data)\r\nforecast_data = model.predict(test_data.index)\r\n```\r\nwhich would be very elegant imo. It also removes the need to import `ForecastingHorizon`, which shortens user code and—and here's my selfish reason—possibly avoids adding sktime as an explicit dependency in libraries that want to be sktime compatible but do not want to depend on it.\r\n\r\n**Describe the solution you'd like**\r\nPerhaps the `BaseForecaster.predict` method can check whether its `fh` argument is a DatetimeIndex instance and run the necessary conversion itself?\r\n","closed_by":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/1167/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/1167/timeline","performed_via_github_app":null,"state_reason":"completed"}