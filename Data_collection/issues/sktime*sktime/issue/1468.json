{"url":"https://api.github.com/repos/sktime/sktime/issues/1468","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/1468/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/1468/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/1468/events","html_url":"https://github.com/sktime/sktime/issues/1468","id":1013343115,"node_id":"I_kwDOCVKAsc48ZmOL","number":1468,"title":"[ENH] Implement `get_fitted_params` for pipelines and heterogeneous ensembles","user":{"login":"boukepostma","id":33422940,"node_id":"MDQ6VXNlcjMzNDIyOTQw","avatar_url":"https://avatars.githubusercontent.com/u/33422940?v=4","gravatar_id":"","url":"https://api.github.com/users/boukepostma","html_url":"https://github.com/boukepostma","followers_url":"https://api.github.com/users/boukepostma/followers","following_url":"https://api.github.com/users/boukepostma/following{/other_user}","gists_url":"https://api.github.com/users/boukepostma/gists{/gist_id}","starred_url":"https://api.github.com/users/boukepostma/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/boukepostma/subscriptions","organizations_url":"https://api.github.com/users/boukepostma/orgs","repos_url":"https://api.github.com/users/boukepostma/repos","events_url":"https://api.github.com/users/boukepostma/events{/privacy}","received_events_url":"https://api.github.com/users/boukepostma/received_events","type":"User","site_admin":false},"labels":[{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-10-01T13:22:44Z","updated_at":"2022-11-22T22:02:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nAfter a BaseForecaster is fitted using model.fit(y_train), we can extract information about the fitted forecaster using forecaster-specific attributes and methods. For example, when AutoARIMA from sktime.forecasting.arima is fitted, we can generate a summary using the summary() method. \r\nWhen the same forecaster is used as part of a TransformedTargetForecaster, we can no longer access this information. \r\n\r\n**Describe the solution you'd like**\r\nThe fitted BaseForecaster is saved and accessible through .best_estimator_.named_steps['model_name']. In scikit-learn this functionality already exists, as demonstrated in the following example:\r\n\r\n```python\r\nfrom sklearn.decomposition import PCA\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.model_selection import GridSearchCV\r\n\r\n# Define a pipeline to search for the best combination of PCA truncation\r\n# and classifier regularization.\r\npca = PCA()\r\n# set the tolerance to a large value to make the example faster\r\nlogistic = LogisticRegression(max_iter=10000, tol=0.1)\r\npipe = Pipeline(steps=[('pca', pca), ('logistic', logistic)])\r\n\r\nX_digits, y_digits = datasets.load_digits(return_X_y=True)\r\n\r\n# Parameters of pipelines can be set using ‘__’ separated parameter names:\r\nparam_grid = {\r\n    'pca__n_components': [5, 15, 30, 45, 64],\r\n    'logistic__C': np.logspace(-4, 4, 4),\r\n}\r\ngrid = GridSearchCV(pipe, param_grid, n_jobs=-1)\r\ngrid.fit(X_digits, y_digits)\r\n\r\n# THIS PART DOES NOT WORK SIMILARLY IN SKTIME\r\nlogistic_fitted = grid.best_estimator_.named_steps['logistic']\r\nlogistic_fitted.coef_\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\n\r\n**Additional context**\r\nBasic example of the desired outcome that now generates an AttributeError: 'NoneType' object has no attribute 'summary':\r\n```python\r\nfrom sktime.datasets import load_airline\r\nfrom sktime.forecasting.arima import AutoARIMA\r\nfrom sktime.forecasting.compose import TransformedTargetForecaster\r\nfrom sktime.forecasting.model_selection import ForecastingGridSearchCV\r\nfrom sktime.transformations.series.boxcox import LogTransformer\r\nfrom sktime.forecasting.model_selection import ExpandingWindowSplitter\r\n\r\ny_train = load_airline()\r\n\r\nforecaster = AutoARIMA(start_P=1, start_Q=0, sp=1, seasonal=False, suppress_warnings=True)\r\n\r\npipe = TransformedTargetForecaster([\r\n    ('logtrans', LogTransformer()),\r\n    ('forecaster', forecaster),\r\n])\r\n\r\ncv = ExpandingWindowSplitter(\r\n    step_length=12, fh=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], initial_window=72\r\n)\r\n\r\nparam_grid ={'forecaster__information_criterion': ['aic', 'bic']}\r\n\r\ngrid = ForecastingGridSearchCV(\r\n    forecaster = pipe,\r\n    cv = cv,\r\n    param_grid = param_grid,\r\n)\r\ngrid.fit(y_train)\r\n\r\nbest_forecaster = grid.best_forecaster_.named_steps['forecaster']\r\nbest_forecaster.summary()\r\n```\r\n\r\nWhile fitting above `forecaster` directly does give us access to a summary:\r\n```python\r\nforecaster.fit(y_train)\r\nforecaster.summary()\r\n```\r\n\r\nP.S. Thanks a lot for the hard work on this great package! \r\n\r\nI'd be happy to help with a PR. That would be my first, so I would very much appreciate some pointers in the right direction :). Very interested to hear what you think about this feature!","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/1468/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/1468/timeline","performed_via_github_app":null,"state_reason":null}