{"url":"https://api.github.com/repos/sktime/sktime/issues/712","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/712/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/712/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/712/events","html_url":"https://github.com/sktime/sktime/issues/712","id":817606775,"node_id":"MDU6SXNzdWU4MTc2MDY3NzU=","number":712,"title":"Uniform handling of y_train in forecasting performance metrics","user":{"login":"mloning","id":21020482,"node_id":"MDQ6VXNlcjIxMDIwNDgy","avatar_url":"https://avatars.githubusercontent.com/u/21020482?v=4","gravatar_id":"","url":"https://api.github.com/users/mloning","html_url":"https://github.com/mloning","followers_url":"https://api.github.com/users/mloning/followers","following_url":"https://api.github.com/users/mloning/following{/other_user}","gists_url":"https://api.github.com/users/mloning/gists{/gist_id}","starred_url":"https://api.github.com/users/mloning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mloning/subscriptions","organizations_url":"https://api.github.com/users/mloning/orgs","repos_url":"https://api.github.com/users/mloning/repos","events_url":"https://api.github.com/users/mloning/events{/privacy}","received_events_url":"https://api.github.com/users/mloning/received_events","type":"User","site_admin":false},"labels":[{"id":1118163264,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY0","url":"https://api.github.com/repos/sktime/sktime/labels/feature%20request","name":"feature request","color":"38d191","default":false,"description":"New feature or request"},{"id":1180363817,"node_id":"MDU6TGFiZWwxMTgwMzYzODE3","url":"https://api.github.com/repos/sktime/sktime/labels/API%20design","name":"API design","color":"874db7","default":false,"description":"API design & software architecture"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2021-02-26T19:28:14Z","updated_at":"2021-06-03T11:55:11Z","closed_at":"2021-06-03T11:55:11Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nSome forecasting performance metrics require `y_train`, e.g. [MASE](https://robjhyndman.com/papers/mase.pdf). This adds some complication to higher-level functionality that expects a common interface for metrics, like the `evaluate` function or `ForecastingGridSearchCV`, and in unit testing (see #672).\r\n\r\n**Current problem**\r\nThis currently fails because `y_train` is not passed internally when calling `scoring`. \r\n```python\r\nfrom sktime.forecasting.all import *\r\nfrom sktime.forecasting.model_evaluation import evaluate\r\n\r\ny = load_airline()\r\nf = NaiveForecaster()\r\ncv = SlidingWindowSplitter()\r\nscoring = MASE()\r\nout = evaluate(f, cv, y, scoring=scoring)\r\n```\r\n\r\n**Possible solutions**\r\n1. Change interface for all performance metrics to optionally accept `y_train`, but only those that require it use it. This requires wrapping metrics from scikit-learn.  \r\n2. Add case distinctions in higher-level functionality to separately handle those metrics that require `y_train` and those that do not. This requires adding a `requires_y_train` attribute to metric classes.\r\n3. Adapt metrics interface at run time to, making case distinctions inside adapter, exposing uniform interface to higher-order functionality (suggested by @fkiraly). This also requires adding a `requires_y_train` attribute to metric classes.\r\n\r\n**Describe the solution you'd like**\r\n```python\r\nfrom sktime.forecasting.all import *\r\nfrom sktime.forecasting.model_evaluation import evaluate\r\n\r\ny = load_airline()\r\nfh = np.arange(1, 10)\r\ny_train, y_test = temporal_train_test_split(y, fh=fh)\r\nf = NaiveForecaster()\r\nf.fit(y_train)\r\ny_pred = f.predict(fh)\r\n\r\n# uniform interface\r\nscoring = MASE()\r\nscoring.requires_y_train = True\r\nscoring = check_scoring(scoring)\r\nscoring(y_test, y_pred, y_train)\r\n>>> 3.577770878609128\r\n\r\nscoring = sMAPE()\r\nscoring.requires_y_train = False\r\nscoring = check_scoring(scoring)\r\nscoring(y_test, y_pred, y_train)\r\n>>> 0.1780237534499896\r\n```\r\n\r\nHere's a rough implementation of the adapter-based solution:\r\n```python\r\nclass _MetricAdapter:\r\n    \"\"\"\r\n    Adapter for performance metrics to uniformly handle \r\n    y_train requirement of some metrics.\r\n    \"\"\"\r\n\r\n    def __init__(self, metric):\r\n        # wrap metric object\r\n        self.metric = metric\r\n        \r\n    def __call__(self, y_true, y_pred, y_train, *args, **kwargs):\r\n        \"\"\"Compute metric, uniformly handling those metrics that \r\n        require `y_train` and those that do not.\r\n        \"\"\"\r\n        \r\n        # if y_train is required, pass it on\r\n        if self.metric.requires_y_train:\r\n            return self.metric(y_true, y_pred, y_train, *args, **kwargs)\r\n        \r\n        # otherwise, ignore y_train\r\n        else:\r\n            return self.metric(y_true, y_pred, *args, **kwargs)     \r\n        \r\n    def __getattr__(self, attr):\r\n        # delegate attribute queries to the wrapped metric object\r\n        return getattr(self.metric, attr)\r\n\r\n    def __repr___(self):\r\n        return repr(self.metric)\r\n\r\n    \r\ndef _adapt_scoring(scoring):\r\n    \"\"\"Helper function to adapt scoring to uniformly handle y_train requirement\"\"\"\r\n    return MetricAdapter(scoring)\r\n\r\n\r\ndef check_scoring(scoring):\r\n    \"\"\"\r\n    Validate `scoring` object.\r\n\r\n    Parameters\r\n    ----------\r\n    scoring : object\r\n        Callable metric object.\r\n    \r\n    Returns\r\n    -------\r\n    scoring : object \r\n        Validated `scoring` object, or sMAPE() if `scoring` is None.\r\n    \r\n    Raises\r\n    ------\r\n    TypeError\r\n        If `scoring` is not a callable object.\r\n    \"\"\"\r\n    from sktime.performance_metrics.forecasting import sMAPE\r\n    from sktime.performance_metrics.forecasting._classes import MetricFunctionWrapper\r\n    \r\n    if scoring is None:\r\n        return sMAPE()\r\n\r\n    if not callable(scoring):\r\n        raise TypeError(\"`scoring` must be a callable object\")\r\n\r\n    valid_base_class = MetricFunctionWrapper\r\n    if not isinstance(scoring, valid_base_class):\r\n        raise TypeError(f\"`scoring` must inherit from `{valid_base_class.__name__}`\")\r\n\r\n    return _adapt_scoring(scoring)\r\n```","closed_by":{"login":"mloning","id":21020482,"node_id":"MDQ6VXNlcjIxMDIwNDgy","avatar_url":"https://avatars.githubusercontent.com/u/21020482?v=4","gravatar_id":"","url":"https://api.github.com/users/mloning","html_url":"https://github.com/mloning","followers_url":"https://api.github.com/users/mloning/followers","following_url":"https://api.github.com/users/mloning/following{/other_user}","gists_url":"https://api.github.com/users/mloning/gists{/gist_id}","starred_url":"https://api.github.com/users/mloning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mloning/subscriptions","organizations_url":"https://api.github.com/users/mloning/orgs","repos_url":"https://api.github.com/users/mloning/repos","events_url":"https://api.github.com/users/mloning/events{/privacy}","received_events_url":"https://api.github.com/users/mloning/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/712/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/712/timeline","performed_via_github_app":null,"state_reason":"completed"}