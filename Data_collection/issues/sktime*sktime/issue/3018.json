{"url":"https://api.github.com/repos/sktime/sktime/issues/3018","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/3018/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/3018/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/3018/events","html_url":"https://github.com/sktime/sktime/issues/3018","id":1305788251,"node_id":"I_kwDOCVKAsc5N1L9b","number":3018,"title":"[ENH] forecasting horizon conditional parameter wrapper","user":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"labels":[{"id":1118163264,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY0","url":"https://api.github.com/repos/sktime/sktime/labels/feature%20request","name":"feature request","color":"38d191","default":false,"description":"New feature or request"},{"id":1180387595,"node_id":"MDU6TGFiZWwxMTgwMzg3NTk1","url":"https://api.github.com/repos/sktime/sktime/labels/implementing%20algorithms","name":"implementing algorithms","color":"c5c0f7","default":false,"description":"Implementing new algorithms/estimators"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""},{"id":3796180314,"node_id":"LA_kwDOCVKAsc7iRR1a","url":"https://api.github.com/repos/sktime/sktime/labels/enhancement","name":"enhancement","color":"fef2c0","default":true,"description":"Adding new functionality"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-07-15T09:14:20Z","updated_at":"2022-07-15T10:39:12Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"A common situation in forecasting multiple forecasting horizons is that one wants to do something different per horizon element.\r\n\r\nFor instance, if `fh=[1, 2, 3]`, I may like to lag my exogeneous data by 1, when forecasting 1 step ahead, lag my exogeneous data by 2, when forecasting 2 ahead, and lag my exogeneous data by 3, when forecasting 3 ahead. Or, I might like to lag only *some* exogeneous variables, this way, so do a FeatureUnion with `ColumnSelect` with `Lag`\r\n\r\nThis is done internally, in the \"reduction\" transformers, but that is not very flexible.\r\nWe should have generic functionality for this, it could look like as follows:\r\n\r\n```python\r\nclass FhConditionalForecast(BaseForecaster):\r\n    \"\"\"Uses different parameters by forecasting horizon element.\r\n\r\n    When provided with forecasting horizon [f1, f2, ..., fn],\r\n    will fit forecaster with fh=f1 and parameters fh_params[f1] to forecast f1,\r\n    forecaster with fh=f2 and parameters fh_params[f1] to forecast f2, etc.\r\n\r\n    Parameters\r\n    ----------\r\n    forecaster : sktime compatible forecaster\r\n    fh_params : dict, with keys = fh elements, values = param dict for forecaster\r\n    \"\"\"\r\n```\r\n\r\nExample usage:\r\n```python\r\nforecaster = ForecastingPipeline([Lag(), ARIMA()])\r\nfc_by_lag = FhConditionalForecast(\r\n    forecaster,\r\n    fh_params = {\r\n        1: {\"Lag__lags\": 1}\r\n        2: {\"Lag__lags\": 2}\r\n    }\r\n)\r\n\r\nfc_by_lag.fit(y, X, fh=[1, 2])\r\n# internally, calls:\r\n# forecaster.set_params(Lag__lags=1).fit(y, X, fh=1)\r\n# forecaster.set_params(Lag__lags=2).fit(y, X, fh=2)\r\n\r\n#then, we can do this, do not need X_pred!\r\nfc_by_lag.predict()\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/3018/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/3018/timeline","performed_via_github_app":null,"state_reason":null}