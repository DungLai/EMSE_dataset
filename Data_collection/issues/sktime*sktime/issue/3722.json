{"url":"https://api.github.com/repos/sktime/sktime/issues/3722","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/3722/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/3722/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/3722/events","html_url":"https://github.com/sktime/sktime/issues/3722","id":1438120287,"node_id":"I_kwDOCVKAsc5Vt_lf","number":3722,"title":"[BUG] Failing to run AutoML estimators due to TransformedTargetForecaster","user":{"login":"BrandonKMLee","id":58927531,"node_id":"MDQ6VXNlcjU4OTI3NTMx","avatar_url":"https://avatars.githubusercontent.com/u/58927531?v=4","gravatar_id":"","url":"https://api.github.com/users/BrandonKMLee","html_url":"https://github.com/BrandonKMLee","followers_url":"https://api.github.com/users/BrandonKMLee/followers","following_url":"https://api.github.com/users/BrandonKMLee/following{/other_user}","gists_url":"https://api.github.com/users/BrandonKMLee/gists{/gist_id}","starred_url":"https://api.github.com/users/BrandonKMLee/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BrandonKMLee/subscriptions","organizations_url":"https://api.github.com/users/BrandonKMLee/orgs","repos_url":"https://api.github.com/users/BrandonKMLee/repos","events_url":"https://api.github.com/users/BrandonKMLee/events{/privacy}","received_events_url":"https://api.github.com/users/BrandonKMLee/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-11-07T10:25:41Z","updated_at":"2022-11-07T13:46:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\n`forecaster` defaults (using `TransformedTargetForecaster`) failed when `param_grid` items (e.g. `prophet`) are expected to be safe from bugs of `NaN`, however it is clear that the default data `y` has no NaN values since it has been pre-filled.\r\n\r\n**To Reproduce**\r\n\r\nCleaners and Downloaders\r\n\r\n<details>\r\n\r\n```python\r\nfrom numpy import arange, mean, abs, array\r\nfrom pandas.core.series import Series\r\nfrom pandas import DatetimeIndex\r\nfrom typing import Union\r\n\r\ndef findSampleFreq(ts:Union[Series,DatetimeIndex], n:int=None):\r\n# cleaned from https://stackoverflow.com/a/61479277\r\n\r\n    t_diffs = []\r\n    if n == None: n = ts.shape[0]-1\r\n    # TODO: check if n is smaller than ts.shape[0]-1\r\n    for i in arange(n):\r\n        td = ts.iloc[i+1]-ts.iloc[i]\r\n        t_diffs.append(td)\r\n\r\n    avg_diff = mean(t_diffs)\r\n\r\n    # fixed with https://stackoverflow.com/a/42247228\r\n    diff_ns = avg_diff.delta\r\n    diff_us = diff_ns / 1000\r\n    diff_ms = diff_us / 1000\r\n    diff_sec =  diff_ms / 1000\r\n    diff_min = diff_sec / 60\r\n    diff_hour = diff_min / 60\r\n    diff_biz = (diff_hour / 24) / (7 / 5) # assert no holidays\r\n    diff_day = diff_hour / 24\r\n    diff_wk = diff_day / 7\r\n    diff_semi = diff_day / 15.21875\r\n    diff_month = diff_day / 30.4375\r\n    diff_qtr = diff_day / 91.3125\r\n    diff_yr = diff_day / 365.25\r\n\r\n    # anticipates backward timing dataframes with outer abs\r\n    eval = {abs(1-abs(k)): v for k,v in {\r\n        diff_us: 'U', diff_ms: 'L', diff_sec: 'S', \r\n        diff_min: 'T', diff_hour: 'H', diff_biz: 'B', \r\n        diff_day: 'D', diff_wk: 'W', diff_semi: 'SMS', \r\n        diff_month: 'MS', diff_qtr: 'QS', diff_yr: 'AS' }.items()}\r\n    # https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects\r\n    return eval[min(eval)]\r\n\r\ndef dt_inplace(df):\r\n    # based on https://towardsdatascience.com/261746095361\r\n    from pandas.errors import ParserError\r\n    for c in df.columns[df.dtypes == 'object']:\r\n\r\n        try: df[c] = pd.to_datetime(df[c], infer_datetime_format=True) # fixing times\r\n        # flag inspired by https://stackoverflow.com/questions/59942125\r\n        except (ParserError,ValueError):\r\n            try: df[c] = df[c].str.replace(',', '').astype('float64') # fixing numbers\r\n            # borrowed from https://towardsdatascience.com/db9415caab0b\r\n            # dodging european systems of swapping commmas and dots\r\n            except (ParserError,ValueError):\r\n                pass\r\n\r\n    return df\r\n\r\nimport yfinance as yf\r\n\r\ndef loader(ticker=\"MSFT\"):\r\n  msft = yf.Ticker(ticker) # making API object\r\n  hist = msft.history(period=\"max\") # extracting data\r\n  hist = hist[['Close']] # filling in missing business days\r\n  hist = hist.resample(findSampleFreq(hist.index.to_series())).bfill()\r\n  # hist = hist.tz_convert(tz=None) # removing timezones\r\n  y = hist[-1000:] # using closing price as univariate expression\r\n  return y\r\n```\r\n\r\n</details>\r\n\r\nCore Code Piece\r\n\r\n<details>\r\n\r\n```python\r\ny = loader()\r\n\r\nforecast_count = 10\r\n\r\n# forecast count should hopefully be as much as 3x number of rows\r\n\r\nfrom sktime.forecasting.model_selection import ExpandingWindowSplitter, ForecastingGridSearchCV\r\n\r\n# https://www.sktime.org/en/stable/api_reference/auto_generated/sktime.forecasting.base.BaseForecaster.html\r\n\r\nfrom sktime.forecasting.exp_smoothing import ExponentialSmoothing\r\nfrom sktime.forecasting.ets import AutoETS\r\n# https://www.sktime.org/en/stable/api_reference/auto_generated/sktime.forecasting.exp_smoothing.ExponentialSmoothing.html\r\nfrom sktime.forecasting.arima import ARIMA, AutoARIMA\r\n# https://www.sktime.org/en/stable/api_reference/auto_generated/sktime.forecasting.arima.ARIMA.html\r\nfrom sktime.forecasting.fbprophet import Prophet\r\n# https://www.sktime.org/en/stable/api_reference/auto_generated/sktime.forecasting.fbprophet.Prophet.html\r\nfrom sktime.forecasting.structural import UnobservedComponents\r\n# https://www.sktime.org/en/stable/api_reference/auto_generated/sktime.forecasting.structural.UnobservedComponents.html\r\n\r\n\r\n# https://www.sktime.org/en/stable/api_reference/auto_generated/sktime.forecasting.model_selection.ForecastingGridSearchCV.html\r\nfrom sktime.forecasting.compose import TransformedTargetForecaster # creating pipeline\r\nfrom sktime.transformations.series.impute import Imputer # fill in missing data if necessary\r\nfrom sktime.forecasting.naive import NaiveForecaster\r\n\r\nif len(y) < forecast_count * 4: forecast_count = len(y) // 4\r\n# universal bug catch for automation purposes\r\n\r\npipe = TransformedTargetForecaster(steps=[ # second item in tuple is default?\r\n    (\"imputer\", Imputer()), # clean out NaN data\r\n    (\"forecaster\", NaiveForecaster())]) # dump in a forecaster\r\n\r\ncv = ExpandingWindowSplitter(\r\n    initial_window=forecast_count*2, # at least 20 data points\r\n    step_length=forecast_count, # doing it in 10 data point chunks\r\n    start_with_window=True,\r\n    fh=list(range(1,forecast_count+1))) # predicting the next data points, fh is list NOT range\r\n\r\ngscv = ForecastingGridSearchCV(\r\n    forecaster=pipe,\r\n    param_grid=[{\r\n        \"imputer__method\": [\"mean\", \"drift\", \"linear\", \"nearest\"],\r\n        \"forecaster\": [AutoETS(), Prophet()], # AutoARIMA()\r\n    },\r\n    ],\r\n    cv=cv, n_jobs=-1,\r\n    return_n_best_forecasters=10)\r\n\r\nfrom sktime.datatypes import check_raise\r\n\r\ny = y.resample(findSampleFreq(y.index.to_series())).bfill()\r\n\r\ngscv.fit(y)\r\n```\r\n\r\n</details>\r\n\r\nExpected Result Plotting (previous matching + forecast proper)\r\n\r\n<details>\r\n\r\n```python\r\nfrom sktime.utils.plotting import plot_series\r\n\r\nfrom numpy import arange\r\ny_pred = gscv.predict(fh=list(arange(1, forecast_count+1)))\r\nfig, _ = plot_series(y[-forecast_count*2:], y_pred, labels=[\"y\", \"y_pred\"])\r\n\r\nprint(gscv.get_fitted_params())\r\nprint(gscv.n_best_forecasters_)\r\n```\r\n\r\n</details>\r\n\r\n**Expected behavior**\r\n\r\n<details>\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nNotFittedError                            Traceback (most recent call last)\r\n[<ipython-input-9-355ea1bd288f>](https://localhost:8080/#) in <module>\r\n    122 y = y.resample(findSampleFreq(y.index.to_series())).bfill()\r\n    123 \r\n--> 124 gscv.fit(y)\r\n    125 \r\n    126 from sktime.utils.plotting import plot_series\r\n\r\n1 frames\r\n[/usr/local/lib/python3.7/dist-packages/sktime/forecasting/base/_base.py](https://localhost:8080/#) in fit(self, y, X, fh)\r\n    301         # we call the ordinary _fit if no looping/vectorization needed\r\n    302         if not vectorization_needed:\r\n--> 303             self._fit(y=y_inner, X=X_inner, fh=fh)\r\n    304         else:\r\n    305             # otherwise we call the vectorized version of fit\r\n\r\n[/usr/local/lib/python3.7/dist-packages/sktime/forecasting/model_selection/_tune.py](https://localhost:8080/#) in _fit(self, y, X, fh)\r\n    223             raise NotFittedError(\r\n    224                 f\"\"\"All fits of forecaster failed, set error_score='raise' to see the exceptions.\r\n--> 225                 Failed forecaster: {self.forecaster}\"\"\"\r\n    226             )\r\n    227         self.best_score_ = results.loc[self.best_index_, f\"mean_{scoring_name}\"]\r\n\r\nNotFittedError: All fits of forecaster failed, set error_score='raise' to see the exceptions.\r\n                Failed forecaster: TransformedTargetForecaster(steps=[('imputer', Imputer()),\r\n                                   ('forecaster', NaiveForecaster())])\r\n```\r\n\r\n</details>\r\n\r\n**Additional context**\r\n<!--\r\nAdd any other context about the problem here.\r\n-->\r\n\r\n**Versions**\r\n\r\n<details>\r\n\r\n```python\r\nINFO:numba.cuda.cudadrv.driver:init\r\n2022-11-07 10:22:13.053 INFO    numba.cuda.cudadrv.driver: init\r\nERROR:numba.cuda.cudadrv.driver:Call to cuInit results in CUDA_ERROR_NO_DEVICE\r\n2022-11-07 10:22:13.120 ERROR   numba.cuda.cudadrv.driver: Call to cuInit results in CUDA_ERROR_NO_DEVICE\r\n\r\nSystem:\r\n    python: 3.7.15 (default, Oct 12 2022, 19:14:55)  [GCC 7.5.0]\r\nexecutable: /usr/bin/python3\r\n   machine: Linux-5.10.133+-x86_64-with-Ubuntu-18.04-bionic\r\n\r\nPython dependencies:\r\n          pip: 21.1.3\r\n   setuptools: 57.4.0\r\n      sklearn: 1.0.2\r\n       sktime: 0.14.0\r\n  statsmodels: 0.13.5\r\n        numpy: 1.21.6\r\n        scipy: 1.7.3\r\n       pandas: 1.3.5\r\n   matplotlib: 3.5.3\r\n       joblib: 1.2.0\r\n        numba: 0.56.3\r\n     pmdarima: 2.0.1\r\n      tsfresh: 0.19.0\r\n```\r\n\r\n</details>\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/3722/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/3722/timeline","performed_via_github_app":null,"state_reason":null}