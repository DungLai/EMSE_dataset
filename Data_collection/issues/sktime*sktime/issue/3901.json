{"url":"https://api.github.com/repos/sktime/sktime/issues/3901","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/3901/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/3901/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/3901/events","html_url":"https://github.com/sktime/sktime/issues/3901","id":1482756520,"node_id":"I_kwDOCVKAsc5YYRGo","number":3901,"title":"[ENH] principled way to deal with min-length requirements or implications of forecasters, e.g., checks or tags? ","user":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"labels":[{"id":1180363817,"node_id":"MDU6TGFiZWwxMTgwMzYzODE3","url":"https://api.github.com/repos/sktime/sktime/labels/API%20design","name":"API design","color":"874db7","default":false,"description":"API design & software architecture"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""},{"id":3796180314,"node_id":"LA_kwDOCVKAsc7iRR1a","url":"https://api.github.com/repos/sktime/sktime/labels/enhancement","name":"enhancement","color":"fef2c0","default":true,"description":"Adding new functionality"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-12-07T20:18:09Z","updated_at":"2022-12-08T09:58:10Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"We had a couple of cases where users reported unclear errors, coming from composites that broke due to a composite not satisfying implicit minimum length requirements (in data) of a component, e.g.:\r\n\r\nhttps://github.com/sktime/sktime/issues/3889\r\nhttps://github.com/sktime/sktime/issues/3700\r\n\r\nI think we should take some space to think about whether there is a principled solution to this issue?\r\n\r\nA \"naive complete\" solution would be:\r\n\r\n* min length tag - this may depend on parameters, so may need to be set dynamically at the end of constructor, like other tags\r\n* \"implied min length for components\" tag, only for composites - can also depend on parameters\r\n\r\nIf the two are incompatible, informative error messages are raised.\r\n\r\nThe problem with this approach is that the implied min length tag can depend on parameters in quite a complex way, e.g., if a cross-validation constructor is also a parameter. In a case where there are many components (pipeline) it is possibly too complex to track even.\r\n\r\nA \"naive incomplete\" solution would be: min lenght tag only, but informative error is raised with the name of the component. That would at least allow the user a guess at what is happening where.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/3901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/3901/timeline","performed_via_github_app":null,"state_reason":null}