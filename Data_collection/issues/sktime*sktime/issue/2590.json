{"url":"https://api.github.com/repos/sktime/sktime/issues/2590","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/2590/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/2590/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/2590/events","html_url":"https://github.com/sktime/sktime/issues/2590","id":1221919007,"node_id":"I_kwDOCVKAsc5I1QEf","number":2590,"title":"[ENH] MSTLForecaster using statsmodels MSTL","user":{"login":"aiwalter","id":29627036,"node_id":"MDQ6VXNlcjI5NjI3MDM2","avatar_url":"https://avatars.githubusercontent.com/u/29627036?v=4","gravatar_id":"","url":"https://api.github.com/users/aiwalter","html_url":"https://github.com/aiwalter","followers_url":"https://api.github.com/users/aiwalter/followers","following_url":"https://api.github.com/users/aiwalter/following{/other_user}","gists_url":"https://api.github.com/users/aiwalter/gists{/gist_id}","starred_url":"https://api.github.com/users/aiwalter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aiwalter/subscriptions","organizations_url":"https://api.github.com/users/aiwalter/orgs","repos_url":"https://api.github.com/users/aiwalter/repos","events_url":"https://api.github.com/users/aiwalter/events{/privacy}","received_events_url":"https://api.github.com/users/aiwalter/received_events","type":"User","site_admin":false},"labels":[{"id":1118163266,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY2","url":"https://api.github.com/repos/sktime/sktime/labels/good%20first%20issue","name":"good first issue","color":"9eff91","default":true,"description":"Good for newcomers"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""},{"id":3796180314,"node_id":"LA_kwDOCVKAsc7iRR1a","url":"https://api.github.com/repos/sktime/sktime/labels/enhancement","name":"enhancement","color":"fef2c0","default":true,"description":"Adding new functionality"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2022-04-30T20:53:44Z","updated_at":"2022-05-05T07:54:36Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nWe have `STLForecaster` which is nice in case you have only one seasonality. In case the data has more than one seasonality, we can use MSTL decomposition to extract multiple seasonalities.\r\n\r\n**Describe the solution you'd like**\r\nWe can implement a `MSTLForecaster` using this: https://www.statsmodels.org/dev/examples/notebooks/generated/mstl_decomposition.html\r\n\r\nE.g. given `sp=[12, 36]` there would be two season forecaster attributes `self.forecaster_season_12_` and `self.forecaster_season_36_`.\r\n\r\nThe forecaster would have a param `sp: Union[int, List]`, in case its an `int` I think we can default to `STLForecaster` if i am not wrong with this assumption.\r\nThe forecaster would still get 3 forecasters like `STLForecaster`, but the `self.forecaster_seasonal` would be cloned and fitted to multiple seasons separately then.\r\n\r\nThe nice thing about this would be that we currently only have `BATS` and `TBATS` that can deal with `sp: List`, so it would be great to have another forecaster that can use multiple seasonalities.\r\n\r\n**Alternative**\r\nInstead of creating a new class, we could include multiple seasonality into `STLForecaster`, so in case more than one `sp` value is given, we would use `MSTL`, else `STL` from `statsmodels`\r\n\r\n\r\nfyi: @ltsaprounis","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/2590/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":2,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/2590/timeline","performed_via_github_app":null,"state_reason":null}