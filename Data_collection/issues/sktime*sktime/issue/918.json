{"url":"https://api.github.com/repos/sktime/sktime/issues/918","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/918/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/918/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/918/events","html_url":"https://github.com/sktime/sktime/issues/918","id":908083538,"node_id":"MDU6SXNzdWU5MDgwODM1Mzg=","number":918,"title":"[BUG] Naive model with last strategy is sensitive to trailing NaN values","user":{"login":"Flix6x","id":30658763,"node_id":"MDQ6VXNlcjMwNjU4NzYz","avatar_url":"https://avatars.githubusercontent.com/u/30658763?v=4","gravatar_id":"","url":"https://api.github.com/users/Flix6x","html_url":"https://github.com/Flix6x","followers_url":"https://api.github.com/users/Flix6x/followers","following_url":"https://api.github.com/users/Flix6x/following{/other_user}","gists_url":"https://api.github.com/users/Flix6x/gists{/gist_id}","starred_url":"https://api.github.com/users/Flix6x/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Flix6x/subscriptions","organizations_url":"https://api.github.com/users/Flix6x/orgs","repos_url":"https://api.github.com/users/Flix6x/repos","events_url":"https://api.github.com/users/Flix6x/events{/privacy}","received_events_url":"https://api.github.com/users/Flix6x/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-06-01T09:13:11Z","updated_at":"2021-09-09T18:54:55Z","closed_at":"2021-09-09T18:54:55Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Describe the bug**\r\n<!--\r\nA clear and concise description of what the bug is.\r\n-->\r\nThe naive model with \"last\" strategy really picks the last value, even if that's a NaN value. Can we make this more robust, similar to how the \"mean\" strategy actually does a `nanmean` under the hood? I could offer a PR to make it pick the last non-NaN value, taking into account the requested seasonal periodicity.\r\n\r\n**To Reproduce**\r\n<!--\r\nAdd a Minimal, Complete, and Verifiable example (for more details, see e.g. https://stackoverflow.com/help/mcve\r\n\r\nIf the code is too long, feel free to put it in a public gist and link it in the issue: https://gist.github.com\r\n-->\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom sktime.forecasting.base import ForecastingHorizon\r\nfrom sktime.forecasting.naive import NaiveForecaster\r\n\r\ndata = pd.Series(\r\n    index=pd.date_range(\r\n        \"2021-06-01 00:00\", periods=12, freq=\"1h\", closed=\"left\"\r\n    ),\r\n    data=[1, 2, 3, 1, 2, 3, np.nan, 2, 3, 1, 2, 3]\r\n)\r\ntrain_data = data[:7]\r\ntest_data = data[7:]\r\n\r\nprint(train_data)\r\n# 2021-06-01 00:00:00    1.0\r\n# 2021-06-01 01:00:00    2.0\r\n# 2021-06-01 02:00:00    3.0\r\n# 2021-06-01 03:00:00    1.0\r\n# 2021-06-01 04:00:00    2.0\r\n# 2021-06-01 05:00:00    3.0\r\n# 2021-06-01 06:00:00    NaN\r\n# Freq: H, dtype: float64\r\n\r\nfh = ForecastingHorizon(test_data.index, is_relative=False)\r\nmodel = NaiveForecaster(strategy=\"last\", sp=3)\r\nmodel.fit(train_data)\r\nforecast_data = model.predict(fh)\r\n\r\nprint(forecast_data)\r\n# 2021-06-01 07:00:00    2.0\r\n# 2021-06-01 08:00:00    3.0\r\n# 2021-06-01 09:00:00    NaN  # Let's make this a 1\r\n# 2021-06-01 10:00:00    2.0\r\n# 2021-06-01 11:00:00    3.0\r\n# dtype: float64\r\n```\r\n\r\n**Expected behavior**\r\n<!--\r\nA clear and concise description of what you expected to happen.\r\n-->\r\n\r\n**Additional context**\r\n<!--\r\nAdd any other context about the problem here.\r\n-->\r\n\r\n**Versions**\r\n<details>\r\n\r\n<!--\r\nPlease run the following code snippet and paste the output here:\r\n \r\nfrom sktime import show_versions; show_versions()\r\n-->\r\n\r\n</details>\r\n\r\n<!-- Thanks for contributing! -->\r\n","closed_by":{"login":"mloning","id":21020482,"node_id":"MDQ6VXNlcjIxMDIwNDgy","avatar_url":"https://avatars.githubusercontent.com/u/21020482?v=4","gravatar_id":"","url":"https://api.github.com/users/mloning","html_url":"https://github.com/mloning","followers_url":"https://api.github.com/users/mloning/followers","following_url":"https://api.github.com/users/mloning/following{/other_user}","gists_url":"https://api.github.com/users/mloning/gists{/gist_id}","starred_url":"https://api.github.com/users/mloning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mloning/subscriptions","organizations_url":"https://api.github.com/users/mloning/orgs","repos_url":"https://api.github.com/users/mloning/repos","events_url":"https://api.github.com/users/mloning/events{/privacy}","received_events_url":"https://api.github.com/users/mloning/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/918/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/918/timeline","performed_via_github_app":null,"state_reason":"completed"}