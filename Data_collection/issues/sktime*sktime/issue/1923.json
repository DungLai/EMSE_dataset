{"url":"https://api.github.com/repos/sktime/sktime/issues/1923","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/1923/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/1923/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/1923/events","html_url":"https://github.com/sktime/sktime/issues/1923","id":1111985153,"node_id":"I_kwDOCVKAsc5CR4wB","number":1923,"title":"[ENH] investigate use of abc for base classes, write STEP","user":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"labels":[{"id":1180363817,"node_id":"MDU6TGFiZWwxMTgwMzYzODE3","url":"https://api.github.com/repos/sktime/sktime/labels/API%20design","name":"API design","color":"874db7","default":false,"description":"API design & software architecture"},{"id":1180366006,"node_id":"MDU6TGFiZWwxMTgwMzY2MDA2","url":"https://api.github.com/repos/sktime/sktime/labels/implementing%20framework","name":"implementing framework","color":"61c7f9","default":false,"description":"Implementing frameworks for new learning tasks"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2022-01-23T21:02:18Z","updated_at":"2022-02-06T10:00:13Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"@TonyBagnall recently suggested to use of abc for classifiers in *#1873, #1708), and this was also previously discussed a number of times: #1424, #1708, #510, #420.\r\n\r\nI do think we need to work out a STEP for this, it would be a major change to the interface framework.\r\n\r\nThere are some open questions that I have:\r\n* which classes would inherit from `ABCMeta`?\r\n* how do we deal with optional abstract methods?\r\n* how does this integrate with the tag system in `BaseObject`? This could be updated using `ChainMap`.\r\n* are there any problematic interactions of the public/private nesting pattern `fit`/`_fit`?\r\n* we would still like to have capability tags that tell us whether an optional method is implemented or not, e.g., `predict_proba` or `predict_interval`. How would this interact with `abc`?\r\n* how would downwards compatibility and deprecation work here?\r\n* what about polymorphic estimators, e.g., a pipeline that can act like a transformer or a forecaster? Would `abc` not complain about missing transformer methods if it happens to behave like a forecaster and vice versa?\r\n\r\nThere's probably more once we have a proper design discussion, this is only off the top of my head.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/1923/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/1923/timeline","performed_via_github_app":null,"state_reason":null}