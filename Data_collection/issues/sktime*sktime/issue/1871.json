{"url":"https://api.github.com/repos/sktime/sktime/issues/1871","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/1871/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/1871/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/1871/events","html_url":"https://github.com/sktime/sktime/issues/1871","id":1101488231,"node_id":"I_kwDOCVKAsc5Bp2Bn","number":1871,"title":"[BUG] Strange error in ARIMA class","user":{"login":"Garrus990","id":31692791,"node_id":"MDQ6VXNlcjMxNjkyNzkx","avatar_url":"https://avatars.githubusercontent.com/u/31692791?v=4","gravatar_id":"","url":"https://api.github.com/users/Garrus990","html_url":"https://github.com/Garrus990","followers_url":"https://api.github.com/users/Garrus990/followers","following_url":"https://api.github.com/users/Garrus990/following{/other_user}","gists_url":"https://api.github.com/users/Garrus990/gists{/gist_id}","starred_url":"https://api.github.com/users/Garrus990/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Garrus990/subscriptions","organizations_url":"https://api.github.com/users/Garrus990/orgs","repos_url":"https://api.github.com/users/Garrus990/repos","events_url":"https://api.github.com/users/Garrus990/events{/privacy}","received_events_url":"https://api.github.com/users/Garrus990/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-01-13T10:14:47Z","updated_at":"2022-04-24T18:54:56Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nWhen I am using ARIMA model, under some very specific circumstances, the model cannot be trained and hence predictions are not returned.\r\n\r\n**To Reproduce**\r\n```python\r\n\r\nfrom sktime.forecasting.arima import ARIMA\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom io import StringIO\r\n\r\n# the time series I am getting error for\r\ntxt = '   val\\n3066.3\\n3260.2\\n3573.7\\n3423.6\\n3598.5\\n3802.8\\n3353.4\\n4026.1\\n4684.0\\n4099.1\\n3883.1\\n3801.5\\n3104.0\\n3574.0\\n3397.2\\n3092.9\\n3083.8\\n3106.7\\n2939.6'\r\narima_input_data = pd.read_csv(StringIO(txt))\r\nmodel = ARIMA(order=(0, 1, 5), with_intercept=False)\r\n\r\nfitted_model_bad = model.fit(arima_input_data)  # throws a warning (not an error)\r\nfitted_model_bad.predict(np.arange(10))  # error is thrown\r\n\r\n# in the case below, when we slightly extend the time series, a warning is raised, but the model trains successfully\r\nfitted_model_good = model.fit(arima_input_data.append(arima_input_data.iloc[:3]).reset_index(drop=True))\r\nfitted_model_good.predict(np.arange(10))  # works ok\r\n```\r\n\r\n**Expected behavior**\r\nEither the model to be training successfully in both cases or an improved error information on what is actually wrong with my time series. I would like to know that the training failed at the training stage and not when I am trying to get predictions from the (supposedly) trained model.\r\n\r\nThe very problem may look like something related to pmdarima, so I am not sure if you will be able to help with this one :)\r\n\r\n**Additional context**\r\nError message:\r\n```\r\nValueError                                Traceback (most recent call last)\r\nInput In [58], in <module>\r\n----> 1 fitted_model.predict(np.arange(10))\r\n\r\nFile ~/conda/envs/ts/lib/python3.8/site-packages/sktime/forecasting/base/_base.py:197, in BaseForecaster.predict(self, fh, X, return_pred_int, alpha, keep_old_return_type)\r\n    195 # this is how it is supposed to be after the refactor is complete and effective\r\n    196 if not return_pred_int:\r\n--> 197     y_pred = self._predict(\r\n    198         self.fh,\r\n    199         X=X_inner,\r\n    200     )\r\n    202     # convert to output mtype, identical with last y mtype seen\r\n    203     y_out = convert_to(\r\n    204         y_pred,\r\n    205         self._y_mtype_last_seen,\r\n    206         as_scitype=\"Series\",\r\n    207         store=self._converter_store_y,\r\n    208     )\r\n\r\nFile ~/conda/envs/ts/lib/python3.8/site-packages/sktime/forecasting/base/adapters/_pmdarima.py:79, in _PmdArimaAdapter._predict(self, fh, X, return_pred_int, alpha)\r\n     77 else:\r\n     78     y_ins = self._predict_in_sample(fh_ins, **kwargs)\r\n---> 79     y_oos = self._predict_fixed_cutoff(fh_oos, **kwargs)\r\n     80     return y_ins.append(y_oos)\r\n\r\nFile ~/conda/envs/ts/lib/python3.8/site-packages/sktime/forecasting/base/adapters/_pmdarima.py:140, in _PmdArimaAdapter._predict_fixed_cutoff(self, fh, X, return_pred_int, alpha)\r\n    135 def _predict_fixed_cutoff(\r\n    136     self, fh, X=None, return_pred_int=False, alpha=DEFAULT_ALPHA\r\n    137 ):\r\n    138     # make prediction\r\n    139     n_periods = int(fh.to_relative(self.cutoff)[-1])\r\n--> 140     result = self._forecaster.predict(\r\n    141         n_periods=n_periods,\r\n    142         X=X,\r\n    143         return_conf_int=return_pred_int,\r\n    144         alpha=alpha,\r\n    145     )\r\n    147     fh_abs = fh.to_absolute(self.cutoff)\r\n    148     fh_idx = fh.to_indexer(self.cutoff)\r\n\r\nFile ~/conda/envs/ts/lib/python3.8/site-packages/pmdarima/arima/arima.py:791, in ARIMA.predict(self, n_periods, X, return_conf_int, alpha, **kwargs)\r\n    788 arima = self.arima_res_\r\n    789 end = arima.nobs + n_periods - 1\r\n--> 791 f, conf_int = _seasonal_prediction_with_confidence(\r\n    792     arima_res=arima,\r\n    793     start=arima.nobs,\r\n    794     end=end,\r\n    795     X=X,\r\n    796     alpha=alpha)\r\n    798 if return_conf_int:\r\n    799     # The confidence intervals may be a Pandas frame if it comes from\r\n    800     # SARIMAX & we want Numpy. We will to duck type it so we don't add\r\n    801     # new explicit requirements for the package\r\n    802     return f, check_array(conf_int, force_all_finite=False)\r\n\r\nFile ~/conda/envs/ts/lib/python3.8/site-packages/pmdarima/arima/arima.py:203, in _seasonal_prediction_with_confidence(arima_res, start, end, X, alpha, **kwargs)\r\n    199     conf_int[:, 0] = f - q * np.sqrt(var)\r\n    200     conf_int[:, 1] = f + q * np.sqrt(var)\r\n    202 return check_endog(f, dtype=None, copy=False), \\\r\n--> 203     check_array(conf_int, copy=False, dtype=None)\r\n\r\nFile ~/conda/envs/ts/lib/python3.8/site-packages/sklearn/utils/validation.py:800, in check_array(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\r\n    794         raise ValueError(\r\n    795             \"Found array with dim %d. %s expected <= 2.\"\r\n    796             % (array.ndim, estimator_name)\r\n    797         )\r\n    799     if force_all_finite:\r\n--> 800         _assert_all_finite(array, allow_nan=force_all_finite == \"allow-nan\")\r\n    802 if ensure_min_samples > 0:\r\n    803     n_samples = _num_samples(array)\r\n\r\nFile ~/conda/envs/ts/lib/python3.8/site-packages/sklearn/utils/validation.py:114, in _assert_all_finite(X, allow_nan, msg_dtype)\r\n    107     if (\r\n    108         allow_nan\r\n    109         and np.isinf(X).any()\r\n    110         or not allow_nan\r\n    111         and not np.isfinite(X).all()\r\n    112     ):\r\n    113         type_err = \"infinity\" if allow_nan else \"NaN, infinity\"\r\n--> 114         raise ValueError(\r\n    115             msg_err.format(\r\n    116                 type_err, msg_dtype if msg_dtype is not None else X.dtype\r\n    117             )\r\n    118         )\r\n    119 # for object dtype data, we only check for NaNs (GH-13254)\r\n    120 elif X.dtype == np.dtype(\"object\") and not allow_nan:\r\n\r\nValueError: Input contains NaN, infinity or a value too large for dtype('float64').\r\n```\r\n\r\n**Versions**\r\n<details>\r\n\r\nSystem:\r\n    python: 3.8.12 | packaged by conda-forge | (default, Oct 12 2021, 21:59:51)  [GCC 9.4.0]\r\nexecutable: ~/conda/envs/ts/bin/python\r\n   machine: Linux-5.11.0-44-generic-x86_64-with-glibc2.10\r\n\r\nPython dependencies:\r\n          pip: 21.3.1\r\n   setuptools: 60.5.0\r\n      sklearn: 1.0.2\r\n       sktime: 0.9.0\r\n  statsmodels: 0.12.1\r\n        numpy: 1.20.3\r\n        scipy: 1.7.3\r\n       Cython: 0.29.26\r\n       pandas: 1.3.5\r\n   matplotlib: 3.5.1\r\n       joblib: 1.1.0\r\n        numba: 0.54.1\r\n     pmdarima: 1.8.4\r\n      tsfresh: None\r\n\r\n</details>\r\n\r\n<!-- Thanks for contributing! -->\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/1871/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/1871/timeline","performed_via_github_app":null,"state_reason":null}