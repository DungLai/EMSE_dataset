{"url":"https://api.github.com/repos/sktime/sktime/issues/220","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/220/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/220/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/220/events","html_url":"https://github.com/sktime/sktime/issues/220","id":556192562,"node_id":"MDU6SXNzdWU1NTYxOTI1NjI=","number":220,"title":"Forecasting wish list","user":{"login":"mloning","id":21020482,"node_id":"MDQ6VXNlcjIxMDIwNDgy","avatar_url":"https://avatars.githubusercontent.com/u/21020482?v=4","gravatar_id":"","url":"https://api.github.com/users/mloning","html_url":"https://github.com/mloning","followers_url":"https://api.github.com/users/mloning/followers","following_url":"https://api.github.com/users/mloning/following{/other_user}","gists_url":"https://api.github.com/users/mloning/gists{/gist_id}","starred_url":"https://api.github.com/users/mloning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mloning/subscriptions","organizations_url":"https://api.github.com/users/mloning/orgs","repos_url":"https://api.github.com/users/mloning/repos","events_url":"https://api.github.com/users/mloning/events{/privacy}","received_events_url":"https://api.github.com/users/mloning/received_events","type":"User","site_admin":false},"labels":[{"id":1118163264,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY0","url":"https://api.github.com/repos/sktime/sktime/labels/feature%20request","name":"feature request","color":"38d191","default":false,"description":"New feature or request"},{"id":1118163266,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY2","url":"https://api.github.com/repos/sktime/sktime/labels/good%20first%20issue","name":"good first issue","color":"9eff91","default":true,"description":"Good for newcomers"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":22,"created_at":"2020-01-28T12:57:48Z","updated_at":"2022-05-16T09:10:45Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"For the API design proposal, see [this wiki entry](https://github.com/alan-turing-institute/sktime/wiki/Forecasting-API-proposal).\r\n\r\n## Forecasters\r\n### Atomic \r\n- [x] NaiveForecaster (strategies={\"last\",  \"mean\", \"seasonal_last\"}) #227 \r\n- [x] PolynomialTrendForecaster (linear, polynomial, locally linear, smoothing splines), see this [chapter](https://otexts.com/fpp2/nonlinear-regression.html)\r\n- [x] [ThetaForecaster](https://github.com/M4Competition/M4methods/blob/master/4Theta%20method.R) #198 \r\n- [x] ExponentialSmoothing #198 \r\n- [x] ARIMA #412 \r\n- [x] AutoARIMA #104 \r\n- [x] Automatic Exponential Smoothing, see [ETS](https://www.rdocumentation.org/packages/forecast/versions/8.12/topics/ets) in R, [source code](https://github.com/robjhyndman/forecast/blob/master/R/ets.R), see https://github.com/alan-turing-institute/sktime/pull/350, statsmodels: https://www.statsmodels.org/dev/examples/notebooks/generated/ets.html\r\n- [x] Croston's method #730 \r\n- [x] Theta\r\n- [x] Prophet\r\n- [x] UnobserverdComponents #1394  \r\n- [ ] Bayesian structural time series models (see #612), see also https://github.com/WillianFuks/tfcausalimpact\r\n\r\n### Reduction\r\n- [x] ReducedRegressionForecaster, see #218 \r\n- [x] ReducedTimeSeriesRegressionForecaster, see #218 \r\n\r\n### Composition\r\n- [x] TransformedTargetForecaster (pipeline with target transformations, multiple steps)\r\n- [x] EnsembleForecaster (see e.g. sklearn's [VotingRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.VotingRegressor.html#sklearn.ensemble.VotingRegressor))\r\n- [x] StackingForecaster\r\n- [x] ColumnEnsembler, multiple univariate forecasters on multivariate time series (forecasting trend and residuals separately, adding/multiplying results together) #1082 \r\n- [x] FeatureUnion to get multiple transforms from a single time series (univariate to multivariate)\r\n- [ ] Concatenator (or splicer) to get single series from segments of series in a pipelines with prior annotation and splicing according to annotations\r\n- [ ] ensemble over steps in forecasting horizon (\"direct strategy\") which fits a separate model for each step ahead\r\n- [x] other ensemble methods (weighted averages, etc) \r\n- [x] Recursive strategy (basically https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.RegressorChain.html#sklearn.multioutput.RegressorChain)\r\n- [x] Direct strategy (basically https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputRegressor.html)\r\n- [x] DirRec strategy #226 \r\n- [x] support for models that inherently support multi-output (see e.g. https://machinelearningmastery.com/multi-output-regression-models-with-python/)\r\n\r\n### Interfaces\r\n- [x] statsmodels\r\n- [x] pmdarima\r\n- [x] fbprophet\r\n- [ ] gluonts\r\n\r\n### Multivariate/vector forecasting\r\n- [x] TransformedTargetForecaster #1376 \r\n- [x] NaiveForecaster #1401 \r\n- [x] ForecastingPipeline #1376 \r\n- [x] ForecastingGridSearchCV #1376 \r\n- [x] RandomizedGridSearchCV #1376 \r\n- [x] MultiplexForecaster #1376 \r\n- [ ] make_reduction\r\n- [ ] EnsembleForecaster\r\n- [ ] AutoEnsembleForecaster\r\n- [ ] StackingForecaster\r\n\r\n## Transformers\r\n- [x] Detrender (series to series, meta-estimator that works with any forecaster)\r\n- [x] Deseasonaliser\r\n- [x] FittedParamExtractor for regression/classification\r\n- [x] BoxCoxTransformer (see [pmdarima's implementation](https://alkaline-ml.com/pmdarima/modules/generated/pmdarima.preprocessing.BoxCoxEndogTransformer.html))\r\n- [x] Wrapper for sklearn's non-fittable transformers, so that we can apply them to single series (e.g. FunctionTransformer or scalers)\r\n- [ ] TimeSeriesDecomposer (e.g. using LOESS seasonal-trend-residual decomposition) returning multivariate series \r\n- [x] OptionalPassthrough #762 \r\n- [x] FeatureSelection #1347 \r\n- [x] Imputer #1461 \r\n- [x] SummaryTransformer #1329  \r\n- [x] Differencer #945  \r\n- [x] STL #1463 \r\n- [x] DateTimeFeatures #1356\r\n- [ ] Featurizer #1443 \r\n- [x] MeanTransformer\r\n- [x] SqrtTransformer #1127 \r\n- [x] ThetaLines #923 \r\n- [x] ExponentTransformer #1127 \r\n- [ ] Smoothing transformer(s)\r\n- [ ] Function transformer \r\n\r\n## Model selection\r\n### Temporal CV\r\n- [x] SlidingWindowSplitter\r\n- [x] ManualWindowSplitter\r\n- [x] SingleWindowSplitter\r\n- [x] temporal_train_test_split\r\n- [x] MultiplexForecaster #715 \r\n- [x] ExpandingWindowSplitter\r\n\r\n### Tuning\r\n- [x] ForecastingGridSearchCV\r\n\r\n## Pipelines\r\n- [x] ForecastingPipeline (pipe on X)\r\n- [ ] Advanced/unified Pipeline (see STEP https://github.com/sktime/enhancement-proposals/blob/main/steps/01_forecasting_api/forecasting_pipeline.md) \r\n- [ ] NetworkPipeline #856 \r\n\r\n## Enhancements\r\n- [x] in-sample predictions\r\n- [x] prediction intervals (new interface)\r\n- [ ] dynamic (using previously predicted values) vs static predictions\r\n- [x] exogenous variables, including pipelines, multivariate transformers, etc\r\n- [x] simplify `FH` class into separate utility functions\r\n- [x] refactor `ForecastingGridSearchCV` and `update_predict()`, try to factor out separate cross-validation function","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/220/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/220/timeline","performed_via_github_app":null,"state_reason":null}