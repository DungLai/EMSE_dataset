{"url":"https://api.github.com/repos/sktime/sktime/issues/622","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/622/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/622/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/622/events","html_url":"https://github.com/sktime/sktime/issues/622","id":786768176,"node_id":"MDU6SXNzdWU3ODY3NjgxNzY=","number":622,"title":"Adding forecasting backtest/evaluate function ","user":{"login":"aiwalter","id":29627036,"node_id":"MDQ6VXNlcjI5NjI3MDM2","avatar_url":"https://avatars.githubusercontent.com/u/29627036?v=4","gravatar_id":"","url":"https://api.github.com/users/aiwalter","html_url":"https://github.com/aiwalter","followers_url":"https://api.github.com/users/aiwalter/followers","following_url":"https://api.github.com/users/aiwalter/following{/other_user}","gists_url":"https://api.github.com/users/aiwalter/gists{/gist_id}","starred_url":"https://api.github.com/users/aiwalter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aiwalter/subscriptions","organizations_url":"https://api.github.com/users/aiwalter/orgs","repos_url":"https://api.github.com/users/aiwalter/repos","events_url":"https://api.github.com/users/aiwalter/events{/privacy}","received_events_url":"https://api.github.com/users/aiwalter/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":30,"created_at":"2021-01-15T10:04:24Z","updated_at":"2021-02-17T19:29:19Z","closed_at":"2021-02-17T19:29:19Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nI would like to add a backtesting class. We should ideally then also implement an expanding window splitter functionality as discussed in #552 . But the `Backtest` would just receive a splitter as an argument.\r\n\r\n**Describe the solution you'd like**\r\nA class like `Backtest` (naming to be discussed) with a signature like this:\r\n```python\r\nclass Backtest(object):\r\n    \"\"\"Backtest forecasters\r\n\r\n    Parameters\r\n    ----------\r\n    forecaster: estimator object\r\n    splitter: splitter object\r\n        e.g. SlidingWindowSplitter\r\n    score: function\r\n        A function like smape_loss that has y_pred, y_test as arguments and returns a float\r\n\r\n    Returns\r\n    ----------\r\n    error: float\r\n        Average error of fitted estimators calculated by means of the score function\r\n    \"\"\"\r\n```\r\n\r\nThe class should have a `fit()` function like a regular estimator object. I guess a `predict()` function does not make sense here. The class will be able to also take a `forecaster` of type `ForecastingGridSearchCV`, as in production people might refit and tune the model by progress in time.\r\n\r\nOptionally, the class can print the number of fits, like in `ForecastingGridSearchCV` when fitting.\r\n\r\nI am not sure on how to structure the return and what else should be returned, I guess just return `self` and have the rest as class variables? We could do sth like in `ForecastingGridSearchCV` with the `cv_results_` variable, so we could also store there the errors, predictions  and also the params of each iteration (because params might differ when using a grid search as forecaster).\r\n\r\n![image](https://user-images.githubusercontent.com/29627036/104709492-4ea57100-571f-11eb-9311-bf3920db1bcf.png)\r\n\r\nWhere should a class `Backtest` be placed in the `sktime` class structure? I propose `sktime/sktime/forecasting/model_backtest/_backtest.py`.","closed_by":{"login":"mloning","id":21020482,"node_id":"MDQ6VXNlcjIxMDIwNDgy","avatar_url":"https://avatars.githubusercontent.com/u/21020482?v=4","gravatar_id":"","url":"https://api.github.com/users/mloning","html_url":"https://github.com/mloning","followers_url":"https://api.github.com/users/mloning/followers","following_url":"https://api.github.com/users/mloning/following{/other_user}","gists_url":"https://api.github.com/users/mloning/gists{/gist_id}","starred_url":"https://api.github.com/users/mloning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mloning/subscriptions","organizations_url":"https://api.github.com/users/mloning/orgs","repos_url":"https://api.github.com/users/mloning/repos","events_url":"https://api.github.com/users/mloning/events{/privacy}","received_events_url":"https://api.github.com/users/mloning/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/622/timeline","performed_via_github_app":null,"state_reason":"completed"}