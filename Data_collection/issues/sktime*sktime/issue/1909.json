{"url":"https://api.github.com/repos/sktime/sktime/issues/1909","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/1909/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/1909/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/1909/events","html_url":"https://github.com/sktime/sktime/issues/1909","id":1111656184,"node_id":"I_kwDOCVKAsc5CQob4","number":1909,"title":"[BUG] Failing tests with pandas version 1.4.0","user":{"login":"lmmentel","id":8989838,"node_id":"MDQ6VXNlcjg5ODk4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/8989838?v=4","gravatar_id":"","url":"https://api.github.com/users/lmmentel","html_url":"https://github.com/lmmentel","followers_url":"https://api.github.com/users/lmmentel/followers","following_url":"https://api.github.com/users/lmmentel/following{/other_user}","gists_url":"https://api.github.com/users/lmmentel/gists{/gist_id}","starred_url":"https://api.github.com/users/lmmentel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lmmentel/subscriptions","organizations_url":"https://api.github.com/users/lmmentel/orgs","repos_url":"https://api.github.com/users/lmmentel/repos","events_url":"https://api.github.com/users/lmmentel/events{/privacy}","received_events_url":"https://api.github.com/users/lmmentel/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-22T18:50:35Z","updated_at":"2022-01-24T17:56:14Z","closed_at":"2022-01-24T17:56:14Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"**Describe the bug**\r\n<!--\r\nA clear and concise description of what the bug is.\r\n-->\r\n\r\nWith the most recent version of pandas 1.4.0 two test are failing\r\n\r\n```\r\nFAILED alignment/tests/test_all_aligners.py::test_get_alignment_loc[AlignerDTWfromDist]\r\nFAILED alignment/tests/test_all_aligners.py::test_get_alignment_loc[AlignerDTW]\r\n```\r\n\r\n**To Reproduce**\r\n<!--\r\nAdd a Minimal, Complete, and Verifiable example (for more details, see e.g. https://stackoverflow.com/help/mcve\r\n\r\nIf the code is too long, feel free to put it in a public gist and link it in the issue: https://gist.github.com\r\n-->\r\n\r\nBump your pandas version to 1.4.0\r\n\r\n```bash\r\npip install -U pandas==1.4.0\r\npytest sktime/alignment/tests/test_all_aligners.py\r\n```\r\n\r\n**Expected behavior**\r\n<!--\r\nA clear and concise description of what you expected to happen.\r\n-->\r\nTest are passing.\r\n\r\n**Additional context**\r\n<!--\r\nAdd any other context about the problem here.\r\n-->\r\n\r\n\r\n\r\n<details>\r\n<summary>Traceback</summary>\r\n\r\n\r\n```python\r\n__________________ test_get_alignment_loc[AlignerDTWfromDist] __________________\r\n[gw1] linux -- Python 3.8.12 /opt/hostedtoolcache/Python/3.8.12/x64/bin/python\r\n\r\nAligner = <class 'sktime.alignment.dtw_python.AlignerDTWfromDist'>\r\n\r\n    @pytest.mark.parametrize(\"Aligner\", ALIGNERS)\r\n    def test_get_alignment_loc(Aligner):\r\n        \"\"\"Test that get_alignment returns an alignment (loc).\"\"\"\r\n        f = Aligner.create_test_instance()\r\n    \r\n        X = [_make_series(n_columns=2), _make_series(n_columns=2)]\r\n>       align = f.fit(X).get_alignment_loc()\r\n\r\nAligner    = <class 'sktime.alignment.dtw_python.AlignerDTWfromDist'>\r\nX          = [                   0         1\r\n2000-01-01  1.877993  4.022627\r\n2000-01-02  2.892609  2.980591\r\n2000-01-03  3.634473  3....02-16  2.888466  5.365541\r\n2000-02-17  2.020916  5.176993\r\n2000-02-18  2.891862  5.164779\r\n2000-02-19  2.884114  4.572237]\r\nf          = AlignerDTWfromDist(dist_trafo=ScipyDist(colalign='intersect',\r\n                                        metric='euclidea...\r\n                   open_begin=False, open_end=False, step_pattern='symmetric2',\r\n                   window_type='none')\r\n\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/sktime/alignment/tests/test_all_aligners.py:37: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/sktime/alignment/base.py:152: in get_alignment_loc\r\n    return self._get_alignment_loc()\r\n        self       = AlignerDTWfromDist(dist_trafo=ScipyDist(colalign='intersect',\r\n                                        metric='euclidea...\r\n                   open_begin=False, open_end=False, step_pattern='symmetric2',\r\n                   window_type='none')\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/sktime/alignment/base.py:180: in _get_alignment_loc\r\n    return convert_align_to_align_loc(align, X)\r\n        X          = [                   0         1\r\n2000-01-01  1.877993  4.022627\r\n2000-01-02  2.892609  2.980591\r\n2000-01-03  3.634473  3....02-16  2.888466  5.365541\r\n2000-02-17  2.020916  5.176993\r\n2000-02-18  2.891862  5.164779\r\n2000-02-19  2.884114  4.572237]\r\n        align      =     ind0  ind1\r\n0      0     0\r\n1      1     0\r\n2      2     1\r\n3      3     1\r\n4      4     1\r\n..   ...   ...\r\n91    45    49\r\n92    46    49\r\n93    47    49\r\n94    48    49\r\n95    49    49\r\n\r\n[96 rows x 2 columns]\r\n        self       = AlignerDTWfromDist(dist_trafo=ScipyDist(colalign='intersect',\r\n                                        metric='euclidea...\r\n                   open_begin=False, open_end=False, step_pattern='symmetric2',\r\n                   window_type='none')\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/sktime/alignment/utils/utils_align.py:94: in convert_align_to_align_loc\r\n    loc_series = pd.Series(Xi.index, dtype=\"Int64\").reindex(align[indi], copy=copy)\r\n        X          = [                   0         1\r\n2000-01-01  1.877993  4.022627\r\n2000-01-02  2.892609  2.980591\r\n2000-01-03  3.634473  3....02-16  2.888466  5.365541\r\n2000-02-17  2.020916  5.176993\r\n2000-02-18  2.891862  5.164779\r\n2000-02-19  2.884114  4.572237]\r\n        Xi         =                    0         1\r\n2000-01-01  1.877993  4.022627\r\n2000-01-02  2.892609  2.980591\r\n2000-01-03  3.634473  3.0...-02-16  2.473775  2.820853\r\n2000-02-17  4.575492  2.810851\r\n2000-02-18  2.312191  3.239057\r\n2000-02-19  4.142755  3.344174\r\n        align      =     ind0  ind1\r\n0      0     0\r\n1      1     0\r\n2      2     1\r\n3      3     1\r\n4      4     1\r\n..   ...   ...\r\n91    45    49\r\n92    46    49\r\n93    47    49\r\n94    48    49\r\n95    49    49\r\n\r\n[96 rows x 2 columns]\r\n        align_name = 'align'\r\n        copy       = True\r\n        df_name    = 'X'\r\n        i          = 0\r\n        indi       = 'ind0'\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/pandas/core/series.py:396: in __init__\r\n    data = data.astype(dtype)\r\n        copy       = False\r\n        data       = DatetimeIndex(['2000-01-01', '2000-01-02', '2000-01-03', '2000-01-04',\r\n               '2000-01-05', '2000-01-06', '200...'2000-02-16', '2000-02-17',\r\n               '2000-02-18', '2000-02-19'],\r\n              dtype='datetime64[ns]', freq='D')\r\n        dtype      = Int64Dtype()\r\n        fastpath   = False\r\n        index      = None\r\n        name       = None\r\n        self       = <[AttributeError(\"'Series' object has no attribute '_mgr'\") raised in repr()] Series object at 0x7f3cf6e1ee50>\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/pandas/core/indexes/base.py:1049: in astype\r\n    new_values = values.astype(dtype, copy=copy)\r\n        copy       = True\r\n        dtype      = Int64Dtype()\r\n        self       = DatetimeIndex(['2000-01-01', '2000-01-02', '2000-01-03', '2000-01-04',\r\n               '2000-01-05', '2000-01-06', '200...'2000-02-16', '2000-02-17',\r\n               '2000-02-18', '2000-02-19'],\r\n              dtype='datetime64[ns]', freq='D')\r\n        values     = <DatetimeArray>\r\n['2000-01-01 00:00:00', '2000-01-02 00:00:00', '2000-01-03 00:00:00',\r\n '2000-01-04 00:00:00', '2000-01...2-16 00:00:00', '2000-02-17 00:00:00',\r\n '2000-02-18 00:00:00', '2000-02-19 00:00:00']\r\nLength: 50, dtype: datetime64[ns]\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/pandas/core/arrays/datetimes.py:666: in astype\r\n    return dtl.DatetimeLikeArrayMixin.astype(self, dtype, copy)\r\n        copy       = True\r\n        dtype      = Int64Dtype()\r\n        self       = <DatetimeArray>\r\n['2000-01-01 00:00:00', '2000-01-02 00:00:00', '2000-01-03 00:00:00',\r\n '2000-01-04 00:00:00', '2000-01...2-16 00:00:00', '2000-02-17 00:00:00',\r\n '2000-02-18 00:00:00', '2000-02-19 00:00:00']\r\nLength: 50, dtype: datetime64[ns]\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/pandas/core/arrays/datetimelike.py:427: in astype\r\n    return super().astype(dtype, copy=copy)\r\n        __class__  = <class 'pandas.core.arrays.datetimelike.DatetimeLikeArrayMixin'>\r\n        copy       = True\r\n        dtype      = Int64Dtype()\r\n        self       = <DatetimeArray>\r\n['2000-01-01 00:00:00', '2000-01-02 00:00:00', '2000-01-03 00:00:00',\r\n '2000-01-04 00:00:00', '2000-01...2-16 00:00:00', '2000-02-17 00:00:00',\r\n '2000-02-18 00:00:00', '2000-02-19 00:00:00']\r\nLength: 50, dtype: datetime64[ns]\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/pandas/core/arrays/base.py:582: in astype\r\n    return cls._from_sequence(self, dtype=dtype, copy=copy)\r\n        cls        = <class 'pandas.core.arrays.integer.IntegerArray'>\r\n        copy       = True\r\n        dtype      = Int64Dtype()\r\n        self       = <DatetimeArray>\r\n['2000-01-01 00:00:00', '2000-01-02 00:00:00', '2000-01-03 00:00:00',\r\n '2000-01-04 00:00:00', '2000-01...2-16 00:00:00', '2000-02-17 00:00:00',\r\n '2000-02-18 00:00:00', '2000-02-19 00:00:00']\r\nLength: 50, dtype: datetime64[ns]\r\n/opt/hostedtoolcache/Python/3.8.12/x64/lib/python3.8/site-packages/pandas/core/arrays/integer.py:325: in _from_sequence\r\n    values, mask = coerce_to_array(scalars, dtype=dtype, copy=copy)\r\n        cls        = <class 'pandas.core.arrays.integer.IntegerArray'>\r\n        copy       = True\r\n        dtype      = Int64Dtype()\r\n        scalars    = <DatetimeArray>\r\n['2000-01-01 00:00:00', '2000-01-02 00:00:00', '2000-01-03 00:00:00',\r\n '2000-01-04 00:00:00', '2000-01...2-16 00:00:00', '2000-02-17 00:00:00',\r\n '2000-02-18 00:00:00', '2000-02-19 00:00:00']\r\nLength: 50, dtype: datetime64[ns]\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nvalues = array(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\r\n       '2000-01-03T00:00:00.000000000', '2000...:00.000000000',\r\n       '2000-02-18T00:00:00.000000000', '2000-02-19T00:00:00.000000000'],\r\n      dtype='datetime64[ns]')\r\ndtype = Int64Dtype(), mask = None, copy = True\r\n\r\n    def coerce_to_array(\r\n        values, dtype, mask=None, copy: bool = False\r\n    ) -> tuple[np.ndarray, np.ndarray]:\r\n        \"\"\"\r\n        Coerce the input values array to numpy arrays with a mask.\r\n    \r\n        Parameters\r\n        ----------\r\n        values : 1D list-like\r\n        dtype : integer dtype\r\n        mask : bool 1D array, optional\r\n        copy : bool, default False\r\n            if True, copy the input\r\n    \r\n        Returns\r\n        -------\r\n        tuple of (values, mask)\r\n        \"\"\"\r\n        # if values is integer numpy array, preserve its dtype\r\n        if dtype is None and hasattr(values, \"dtype\"):\r\n            if is_integer_dtype(values.dtype):\r\n                dtype = values.dtype\r\n    \r\n        if dtype is not None:\r\n            if isinstance(dtype, str) and (\r\n                dtype.startswith(\"Int\") or dtype.startswith(\"UInt\")\r\n            ):\r\n                # Avoid DeprecationWarning from NumPy about np.dtype(\"Int64\")\r\n                # https://github.com/numpy/numpy/pull/7476\r\n                dtype = dtype.lower()\r\n    \r\n            if not issubclass(type(dtype), _IntegerDtype):\r\n                try:\r\n                    dtype = INT_STR_TO_DTYPE[str(np.dtype(dtype))]\r\n                except KeyError as err:\r\n                    raise ValueError(f\"invalid dtype specified {dtype}\") from err\r\n    \r\n        if isinstance(values, IntegerArray):\r\n            values, mask = values._data, values._mask\r\n            if dtype is not None:\r\n                values = values.astype(dtype.numpy_dtype, copy=False)\r\n    \r\n            if copy:\r\n                values = values.copy()\r\n                mask = mask.copy()\r\n            return values, mask\r\n    \r\n        values = np.array(values, copy=copy)\r\n        inferred_type = None\r\n        if is_object_dtype(values.dtype) or is_string_dtype(values.dtype):\r\n            inferred_type = lib.infer_dtype(values, skipna=True)\r\n            if inferred_type == \"empty\":\r\n                pass\r\n            elif inferred_type not in [\r\n                \"floating\",\r\n                \"integer\",\r\n                \"mixed-integer\",\r\n                \"integer-na\",\r\n                \"mixed-integer-float\",\r\n                \"string\",\r\n                \"unicode\",\r\n            ]:\r\n                raise TypeError(f\"{values.dtype} cannot be converted to an IntegerDtype\")\r\n    \r\n        elif is_bool_dtype(values) and is_integer_dtype(dtype):\r\n            values = np.array(values, dtype=int, copy=copy)\r\n    \r\n        elif not (is_integer_dtype(values) or is_float_dtype(values)):\r\n>           raise TypeError(f\"{values.dtype} cannot be converted to an IntegerDtype\")\r\nE           TypeError: datetime64[ns] cannot be converted to an IntegerDtype\r\n\r\ncopy       = True\r\ndtype      = Int64Dtype()\r\ninferred_type = None\r\nmask       = None\r\nvalues     = array(['2000-01-01T00:00:00.000000000', '2000-01-02T00:00:00.000000000',\r\n       '2000-01-03T00:00:00.000000000', '2000...:00.000000000',\r\n       '2000-02-18T00:00:00.000000000', '2000-02-19T00:00:00.000000000'],\r\n      dtype='datetime64[ns]')\r\n```\r\n\r\n</details>\r\n\r\n\r\n\r\n\r\n\r\n**Versions**\r\n<details>\r\n\r\n<!--\r\nPlease run the following code snippet and paste the output here:\r\n \r\nfrom sktime import show_versions; show_versions()\r\n-->\r\n\r\n</details>\r\n\r\n<!-- Thanks for contributing! -->\r\n","closed_by":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/1909/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/1909/timeline","performed_via_github_app":null,"state_reason":"completed"}