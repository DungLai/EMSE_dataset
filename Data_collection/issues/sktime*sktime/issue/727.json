{"url":"https://api.github.com/repos/sktime/sktime/issues/727","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/727/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/727/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/727/events","html_url":"https://github.com/sktime/sktime/issues/727","id":832738784,"node_id":"MDU6SXNzdWU4MzI3Mzg3ODQ=","number":727,"title":"[ENH] Framework for train accuracy estimates in time series classifiers","user":{"login":"MatthewMiddlehurst","id":25731235,"node_id":"MDQ6VXNlcjI1NzMxMjM1","avatar_url":"https://avatars.githubusercontent.com/u/25731235?v=4","gravatar_id":"","url":"https://api.github.com/users/MatthewMiddlehurst","html_url":"https://github.com/MatthewMiddlehurst","followers_url":"https://api.github.com/users/MatthewMiddlehurst/followers","following_url":"https://api.github.com/users/MatthewMiddlehurst/following{/other_user}","gists_url":"https://api.github.com/users/MatthewMiddlehurst/gists{/gist_id}","starred_url":"https://api.github.com/users/MatthewMiddlehurst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MatthewMiddlehurst/subscriptions","organizations_url":"https://api.github.com/users/MatthewMiddlehurst/orgs","repos_url":"https://api.github.com/users/MatthewMiddlehurst/repos","events_url":"https://api.github.com/users/MatthewMiddlehurst/events{/privacy}","received_events_url":"https://api.github.com/users/MatthewMiddlehurst/received_events","type":"User","site_admin":false},"labels":[{"id":1180363817,"node_id":"MDU6TGFiZWwxMTgwMzYzODE3","url":"https://api.github.com/repos/sktime/sktime/labels/API%20design","name":"API design","color":"874db7","default":false,"description":"API design & software architecture"},{"id":3102418261,"node_id":"MDU6TGFiZWwzMTAyNDE4MjYx","url":"https://api.github.com/repos/sktime/sktime/labels/module:classification","name":"module:classification","color":"BEB114","default":false,"description":""}],"state":"open","locked":false,"assignee":{"login":"TonyBagnall","id":9594042,"node_id":"MDQ6VXNlcjk1OTQwNDI=","avatar_url":"https://avatars.githubusercontent.com/u/9594042?v=4","gravatar_id":"","url":"https://api.github.com/users/TonyBagnall","html_url":"https://github.com/TonyBagnall","followers_url":"https://api.github.com/users/TonyBagnall/followers","following_url":"https://api.github.com/users/TonyBagnall/following{/other_user}","gists_url":"https://api.github.com/users/TonyBagnall/gists{/gist_id}","starred_url":"https://api.github.com/users/TonyBagnall/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TonyBagnall/subscriptions","organizations_url":"https://api.github.com/users/TonyBagnall/orgs","repos_url":"https://api.github.com/users/TonyBagnall/repos","events_url":"https://api.github.com/users/TonyBagnall/events{/privacy}","received_events_url":"https://api.github.com/users/TonyBagnall/received_events","type":"User","site_admin":false},"assignees":[{"login":"TonyBagnall","id":9594042,"node_id":"MDQ6VXNlcjk1OTQwNDI=","avatar_url":"https://avatars.githubusercontent.com/u/9594042?v=4","gravatar_id":"","url":"https://api.github.com/users/TonyBagnall","html_url":"https://github.com/TonyBagnall","followers_url":"https://api.github.com/users/TonyBagnall/followers","following_url":"https://api.github.com/users/TonyBagnall/following{/other_user}","gists_url":"https://api.github.com/users/TonyBagnall/gists{/gist_id}","starred_url":"https://api.github.com/users/TonyBagnall/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TonyBagnall/subscriptions","organizations_url":"https://api.github.com/users/TonyBagnall/orgs","repos_url":"https://api.github.com/users/TonyBagnall/repos","events_url":"https://api.github.com/users/TonyBagnall/events{/privacy}","received_events_url":"https://api.github.com/users/TonyBagnall/received_events","type":"User","site_admin":false},{"login":"MatthewMiddlehurst","id":25731235,"node_id":"MDQ6VXNlcjI1NzMxMjM1","avatar_url":"https://avatars.githubusercontent.com/u/25731235?v=4","gravatar_id":"","url":"https://api.github.com/users/MatthewMiddlehurst","html_url":"https://github.com/MatthewMiddlehurst","followers_url":"https://api.github.com/users/MatthewMiddlehurst/followers","following_url":"https://api.github.com/users/MatthewMiddlehurst/following{/other_user}","gists_url":"https://api.github.com/users/MatthewMiddlehurst/gists{/gist_id}","starred_url":"https://api.github.com/users/MatthewMiddlehurst/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MatthewMiddlehurst/subscriptions","organizations_url":"https://api.github.com/users/MatthewMiddlehurst/orgs","repos_url":"https://api.github.com/users/MatthewMiddlehurst/repos","events_url":"https://api.github.com/users/MatthewMiddlehurst/events{/privacy}","received_events_url":"https://api.github.com/users/MatthewMiddlehurst/received_events","type":"User","site_admin":false},{"login":"James-Large","id":44509982,"node_id":"MDQ6VXNlcjQ0NTA5OTgy","avatar_url":"https://avatars.githubusercontent.com/u/44509982?v=4","gravatar_id":"","url":"https://api.github.com/users/James-Large","html_url":"https://github.com/James-Large","followers_url":"https://api.github.com/users/James-Large/followers","following_url":"https://api.github.com/users/James-Large/following{/other_user}","gists_url":"https://api.github.com/users/James-Large/gists{/gist_id}","starred_url":"https://api.github.com/users/James-Large/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/James-Large/subscriptions","organizations_url":"https://api.github.com/users/James-Large/orgs","repos_url":"https://api.github.com/users/James-Large/repos","events_url":"https://api.github.com/users/James-Large/events{/privacy}","received_events_url":"https://api.github.com/users/James-Large/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2021-03-16T12:17:56Z","updated_at":"2022-04-18T21:24:33Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Several time series classification algorithms can efficiently produce estimates of accuracy (or probabilities for other metrics) on the training data. A few examples include: \r\n\r\n- Out of bag error in interval-based forests.\r\n- Leave one out cross-validation leveraging the nearest neighbour classifiers and already transformed data in dictionary-based approaches.\r\n- Removing the redundancy of transforming time series multiple times for cross-validation in algorithms such as STC and ROCKET.\r\n\r\nWhile these are generally useful for evaluation classifier performance, our main usage is generating weights for the HIVE-COTE classifier.\r\n\r\nCurrently there is no framework/structure for producing these, or determining if a classifier even can produce its own estimates. As far as I am aware the only classifiers which can do so currently are a few of the dictionary-based ones I have implemented such as BOSS (method below). However, as we improve the sktime HIVE-COTE implementation, each component should be able to do this ideally. \r\n\r\n```python\r\n    def _get_train_probs(self, X):\r\n        num_inst = X.shape[0]\r\n        results = np.zeros((num_inst, self.n_classes))\r\n        divisor = np.ones(self.n_classes) * self.n_estimators\r\n        for i in range(num_inst):\r\n            sums = np.zeros(self.n_classes)\r\n\r\n            preds = Parallel(n_jobs=self.n_jobs)(\r\n                delayed(clf._train_predict)(\r\n                    i,\r\n                )\r\n                for clf in self.classifiers\r\n            )\r\n\r\n            for c in preds:\r\n                sums[self.class_dictionary.get(c, -1)] += 1\r\n\r\n            dists = sums / divisor\r\n            for n in range(self.n_classes):\r\n                results[i][n] = dists[n]\r\n\r\n        return results\r\n```\r\n\r\nAn algorithm may have multiple methods of producing an estimate also. For example, TDE can produce both out of bag and leave one out estimates. This one is more minor (and prehaps should be handled by individual classifiers), but I will include for discussion. Perhaps an inheritable class would be the way to go about this? The following follows the functionality of how we handle this in our Java package.\r\n\r\n```python\r\n  class EstimateMethods(Enum):\r\n      Default = 1\r\n      OOB = 2\r\n      CV = 3\r\n\r\n  class TrainProbabilityEstimator():\r\n      def __init__(self):\r\n          self.estimate_method = EstimateMethods.Default\r\n  \r\n      def _get_train_probs(self, X):\r\n          raise NotImplementedError(\"abstract method\")\r\n```\r\nThough this is probably overkill, it coud also just be a standard name for such methods.\r\n\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/727/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/727/timeline","performed_via_github_app":null,"state_reason":null}