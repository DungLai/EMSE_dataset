{"url":"https://api.github.com/repos/sktime/sktime/issues/935","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/935/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/935/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/935/events","html_url":"https://github.com/sktime/sktime/issues/935","id":915654703,"node_id":"MDU6SXNzdWU5MTU2NTQ3MDM=","number":935,"title":"Implement Series-to-Series Transformer to difference a time series","user":{"login":"RNKuhns","id":26907244,"node_id":"MDQ6VXNlcjI2OTA3MjQ0","avatar_url":"https://avatars.githubusercontent.com/u/26907244?v=4","gravatar_id":"","url":"https://api.github.com/users/RNKuhns","html_url":"https://github.com/RNKuhns","followers_url":"https://api.github.com/users/RNKuhns/followers","following_url":"https://api.github.com/users/RNKuhns/following{/other_user}","gists_url":"https://api.github.com/users/RNKuhns/gists{/gist_id}","starred_url":"https://api.github.com/users/RNKuhns/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/RNKuhns/subscriptions","organizations_url":"https://api.github.com/users/RNKuhns/orgs","repos_url":"https://api.github.com/users/RNKuhns/repos","events_url":"https://api.github.com/users/RNKuhns/events{/privacy}","received_events_url":"https://api.github.com/users/RNKuhns/received_events","type":"User","site_admin":false},"labels":[{"id":3105907331,"node_id":"MDU6TGFiZWwzMTA1OTA3MzMx","url":"https://api.github.com/repos/sktime/sktime/labels/module:transformations","name":"module:transformations","color":"0865AF","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-06-09T00:08:43Z","updated_at":"2021-10-01T20:27:49Z","closed_at":"2021-10-01T20:27:48Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nSktime currently does not include a stand alone transformer to apply a set of differences to a time series. Differencing is common in time series forecasting (to among other things ensure a time series is stationary before using a model that assumes stationarity). \r\n\r\nThis feature would be useful in forecasting pipelines (e.g. `TransformedTargetForecaster()`) and also useful in the work on the `Theta` and/or `AutoTheta` forecasters (eg. #922).\r\n\r\n**Describe the solution you'd like**\r\nA `Differencer()` should be a series-to-series transformer that takes in an input timeseries and transforms it to apply a set of differences. \r\n\r\nAn important feature is that the `Differencer()` should be able to apply multiple differences at different lags sequentially (as a list, tuple or array in the constructor). This allows users to easily use the `Differencer()` for use cases like iteratively applying a first-difference and seasonal-difference to a series. \r\n\r\nSome implementations such as in [pmdarima](https://alkaline-ml.com/pmdarima/_modules/pmdarima/utils/array.html#diff) only allow users to specify higher-order differences, but restrict the iterative differences to use the same lag. \r\n\r\nThe `Differencer()` should also implement an `inverse_transform()` method to reverse the transformations. \r\n\r\n**Describe alternatives you've considered**\r\nOne difficulty in implementing the `Differencer()` is the slightly different approaches to reversing the transformation on \"in-sample\" data and predictions. \r\n\r\n@mloning and I have discussed two potential solutions (as listed below). Interested to hear everyone's thoughts on these options and if anyone has other ideas on the different inverse_transform application with predictions versus training data.\r\n\r\nOne option that is being considered is to have a constructor parameter that indicates how the `Differencer` will be used. \r\n\r\n```python\r\nclass Differencer(_SeriesToSeriesTransformer):\r\n\r\n    def __init__(self, lags = 1, use_with_predict=False):\r\n        self.lags = lags\r\n        self.use_with_predict=use_with_predict\r\n        ...\r\n       \r\n    def transform(...):\r\n        # Code to do transformation and store info to do inverse transform\r\n        ...\r\n        \r\n    def inverse_transform(...):\r\n        # Uses self.use_with_predict to diffentiate inverse_transform case\r\n        if self.use_with_predict:\r\n            ...\r\n        else:\r\n            ...\r\n```\r\nThe other option is to create a `Differencer` that applies the transformation to a forecaster.\r\n```python\r\nclass Differencer(BaseForecaster, _SeriesToSeriesTransformer):\r\n\r\n    def __init__(self, forecaster = None, lags = 1):\r\n        self.forecaster = forecaster\r\n        self.lags = lags\r\n        ...\r\n\r\n    def fit(...):\r\n         y_transform = self.transform(...)\r\n        self.forecaster.fit(y_transform, ...)\r\n        return self\r\n        \r\n    def predict(...):\r\n        y_pred = self.forecaster.predict(...)\r\n        # code for inverse difference on predicted data to calculate y_pred_inv\r\n         ...\r\n        return y_pred_inv\r\n        \r\n    def transform(...):\r\n        ...\r\n        \r\n    def inverse_transform(...):\r\n        # Used when inverse transforming data outside of the prediction use case\r\n        ...\r\n```\r\n\r\nOption 2 could be used as a stand-alone  or with other sktime functionality:\r\n```python\r\nforecaster = Differencer(forecaster=ETS())\r\n\r\nTransformedTargetForecaster(\r\n    BoxCox(), ..., Differencer(forecaster=ETS())\r\n)\r\n```\r\n","closed_by":{"login":"RNKuhns","id":26907244,"node_id":"MDQ6VXNlcjI2OTA3MjQ0","avatar_url":"https://avatars.githubusercontent.com/u/26907244?v=4","gravatar_id":"","url":"https://api.github.com/users/RNKuhns","html_url":"https://github.com/RNKuhns","followers_url":"https://api.github.com/users/RNKuhns/followers","following_url":"https://api.github.com/users/RNKuhns/following{/other_user}","gists_url":"https://api.github.com/users/RNKuhns/gists{/gist_id}","starred_url":"https://api.github.com/users/RNKuhns/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/RNKuhns/subscriptions","organizations_url":"https://api.github.com/users/RNKuhns/orgs","repos_url":"https://api.github.com/users/RNKuhns/repos","events_url":"https://api.github.com/users/RNKuhns/events{/privacy}","received_events_url":"https://api.github.com/users/RNKuhns/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/935/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/935/timeline","performed_via_github_app":null,"state_reason":"completed"}