{"url":"https://api.github.com/repos/sktime/sktime/issues/1662","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/1662/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/1662/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/1662/events","html_url":"https://github.com/sktime/sktime/issues/1662","id":1065409237,"node_id":"I_kwDOCVKAsc4_gNrV","number":1662,"title":"[BUG]  `test_fit_does_not_overwrite_hyper_params[FeatureUnion]` failing","user":{"login":"lmmentel","id":8989838,"node_id":"MDQ6VXNlcjg5ODk4Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/8989838?v=4","gravatar_id":"","url":"https://api.github.com/users/lmmentel","html_url":"https://github.com/lmmentel","followers_url":"https://api.github.com/users/lmmentel/followers","following_url":"https://api.github.com/users/lmmentel/following{/other_user}","gists_url":"https://api.github.com/users/lmmentel/gists{/gist_id}","starred_url":"https://api.github.com/users/lmmentel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lmmentel/subscriptions","organizations_url":"https://api.github.com/users/lmmentel/orgs","repos_url":"https://api.github.com/users/lmmentel/repos","events_url":"https://api.github.com/users/lmmentel/events{/privacy}","received_events_url":"https://api.github.com/users/lmmentel/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":1118163266,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY2","url":"https://api.github.com/repos/sktime/sktime/labels/good%20first%20issue","name":"good first issue","color":"9eff91","default":true,"description":"Good for newcomers"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":17,"created_at":"2021-11-28T19:01:25Z","updated_at":"2022-03-25T01:19:03Z","closed_at":"2022-03-25T01:19:03Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"Update: the failure has been silenced in the tests to enable refactor work on CI/CD, but the bug is still there.\r\nTo reproduce, the test should be run manually, or with the silencing disabled (`tests._config.EXCLUDED_TESTS`)\r\n\r\n---\r\n\r\n**Describe the bug**\r\n\r\nIn the refactored CI pipeline based on github actions #1620, and is blocking the PR.\r\n\r\nThe test `test_fit_does_not_overwrite_hyper_params[FeatureUnion]` from `tests/test_all_estimators.py` fails on linux with python3.6-3.9 and macos 3.6-3.9 with the error below.\r\n\r\nCuriously the test are passing in CI pipelines currently on `main` branch.\r\n\r\n```\r\n____________ test_fit_does_not_overwrite_hyper_params[FeatureUnion] ____________\r\n[gw0] darwin -- Python 3.7.12 /Users/runner/hostedtoolcache/Python/3.7.12/x64/bin/python\r\n\r\nestimator_instance = FeatureUnion(n_jobs=None, preserve_dataframe=True,\r\n             transformer_list=[('transformer1',\r\n                   ...                                                              with_std=True)))],\r\n             transformer_weights=None)\r\n\r\n    def test_fit_does_not_overwrite_hyper_params(estimator_instance):\r\n        \"\"\"Check that we do not overwrite hyper-parameters in fit.\"\"\"\r\n        estimator = estimator_instance\r\n        set_random_state(estimator)\r\n    \r\n        # Make a physical copy of the original estimator parameters before fitting.\r\n        params = estimator.get_params()\r\n        original_params = deepcopy(params)\r\n    \r\n        # Fit the model\r\n        fit_args = _make_args(estimator, \"fit\")\r\n        estimator.fit(*fit_args)\r\n    \r\n        # Compare the state of the model parameters with the original parameters\r\n        new_params = estimator.get_params()\r\n        for param_name, original_value in original_params.items():\r\n            new_value = new_params[param_name]\r\n    \r\n            # We should never change or mutate the internal state of input\r\n            # parameters by default. To check this we use the joblib.hash function\r\n            # that introspects recursively any subobjects to compute a checksum.\r\n            # The only exception to this rule of immutable constructor parameters\r\n            # is possible RandomState instance but in this check we explicitly\r\n            # fixed the random_state params recursively to be integer seeds.\r\n>           assert joblib.hash(new_value) == joblib.hash(original_value), (\r\n                \"Estimator %s should not change or mutate \"\r\n                \" the parameter %s from %s to %s during fit.\"\r\n                % (estimator.__class__.__name__, param_name, original_value, new_value)\r\n            )\r\nE           AssertionError: Estimator FeatureUnion should not change or mutate  the parameter transformer_list from [('transformer1', SeriesToSeriesRowTransformer(check_transformer=False,\r\nE                                          transformer=StandardScaler(copy=True,\r\nE                                                                     with_mean=True,\r\nE                                                                     with_std=True))), ('transformer2', SeriesToSeriesRowTransformer(check_transformer=False,\r\nE                                          transformer=StandardScaler(copy=True,\r\nE                                                                     with_mean=True,\r\nE                                                                     with_std=True)))] to [('transformer1', SeriesToSeriesRowTransformer(check_transformer=False,\r\nE                                          transformer=StandardScaler(copy=True,\r\nE                                                                     with_mean=True,\r\nE                                                                     with_std=True))), ('transformer2', SeriesToSeriesRowTransformer(check_transformer=False,\r\nE                                          transformer=StandardScaler(copy=True,\r\nE                                                                     with_mean=True,\r\nE                                                                     with_std=True)))] during fit.\r\nE           assert '7f94d1fc7e1f...888be251ce7b2' == 'b03f493febd2...c60681b4af6e4'\r\nE             - b03f493febd2f1d6da1c60681b4af6e4\r\nE             + 7f94d1fc7e1f285e1e5888be251ce7b2\r\n\r\nestimator  = FeatureUnion(n_jobs=None, preserve_dataframe=True,\r\n             transformer_list=[('transformer1',\r\n                   ...                                                              with_std=True)))],\r\n             transformer_weights=None)\r\nestimator_instance = FeatureUnion(n_jobs=None, preserve_dataframe=True,\r\n             transformer_list=[('transformer1',\r\n                   ...                                                              with_std=True)))],\r\n             transformer_weights=None)\r\nfit_args   = (                                                var_0\r\n0   0    -0.116020\r\n1     0.343339\r\n2    -0.464066\r\n3...\r\n1   0    ...0\r\n7     1\r\n8     0\r\n9     0\r\n10    0\r\n11    0\r\n12    1\r\n13    1\r\n14    1\r\n15    1\r\n16    0\r\n17    0\r\n18    1\r\n19    1\r\ndtype: int64)\r\nnew_params = {'n_jobs': None, 'preserve_dataframe': True, 'transformer1': SeriesToSeriesRowTransformer(check_transformer=False,\r\n   ...                                                        with_std=True)), 'transformer1__check_transformer': False, ...}\r\nnew_value  = [('transformer1', SeriesToSeriesRowTransformer(check_transformer=False,\r\n                             transformer=Stand...                              with_mean=True,\r\n                                                        with_std=True)))]\r\noriginal_params = {'n_jobs': None, 'preserve_dataframe': True, 'transformer1': SeriesToSeriesRowTransformer(check_transformer=False,\r\n   ...                                                        with_std=True)), 'transformer1__check_transformer': False, ...}\r\noriginal_value = [('transformer1', SeriesToSeriesRowTransformer(check_transformer=False,\r\n                             transformer=Stand...                              with_mean=True,\r\n                                                        with_std=True)))]\r\nparam_name = 'transformer_list'\r\nparams     = {'n_jobs': None, 'preserve_dataframe': True, 'transformer1': SeriesToSeriesRowTransformer(check_transformer=False,\r\n   ...                                                        with_std=True)), 'transformer1__check_transformer': False, ...}\r\n```\r\n\r\n**To Reproduce**\r\n\r\nRun the test with:\r\n\r\n```bash\r\npytest sktime/tests/test_all_estimators.py\r\n```\r\n\r\n**Expected behavior**\r\n\r\nTest passes\r\n\r\n**Additional context**\r\n\r\n**Versions**\r\n\r\nSee github actions under #1620 \r\n\r\n<!--\r\nPlease run the following code snippet and paste the output here:\r\n \r\nfrom sktime import show_versions; show_versions()\r\n-->\r\n\r\n</details>\r\n\r\n<!-- Thanks for contributing! -->\r\n","closed_by":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/1662/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/1662/timeline","performed_via_github_app":null,"state_reason":"completed"}