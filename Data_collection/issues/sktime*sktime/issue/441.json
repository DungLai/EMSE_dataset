{"url":"https://api.github.com/repos/sktime/sktime/issues/441","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/441/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/441/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/441/events","html_url":"https://github.com/sktime/sktime/issues/441","id":727237947,"node_id":"MDU6SXNzdWU3MjcyMzc5NDc=","number":441,"title":"[BUG] ValueError: `unit` missing when fitting pandas dataframe","user":{"login":"t-donat","id":66569750,"node_id":"MDQ6VXNlcjY2NTY5NzUw","avatar_url":"https://avatars.githubusercontent.com/u/66569750?v=4","gravatar_id":"","url":"https://api.github.com/users/t-donat","html_url":"https://github.com/t-donat","followers_url":"https://api.github.com/users/t-donat/followers","following_url":"https://api.github.com/users/t-donat/following{/other_user}","gists_url":"https://api.github.com/users/t-donat/gists{/gist_id}","starred_url":"https://api.github.com/users/t-donat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/t-donat/subscriptions","organizations_url":"https://api.github.com/users/t-donat/orgs","repos_url":"https://api.github.com/users/t-donat/repos","events_url":"https://api.github.com/users/t-donat/events{/privacy}","received_events_url":"https://api.github.com/users/t-donat/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-10-22T09:57:55Z","updated_at":"2020-10-22T13:57:33Z","closed_at":"2020-10-22T13:57:33Z","author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nHaving followed your tutorial .ipynb, I wanted to try this with a dataset I had worked with before. The code can be seen below, it was written in Jupyter Notebook. When running the code cell of the ThetaForecaster, it would throw the following ValueError:\r\n\r\n**Stack Trace**\r\n\r\n```\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-240-52dff7f6a368> in <module>\r\n      1 forecaster = ThetaForecaster(sp=7)\r\n----> 2 forecaster.fit(train_series)\r\n      3 alpha = 0.05\r\n      4 pred_series, pred_ints = forecaster.predict(fh, return_pred_ints=True, alpha=alpha)\r\n      5 smape_loss(test_series, pred_series)\r\n\r\n~\\Anaconda3\\lib\\site-packages\\sktime\\forecasting\\theta.py in fit(self, y_train, fh, X_train)\r\n    123         if self.deseasonalise:\r\n    124             self.deseasonaliser_ = Deseasonalizer(sp=self.sp, model=\"multiplicative\")\r\n--> 125             y_train = self.deseasonaliser_.fit_transform(y_train)\r\n    126 \r\n    127         # fit exponential smoothing forecaster\r\n\r\n~\\Anaconda3\\lib\\site-packages\\sktime\\transformers\\single_series\\base.py in fit_transform(self, y_train, **fit_params)\r\n     43             Transformed time series.\r\n     44         \"\"\"\r\n---> 45         return self.fit(y_train, **fit_params).transform(y_train)\r\n     46 \r\n     47     def transform(self, y, **transform_params):\r\n\r\n~\\Anaconda3\\lib\\site-packages\\sktime\\transformers\\single_series\\detrend\\_deseasonalise.py in transform(self, y, **transform_params)\r\n    119         self.check_is_fitted()\r\n    120         y = check_y(y)\r\n--> 121         seasonal = self._align_seasonal(y)\r\n    122         return self._transform(y, seasonal)\r\n    123 \r\n\r\n~\\Anaconda3\\lib\\site-packages\\sktime\\transformers\\single_series\\detrend\\_deseasonalise.py in _align_seasonal(self, y)\r\n     56                 self._y_index[0],\r\n     57                 coerce_to_int=True,\r\n---> 58                 unit=_get_unit(self._y_index),\r\n     59             )\r\n     60             % self.sp\r\n\r\n~\\Anaconda3\\lib\\site-packages\\sktime\\utils\\datetime.py in _get_duration(x, y, coerce_to_int, unit)\r\n    115             # try to get the unit from the data if not given\r\n    116             unit = _get_unit(x)\r\n--> 117         duration = _coerce_duration_to_int(duration, unit=unit)\r\n    118     return duration\r\n\r\n~\\Anaconda3\\lib\\site-packages\\sktime\\utils\\datetime.py in _coerce_duration_to_int(duration, unit)\r\n     32     elif isinstance(duration, (pd.Timedelta, pd.TimedeltaIndex)):\r\n     33         if unit is None:\r\n---> 34             raise ValueError(\"`unit` missing\")\r\n     35         # integer conversion only works reliably with non-ambiguous units (\r\n     36         # e.g. days, seconds but not months, years)\r\n\r\nValueError: `unit` missing\r\n\r\n```\r\n\r\n\r\n**To Reproduce**\r\n\r\n```\r\n\r\nimport pandas as pd\r\nfrom sktime.forecasting.all import *\r\n\r\n# Loading and preparting the dataset (Johns Hopkins COVID data repo)\r\nurl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"\r\ntotal_cases = pd.read_csv(url)\r\n\r\ntotal_cases.drop([\"Lat\", \"Long\"], axis=1, inplace=True)\r\ntotal_cases = total_cases.groupby(\"Country/Region\").sum()\r\n\r\n# changing the columns to a datetime format (also since sktime requires it)\r\ntotal_cases.columns = pd.to_datetime(total_cases.columns)\r\n\r\ntotal_cases.rename(index={\"US\": \"United States\", \"Taiwan*\": \"Taiwan\", \"Korea, South\": \"South Korea\"},\r\n                            inplace=True)\r\n\r\n# can be easily changed this way\r\ncountry = \"Austria\"\r\n\r\n\r\ntest_indices = total_cases.columns[-14:]\r\nfh = ForecastingHorizon(test_indices, is_relative=False)\r\n\r\ndaily_cases = total_cases.loc[country].diff().fillna(value=0)\r\ntrain_series = daily_cases.iloc[-130:-14]\r\ntest_series = daily_cases.iloc[-14:]\r\n\r\nforecaster = ThetaForecaster(sp=7)\r\nforecaster.fit(train_series)\r\nalpha = 0.05\r\npred_series, pred_ints = forecaster.predict(fh, return_pred_ints=True, alpha=alpha)\r\nsmape_loss(test_series, pred_series)\r\n```\r\n\r\n**Expected behavior**\r\nI was expecting the ThetaForecaster to fit to the train_series data.\r\n\r\n**Additional context**\r\n(By the way, this is my first bug report so if I make any formal mistakes, I'd be grateful for feedback!)\r\n\r\n**Versions**\r\n\r\nSystem:\r\n    python: 3.7.9 (default, Aug 31 2020, 17:10:11) [MSC v.1916 64 bit (AMD64)]\r\nexecutable: C:\\Users\\tobia\\Anaconda3\\python.exe\r\n   machine: Windows-10-10.0.18362-SP0\r\n\r\nPython dependencies:\r\n          pip: 20.2.3\r\n   setuptools: 49.6.0\r\n      sklearn: 0.23.2\r\n        numpy: 1.19.1\r\n        scipy: 1.5.2\r\n       Cython: 0.29.17\r\n       pandas: 1.1.3\r\n   matplotlib: 3.3.1\r\n       joblib: 0.17.0\r\n        numba: 0.51.2\r\n     pmdarima: 1.7.1\r\n      tsfresh: None\r\n\r\n\r\n\r\n</details>\r\n\r\n<!-- Thanks for contributing! -->\r\n","closed_by":{"login":"t-donat","id":66569750,"node_id":"MDQ6VXNlcjY2NTY5NzUw","avatar_url":"https://avatars.githubusercontent.com/u/66569750?v=4","gravatar_id":"","url":"https://api.github.com/users/t-donat","html_url":"https://github.com/t-donat","followers_url":"https://api.github.com/users/t-donat/followers","following_url":"https://api.github.com/users/t-donat/following{/other_user}","gists_url":"https://api.github.com/users/t-donat/gists{/gist_id}","starred_url":"https://api.github.com/users/t-donat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/t-donat/subscriptions","organizations_url":"https://api.github.com/users/t-donat/orgs","repos_url":"https://api.github.com/users/t-donat/repos","events_url":"https://api.github.com/users/t-donat/events{/privacy}","received_events_url":"https://api.github.com/users/t-donat/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/441/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/441/timeline","performed_via_github_app":null,"state_reason":"completed"}