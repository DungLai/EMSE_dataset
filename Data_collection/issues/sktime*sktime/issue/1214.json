{"url":"https://api.github.com/repos/sktime/sktime/issues/1214","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/1214/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/1214/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/1214/events","html_url":"https://github.com/sktime/sktime/issues/1214","id":953600523,"node_id":"MDU6SXNzdWU5NTM2MDA1MjM=","number":1214,"title":"[ENH] Adding AutoEnsembleForecaster to automatically find best weights for aggregation","user":{"login":"aiwalter","id":29627036,"node_id":"MDQ6VXNlcjI5NjI3MDM2","avatar_url":"https://avatars.githubusercontent.com/u/29627036?v=4","gravatar_id":"","url":"https://api.github.com/users/aiwalter","html_url":"https://github.com/aiwalter","followers_url":"https://api.github.com/users/aiwalter/followers","following_url":"https://api.github.com/users/aiwalter/following{/other_user}","gists_url":"https://api.github.com/users/aiwalter/gists{/gist_id}","starred_url":"https://api.github.com/users/aiwalter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aiwalter/subscriptions","organizations_url":"https://api.github.com/users/aiwalter/orgs","repos_url":"https://api.github.com/users/aiwalter/repos","events_url":"https://api.github.com/users/aiwalter/events{/privacy}","received_events_url":"https://api.github.com/users/aiwalter/received_events","type":"User","site_admin":false},"labels":[{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-27T07:44:46Z","updated_at":"2021-08-25T19:30:55Z","closed_at":"2021-08-25T19:30:55Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nFrom discussion in #1139 and having weights from #1162 merged, @RNKuhns and me came up with the idea of automatically finding the best weights for the forecasters of the ensemble. \r\n\r\n**Describe the solution you'd like**\r\nFor this we might have a separate class like an `AutoEnsembleForecaster`. We could have different algorithms/meta-models to find the best weights. One of them (and the first I would work on) is OLS. A second one I can think of would be to apply a tree-based model like `DecisionTreeRegressor` or `RandomForestRegressor` and use the feature importance score as weight. We could also have a param `regressor` for the meta-model or give it as string. For other methods to find weights, we might have to look into literature or R implementations. A a nice to have, we could always try weights like `w=[1,0,0]`, `w=[0,1,0]` and `w=[0,0,1]` in addition to the found weights to see if the ensemble is really outperforming. This could be done using a `MultiplexForecaster` and find best ensemble. We could have a param `benchmark=False` to enable this.\r\n\r\nTo apply a meta-model on the training data we have 2 options:\r\n\r\n1. Predict insample for all forecasters (which can be an issue, e.g. ARIMA cant predict the first data points, also other models might have issues here) and use this predictions as exog data for the OLS.\r\n2. Apply a `SingleWindowSplitter` to the train data to avoid doing insample predictions. The `cv` could be given as arg to the `AutoEnsembleForecaster` or request the train/test size. \r\n\r\nSolution 1:\r\n```python\r\nAutoEnsembleForecaster(method=\"ols\", test_size=0.25)\r\n```\r\nSolution 2:\r\n```python\r\nAutoEnsembleForecaster(regressor=LinearRegression(), test_size=0.25)\r\n```\r\nFor this solution, we might also have a param to know whether we need to take the coefficients or the feature importance values as weights or we handle it automatically dependent on the model type given.\r\n\r\n**Describe alternatives you've considered**\r\n- Including this into the `EnsembleForecaster`. \r\n- Alternative to using a meta-model to find weights would be to do a grid search and use a `MutliplexForecaster` to find best ensemble. This would require to have a heuristic to define the grid of weights to search over. Could be computationally expensive and the user would have to provide params for the grid search (or we set them under the hood with defaults). We could add this as a further method.\r\n\r\n","closed_by":{"login":"aiwalter","id":29627036,"node_id":"MDQ6VXNlcjI5NjI3MDM2","avatar_url":"https://avatars.githubusercontent.com/u/29627036?v=4","gravatar_id":"","url":"https://api.github.com/users/aiwalter","html_url":"https://github.com/aiwalter","followers_url":"https://api.github.com/users/aiwalter/followers","following_url":"https://api.github.com/users/aiwalter/following{/other_user}","gists_url":"https://api.github.com/users/aiwalter/gists{/gist_id}","starred_url":"https://api.github.com/users/aiwalter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aiwalter/subscriptions","organizations_url":"https://api.github.com/users/aiwalter/orgs","repos_url":"https://api.github.com/users/aiwalter/repos","events_url":"https://api.github.com/users/aiwalter/events{/privacy}","received_events_url":"https://api.github.com/users/aiwalter/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/1214/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/1214/timeline","performed_via_github_app":null,"state_reason":"completed"}