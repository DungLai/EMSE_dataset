{"url":"https://api.github.com/repos/sktime/sktime/issues/874","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/874/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/874/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/874/events","html_url":"https://github.com/sktime/sktime/issues/874","id":892745218,"node_id":"MDU6SXNzdWU4OTI3NDUyMTg=","number":874,"title":"Add class to run a collection of transformers for data processing","user":{"login":"RNKuhns","id":26907244,"node_id":"MDQ6VXNlcjI2OTA3MjQ0","avatar_url":"https://avatars.githubusercontent.com/u/26907244?v=4","gravatar_id":"","url":"https://api.github.com/users/RNKuhns","html_url":"https://github.com/RNKuhns","followers_url":"https://api.github.com/users/RNKuhns/followers","following_url":"https://api.github.com/users/RNKuhns/following{/other_user}","gists_url":"https://api.github.com/users/RNKuhns/gists{/gist_id}","starred_url":"https://api.github.com/users/RNKuhns/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/RNKuhns/subscriptions","organizations_url":"https://api.github.com/users/RNKuhns/orgs","repos_url":"https://api.github.com/users/RNKuhns/repos","events_url":"https://api.github.com/users/RNKuhns/events{/privacy}","received_events_url":"https://api.github.com/users/RNKuhns/received_events","type":"User","site_admin":false},"labels":[{"id":1118163264,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY0","url":"https://api.github.com/repos/sktime/sktime/labels/feature%20request","name":"feature request","color":"38d191","default":false,"description":"New feature or request"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""},{"id":3105907331,"node_id":"MDU6TGFiZWwzMTA1OTA3MzMx","url":"https://api.github.com/repos/sktime/sktime/labels/module:transformations","name":"module:transformations","color":"0865AF","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-05-16T19:46:41Z","updated_at":"2021-07-10T15:50:35Z","closed_at":"2021-07-10T15:50:34Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nDuring exploratory data analysis it would be nice to be able to have an easy way to run several transformations (say a box-cox transformation and then a detrender) in the specified order in order to re-use the transformed series for different exploratory data analysis tasks. \r\n\r\n**Describe the solution you'd like**\r\n Sktime has functionality similar to this built into `TransformedTargetForecaster`.  @aiwalter also has this functionality built-into his proposed `ForecastingPipeline` (See #844) that also includes the ability to do transformations to exogenous data (not just the endogenous series). \r\n\r\nAn initial solution would be to just handle transformation of the endogenous (Y) data, ala `TransformedTargetForecaster`. \r\n\r\nIn that initial case, I'd propose the transformer functionality of `TransformedTargetForecaster` be added in a separate class called `TransformerPipeline`.  While this doesn't seem like it adds a lot of functionality, the benefit would be making it more streamlined for users to do exploratory data analysis and avoiding the need for users to recreate code that sktime is implicitly using internally. \r\n\r\nFor example, in the simple case that ignores exogenous data:\r\n\r\n```python\r\nprocessing_pipe = TransformerPipeline(\r\n    [\r\n        ('boxcox', BoxCoxTransformer(...)), \r\n        ('detrend', DeTrender(...)), \r\n    ]\r\n)\r\nyt = processing_pipe.fit_transform(y)\r\nplot_series(yt)\r\n```\r\nA more complete solution would be to build this into the framework in #844 or \r\nOr in the case that parallels #844: \r\n```python\r\nprocessing_pipe = TransformerPipeline(\r\n    [\r\n        ('boxcox', BoxCoxTransformer(...), [\"y\"]), \r\n        ('detrend', DeTrender(...), [\"y\"]), \r\n        (\"scaler\", TabularToSeriesAdaptor(MinMaxScaler()), [\"y\", \"X\"]),\r\n    ]\r\n)\r\nyt, xt = processing_pipe.fit_transform(y, x)\r\n# The function below is hypothetical but would be a potential use-case if it existed\r\nplot_cross_correlation(yt, xt)\r\n```\r\n\r\n**Describe alternatives you've considered**\r\nThe primary alternative is for users to manually loop through the desired transformations and apply them, but having a concise way to do this would make it easy for users to get right to exploratory data analysis.  \r\n\r\nPlus, by explicitly having a `TransformerPipeline` we'd be exposing the functionality that sktime is already using internally, so users don't have to write the code on their own. \r\n\r\n","closed_by":{"login":"RNKuhns","id":26907244,"node_id":"MDQ6VXNlcjI2OTA3MjQ0","avatar_url":"https://avatars.githubusercontent.com/u/26907244?v=4","gravatar_id":"","url":"https://api.github.com/users/RNKuhns","html_url":"https://github.com/RNKuhns","followers_url":"https://api.github.com/users/RNKuhns/followers","following_url":"https://api.github.com/users/RNKuhns/following{/other_user}","gists_url":"https://api.github.com/users/RNKuhns/gists{/gist_id}","starred_url":"https://api.github.com/users/RNKuhns/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/RNKuhns/subscriptions","organizations_url":"https://api.github.com/users/RNKuhns/orgs","repos_url":"https://api.github.com/users/RNKuhns/repos","events_url":"https://api.github.com/users/RNKuhns/events{/privacy}","received_events_url":"https://api.github.com/users/RNKuhns/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/874/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/874/timeline","performed_via_github_app":null,"state_reason":"completed"}