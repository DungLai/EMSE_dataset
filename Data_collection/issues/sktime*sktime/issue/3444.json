{"url":"https://api.github.com/repos/sktime/sktime/issues/3444","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/3444/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/3444/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/3444/events","html_url":"https://github.com/sktime/sktime/issues/3444","id":1377122790,"node_id":"I_kwDOCVKAsc5SFTnm","number":3444,"title":"[BUG] Differencer fails in TransformedTargetForecater with int fh","user":{"login":"aiwalter","id":29627036,"node_id":"MDQ6VXNlcjI5NjI3MDM2","avatar_url":"https://avatars.githubusercontent.com/u/29627036?v=4","gravatar_id":"","url":"https://api.github.com/users/aiwalter","html_url":"https://github.com/aiwalter","followers_url":"https://api.github.com/users/aiwalter/followers","following_url":"https://api.github.com/users/aiwalter/following{/other_user}","gists_url":"https://api.github.com/users/aiwalter/gists{/gist_id}","starred_url":"https://api.github.com/users/aiwalter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aiwalter/subscriptions","organizations_url":"https://api.github.com/users/aiwalter/orgs","repos_url":"https://api.github.com/users/aiwalter/repos","events_url":"https://api.github.com/users/aiwalter/events{/privacy}","received_events_url":"https://api.github.com/users/aiwalter/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""},{"id":3105907331,"node_id":"MDU6TGFiZWwzMTA1OTA3MzMx","url":"https://api.github.com/repos/sktime/sktime/labels/module:transformations","name":"module:transformations","color":"0865AF","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-09-18T17:16:58Z","updated_at":"2022-09-18T21:26:44Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n~\\AppData\\Local\\Temp\\ipykernel_10704\\2624273533.py in <module>\r\n     15     (\"forecaster\", NaiveForecaster())])\r\n     16 pipe.fit(y_train)\r\n---> 17 pipe.predict(fh=3)\r\n\r\nc:\\Users\\mf-wa\\Desktop\\sktime\\sktime\\sktime\\forecasting\\base\\_base.py in predict(self, fh, X)\r\n    356         # we call the ordinary _predict if no looping/vectorization needed\r\n    357         if not self._is_vectorized:\r\n--> 358             y_pred = self._predict(fh=fh, X=X_inner)\r\n    359         else:\r\n    360             # otherwise we call the vectorized version of predict\r\n\r\nc:\\Users\\mf-wa\\Desktop\\sktime\\sktime\\sktime\\forecasting\\compose\\_pipeline.py in _predict(self, fh, X)\r\n    908         y_pred = self.forecaster_.predict(fh=fh, X=X)\r\n    909         # inverse transform y_pred\r\n--> 910         y_pred = self._get_inverse_transform(self.transformers_pre_, y_pred, X)\r\n    911 \r\n    912         # transform post\r\n\r\nc:\\Users\\mf-wa\\Desktop\\sktime\\sktime\\sktime\\forecasting\\compose\\_pipeline.py in _get_inverse_transform(self, transformers, y, X, mode)\r\n    120             if not skip_trafo:\r\n    121                 if mode is None:\r\n--> 122                     y = transformer.inverse_transform(y, X)\r\n    123                 # if proba, we slice by quantile/coverage combination\r\n    124                 #   and collect the same quantile/coverage by variable\r\n\r\nc:\\Users\\mf-wa\\Desktop\\sktime\\sktime\\sktime\\transformations\\base.py in inverse_transform(self, X, y)\r\n    601 \r\n    602         if not isinstance(X_inner, VectorizedDF):\r\n--> 603             Xt = self._inverse_transform(X=X_inner, y=y_inner)\r\n    604         else:\r\n    605             # otherwise we call the vectorized version of predict\r\n\r\nc:\\Users\\mf-wa\\Desktop\\sktime\\sktime\\sktime\\transformations\\series\\difference.py in _inverse_transform(self, X, y)\r\n    264         Z = X\r\n    265         is_df = isinstance(Z, pd.DataFrame)\r\n--> 266         is_contained_by_fit_z, pad_z_inv = self._check_inverse_transform_index(Z)\r\n    267 \r\n    268         # If `Z` is entirely contained in fitted `_Z` we can just return\r\n\r\nc:\\Users\\mf-wa\\Desktop\\sktime\\sktime\\sktime\\transformations\\series\\difference.py in _check_inverse_transform_index(self, Z)\r\n    182                 f\"but the indices {index_diff} were not found.\",\r\n    183             ]\r\n--> 184             raise ValueError(\" \".join(msg))\r\n    185 \r\n    186         return is_contained_by_fitted_z, pad_z_inv\r\n\r\nValueError: Inverse transform requires indices PeriodIndex(['1960-02'], dtype='period[M]') to have been stored in `fit()`, but the indices PeriodIndex(['1960-02'], dtype='period[M]') were not found.\r\n```\r\n\r\n**To Reproduce**\r\n\r\nFails:\r\nImports:\r\n```python\r\nfrom sktime.datasets import load_airline\r\nfrom sktime.forecasting.naive import NaiveForecaster\r\nfrom sktime.forecasting.compose import TransformedTargetForecaster\r\nfrom sktime.transformations.series.difference import Differencer\r\nfrom sktime.transformations.series.boxcox import BoxCoxTransformer\r\nfrom sktime.forecasting.model_selection import temporal_train_test_split\r\nfrom sktime.forecasting.base import ForecastingHorizon\r\n\r\ny = load_airline()\r\n```\r\n1) Fails:\r\n```python\r\npipe = TransformedTargetForecaster(steps=[\r\n    (\"boxcox\", BoxCoxTransformer()),\r\n    (\"difference\", Differencer()),\r\n    (\"forecaster\", NaiveForecaster())])\r\npipe.fit(y)\r\npipe.predict(fh=3)\r\n```\r\n2) Works:\r\n```python\r\npipe = TransformedTargetForecaster(steps=[\r\n    (\"boxcox\", BoxCoxTransformer()),\r\n    # (\"difference\", Differencer()),\r\n    (\"forecaster\", NaiveForecaster())])\r\npipe.fit(y)\r\npipe.predict(fh=3)\r\n```\r\n\r\n3) Works:\r\n```python\r\npipe = TransformedTargetForecaster(steps=[\r\n    (\"boxcox\", BoxCoxTransformer()),\r\n    (\"difference\", Differencer()),\r\n    (\"forecaster\", NaiveForecaster())])\r\npipe.fit(y)\r\npipe.predict(fh=[1,2,3])\r\n```\r\n4) Works:\r\n```python\r\ny_train, y_test = temporal_train_test_split(y, test_size=12)\r\nfh = ForecastingHorizon(y_test.index, is_relative=False)\r\npipe = TransformedTargetForecaster(steps=[\r\n    (\"boxcox\", BoxCoxTransformer()),\r\n    (\"difference\", Differencer()),\r\n    (\"forecaster\", NaiveForecaster())])\r\npipe.fit(y_train)\r\npipe.predict(fh=fh)\r\n```\r\nSo basically `Differencer` has problems when `fh` is an `int` value when using in a `TransformedTargetForecaster`.\r\n\r\n**Additional context**\r\n@fkiraly  did you not recently work in `Differencer`? ðŸ˜ƒ \r\n\r\nVersion: `main`","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/3444/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/3444/timeline","performed_via_github_app":null,"state_reason":null}