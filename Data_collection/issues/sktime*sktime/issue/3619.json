{"url":"https://api.github.com/repos/sktime/sktime/issues/3619","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/3619/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/3619/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/3619/events","html_url":"https://github.com/sktime/sktime/issues/3619","id":1415338339,"node_id":"I_kwDOCVKAsc5UXFlj","number":3619,"title":"[BUG] Can't create usable ForecastHorizon with timedeltas","user":{"login":"gerarddet","id":113707464,"node_id":"U_kgDOBscJyA","avatar_url":"https://avatars.githubusercontent.com/u/113707464?v=4","gravatar_id":"","url":"https://api.github.com/users/gerarddet","html_url":"https://github.com/gerarddet","followers_url":"https://api.github.com/users/gerarddet/followers","following_url":"https://api.github.com/users/gerarddet/following{/other_user}","gists_url":"https://api.github.com/users/gerarddet/gists{/gist_id}","starred_url":"https://api.github.com/users/gerarddet/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gerarddet/subscriptions","organizations_url":"https://api.github.com/users/gerarddet/orgs","repos_url":"https://api.github.com/users/gerarddet/repos","events_url":"https://api.github.com/users/gerarddet/events{/privacy}","received_events_url":"https://api.github.com/users/gerarddet/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-10-19T17:23:24Z","updated_at":"2022-10-24T13:58:50Z","closed_at":"2022-10-22T15:57:12Z","author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nI'm unsuccessfully trying to use sktime's ForecastingGridSearchCV with timedeltas.  \r\n\r\nI am using timedeltas---not timestamps---because I have disconnected data which only includes 8:00am - 12:00am daily.  I wrote a class that clips out all other times so that the data is datatime.timedelta where 0:00-4:00 is for day 1, 4:00-8:00 is for day 2, 8:00-12:00 is for day 3, etc. \r\n\r\nHere is a simple test case that shows the problem.  I expect both versions ===1=== and ===2=== should work.  I don't care if only one works; I 'm just trying to find a version that works.  (Note: there may well be bugs in the code after these statements).\r\n\r\n**To Reproduce**\r\nRun the code below.  There are 2 versions.  Run the code with just ===1=== uncommented, OR just ===2=== uncomment.  I expect both versions should work. \r\n\r\n```python\r\n\tfrom datetime import timedelta\r\n\r\n\timport numpy as np\r\n\timport pandas as pd\r\n\tfrom sktime.forecasting.base import ForecastingHorizon\r\n\tfrom sktime.forecasting.compose import MultiplexForecaster\r\n\tfrom sktime.forecasting.compose import TransformedTargetForecaster\r\n\tfrom sktime.forecasting.model_selection import ForecastingGridSearchCV, SlidingWindowSplitter\r\n\tfrom sktime.forecasting.naive import NaiveForecaster\r\n\tfrom sktime.performance_metrics.forecasting import mean_absolute_percentage_error\r\n\r\n\tagg_window = 300        # 5 minutes\r\n\thorizon_window = 3\r\n\r\n\tpdf = pd.DataFrame(\r\n\t\tindex=[timedelta(seconds=s * agg_window) for s in range(24)],\r\n\t\tdata={\"y\": np.random.random(24), \"X\": np.random.random(24)}\r\n\t)\r\n\r\n\tprint(pdf.dtypes)\r\n\tprint(pdf)\r\n\r\n\ttest_len = 6\r\n\tX_train = pdf[\"X\"][0:-test_len]\r\n\ty_train = pdf[\"y\"][0:-test_len]\r\n\tX_test = pdf[\"X\"][-test_len:]\r\n\ty_test = pdf[\"y\"][-test_len:]\r\n\r\n\tprint(X_train)\r\n\tprint(y_train)\r\n\r\n\tprint([np.timedelta64(s * agg_window, 's') for s in range(1, horizon_window + 1)])\r\n\tprint(\"isinstance\", isinstance(np.timedelta64(300, 's'), (int, np.integer)))\r\n\r\n\t# Only use NaiveForecaster to keep test case as simple as possible\r\n\tparam_grid = [\r\n\t\t{\r\n\t\t\t'forecast__selected_forecaster': [\"naive\"],\r\n\t\t}\r\n\t]\r\n\r\n\tforecaster = TransformedTargetForecaster([\r\n\t\t# (\"deseasonalize\", Deseasonalizer(model=\"additive\", sp=sp)),\r\n\t\t# (\"detrend\", Detrender(forecaster=PolynomialTrendForecaster(degree=1))),\r\n\t\t(\"forecast\", MultiplexForecaster(forecasters=[\r\n\t\t\t(\"naive\", NaiveForecaster(strategy=\"last\")),\r\n\t\t\t# Other Forecasts removed for simplicity\r\n\t\t]))\r\n\t])\r\n\tfh = ForecastingHorizon(\r\n\t\t[datetime.timedelta(seconds=s * agg_window) for s in range(1, horizon_window + 1)], # ===1===\r\n\t\t# [np.timedelta64(s * agg_window, 's') for s in range(1, horizon_window + 1)],      # ===2===\r\n\t\tis_relative=True\r\n\t)\r\n\tsplitter_window_length = timedelta(seconds=horizon_window * agg_window)                 # ===1===\r\n\t# splitter_window_length = np.timedelta64(horizon_window * agg_window, \"s\")             # ===2===\r\n\r\n\t# Print out types for ===1===\r\n\tprint(type(y_train.index.dtype), type(X_train.index.dtype), type(fh), type(splitter_window_length))\r\n\tprint([type(x) for x in fh])\r\n\r\n\tcv = SlidingWindowSplitter(fh=fh, window_length=splitter_window_length)\r\n\tgscv = ForecastingGridSearchCV(\r\n\t\tforecaster, strategy=\"refit\", cv=cv, param_grid=param_grid\r\n\t)\r\n\r\n\tgscv.fit(y_train, X=X_train)\r\n\ty_pred = gscv.predict(fh, X=X_test)\r\n\t# plot_series(y_train, y_test, y_pred, labels=[\"y_train\", \"y_test\", \"y_pred\"])\r\n\tmean_absolute_percentage_error(y_test, y_pred, symmetric=False)\r\n```\r\n\r\n**Expected behavior**\r\nI expect both versions ===1=== and ===2=== should work. \r\n\r\n**Additional context**\r\nApproach ===1===: \r\n\r\nThis version attempts to use datetime.timedelta types. When I use just the ===1=== lines, I get the following error:\r\n\r\n\ton SlidingWindowSplitter statement \r\n\t\r\n\tFile \".../python3.7/site-packages/sktime/forecasting/model_selection/_split.py\", line 272\r\n\tTypeError: Unsupported combination of types\r\n\t\r\nThe printout of the types of the various fields shows the elements of `fh` get converted to pandas Timedelta.  Overall, I would think this combination should be allowed, but the \"bad combination\" message is not completely unreasonable since the types are different.  But, I don't want to covert everything to Pandas Timedeltas (this code is part of a PySpark application).  So this is a dead end. \r\n\r\n\t\r\nApproach ===2===: \r\n\r\nThis version attempts to use np.timedelta64 types.  When I use just the ===2=== lines, I get the following error;\r\n\r\n\ton ForecastingHorizon statement\r\n\t\r\n\tFile \".../python3.7/site-packages/pandas/core/dtypes/cast.py\", line 2042\r\n\tTypeError: int() argument must be a string, a bytes-like object or a number, not 'datetime.timedelta'\r\n\r\nThe problem occurs in method maybe_cast_to_integer_array in pandas/core/dtypes/cast.py.  \r\n\r\n\tcasted = arr.astype(dtype, copy=copy)\r\n\r\nThis statement raises an exception where: \r\n- arr is the ndarray [numpy.timedelta64(300,'s') numpy.timedelta64(600,'s'), numpy.timedelta64(900,'s')]\r\n- dtype=int32 \r\n\r\nIt is method method _check_values where the first elif branch list below is taken, and dtype is fixed to int.  But it should fall thru to the second listed elif branch.  \r\n\r\n\tdef _check_values(...): \r\n\r\n\t\t... \r\n\t\r\n\t\t# convert np.array or list to pandas index\r\n\t\telif is_array(values) and array_is_int(values):\r\n\t\t\tvalues = pd.Index(values, dtype=int)\r\n\r\n\t\telif is_array(values) and array_is_timedelta_or_date_offset(values):\r\n\t\t\tvalues = pd.Index(values)\r\n\r\nThe ultimate problem is array_is_int in the first elif branch which ultimately calls array_is_int.  \r\n\r\n\tdef is_int(x) -> bool:\r\n\t\t\"\"\"Check if x is of integer type, but not boolean.\"\"\"\r\n\t\t# boolean are subclasses of integers in Python, so explicitly exclude them\r\n\t\treturn isinstance(x, (int, np.integer)) and not isinstance(x, bool)\r\n\t\r\nA simple test shows \r\n\r\n\tisinstance(np.timedelta64(300, 's'), (int, np.integer)) is TRUE \r\n\r\nThis method returns True when it should return False.  So either \r\n1 - Method is_int needs to include a separate check for not np.timedelta64 in addition to bool, or  \r\n2 - Switch the two elif clauses above would probably work. \r\n\r\n\r\n**Versions**\r\n<details>\r\n\r\nSystem:\r\n    python: 3.7.13 (default, Mar 28 2022, 07:24:34)  [Clang 12.0.0 ]\r\nexecutable: /Users/gerard/biz/client/Detelytics/2022/repo/LivliMobility/env/bin/python3.7\r\n   machine: Darwin-21.6.0-x86_64-i386-64bit\r\n\r\nPython dependencies:\r\n          pip: 22.2.2\r\n   setuptools: 63.4.1\r\n      sklearn: 1.0.2\r\n       sktime: 0.12.1\r\n  statsmodels: 0.13.2\r\n        numpy: 1.21.5\r\n        scipy: 1.7.3\r\n       pandas: 1.3.5\r\n   matplotlib: 3.5.2\r\n       joblib: 1.1.0\r\n        numba: 0.55.1\r\n     pmdarima: 1.8.5\r\n      tsfresh: None\r\n\r\n</details>\r\n\r\n<!-- Thanks for contributing! -->\r\n","closed_by":{"login":"khrapovs","id":3774663,"node_id":"MDQ6VXNlcjM3NzQ2NjM=","avatar_url":"https://avatars.githubusercontent.com/u/3774663?v=4","gravatar_id":"","url":"https://api.github.com/users/khrapovs","html_url":"https://github.com/khrapovs","followers_url":"https://api.github.com/users/khrapovs/followers","following_url":"https://api.github.com/users/khrapovs/following{/other_user}","gists_url":"https://api.github.com/users/khrapovs/gists{/gist_id}","starred_url":"https://api.github.com/users/khrapovs/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/khrapovs/subscriptions","organizations_url":"https://api.github.com/users/khrapovs/orgs","repos_url":"https://api.github.com/users/khrapovs/repos","events_url":"https://api.github.com/users/khrapovs/events{/privacy}","received_events_url":"https://api.github.com/users/khrapovs/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/3619/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/3619/timeline","performed_via_github_app":null,"state_reason":"completed"}