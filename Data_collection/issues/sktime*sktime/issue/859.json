{"url":"https://api.github.com/repos/sktime/sktime/issues/859","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/859/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/859/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/859/events","html_url":"https://github.com/sktime/sktime/issues/859","id":876369400,"node_id":"MDU6SXNzdWU4NzYzNjk0MDA=","number":859,"title":"ARIMA and AutoARIMA should return pandas.NA when value cannot be predicted, e.g., first index in-sample for start=0, d=1","user":{"login":"julramos","id":19613567,"node_id":"MDQ6VXNlcjE5NjEzNTY3","avatar_url":"https://avatars.githubusercontent.com/u/19613567?v=4","gravatar_id":"","url":"https://api.github.com/users/julramos","html_url":"https://github.com/julramos","followers_url":"https://api.github.com/users/julramos/followers","following_url":"https://api.github.com/users/julramos/following{/other_user}","gists_url":"https://api.github.com/users/julramos/gists{/gist_id}","starred_url":"https://api.github.com/users/julramos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/julramos/subscriptions","organizations_url":"https://api.github.com/users/julramos/orgs","repos_url":"https://api.github.com/users/julramos/repos","events_url":"https://api.github.com/users/julramos/events{/privacy}","received_events_url":"https://api.github.com/users/julramos/received_events","type":"User","site_admin":false},"labels":[{"id":1118163266,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY2","url":"https://api.github.com/repos/sktime/sktime/labels/good%20first%20issue","name":"good first issue","color":"9eff91","default":true,"description":"Good for newcomers"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-05-05T11:52:42Z","updated_at":"2021-10-01T19:22:13Z","closed_at":"2021-10-01T19:22:13Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Update 2021-09-15 - re-opened since a recurring issue.\r\n\r\nNot a bug, but an interface convention - currently ARIMA, AutoARIMA and other learners fail when asked for a prediction that is undefined, e.g., difference parameter d=1 and first in-sample index (start=0).\r\n\r\nIt would be more sensible if `pandas.NA` is returned instead for such indices, perhaps a warning should be raised too that `pandas.NA` are produced.\r\n\r\nIn first instance, we should update ARIMA and AutoARIMA with this convention.\r\n\r\n---\r\n\r\n**Describe the bug**\r\n\r\nWhen using `Imputer` with `forecaster = AutoARIMA()`  the error \"ValueError: In-sample predictions undefined for start=0 when d=1\" is raised.\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-11-2d05f4822fd6> in <module>()\r\n      4 \r\n      5 transformer = Imputer(method=\"forecaster\", forecaster=AutoARIMA()).fit(Z=df.value)\r\n----> 6 y_hat = transformer.transform(Z=df.value)\r\n\r\n/usr/local/lib/python3.7/dist-packages/sktime/transformations/series/impute.py in transform(self, Z, X)\r\n    102             z_pred = forecaster.fit(\r\n    103                 z.fillna(method=\"ffill\").fillna(method=\"backfill\")\r\n--> 104             ).predict(fh=fh_ins)\r\n    105             # fill with trend values\r\n    106             z = z.fillna(value=z_pred)\r\n\r\n/usr/local/lib/python3.7/dist-packages/sktime/forecasting/base/_sktime.py in predict(self, fh, X, return_pred_int, alpha)\r\n    226         self.check_is_fitted()\r\n    227         self._set_fh(fh)\r\n--> 228         return self._predict(self.fh, X, return_pred_int=return_pred_int, alpha=alpha)\r\n    229 \r\n    230     def compute_pred_int(self, y_pred, alpha=DEFAULT_ALPHA):\r\n\r\n/usr/local/lib/python3.7/dist-packages/sktime/forecasting/base/adapters/_pmdarima.py in _predict(self, fh, X, return_pred_int, alpha)\r\n     58         # all values are in-sample\r\n     59         elif fh.is_all_in_sample(self.cutoff):\r\n---> 60             return self._predict_in_sample(fh_ins, **kwargs)\r\n     61 \r\n     62         # both in-sample and out-of-sample values\r\n\r\n/usr/local/lib/python3.7/dist-packages/sktime/forecasting/base/adapters/_pmdarima.py in _predict_in_sample(self, fh, X, return_pred_int, alpha)\r\n     80             X=X,\r\n     81             return_conf_int=return_pred_int,\r\n---> 82             alpha=alpha,\r\n     83         )\r\n     84 \r\n\r\n/usr/local/lib/python3.7/dist-packages/pmdarima/utils/metaestimators.py in <lambda>(*args, **kwargs)\r\n     51 \r\n     52         # lambda, but not partial, allows help() to work with update_wrapper\r\n---> 53         out = (lambda *args, **kwargs: self.fn(obj, *args, **kwargs))\r\n     54         # update the docstring of the returned function\r\n     55         update_wrapper(out, self.fn)\r\n\r\n/usr/local/lib/python3.7/dist-packages/pmdarima/arima/auto.py in predict_in_sample(self, X, start, end, dynamic, return_conf_int, alpha, typ, **kwargs)\r\n    242             return_conf_int=return_conf_int,\r\n    243             alpha=alpha,\r\n--> 244             typ=typ,\r\n    245         )\r\n    246 \r\n\r\n/usr/local/lib/python3.7/dist-packages/pmdarima/arima/arima.py in predict_in_sample(self, X, start, end, dynamic, return_conf_int, alpha, **kwargs)\r\n    584         if start is not None and start < d:\r\n    585             raise ValueError(\"In-sample predictions undefined for start={0} \"\r\n--> 586                              \"when d={1}\".format(start, d))\r\n    587 \r\n    588         # if we fit with exog, make sure one was passed:\r\n\r\nValueError: In-sample predictions undefined for start=0 when d=1\r\n```\r\n\r\n**To Reproduce**\r\n\r\nData:\r\n[df.csv](https://github.com/alan-turing-institute/sktime/files/6426660/df.csv) \r\n\r\n```python\r\nimport pandas as pd\r\nfrom sktime.transformations.series.impute import Imputer\r\nfrom sktime.forecasting.arima import AutoARIMA\r\n\r\ndf = pd.read_csv('df.csv')  \r\ndf['timestamp'] = pd.DatetimeIndex(df['timestamp']).to_period('D')\r\ndf = df.set_index('timestamp')\r\n\r\ntransformer = Imputer(method=\"forecaster\", forecaster=AutoARIMA()).fit(Z=df.value)\r\ny_hat = transformer.transform(Z=df.value)\r\n```\r\n\r\n**Expected behavior**\r\n\r\n`transformer.transform(Z)` should return `Z` with NAn values replaced by AutoArima predictions.\r\n\r\n**Additional context**\r\n\r\nI think the problem is in `/usr/local/lib/python3.7/dist-packages/sktime/transformations/series/impute.py` in `transform(self, Z, X)`, line 100, because all the points are being passed to `fh_ins` instead of just the points with NaN.\r\n\r\n```python\r\n100             fh_ins = -np.arange(len(z))\r\n101             # fill NaN before fitting with ffill and backfill (heuristic)\r\n102             z_pred = forecaster.fit(\r\n103                 z.fillna(method=\"ffill\").fillna(method=\"backfill\")\r\n104             ).predict(fh=fh_ins)\r\n105             # fill with trend values\r\n106             z = z.fillna(value=z_pred)\r\n\r\n```\r\n\r\n**Versions**\r\n<details>\r\n\r\n```\r\nSystem:\r\n    python: 3.7.10 (default, Feb 20 2021, 21:17:23)  [GCC 7.5.0]\r\nexecutable: /usr/bin/python3\r\n   machine: Linux-4.19.112+-x86_64-with-Ubuntu-18.04-bionic\r\n\r\nPython dependencies:\r\n          pip: 19.3.1\r\n   setuptools: 56.0.0\r\n      sklearn: 0.24.2\r\n       sktime: 0.6.0\r\n  statsmodels: 0.12.2\r\n        numpy: 1.19.5\r\n        scipy: 1.4.1\r\n       Cython: 0.29.22\r\n       pandas: 1.1.5\r\n   matplotlib: 3.2.2\r\n       joblib: 1.0.1\r\n        numba: 0.51.2\r\n     pmdarima: 1.8.2\r\n      tsfresh: None\r\n```\r\n\r\n</details>\r\n","closed_by":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/859/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/859/timeline","performed_via_github_app":null,"state_reason":"completed"}