{"url":"https://api.github.com/repos/sktime/sktime/issues/138","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/138/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/138/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/138/events","html_url":"https://github.com/sktime/sktime/issues/138","id":488494682,"node_id":"MDU6SXNzdWU0ODg0OTQ2ODI=","number":138,"title":"[BUG] Extracted shapelets from multivariate dataset are always of the 1st dimension","user":{"login":"DavidCorral94","id":11409621,"node_id":"MDQ6VXNlcjExNDA5NjIx","avatar_url":"https://avatars.githubusercontent.com/u/11409621?v=4","gravatar_id":"","url":"https://api.github.com/users/DavidCorral94","html_url":"https://github.com/DavidCorral94","followers_url":"https://api.github.com/users/DavidCorral94/followers","following_url":"https://api.github.com/users/DavidCorral94/following{/other_user}","gists_url":"https://api.github.com/users/DavidCorral94/gists{/gist_id}","starred_url":"https://api.github.com/users/DavidCorral94/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DavidCorral94/subscriptions","organizations_url":"https://api.github.com/users/DavidCorral94/orgs","repos_url":"https://api.github.com/users/DavidCorral94/repos","events_url":"https://api.github.com/users/DavidCorral94/events{/privacy}","received_events_url":"https://api.github.com/users/DavidCorral94/received_events","type":"User","site_admin":false},"labels":[{"id":1118163264,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY0","url":"https://api.github.com/repos/sktime/sktime/labels/feature%20request","name":"feature request","color":"38d191","default":false,"description":"New feature or request"}],"state":"closed","locked":false,"assignee":{"login":"jasonlines","id":38794632,"node_id":"MDQ6VXNlcjM4Nzk0NjMy","avatar_url":"https://avatars.githubusercontent.com/u/38794632?v=4","gravatar_id":"","url":"https://api.github.com/users/jasonlines","html_url":"https://github.com/jasonlines","followers_url":"https://api.github.com/users/jasonlines/followers","following_url":"https://api.github.com/users/jasonlines/following{/other_user}","gists_url":"https://api.github.com/users/jasonlines/gists{/gist_id}","starred_url":"https://api.github.com/users/jasonlines/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasonlines/subscriptions","organizations_url":"https://api.github.com/users/jasonlines/orgs","repos_url":"https://api.github.com/users/jasonlines/repos","events_url":"https://api.github.com/users/jasonlines/events{/privacy}","received_events_url":"https://api.github.com/users/jasonlines/received_events","type":"User","site_admin":false},"assignees":[{"login":"jasonlines","id":38794632,"node_id":"MDQ6VXNlcjM4Nzk0NjMy","avatar_url":"https://avatars.githubusercontent.com/u/38794632?v=4","gravatar_id":"","url":"https://api.github.com/users/jasonlines","html_url":"https://github.com/jasonlines","followers_url":"https://api.github.com/users/jasonlines/followers","following_url":"https://api.github.com/users/jasonlines/following{/other_user}","gists_url":"https://api.github.com/users/jasonlines/gists{/gist_id}","starred_url":"https://api.github.com/users/jasonlines/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jasonlines/subscriptions","organizations_url":"https://api.github.com/users/jasonlines/orgs","repos_url":"https://api.github.com/users/jasonlines/repos","events_url":"https://api.github.com/users/jasonlines/events{/privacy}","received_events_url":"https://api.github.com/users/jasonlines/received_events","type":"User","site_admin":false},{"login":"dguijo","id":47889499,"node_id":"MDQ6VXNlcjQ3ODg5NDk5","avatar_url":"https://avatars.githubusercontent.com/u/47889499?v=4","gravatar_id":"","url":"https://api.github.com/users/dguijo","html_url":"https://github.com/dguijo","followers_url":"https://api.github.com/users/dguijo/followers","following_url":"https://api.github.com/users/dguijo/following{/other_user}","gists_url":"https://api.github.com/users/dguijo/gists{/gist_id}","starred_url":"https://api.github.com/users/dguijo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dguijo/subscriptions","organizations_url":"https://api.github.com/users/dguijo/orgs","repos_url":"https://api.github.com/users/dguijo/repos","events_url":"https://api.github.com/users/dguijo/events{/privacy}","received_events_url":"https://api.github.com/users/dguijo/received_events","type":"User","site_admin":false}],"milestone":null,"comments":9,"created_at":"2019-09-03T09:31:30Z","updated_at":"2021-12-26T21:35:23Z","closed_at":"2021-01-06T15:07:55Z","author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nHey there, I've been playing around with `sktime` in order to detect shapelets in multivariate TS datasets. I've been testing with the notebook available in [multivariate_time_series_classification.ipynb](https://github.com/alan-turing-institute/sktime/blob/master/examples/multivariate_time_series_classification.ipynb), specifically I've been trying the third method (Bespoke estimator-specific methods) in order to extract these shapelets from multivariate datasets.\r\n\r\nWhat I've found is that no matter how big the dataset is (I tried BasicMotions dataset and also an own multivariate dataset, increasing and decreasing them, in order to make sure that all the series are visited), neither how much time do you put the python script to run (I performed tests from 5 to 30 minutes long), the extracted shapelets that `ShapeletTransformClassifier` detects are always shapelets associated to the first dimension of the multivariate dataset, i.e., for the BasicMotions dataset we have 6 dimensions, so the shapelets extracted are always from the first one. \r\n\r\nI've noticed that this method (Bespoke estimator-specific methods) is still under construction, but I would like to know if this behavior is the one that I should expect or this is a bug.\r\n\r\n**To Reproduce**\r\n\r\n```python\r\nfrom sktime.transformers.compose import ColumnConcatenator\r\nfrom sktime.transformers.shapelets import ContractedShapeletTransform\r\nfrom sktime.classifiers.compose import TimeSeriesForestClassifier\r\nfrom sktime.classifiers.dictionary_based.boss import BOSSEnsemble\r\nfrom sktime.classifiers.compose import ColumnEnsembleClassifier\r\nfrom sktime.classifiers.shapelet_based import ShapeletTransformClassifier\r\nfrom sktime.datasets import load_basic_motions\r\nfrom sktime.pipeline import Pipeline\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\nimport matplotlib.pyplot as plt\r\n\r\n###### FUNCTIONS ######\r\n\r\ndef plotEachShapelets(st, train_x):\r\n\t# for each extracted shapelet (in descending order of quality/information gain)\r\n\tfor s in st.shapelets[0:5]:\r\n\t    print(s)\r\n    \r\n\t    # plot the series that the shapelet was extracted from \r\n\t    plt.plot(\r\n\t        train_x.iloc[s.series_id,0],\r\n\t        'gray'\r\n\t    )\r\n\t    \r\n\t    # overlay the shapelet onto the full series\r\n\t    plt.plot(\r\n\t        list(range(s.start_pos,(s.start_pos+s.length))),\r\n\t        train_x.iloc[s.series_id,0][s.start_pos:s.start_pos+s.length],\r\n\t        'r',\r\n\t        linewidth=3.0\r\n\t    )\r\n\t    plt.show()\r\n\r\ndef plotAllShapelets(st, train_x):\r\n\t# for each extracted shapelet (in descending order of quality/information gain)\r\n\tfor i in range(0,len(st.shapelets)):\r\n\t    s = st.shapelets[i]\r\n\t    # summary info about the shapelet \r\n\t    print(\"#\"+str(i)+\": \"+str(s))\r\n\t    \r\n\t    # overlay shapelets\r\n\t    plt.plot(\r\n\t        list(range(s.start_pos,(s.start_pos+s.length))),\r\n\t        train_x.iloc[s.series_id,0][s.start_pos:s.start_pos+s.length]\r\n\t    )\r\n\r\n\tplt.show()\r\n\r\nX_train, y_train = load_basic_motions(split='TRAIN', return_X_y=True)\r\nX_test, y_test = load_basic_motions(split='TEST', return_X_y=True)\r\n\r\n\r\nclf = ShapeletTransformClassifier(time_contract_in_mins=5)\r\nclf.fit(X_train, y_train)\r\nprint(\"--> Score = \" + str(clf.score(X_test, y_test)))\r\nprint(\"--> Shapelets detected = \" + str(len(clf.classifier[0].shapelets)))\r\n\r\nplotEachShapelets(clf.classifier[0], X_train)\r\nplotAllShapelets(clf.classifier[0], X_train)\r\n```\r\n\r\n**Expected behavior**\r\nI would expect that the shapelets detected are not always shapelets extracted from the first dimension, but also from other dimensions of the multivariate dataset.\r\n\r\n**Additional context**\r\nNone.\r\n\r\n**Versions**\r\n<details>\r\n\r\n- Linux-4.4.0-17134-Microsoft-x86_64-with-Ubuntu-16.04-xenial\r\n- Python 3.6.8 (default, May  7 2019, 14:58:50)\r\n- [GCC 5.4.0 20160609]\r\n- NumPy 1.16.4\r\n- SciPy 1.3.0\r\n- sktime 0.3.0\r\n\r\n</details>\r\n\r\n<!-- Thanks for contributing! -->\r\n","closed_by":{"login":"TonyBagnall","id":9594042,"node_id":"MDQ6VXNlcjk1OTQwNDI=","avatar_url":"https://avatars.githubusercontent.com/u/9594042?v=4","gravatar_id":"","url":"https://api.github.com/users/TonyBagnall","html_url":"https://github.com/TonyBagnall","followers_url":"https://api.github.com/users/TonyBagnall/followers","following_url":"https://api.github.com/users/TonyBagnall/following{/other_user}","gists_url":"https://api.github.com/users/TonyBagnall/gists{/gist_id}","starred_url":"https://api.github.com/users/TonyBagnall/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TonyBagnall/subscriptions","organizations_url":"https://api.github.com/users/TonyBagnall/orgs","repos_url":"https://api.github.com/users/TonyBagnall/repos","events_url":"https://api.github.com/users/TonyBagnall/events{/privacy}","received_events_url":"https://api.github.com/users/TonyBagnall/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/138/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/138/timeline","performed_via_github_app":null,"state_reason":"completed"}