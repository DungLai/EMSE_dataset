{"url":"https://api.github.com/repos/sktime/sktime/issues/1798","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/1798/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/1798/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/1798/events","html_url":"https://github.com/sktime/sktime/issues/1798","id":1088103231,"node_id":"I_kwDOCVKAsc5A2yM_","number":1798,"title":"[ENH] design discussion - parameter validation and initialisation","user":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"labels":[{"id":1180363817,"node_id":"MDU6TGFiZWwxMTgwMzYzODE3","url":"https://api.github.com/repos/sktime/sktime/labels/API%20design","name":"API design","color":"874db7","default":false,"description":"API design & software architecture"},{"id":1180366006,"node_id":"MDU6TGFiZWwxMTgwMzY2MDA2","url":"https://api.github.com/repos/sktime/sktime/labels/implementing%20framework","name":"implementing framework","color":"61c7f9","default":false,"description":"Implementing frameworks for new learning tasks"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-12-24T02:33:25Z","updated_at":"2021-12-24T19:02:28Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"The orthodox `sklearn` faith dictates that nothing must be done in `__init__` except writing parameters to `self`.\r\nThis does prevent side effects and careless overwrites, but I think this may be too harsh.\r\n\r\nThere are some negative consequences to this design:\r\n* the user is only told that parameter settings are invalid when they try to `fit`. This is an unnatural (and unnaturally late) point in the workflow, the natural point would be as soon as they attempt to construct the estimator with invalid parameters.\r\n* `fit` needs to take the responsibility of constructing any component estimators, which seems unnatural. The natural nesting logic (for a simple composite) has `fit` call component `fit`-s, `predict` call component `predict`-s - and constructor call component constructors.\r\n* for objects that do not have `fit`, such as metrics and distances, it is very unclear where input validation or component construction should even sit. There may be multiple methods that can be the first to call, so should the same boilerplate code sit in every function that could be called after construction? Seems unnatural.\r\n\r\nWhat I would propose, in intentional deviation from `sklearn` doctrine:\r\n* Two new interface points are added on the level of `BaseObject`, abstract methods `validate_parameters` and `init_construct_components`. Neither must overwrite `__init__` parameter attributes, and both are called by `BaseObject`'s `__init__`. Individual estimators will implement the two, default behaviour is the empty function.\r\n* `validate_parameters` must have no side effects on the object scope whatsoever. Its purpose is exclusively to validate the parameters, and raise an exceptions if they are invalid. (it does not call estimator components' `validate_parameters`, since these have been called when the component objects have been constructed)\r\n* `construct_components` creates any clones of estimator components used inside the object. It must not do anything except cloning estimator type parameters with name `some_name` into a private copy `some_name_`.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/1798/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/1798/timeline","performed_via_github_app":null,"state_reason":null}