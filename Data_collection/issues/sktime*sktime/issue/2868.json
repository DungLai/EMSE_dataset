{"url":"https://api.github.com/repos/sktime/sktime/issues/2868","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/2868/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/2868/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/2868/events","html_url":"https://github.com/sktime/sktime/issues/2868","id":1284957222,"node_id":"I_kwDOCVKAsc5MluQm","number":2868,"title":"[ENH] Fast Low-cost Unipotent Semantic Segmentation (FLUSS)","user":{"login":"NoaBenAmi","id":37590002,"node_id":"MDQ6VXNlcjM3NTkwMDAy","avatar_url":"https://avatars.githubusercontent.com/u/37590002?v=4","gravatar_id":"","url":"https://api.github.com/users/NoaBenAmi","html_url":"https://github.com/NoaBenAmi","followers_url":"https://api.github.com/users/NoaBenAmi/followers","following_url":"https://api.github.com/users/NoaBenAmi/following{/other_user}","gists_url":"https://api.github.com/users/NoaBenAmi/gists{/gist_id}","starred_url":"https://api.github.com/users/NoaBenAmi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/NoaBenAmi/subscriptions","organizations_url":"https://api.github.com/users/NoaBenAmi/orgs","repos_url":"https://api.github.com/users/NoaBenAmi/repos","events_url":"https://api.github.com/users/NoaBenAmi/events{/privacy}","received_events_url":"https://api.github.com/users/NoaBenAmi/received_events","type":"User","site_admin":false},"labels":[{"id":3108854999,"node_id":"MDU6TGFiZWwzMTA4ODU0OTk5","url":"https://api.github.com/repos/sktime/sktime/labels/module:annotation","name":"module:annotation","color":"F1ECF1","default":false,"description":""},{"id":3796180314,"node_id":"LA_kwDOCVKAsc7iRR1a","url":"https://api.github.com/repos/sktime/sktime/labels/enhancement","name":"enhancement","color":"fef2c0","default":true,"description":"Adding new functionality"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-06-26T15:38:06Z","updated_at":"2022-09-25T14:20:42Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Description\r\nFLUSS is a “semantic segmentation” algorithm compatible with static data (batch processing).\r\nThe algorithm divides a time series into internally consistent homogenous regions called regimes.\r\n\r\nFLUSS produces a time series called the Corrected Arc Curve ( $CAC$ ), corresponding to a given raw time series. $CAC$ annotates the raw time series with information about the likelihood of a regime change at each location.\r\n\r\n**FLUSS’s advantages** \r\n- _Domain Agnosticism_ \r\nFLUSS is a domain agnostic technique that makes no assumptions about the data. \r\n- _Real-World Data Suitability_ \r\nMany techniques assume that every data region belongs to a well-defined semantic segment. However, lack of structure in accumulated data is common. FLUSS can effectively mark these difficult sections as “don’t know”.\r\n\r\nFor more information about FLUSS, see - \r\nhttps://www.cs.ucr.edu/~eamonn/Segmentation_ICDM.pdf\r\nhttps://stumpy.readthedocs.io/en/latest/Tutorial_Semantic_Segmentation.html#FLUSS \r\n\r\n### Feature Request\r\nImplementation of FLUSS\r\n\r\n### Suggestion and Considerations\r\nI have looked into [stumpy](https://stumpy.readthedocs.io/en/latest/index.html) and [matrixprofile](https://matrixprofile.docs.matrixprofile.org/index.html) packages for Matrix Profile and FLUSS interfacing. This is the summary of my findings:\r\n\r\n_Interfacing `stumpy`_ \r\nStumpy is a well-maintained and documented Python library with a univariate-data implementation of [FLUSS](https://stumpy.readthedocs.io/en/latest/api.html#fluss). \r\nThe input data received by the function is the output of the Matrix Profile algorithm, as opposed to the actual time-series data, like in Sktime.\r\nIn other words,  `stumpy.fluss` workflow is  - \r\nTime series data (T) → Matrix Profile algorithm, T as input, I as output → fluss(I, ..) \r\n\r\nStumpy has implemented both univariate-data and multivariate-data Matrix Profile ([stump](https://stumpy.readthedocs.io/en/latest/api.html#stump) and [mstump](https://stumpy.readthedocs.io/en/latest/api.html#mstump), respectively), but to my understanding  `stumpy.fluss` can only be used with univariate data.\r\n[Matrix Profile](https://stumpy.readthedocs.io/en/latest/Tutorial_The_Matrix_Profile.html), [Multi-dimensional Matrix Profile](https://stumpy.readthedocs.io/en/latest/Tutorial_Multidimensional_Motif_Discovery.html)\r\n\r\n_interfacing `matrixprofile` (MPF)_\r\nMatrixprofile is a well-documented Python library with a univariate-data implementation of matrix profile and other methods that can be used to calculate FLUSS (univariate only, to my understanding). \r\n[Matrix Profile - mpx](https://matrixprofile.docs.matrixprofile.org/api.html#matrixprofile-algorithms-mpx), [Matrix Profile - stomp](https://matrixprofile.docs.matrixprofile.org/api.html#matrixprofile-algorithms-stomp), [Regimes](https://matrixprofile.docs.matrixprofile.org/api.html#matrixprofile-discover-regimes)\r\n\r\n_Suggestion_\r\nCreating a multivariate version of FLUSS will be more challenging than planned. \r\nI consider interfacing the univariate implementation of `stumpy`, to begin with, and later moving on to interfacing or implementing a multivariate version of FLUSS (if such a version has been studied). \r\n\r\n_Tasks_\r\n- [ ] Interfacing the univariate implementation of `stumpy` FLUSS.\r\n- [ ] Interfacing or implementing a multivariate version of FLUSS\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/2868/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/2868/timeline","performed_via_github_app":null,"state_reason":null}