{"url":"https://api.github.com/repos/sktime/sktime/issues/1458","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/1458/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/1458/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/1458/events","html_url":"https://github.com/sktime/sktime/issues/1458","id":1007178342,"node_id":"I_kwDOCVKAsc48CFJm","number":1458,"title":"[ENH] Imputer for multivariate timeseries","user":{"login":"fstinner","id":11679462,"node_id":"MDQ6VXNlcjExNjc5NDYy","avatar_url":"https://avatars.githubusercontent.com/u/11679462?v=4","gravatar_id":"","url":"https://api.github.com/users/fstinner","html_url":"https://github.com/fstinner","followers_url":"https://api.github.com/users/fstinner/followers","following_url":"https://api.github.com/users/fstinner/following{/other_user}","gists_url":"https://api.github.com/users/fstinner/gists{/gist_id}","starred_url":"https://api.github.com/users/fstinner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fstinner/subscriptions","organizations_url":"https://api.github.com/users/fstinner/orgs","repos_url":"https://api.github.com/users/fstinner/repos","events_url":"https://api.github.com/users/fstinner/events{/privacy}","received_events_url":"https://api.github.com/users/fstinner/received_events","type":"User","site_admin":false},"labels":[{"id":3105907331,"node_id":"MDU6TGFiZWwzMTA1OTA3MzMx","url":"https://api.github.com/repos/sktime/sktime/labels/module:transformations","name":"module:transformations","color":"0865AF","default":false,"description":""}],"state":"closed","locked":false,"assignee":{"login":"aiwalter","id":29627036,"node_id":"MDQ6VXNlcjI5NjI3MDM2","avatar_url":"https://avatars.githubusercontent.com/u/29627036?v=4","gravatar_id":"","url":"https://api.github.com/users/aiwalter","html_url":"https://github.com/aiwalter","followers_url":"https://api.github.com/users/aiwalter/followers","following_url":"https://api.github.com/users/aiwalter/following{/other_user}","gists_url":"https://api.github.com/users/aiwalter/gists{/gist_id}","starred_url":"https://api.github.com/users/aiwalter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aiwalter/subscriptions","organizations_url":"https://api.github.com/users/aiwalter/orgs","repos_url":"https://api.github.com/users/aiwalter/repos","events_url":"https://api.github.com/users/aiwalter/events{/privacy}","received_events_url":"https://api.github.com/users/aiwalter/received_events","type":"User","site_admin":false},"assignees":[{"login":"aiwalter","id":29627036,"node_id":"MDQ6VXNlcjI5NjI3MDM2","avatar_url":"https://avatars.githubusercontent.com/u/29627036?v=4","gravatar_id":"","url":"https://api.github.com/users/aiwalter","html_url":"https://github.com/aiwalter","followers_url":"https://api.github.com/users/aiwalter/followers","following_url":"https://api.github.com/users/aiwalter/following{/other_user}","gists_url":"https://api.github.com/users/aiwalter/gists{/gist_id}","starred_url":"https://api.github.com/users/aiwalter/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aiwalter/subscriptions","organizations_url":"https://api.github.com/users/aiwalter/orgs","repos_url":"https://api.github.com/users/aiwalter/repos","events_url":"https://api.github.com/users/aiwalter/events{/privacy}","received_events_url":"https://api.github.com/users/aiwalter/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2021-09-25T19:36:25Z","updated_at":"2021-10-03T09:43:54Z","closed_at":"2021-10-03T09:43:54Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\n\r\nImputer Transformation (sktime.transformations.series.impute.Imputer) works only with univariate time series. So that one does not have to manipulate the data laboriously before, a multivariate version of Imputer would help. sktime.transformations.series.compose -> ColumnwiseTransformer could work with the Imputer. Is it planned to provide a multivariate imputer or should the ColumnwiseTransformer always be applied?\r\n\r\n**Describe the solution you'd like**\r\nA query of the dimension of the input data could be prefixed so that only one Imputer version is needed.\r\n\r\n```\r\nfrom sktime.transformations.base import _SeriesToSeriesTransformer\r\nfrom sktime.transformations.series.compose import ColumnwiseTransformer\r\nfrom sktime.transformations.series.impute import Imputer\r\n\r\n__author__ = [\"Martin Walter\"]\r\n__all__ = [\"ImputerMultivariate\"]\r\n\r\nclass ImputerMultivariate(_SeriesToSeriesTransformer):\r\n    \"\"\"Missing value imputation of multivariate timeseries.\r\n\r\n        The Imputer transforms input series by replacing missing values according\r\n        to an imputation strategy specified by `method`.\r\n\r\n        Parameters\r\n        ----------\r\n        method : str, default=\"drift\"\r\n            Method to fill the missing values values.\r\n\r\n            * \"drift\" : drift/trend values by sktime.PolynomialTrendForecaster()\r\n            * \"linear\" : linear interpolation, by pd.Series.interpolate()\r\n            * \"nearest\" : use nearest value, by pd.Series.interpolate()\r\n            * \"constant\" : same constant value (given in arg value) for all NaN\r\n            * \"mean\" : pd.Series.mean()\r\n            * \"median\" : pd.Series.median()\r\n            * \"backfill\" ot \"bfill\" : adapted from pd.Series.fillna()\r\n            * \"pad\" or \"ffill\" : adapted from pd.Series.fillna()\r\n            * \"random\" : random values between pd.Series.min() and .max()\r\n            * \"forecaster\" : use an sktime Forecaster, given in arg forecaster\r\n\r\n        missing_values : int/float/str, default=None\r\n            The placeholder for the missing values. All occurrences of\r\n            missing_values will be imputed. If None then np.nan is used.\r\n        value : int/float, default=None\r\n            Value to use to fill missing values when method=\"constant\".\r\n        forecaster : Any Forecaster based on sktime.BaseForecaster, default=None\r\n            Use a given Forecaster to impute by insample predictions when\r\n            method=\"forecaster\". Before fitting, missing data is imputed with\r\n            method=\"ffill\" or \"bfill\" as heuristic.\r\n        random_state : int/float/str, optional\r\n            Value to set random.seed() if method=\"random\", default None\r\n\r\n        Examples\r\n        --------\r\n        >>> from sktime.transformations.series.impute import Imputer\r\n        >>> from sktime.datasets import load_airline\r\n        >>> y = load_airline()\r\n        >>> transformer = Imputer(method=\"drift\")\r\n        >>> y_hat = transformer.fit_transform(y)\r\n    \"\"\"\r\n    _tags = {\r\n            \"fit-in-transform\": True,\r\n            \"handles-missing-data\": True,\r\n            \"skip-inverse-transform\": True,\r\n        }\r\n    def __init__(\r\n        self, \r\n        method=\"drift\", \r\n        random_state=None, \r\n        value=None,\r\n        forecaster=None,\r\n        missing_values=None):\r\n\r\n        self.transformer = ColumnwiseTransformer(\r\n            Imputer(\r\n            method=method,\r\n            random_state=random_state,\r\n            value=value,\r\n            forecaster=forecaster,\r\n            missing_values=missing_values,\r\n        )\r\n        )\r\n        super(ImputerMultivariate, self).__init__()\r\n    \r\n    def fit(self, X, y=None):\r\n        self._is_fitted = True\r\n        self.transformer.fit(X, y)\r\n        return self\r\n\r\n    def transform(self, X, y=None):\r\n        X = self.transformer.transform(X, y)\r\n        return X\r\n```\r\n","closed_by":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/1458/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/1458/timeline","performed_via_github_app":null,"state_reason":"completed"}