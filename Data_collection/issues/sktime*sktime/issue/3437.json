{"url":"https://api.github.com/repos/sktime/sktime/issues/3437","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/3437/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/3437/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/3437/events","html_url":"https://github.com/sktime/sktime/issues/3437","id":1376770475,"node_id":"I_kwDOCVKAsc5SD9mr","number":3437,"title":"[ENH] Predict variance / quantiles for `STLForecaster`","user":{"login":"topher-lo","id":46541035,"node_id":"MDQ6VXNlcjQ2NTQxMDM1","avatar_url":"https://avatars.githubusercontent.com/u/46541035?v=4","gravatar_id":"","url":"https://api.github.com/users/topher-lo","html_url":"https://github.com/topher-lo","followers_url":"https://api.github.com/users/topher-lo/followers","following_url":"https://api.github.com/users/topher-lo/following{/other_user}","gists_url":"https://api.github.com/users/topher-lo/gists{/gist_id}","starred_url":"https://api.github.com/users/topher-lo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/topher-lo/subscriptions","organizations_url":"https://api.github.com/users/topher-lo/orgs","repos_url":"https://api.github.com/users/topher-lo/repos","events_url":"https://api.github.com/users/topher-lo/events{/privacy}","received_events_url":"https://api.github.com/users/topher-lo/received_events","type":"User","site_admin":false},"labels":[{"id":1180387595,"node_id":"MDU6TGFiZWwxMTgwMzg3NTk1","url":"https://api.github.com/repos/sktime/sktime/labels/implementing%20algorithms","name":"implementing algorithms","color":"c5c0f7","default":false,"description":"Implementing new algorithms/estimators"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""},{"id":3796180314,"node_id":"LA_kwDOCVKAsc7iRR1a","url":"https://api.github.com/repos/sktime/sktime/labels/enhancement","name":"enhancement","color":"fef2c0","default":true,"description":"Adding new functionality"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-09-17T13:17:38Z","updated_at":"2022-09-17T13:58:05Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\n- `STLForecaster` does not have `predict_var` or `predict_quantile` capabilities\r\n\r\n**Describe the solution you'd like**\r\nSince the current implementation already assumes a model for the residuals, we could take the prediction intervals (if `forecaster_resid` has that capability) computed by `forecaster_resid` then add `y_pred` to it. The prediction intervals will **definiitely be too narrow** (as they do not incorporate model uncertainty from `forecaster_trend` and `forecaster_seasonal`), but my suggestion is consistent with the extremely strong assumptions already imposed with having three separate forecasters for seasonal, trend and residual components.\r\n\r\nAlternatively, we could naively add prediction intervals from `forecaster_resid`, `forecaster_trend` and `forecaster_seasonal` together. However, I am not sure if additive separability applies for both point and interval predictions here. If it does, then this feature request could be trivial to implement. First add checks that all three underyling forecasters have \"capacity:pred_var\" or \"capacity:pred_int\", then just sum predicted intervals up.\r\n\r\n**Describe alternatives you've considered**\r\n1. Users could use wrap `STLForecaster` around `BaggingForecaster` or `NaiveVariance`. Both methods however rely on computing residuals across many windows to estimatethe forecast probablity distribution. This is likely too slow the most common use-case for `STLForecaster`: i.e. as a quick and dirty benchmark with naive forecasters underneath.\r\n2. The strategy from [R forecast library's mstl forecaster](https://github.com/robjhyndman/forecast/blob/master/R/mstl.R#L312). According to the docs from the R library[^1], the developers first take the prediction intervals given by the forecaster on the deseasonalized component (i.e. trend + residuals), then they reseasonalize the prediction intervals ***using the last year of the seasonal component***. Decided against this as it is currently non-trivial to extend `STLForecaster` to use the same strategy as `R mstl`. `STLForecaster` in sktime fits three models for seasonal, trend, and residual components.\r\n\r\nNOTE: Alternative 2. suggests that `inverse_transform` could be implemented in `STLTransformer` under similar assumptions: i.e. just repeat the most recent computed seasonality (up to some period e.g. 1 year).\r\n\r\n[^1] I confirmed this in the R implemetation. Here is the relevant code block: https://github.com/robjhyndman/forecast/blob/839062c26afe6d1ca2eb485a65b6f4e265548a88/R/mstl.R#L312\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/3437/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/3437/timeline","performed_via_github_app":null,"state_reason":null}