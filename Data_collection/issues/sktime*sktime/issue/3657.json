{"url":"https://api.github.com/repos/sktime/sktime/issues/3657","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/3657/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/3657/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/3657/events","html_url":"https://github.com/sktime/sktime/issues/3657","id":1425669480,"node_id":"I_kwDOCVKAsc5U-f1o","number":3657,"title":"[BUG] pmdarima estimators break when `X` contains more indices than the forecasting horizon","user":{"login":"d4nielmeyer","id":59086611,"node_id":"MDQ6VXNlcjU5MDg2NjEx","avatar_url":"https://avatars.githubusercontent.com/u/59086611?v=4","gravatar_id":"","url":"https://api.github.com/users/d4nielmeyer","html_url":"https://github.com/d4nielmeyer","followers_url":"https://api.github.com/users/d4nielmeyer/followers","following_url":"https://api.github.com/users/d4nielmeyer/following{/other_user}","gists_url":"https://api.github.com/users/d4nielmeyer/gists{/gist_id}","starred_url":"https://api.github.com/users/d4nielmeyer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/d4nielmeyer/subscriptions","organizations_url":"https://api.github.com/users/d4nielmeyer/orgs","repos_url":"https://api.github.com/users/d4nielmeyer/repos","events_url":"https://api.github.com/users/d4nielmeyer/events{/privacy}","received_events_url":"https://api.github.com/users/d4nielmeyer/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-10-27T13:47:46Z","updated_at":"2022-11-11T16:59:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nI have a dataset containing 1 endogenous and 5 exogenous variables and would like to do cross-validation (via ExpandingWindowSplitter) to evaluate several AutoARIMA models. In particular, my intention was to use an initial_window = 3, step_length = 1 and fh = [1, 2, 3] (as illustrated below). \r\n\r\n| * * * x x x - - - |\r\n| * * * * x x x - - |\r\n| * * * * * x x x - |\r\n| * * * * * * x x x |\r\n\r\nX (exogenous variables) is of shape (16, 5), while y (endogenous variable) is of shape (16, ). After running temporal cross-validation I get train and test indices of length 3 for the first split -> train [0, 1, 2] and test [3, 4, 5], which is what I would expect. However, within the temporal CV when I split the data into X/y-train/test I get y_train of shape (3, ), y_test (3, ), X_train (3, 5) but X_test (6, 5). Since X_test: n_rows=6 doesn't match n_periods=3 it is not accepted to be passed inside the predict-method (inside the evaluate-method). As a consequence I get the following error notification:\r\n\r\n`ValueError('X array dims (n_rows) != n_periods')`\r\n\r\n\r\n**To Reproduce**\r\n\r\nTo reproduce the error I used a simple, but similar dataset from the sktime library:\r\n\r\n\r\n```python\r\nfrom sktime.datasets import load_longley\r\nfrom sktime.forecasting.model_evaluation import evaluate\r\nfrom sktime.forecasting.model_selection import ExpandingWindowSplitter\r\nfrom sktime.forecasting.arima import AutoARIMA\r\nfrom sktime.performance_metrics.forecasting import MeanAbsoluteError\r\nimport numpy as np\r\n\r\ny, X = load_longley()\r\n\r\nforecaster = AutoARIMA()\r\ncv = ExpandingWindowSplitter(initial_window=3, step_length=1, fh=np.arange(1, 4))\r\nloss = MeanAbsoluteError()\r\n\r\nresults = evaluate(forecaster=forecaster, y=y, X=X, cv=cv, error_score='raise', scoring=loss)\r\n```\r\n\r\n**Expected behavior**\r\nI am pretty aware of the facts that: \r\n- If you fit with exogenous, you must predict with exogenous\r\n- When you are predicting with exogenous, your dimensions must match.\r\n\r\nBut to some extent I would expect that (S)ARIMAX-models were capable of handling inputs at inference time in a way like:\r\n***A)***\r\n input:\r\n  ------------------     y(t-3)\r\n  ------------------     y(t-2)\r\n  ------------------     y(t-1)\r\n x1(t)    x2(t)     x3(t)   \r\n\r\noutput:\r\n y(t) \r\n y(t+1) \r\n y(t+2) \r\n y(t+3)\r\n\r\nor ***B)***:\r\n input:\r\n x1(t-3)  x2(t-3)   x3(t-3)   y(t-3)\r\n x1(t-2)  x2(t-2)   x3(t-2)   y(t-2)\r\n x1(t-1)  x2(t-1)   x3(t-1)   y(t-1)\r\n\r\n output:\r\n y(t) \r\n y(t+1) \r\n y(t+2) \r\n y(t+3)\r\n\r\n**Versions**\r\nSystem:\r\n    python: 3.9.13 | packaged by conda-forge | (main, May 27 2022, 17:01:00)  [Clang 13.0.1 ]\r\nexecutable: /Users/dmr/miniforge3/envs/explain/bin/python\r\n   machine: macOS-12.6-arm64-arm-64bit\r\n\r\nPython dependencies:\r\n          pip: 22.3\r\n   setuptools: 65.4.1\r\n      sklearn: 1.1.2\r\n       sktime: 0.13.4\r\n  statsmodels: 0.13.2\r\n        numpy: 1.23.3\r\n        scipy: 1.8.1\r\n       pandas: 1.4.4\r\n   matplotlib: 3.6.0\r\n       joblib: 1.2.0\r\n        numba: 0.56.2\r\n     pmdarima: 1.8.5\r\n      tsfresh: 0.17.0\r\n\r\n***Thanks for any comments/ advice!***\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/3657/reactions","total_count":4,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":2},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/3657/timeline","performed_via_github_app":null,"state_reason":null}