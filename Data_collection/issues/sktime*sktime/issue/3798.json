{"url":"https://api.github.com/repos/sktime/sktime/issues/3798","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/3798/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/3798/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/3798/events","html_url":"https://github.com/sktime/sktime/issues/3798","id":1450398670,"node_id":"I_kwDOCVKAsc5Wc1PO","number":3798,"title":"[BUG] 'kneighbors' method of KNeighborsTimeSeriesClassifier results in TypingError","user":{"login":"wex52","id":23265995,"node_id":"MDQ6VXNlcjIzMjY1OTk1","avatar_url":"https://avatars.githubusercontent.com/u/23265995?v=4","gravatar_id":"","url":"https://api.github.com/users/wex52","html_url":"https://github.com/wex52","followers_url":"https://api.github.com/users/wex52/followers","following_url":"https://api.github.com/users/wex52/following{/other_user}","gists_url":"https://api.github.com/users/wex52/gists{/gist_id}","starred_url":"https://api.github.com/users/wex52/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wex52/subscriptions","organizations_url":"https://api.github.com/users/wex52/orgs","repos_url":"https://api.github.com/users/wex52/repos","events_url":"https://api.github.com/users/wex52/events{/privacy}","received_events_url":"https://api.github.com/users/wex52/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3102418261,"node_id":"MDU6TGFiZWwzMTAyNDE4MjYx","url":"https://api.github.com/repos/sktime/sktime/labels/module:classification","name":"module:classification","color":"BEB114","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-11-15T21:26:04Z","updated_at":"2022-12-18T22:34:31Z","closed_at":"2022-12-18T22:34:31Z","author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\nAfter a KNeighborsTimeSeriesClassifier has been successfully fit and successfully used to classify toy data, an attempt to use the 'kneighbors' method fails due to a TypingError. The method should return the indices of and distances to the neighbors of each point. \r\n\r\n**To Reproduce**\r\n```python\r\nfrom sktime.classification.distance_based import KNeighborsTimeSeriesClassifier\r\nfrom sktime.datatypes import convert_to\r\n\r\nXtrain = convert_to(pd.DataFrame(data = {\r\n    'sensor_a': [pd.Series([1,1,1]), pd.Series([2,2,2]), pd.Series([3,3,3])],\r\n    'sensor_b': [pd.Series([4,4,4]), pd.Series([5,5,5]), pd.Series([6,6,6])],\r\n    'sensor_c': [pd.Series([7,7,7]), pd.Series([8,8,8]), pd.Series([9,9,9])],\r\n}), 'pd-multiindex')\r\nytrain = pd.Series(['label_1','label_2','label_3'])\r\n\r\nkntsc = KNeighborsTimeSeriesClassifier(n_neighbors = 1)\r\nkntsc.fit(Xtrain, ytrain)\r\n\r\nXtest = convert_to(pd.DataFrame({\r\n    'sensor_a': [pd.Series([2.1,2,2]), pd.Series([1.1,1,1]), pd.Series([3.1,3,3])],\r\n    'sensor_b': [pd.Series([5.1,5,5]), pd.Series([4.1,4,4]), pd.Series([6.1,6,6])],\r\n    'sensor_c': [pd.Series([8.1,8,8]), pd.Series([7.1,7,7]), pd.Series([9.1,9,9])]\r\n}), 'pd-multiindex')\r\n\r\ndisplay(kntsc.predict(Xtest))\r\n\r\nprint(kntsc.kneighbors(Xtest))\r\n```\r\n\r\n**Expected behavior**\r\nThe final line should print the indices of and distances to the neighbors of each point. \r\n\r\n**Additional context**\r\nThe 'fit' and 'predict' function correctly. The 'kneighbors' method returns the equivalent of an intermediate step of the 'predict' method.\r\n\r\nThe code provided has data in the 'pd-multiindex' mtype. The original code was written for data in 'nested_univ' mtype, and removing the 'convert_to' will demonstrate that the 'kneighbors' method doesn't work for 'nested_univ' mtype either.\r\n\r\nI had used the 'kneighbors' method of sklearn.neighbors.KNeighborsClassifier in the code that I have been refactoring to use with sktime. The panel data format in my previous code was my own inefficient design and the code I wrote to handle it with sklearn pipelines is too lengthy and convoluted to provide here. However, sktime's KNeighborsTimeSeriesClassifier is described in the DocString as \"An adapted version of the scikit-learn KNeighborsClassifier for time series data,\" so it should function the same way. \r\n\r\nThis is the call stack trace: (also, each time the Jupyter notebook cell is executed, the last two lines are repeated an additional time)\r\n```python\r\n---------------------------------------------------------------------------\r\nTypingError                               Traceback (most recent call last)\r\nCell In [43], line 31\r\n     23 Xtest = convert_to(pd.DataFrame({\r\n     24     'sensor_a': [pd.Series([2.1,2,2]), pd.Series([1.1,1,1]), pd.Series([3.1,3,3])],\r\n     25     'sensor_b': [pd.Series([5.1,5,5]), pd.Series([4.1,4,4]), pd.Series([6.1,6,6])],\r\n     26     'sensor_c': [pd.Series([8.1,8,8]), pd.Series([7.1,7,7]), pd.Series([9.1,9,9])]\r\n     27 }), 'pd-multiindex')\r\n     29 display(kntsc.predict(Xtest))\r\n---> 31 kntsc.kneighbors(Xtest)\r\n\r\nFile ~\\Anaconda3\\envs\\capstone_20221111\\lib\\site-packages\\sktime\\classification\\distance_based\\_time_series_neighbors.py:267, in KNeighborsTimeSeriesClassifier.kneighbors(self, X, n_neighbors, return_distance)\r\n    264 self.check_is_fitted()\r\n    266 # self._X should be the stored _X\r\n--> 267 dist_mat = self._distance(X, self._X)\r\n    269 result = self.knn_estimator_.kneighbors(\r\n    270     dist_mat, n_neighbors=n_neighbors, return_distance=return_distance\r\n    271 )\r\n    273 # result is either dist, or (dist, ind) pair, depending on return_distance\r\n\r\nFile ~\\Anaconda3\\envs\\capstone_20221111\\lib\\site-packages\\sktime\\classification\\distance_based\\_time_series_neighbors.py:199, in KNeighborsTimeSeriesClassifier._distance(self, X, X2)\r\n    196     distance_params = {}\r\n    198 if isinstance(distance, str):\r\n--> 199     return pairwise_distance(X, X2, distance, **distance_params)\r\n    200 else:\r\n    201     if X2 is not None:\r\n\r\nFile ~\\Anaconda3\\envs\\capstone_20221111\\lib\\site-packages\\sktime\\distances\\_distance.py:2050, in pairwise_distance(x, y, metric, **kwargs)\r\n   1960 def pairwise_distance(\r\n   1961     x: np.ndarray,\r\n   1962     y: np.ndarray = None,\r\n   (...)\r\n   1971     **kwargs: Any,\r\n   1972 ) -> np.ndarray:\r\n   1973     \"\"\"Compute the pairwise distance matrix between two time series.\r\n   1974 \r\n   1975     First the distance metric is 'resolved'. This means the metric that is passed\r\n   (...)\r\n   2048            [ 58., 256.]])\r\n   2049     \"\"\"\r\n-> 2050     _x = _make_3d_series(x)\r\n   2051     if y is None:\r\n   2052         y = x\r\n\r\nFile ~\\Anaconda3\\envs\\capstone_20221111\\lib\\site-packages\\numba\\core\\dispatcher.py:468, in _DispatcherBase._compile_for_args(self, *args, **kws)\r\n    464         msg = (f\"{str(e).rstrip()} \\n\\nThis error may have been caused \"\r\n    465                f\"by the following argument(s):\\n{args_str}\\n\")\r\n    466         e.patch_message(msg)\r\n--> 468     error_rewrite(e, 'typing')\r\n    469 except errors.UnsupportedError as e:\r\n    470     # Something unsupported is present in the user code, add help info\r\n    471     error_rewrite(e, 'unsupported_error')\r\n\r\nFile ~\\Anaconda3\\envs\\capstone_20221111\\lib\\site-packages\\numba\\core\\dispatcher.py:409, in _DispatcherBase._compile_for_args.<locals>.error_rewrite(e, issue_type)\r\n    407     raise e\r\n    408 else:\r\n--> 409     raise e.with_traceback(None)\r\n\r\nTypingError: Failed in nopython mode pipeline (step: nopython frontend)\r\nnon-precise type pyobject\r\nDuring: typing of argument at C:\\Users\\wechs\\Anaconda3\\envs\\capstone_20221111\\lib\\site-packages\\sktime\\distances\\_numba_utils.py (34)\r\n\r\nFile \"..\\..\\..\\..\\Anaconda3\\envs\\capstone_20221111\\lib\\site-packages\\sktime\\distances\\_numba_utils.py\", line 34:\r\ndef _make_3d_series(x: np.ndarray) -> np.ndarray:\r\n    <source elided>\r\n    \"\"\"\r\n    num_dims = x.ndim\r\n    ^ \r\n\r\nThis error may have been caused by the following argument(s):\r\n- argument 0: Cannot determine Numba type of <class 'pandas.core.frame.DataFrame'> \r\n```\r\n\r\n**Versions**\r\nSystem:\r\n    python: 3.9.13 | packaged by conda-forge | (main, May 27 2022, 16:51:29) [MSC v.1929 64 bit (AMD64)]\r\nexecutable: C:\\Users\\wechs\\Anaconda3\\envs\\capstone_20221111\\python.exe\r\n   machine: Windows-10-10.0.19044-SP0\r\n\r\nPython dependencies:\r\n          pip: 22.3.1\r\n   setuptools: 65.5.1\r\n      sklearn: 1.1.3\r\n       sktime: 0.14.0\r\n  statsmodels: 0.13.5\r\n        numpy: 1.23.3\r\n        scipy: 1.9.3\r\n       pandas: 1.4.4\r\n   matplotlib: 3.5.3\r\n       joblib: 1.2.0\r\n        numba: 0.56.3\r\n     pmdarima: 2.0.1\r\n      tsfresh: 0.19.0\r\n\r\n<!-- Thanks for contributing! -->\r\n","closed_by":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/3798/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/3798/timeline","performed_via_github_app":null,"state_reason":"completed"}