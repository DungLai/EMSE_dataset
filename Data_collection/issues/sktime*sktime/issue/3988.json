{"url":"https://api.github.com/repos/sktime/sktime/issues/3988","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/3988/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/3988/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/3988/events","html_url":"https://github.com/sktime/sktime/issues/3988","id":1509314381,"node_id":"I_kwDOCVKAsc5Z9k9N","number":3988,"title":"[ENH] dealing with permuted columns between `fit` and `predict` - design & how","user":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"labels":[{"id":1180363817,"node_id":"MDU6TGFiZWwxMTgwMzYzODE3","url":"https://api.github.com/repos/sktime/sktime/labels/API%20design","name":"API design","color":"874db7","default":false,"description":"API design & software architecture"},{"id":1180366006,"node_id":"MDU6TGFiZWwxMTgwMzY2MDA2","url":"https://api.github.com/repos/sktime/sktime/labels/implementing%20framework","name":"implementing framework","color":"61c7f9","default":false,"description":"Implementing frameworks for new learning tasks"},{"id":3102332684,"node_id":"MDU6TGFiZWwzMTAyMzMyNjg0","url":"https://api.github.com/repos/sktime/sktime/labels/module:clustering","name":"module:clustering","color":"8C1AAB","default":false,"description":""},{"id":3102418261,"node_id":"MDU6TGFiZWwzMTAyNDE4MjYx","url":"https://api.github.com/repos/sktime/sktime/labels/module:classification","name":"module:classification","color":"BEB114","default":false,"description":""},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""},{"id":3471101012,"node_id":"LA_kwDOCVKAsc7O5MxU","url":"https://api.github.com/repos/sktime/sktime/labels/module:regression","name":"module:regression","color":"943567","default":false,"description":""},{"id":3796180314,"node_id":"LA_kwDOCVKAsc7iRR1a","url":"https://api.github.com/repos/sktime/sktime/labels/enhancement","name":"enhancement","color":"fef2c0","default":true,"description":"Adding new functionality"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-12-23T12:48:40Z","updated_at":"2022-12-23T12:53:13Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"Currently, the various `sktime` base classes do not deal directly with a case where (variable) columns of data frames seen in `predict` are permutations of those seen in `fit`. It is left to individual estimators to deal (or not deal) with this case, which can lead to hard to find silent bugs such as the one in https://github.com/sktime/sktime/issues/3986.\r\n\r\nExamples where this could occur: exogeneous data `X` in forecasting; feature columns in `X` in classification, regression, clustering.\r\nObviously, we can mitigate the issue *only* if the mtype comes with a column index, i.e., is `pandas` based or a column indexed type (e.g., `dask`, `xarray`).\r\n\r\nQuestions:\r\n* should we add functionality in the base class for this?\r\n* or, instead, should we add a test?\r\n* if we add functionality in the base class, it seems it would be mtype specific, as we can do this only for the column indexed mtypes. Would that require dispatch functionality for all the mtypes? Seems hairy.\r\n* If we add a test, what would the test look like? Would it live in the estimator contract test suite?","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/3988/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/3988/timeline","performed_via_github_app":null,"state_reason":null}