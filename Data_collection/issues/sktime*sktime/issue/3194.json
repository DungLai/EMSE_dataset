{"url":"https://api.github.com/repos/sktime/sktime/issues/3194","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/3194/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/3194/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/3194/events","html_url":"https://github.com/sktime/sktime/issues/3194","id":1330266977,"node_id":"I_kwDOCVKAsc5PSkNh","number":3194,"title":"[BUG] ARIMA and AutoARIMA not working within ConformalIntervals","user":{"login":"mateocomba123","id":72084989,"node_id":"MDQ6VXNlcjcyMDg0OTg5","avatar_url":"https://avatars.githubusercontent.com/u/72084989?v=4","gravatar_id":"","url":"https://api.github.com/users/mateocomba123","html_url":"https://github.com/mateocomba123","followers_url":"https://api.github.com/users/mateocomba123/followers","following_url":"https://api.github.com/users/mateocomba123/following{/other_user}","gists_url":"https://api.github.com/users/mateocomba123/gists{/gist_id}","starred_url":"https://api.github.com/users/mateocomba123/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mateocomba123/subscriptions","organizations_url":"https://api.github.com/users/mateocomba123/orgs","repos_url":"https://api.github.com/users/mateocomba123/repos","events_url":"https://api.github.com/users/mateocomba123/events{/privacy}","received_events_url":"https://api.github.com/users/mateocomba123/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-08-05T18:41:21Z","updated_at":"2022-10-04T22:06:12Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When I try to generate predict intervals with ConformalIntervals it gives an error.\r\nYou would say I'd directly use the predict_interavals method, but in my case the idea is to obtain the intervals from a Time Series Ensemble model. And when I pass that ensemble to the ConformalIntervals, and the enemble contains ARIMA or AutoArima model, it fails.\r\nAny idea to get prediction intervals for an ensemble model?\r\n\r\n<img width=\"553\" alt=\"image\" src=\"https://user-images.githubusercontent.com/72084989/183140746-d227918a-0139-402b-8c69-58558a4b04cf.png\">\r\n\r\nError:\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\nInput In [25], in <cell line: 7>()\r\n      5 forecaster = ARIMA()\r\n      6 conformal_forecaster = ConformalIntervals(forecaster)\r\n----> 7 conformal_forecaster.fit(y, fh=[1,2,3])\r\n      8 pred_int = conformal_forecaster.predict_interval()\r\n\r\nFile ~\\.conda\\envs\\sktime_arima\\lib\\site-packages\\sktime\\forecasting\\base\\_base.py:270, in BaseForecaster.fit(self, y, X, fh)\r\n    268 # we call the ordinary _fit if no looping/vectorization needed\r\n    269 if not vectorization_needed:\r\n--> 270     self._fit(y=y_inner, X=X_inner, fh=fh)\r\n    271 else:\r\n    272     # otherwise we call the vectorized version of fit\r\n    273     self._vectorize(\"fit\", y=y_inner, X=X_inner, fh=fh)\r\n\r\nFile ~\\.conda\\envs\\sktime_arima\\lib\\site-packages\\sktime\\forecasting\\conformal.py:140, in ConformalIntervals._fit(self, y, X, fh)\r\n    137 self.forecaster_.fit(y=y, X=X, fh=fh)\r\n    139 if self.fh_early_:\r\n--> 140     self.residuals_matrix_ = self._compute_sliding_residuals(\r\n    141         y=y,\r\n    142         X=X,\r\n    143         forecaster=self.forecaster,\r\n    144         initial_window=self.initial_window,\r\n    145         sample_frac=self.sample_frac,\r\n    146     )\r\n    148 return self\r\n\r\nFile ~\\.conda\\envs\\sktime_arima\\lib\\site-packages\\sktime\\forecasting\\conformal.py:290, in ConformalIntervals._compute_sliding_residuals(self, y, X, forecaster, initial_window, sample_frac)\r\n    287 X_test = get_slice(X, start=id, end=None)\r\n    289 try:\r\n--> 290     forecaster.fit(y_train, X=X_train, fh=y_test.index)\r\n    291 except ValueError:\r\n    292     warn(\r\n    293         f\"Couldn't fit the model on \"\r\n    294         f\"time series window length {len(y_train)}.\\n\"\r\n    295     )\r\n\r\nFile ~\\.conda\\envs\\sktime_arima\\lib\\site-packages\\sktime\\forecasting\\base\\_base.py:270, in BaseForecaster.fit(self, y, X, fh)\r\n    268 # we call the ordinary _fit if no looping/vectorization needed\r\n    269 if not vectorization_needed:\r\n--> 270     self._fit(y=y_inner, X=X_inner, fh=fh)\r\n    271 else:\r\n    272     # otherwise we call the vectorized version of fit\r\n    273     self._vectorize(\"fit\", y=y_inner, X=X_inner, fh=fh)\r\n\r\nFile ~\\.conda\\envs\\sktime_arima\\lib\\site-packages\\sktime\\forecasting\\base\\adapters\\_pmdarima.py:52, in _PmdArimaAdapter._fit(self, y, X, fh)\r\n     50     X = X.loc[y.index]\r\n     51 self._forecaster = self._instantiate_model()\r\n---> 52 self._forecaster.fit(y, X=X)\r\n     53 return self\r\n\r\nFile ~\\.conda\\envs\\sktime_arima\\lib\\site-packages\\pmdarima\\arima\\arima.py:597, in ARIMA.fit(self, y, X, **fit_args)\r\n    594         X = safe_indexing(X, slice(0, n_exog - cv))\r\n    596 # Internal call\r\n--> 597 self._fit(y, X, **fit_args)\r\n    599 # now make a forecast if we're validating to compute the\r\n    600 # out-of-sample score\r\n    601 if cv_samples is not None:\r\n    602     # get the predictions (use self.predict, which calls forecast\r\n    603     # from statsmodels internally)\r\n\r\nFile ~\\.conda\\envs\\sktime_arima\\lib\\site-packages\\pmdarima\\arima\\arima.py:520, in ARIMA._fit(self, y, X, **fit_args)\r\n    518         fit, self.arima_res_ = _fit_wrapper()\r\n    519 else:\r\n--> 520     fit, self.arima_res_ = _fit_wrapper()\r\n    522 # Set df_model attribute for SARIMAXResults object\r\n    523 sm_compat.bind_df_model(fit, self.arima_res_)\r\n\r\nFile ~\\.conda\\envs\\sktime_arima\\lib\\site-packages\\pmdarima\\arima\\arima.py:508, in ARIMA._fit.<locals>._fit_wrapper()\r\n    504 # kwargs that might be in fit args, but if not we override the\r\n    505 # defaults\r\n    506 disp = fit_args.pop(\"disp\", 0)\r\n--> 508 return arima, arima.fit(start_params=start_params,\r\n    509                         method=method,\r\n    510                         maxiter=_maxiter,\r\n    511                         disp=disp,\r\n    512                         **fit_args)\r\n\r\nFile ~\\.conda\\envs\\sktime_arima\\lib\\site-packages\\statsmodels\\tsa\\statespace\\mlemodel.py:650, in MLEModel.fit(self, start_params, transformed, includes_fixed, cov_type, cov_kwds, method, maxiter, full_output, disp, callback, return_params, optim_score, optim_complex_step, optim_hessian, flags, low_memory, **kwargs)\r\n    530 \"\"\"\r\n    531 Fits the model by maximum likelihood via Kalman filter.\r\n    532 \r\n   (...)\r\n    647 statsmodels.tsa.statespace.structural.UnobservedComponentsResults\r\n    648 \"\"\"\r\n    649 if start_params is None:\r\n--> 650     start_params = self.start_params\r\n    651     transformed = True\r\n    652     includes_fixed = True\r\n\r\nFile ~\\.conda\\envs\\sktime_arima\\lib\\site-packages\\statsmodels\\tsa\\statespace\\sarimax.py:953, in SARIMAX.start_params(self)\r\n    949     params_exog = []\r\n    951 # Non-seasonal ARMA component and trend\r\n    952 (params_trend, params_ar, params_ma,\r\n--> 953  params_variance) = self._conditional_sum_squares(\r\n    954     endog, self.k_ar, self.polynomial_ar, self.k_ma,\r\n    955     self.polynomial_ma, self._k_trend, trend_data,\r\n    956     warning_description='ARMA and trend')\r\n    958 # If we have estimated non-stationary start parameters but enforce\r\n    959 # stationarity is on, start with 0 parameters and warn\r\n    960 invalid_ar = (\r\n    961     self.k_ar > 0 and\r\n    962     self.enforce_stationarity and\r\n    963     not is_invertible(np.r_[1, -params_ar])\r\n    964 )\r\n\r\nFile ~\\.conda\\envs\\sktime_arima\\lib\\site-packages\\statsmodels\\tsa\\statespace\\sarimax.py:843, in SARIMAX._conditional_sum_squares(endog, k_ar, polynomial_ar, k_ma, polynomial_ma, k_trend, trend_data, warning_description)\r\n    839     residuals = Y - np.dot(X, params_ar)\r\n    841 # Run an ARMA(p,q) model using the just computed residuals as\r\n    842 # data\r\n--> 843 Y = endog[r:]\r\n    845 X = np.empty((Y.shape[0], 0))\r\n    846 if k_trend > 0:\r\n\r\nIndexError: too many indices for array: array is 0-dimensional, but 1 were indexed\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/3194/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/3194/timeline","performed_via_github_app":null,"state_reason":null}