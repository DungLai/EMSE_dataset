{"url":"https://api.github.com/repos/sktime/sktime/issues/141","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/141/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/141/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/141/events","html_url":"https://github.com/sktime/sktime/issues/141","id":489343456,"node_id":"MDU6SXNzdWU0ODkzNDM0NTY=","number":141,"title":"Benchmarking design & implementation ","user":{"login":"mloning","id":21020482,"node_id":"MDQ6VXNlcjIxMDIwNDgy","avatar_url":"https://avatars.githubusercontent.com/u/21020482?v=4","gravatar_id":"","url":"https://api.github.com/users/mloning","html_url":"https://github.com/mloning","followers_url":"https://api.github.com/users/mloning/followers","following_url":"https://api.github.com/users/mloning/following{/other_user}","gists_url":"https://api.github.com/users/mloning/gists{/gist_id}","starred_url":"https://api.github.com/users/mloning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mloning/subscriptions","organizations_url":"https://api.github.com/users/mloning/orgs","repos_url":"https://api.github.com/users/mloning/repos","events_url":"https://api.github.com/users/mloning/events{/privacy}","received_events_url":"https://api.github.com/users/mloning/received_events","type":"User","site_admin":false},"labels":[{"id":1180363817,"node_id":"MDU6TGFiZWwxMTgwMzYzODE3","url":"https://api.github.com/repos/sktime/sktime/labels/API%20design","name":"API design","color":"874db7","default":false,"description":"API design & software architecture"},{"id":1180366006,"node_id":"MDU6TGFiZWwxMTgwMzY2MDA2","url":"https://api.github.com/repos/sktime/sktime/labels/implementing%20framework","name":"implementing framework","color":"61c7f9","default":false,"description":"Implementing frameworks for new learning tasks"}],"state":"open","locked":false,"assignee":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"assignees":[{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},{"login":"mloning","id":21020482,"node_id":"MDQ6VXNlcjIxMDIwNDgy","avatar_url":"https://avatars.githubusercontent.com/u/21020482?v=4","gravatar_id":"","url":"https://api.github.com/users/mloning","html_url":"https://github.com/mloning","followers_url":"https://api.github.com/users/mloning/followers","following_url":"https://api.github.com/users/mloning/following{/other_user}","gists_url":"https://api.github.com/users/mloning/gists{/gist_id}","starred_url":"https://api.github.com/users/mloning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mloning/subscriptions","organizations_url":"https://api.github.com/users/mloning/orgs","repos_url":"https://api.github.com/users/mloning/repos","events_url":"https://api.github.com/users/mloning/events{/privacy}","received_events_url":"https://api.github.com/users/mloning/received_events","type":"User","site_admin":false},{"login":"ViktorKaz","id":33499138,"node_id":"MDQ6VXNlcjMzNDk5MTM4","avatar_url":"https://avatars.githubusercontent.com/u/33499138?v=4","gravatar_id":"","url":"https://api.github.com/users/ViktorKaz","html_url":"https://github.com/ViktorKaz","followers_url":"https://api.github.com/users/ViktorKaz/followers","following_url":"https://api.github.com/users/ViktorKaz/following{/other_user}","gists_url":"https://api.github.com/users/ViktorKaz/gists{/gist_id}","starred_url":"https://api.github.com/users/ViktorKaz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ViktorKaz/subscriptions","organizations_url":"https://api.github.com/users/ViktorKaz/orgs","repos_url":"https://api.github.com/users/ViktorKaz/repos","events_url":"https://api.github.com/users/ViktorKaz/events{/privacy}","received_events_url":"https://api.github.com/users/ViktorKaz/received_events","type":"User","site_admin":false}],"milestone":null,"comments":17,"created_at":"2019-09-04T19:12:28Z","updated_at":"2021-07-05T11:50:40Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"## Evaluation \r\n- [ ]  Extend evaluation API and functionality to single dataset case, currently only multiple dataset case is supported\r\n\r\n## Performance metrics \r\nA few implementation notes:\r\n   - Vectorised vs iterative computations\r\n   - Callable classes vs classes with methods for computation\r\n   - Use of jackknife by default for non point-wise metrics\r\n   - Computation of standard error as decorator/mix-in\r\n   - Have separate classes for point-wise metrics which can be wrapped by aggregation functions (e.g. mean)\r\n\r\nAlso see https://github.com/JuliaML/LossFunctions.jl.\r\n\r\n## Orchestration\r\n### Should have\r\n- [ ] Allow orchestrator to be persisted to replicate benchmarking studies\r\n- [ ] add unit tests for `evaluator` methods\r\n- [ ] update all methods on evaluator to work on new internal data representation, also see  https://www.statsmodels.org/stable/stats.html for some additional test implementations, e.g. the sign test, to improve readability, so that we can deprecate `_get_metrics_per_estimator_dataset` and `_get_metrics_per_estimator` methods\r\n- [ ] for saving results inside the `orchestrator` and for loading results in results classes use `_ResultsWrapper` to simply/unify interface, `_ResultsWrapper` needs to have slots for at least: y_true, y_pred, y_proba, index, fit_time, predict_time, strategy_name, dataset_name, cv_fold, train_or_test\r\n- [ ]  No timing of fit and predict available, see https://docs.python.org/3/library/time.html#time.perf_counter, potentially have new `save_timings` and `load_timings` method\r\n- [ ] `orchestrator` cannot make probabilistic predictions, orchestrator tries to make probabilistic predictions using `predict_proba`, but (i) this will only works for some but not all classifiers and it won't work in regression, (ii) strategies currently don't even have a `predict_proba` (not even `TSCStrategy`), and (iii) current computation of `y_proba` fails if `y_pred` contains strings instead of integers which however is an accepted output format for classification I believe, add `predict_proba` to `TSCStrategy`\r\n- [ ] handling of probabilistic metrics in `evaluator`\r\n- [ ] no longer sure that saving results object as a master file is a good idea, as it may cause problems when multiple processes try to update it and because it needs to reflect the state of the directory somehow, maybe better to have a method on results object that allow to infer datasets, strategies and so on, something like a `register_results` method, instead of loading a fully specified dumped result object \r\n- [ ] separate `predict` method on `orchestrator` which loads and uses already fitted strategies\r\n- [ ] fix UEA results class  \r\n\r\n### Could have\r\n- [ ] allow for pre-defined cv splits in files\r\n- [ ] allow for pre-defined tasks in files \r\n- [ ] add `random_state` as input arg to orchestrator which is propagated to all strategies and cv \r\n- [ ]  perhaps also useful to catch exceptions and skip over them in `orchestrator` instead of breaking execution?\r\n- [ ]  currently only works for ts data input format, add other use cases\r\n- [ ]  better user feedback, logging, keeping track of progress \r\n- [ ] many docstrings still missing or outdated\r\n- [ ] perhaps metrics shouldn't be wrapped in classes and the evaluator should take care of it internally, working with kwargs (e.g. `pointwise=True`)\r\n- [ ] handling of multiple metrics in `evaluator`\r\n- [ ] functionality for space filling parameter grids for large hyper-parameter search spaces (e.g. latin hypercube design), see this Python package: https://github.com/tirthajyoti/doepy\r\n- [ ] monitoring and comparison of memory usage of different estimators \r\n\r\nRelated issues/PRs: #132 ","closed_by":{"login":"mloning","id":21020482,"node_id":"MDQ6VXNlcjIxMDIwNDgy","avatar_url":"https://avatars.githubusercontent.com/u/21020482?v=4","gravatar_id":"","url":"https://api.github.com/users/mloning","html_url":"https://github.com/mloning","followers_url":"https://api.github.com/users/mloning/followers","following_url":"https://api.github.com/users/mloning/following{/other_user}","gists_url":"https://api.github.com/users/mloning/gists{/gist_id}","starred_url":"https://api.github.com/users/mloning/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mloning/subscriptions","organizations_url":"https://api.github.com/users/mloning/orgs","repos_url":"https://api.github.com/users/mloning/repos","events_url":"https://api.github.com/users/mloning/events{/privacy}","received_events_url":"https://api.github.com/users/mloning/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/141/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/141/timeline","performed_via_github_app":null,"state_reason":null}