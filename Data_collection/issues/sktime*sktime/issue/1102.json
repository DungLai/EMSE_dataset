{"url":"https://api.github.com/repos/sktime/sktime/issues/1102","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/1102/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/1102/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/1102/events","html_url":"https://github.com/sktime/sktime/issues/1102","id":936308449,"node_id":"MDU6SXNzdWU5MzYzMDg0NDk=","number":1102,"title":"pycaret object oriented interface and contraction","user":{"login":"fkiraly","id":7985502,"node_id":"MDQ6VXNlcjc5ODU1MDI=","avatar_url":"https://avatars.githubusercontent.com/u/7985502?v=4","gravatar_id":"","url":"https://api.github.com/users/fkiraly","html_url":"https://github.com/fkiraly","followers_url":"https://api.github.com/users/fkiraly/followers","following_url":"https://api.github.com/users/fkiraly/following{/other_user}","gists_url":"https://api.github.com/users/fkiraly/gists{/gist_id}","starred_url":"https://api.github.com/users/fkiraly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fkiraly/subscriptions","organizations_url":"https://api.github.com/users/fkiraly/orgs","repos_url":"https://api.github.com/users/fkiraly/repos","events_url":"https://api.github.com/users/fkiraly/events{/privacy}","received_events_url":"https://api.github.com/users/fkiraly/received_events","type":"User","site_admin":false},"labels":[{"id":1118163264,"node_id":"MDU6TGFiZWwxMTE4MTYzMjY0","url":"https://api.github.com/repos/sktime/sktime/labels/feature%20request","name":"feature request","color":"38d191","default":false,"description":"New feature or request"},{"id":1180363817,"node_id":"MDU6TGFiZWwxMTgwMzYzODE3","url":"https://api.github.com/repos/sktime/sktime/labels/API%20design","name":"API design","color":"874db7","default":false,"description":"API design & software architecture"},{"id":1180366006,"node_id":"MDU6TGFiZWwxMTgwMzY2MDA2","url":"https://api.github.com/repos/sktime/sktime/labels/implementing%20framework","name":"implementing framework","color":"61c7f9","default":false,"description":"Implementing frameworks for new learning tasks"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-07-03T18:48:28Z","updated_at":"2021-07-05T17:57:12Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"@ngupta23, after playing around with `pycaret` a bit, I would suggest we adopt an object oriented interface between the two packages. Let me know what you think.\r\n\r\nCurrently, `pycaret` can use `sktime` estimators, but what would be really great if:\r\n\r\n* it can export fitted and \"blueprint\" estimators after the \"easy user workflow\" is run\r\n* it can reference \"stock\" estimators like detrend/deseaslonalize/something which is currently used as a list of defaults\r\n\r\nWhat I would find useful here is work on two things:\r\n\r\n- [ ] the described export functionality\r\n- [ ] a \"contraction\" operation: this is a function `contraction` where you pass a composite estimator, e.g., `Pipeline((\"step1\", Deseasonalize(sp=12)), (\"step2\", ARIMA(p=4, d=3, q=2)))`. The output is a class which behaves like an `sktime` forecaster (or estimator of the same type). Paramters of the contracted composite are mapped onto parameters of the class. In `contract` you can choose which parameters are visible/exposed, and which are not. Defaults are set to the settings of the argument.\r\n\r\nFor instance,\r\n```python\r\ncontraction(\r\n    Pipeline((\"step1\", Deseasonalize(sp=12)), (\"step2\", ARIMA(p=4, d=3, q=2))),\r\n    param_expose = [\"step2__p\", \"step2__d\"]\r\n    )\r\n```\r\n\r\nwould give an estimator class which has parameters `sp` and `q`, their defaults being `12` and `2`. The parameters `p` and `d` are not visible in that class, but the internal behaviour has these set to `4` and `3`.\r\n \r\nThis way, you can define your `pycaret` default forecasters as shorthands `PycaretForecaster1`, `PycaretForecaster2` or whatever you like, and plugging them as defaults into the workflow should be much more convenient.\r\n\r\nWith the `sktime` machinery, we can also easily adopt this for `scikit-learn` native estimators, so it would not just be restricted to forecasting.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/1102/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/1102/timeline","performed_via_github_app":null,"state_reason":null}