{"url":"https://api.github.com/repos/sktime/sktime/issues/2598","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/2598/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/2598/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/2598/events","html_url":"https://github.com/sktime/sktime/issues/2598","id":1222223452,"node_id":"I_kwDOCVKAsc5I2aZc","number":2598,"title":"[BUG] Cross validation does not work with discontinuous FH when exogenous variables are present","user":{"login":"ngupta23","id":33585645,"node_id":"MDQ6VXNlcjMzNTg1NjQ1","avatar_url":"https://avatars.githubusercontent.com/u/33585645?v=4","gravatar_id":"","url":"https://api.github.com/users/ngupta23","html_url":"https://github.com/ngupta23","followers_url":"https://api.github.com/users/ngupta23/followers","following_url":"https://api.github.com/users/ngupta23/following{/other_user}","gists_url":"https://api.github.com/users/ngupta23/gists{/gist_id}","starred_url":"https://api.github.com/users/ngupta23/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ngupta23/subscriptions","organizations_url":"https://api.github.com/users/ngupta23/orgs","repos_url":"https://api.github.com/users/ngupta23/repos","events_url":"https://api.github.com/users/ngupta23/events{/privacy}","received_events_url":"https://api.github.com/users/ngupta23/received_events","type":"User","site_admin":false},"labels":[{"id":1118163262,"node_id":"MDU6TGFiZWwxMTE4MTYzMjYy","url":"https://api.github.com/repos/sktime/sktime/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""},{"id":3789332481,"node_id":"LA_kwDOCVKAsc7h3KAB","url":"https://api.github.com/repos/sktime/sktime/labels/bugfix","name":"bugfix","color":"CE54AC","default":false,"description":"Fixes a known bug or removes unintended behavior"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2022-05-01T17:15:30Z","updated_at":"2022-09-16T02:23:59Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Describe the bug**\r\nCross validation works with discontinuous forecast horizon when exogenous variables are **not** present, but does not work when exogenous variables are present.\r\n\r\n**To Reproduce**\r\n\r\nFull code can be found in this [github gist](https://gist.github.com/ngupta23/030185cb86e990e9037ff72cde5490cb). \r\n\r\n```python\r\nfrom sktime.datasets import load_uschange\r\nfrom sktime.forecasting.arima import ARIMA\r\nfrom sktime.forecasting.model_selection import SlidingWindowSplitter\r\n\r\ny, X = load_uschange()\r\n\r\nforecaster = ARIMA(\r\n    order=(1, 1, 0),\r\n    seasonal_order=(0, 1, 0, 2),\r\n    suppress_warnings=True\r\n)\r\n\r\nFH = [2, 3]\r\ncv = SlidingWindowSplitter(fh=FH)\r\n\r\nfor i, split in enumerate(cv.split(y)):\r\n    if i == 0:\r\n        print(f\"CV FH: {cv.fh}\")\r\n        print(f\"Split Obtained: {split}\")\r\n        test_split = split[1]\r\n        test_split_fixed = [min(test_split) - 1]\r\n        test_split_fixed.extend(test_split)\r\n\r\n        train_split = split[0]\r\n\r\n        print(\"\\n\")    \r\n        print(f\"Train Split: {train_split}\")\r\n        print(f\"Test Split from sktime (does not work): {test_split}\")\r\n        print(f\"Test Split Fixed: {test_split_fixed}\")\r\n\r\n        #### This does not work ----\r\n        print(\"\\nWith current sktime functionality\")       \r\n        try:\r\n            forecaster.fit(y.iloc[train_split], X=X.iloc[train_split], fh=FH)\r\n            \r\n            X_test = X.iloc[test_split]\r\n            print(f\"X_test:\\n {X_test}\")\r\n            y_pred = forecaster.predict(X=X_test)\r\n            print(f\"\\nPredictions (current sktime):\\n{y_pred}\")\r\n        except ValueError as error:\r\n            print(\"sktime errored out\")\r\n            print(error)\r\n\r\n        #### This works ----\r\n        print(\"\\nWith fixed sktime functionality\")\r\n        try:\r\n            forecaster.fit(y.iloc[train_split], X=X.iloc[train_split], fh=FH)\r\n            \r\n            X_test = X.iloc[test_split_fixed]\r\n            print(f\"X_test:\\n {X_test}\")\r\n            y_pred = forecaster.predict(X=X_test)\r\n            print(f\"\\nPredictions (fixed):\\n{y_pred}\")\r\n        except Exception as error:\r\n            print(\"Fix failed\")\r\n            print(error)\r\n```\r\n\r\n```python-traceback\r\nCV FH: [2, 3]\r\nSplit Obtained: (array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([11, 12]))\r\n\r\n\r\nTrain Split: [0 1 2 3 4 5 6 7 8 9]\r\nTest Split from sktime (does not work): [11 12]\r\nTest Split Fixed: [10, 11, 12]\r\n\r\nWith current sktime functionality\r\nX_test:\r\n       Income  Production    Savings  Unemployment\r\n11  3.890259    3.436892  16.044717          -0.3\r\n12  0.708253    2.799076  -5.348868          -0.3\r\nsktime errored out\r\nX array dims (n_rows) != n_periods\r\n\r\nWith fixed sktime functionality\r\nX_test:\r\n       Income  Production    Savings  Unemployment\r\n10  1.904101    1.273353   5.809959          -0.2\r\n11  3.890259    3.436892  16.044717          -0.3\r\n12  0.708253    2.799076  -5.348868          -0.3\r\n\r\nPredictions (fixed):\r\n11    1.852449\r\n12    1.476880\r\ndtype: float64\r\n```\r\n\r\n**Expected behavior**\r\n\r\nCross-Validation should work for discontinuous forecast horizon when exogenous variables are present. A fix is proposed above (basically `splits()` should return the test indices for all future values including gaps in the Forecast Horizon).\r\n\r\nOne thing to note would be to have another method that only returns the points in the Forecast Horizon only (essentially what `splits()` does currently) as this would be useful for creating visualizations for the cross-validation as [shown here](https://github.com/alan-turing-institute/sktime/blob/v0.11.3/examples/window_splitters.ipynb).\r\n\r\n\r\n\r\n \r\n\r\n**Additional context**\r\n<!--\r\nAdd any other context about the problem here.\r\n-->\r\n\r\n**Versions**\r\n<details>\r\n\r\nSystem:\r\n    python: 3.7.13 (default, Apr 24 2022, 01:04:09)  [GCC 7.5.0]\r\nexecutable: /usr/bin/python3\r\n   machine: Linux-5.4.188+-x86_64-with-Ubuntu-18.04-bionic\r\n\r\nPython dependencies:\r\n          pip: 21.1.3\r\n   setuptools: 57.4.0\r\n      sklearn: 1.0.2\r\n       sktime: 0.11.3\r\n  statsmodels: 0.13.2\r\n        numpy: 1.21.6\r\n        scipy: 1.4.1\r\n       pandas: 1.3.5\r\n   matplotlib: 3.2.2\r\n       joblib: 1.1.0\r\n        numba: 0.55.1\r\n     pmdarima: 1.8.5\r\n      tsfresh: None\r\n\r\n</details>\r\n\r\n<!-- Thanks for contributing! -->\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/2598/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/2598/timeline","performed_via_github_app":null,"state_reason":null}