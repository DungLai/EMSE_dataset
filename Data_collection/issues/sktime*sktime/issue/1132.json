{"url":"https://api.github.com/repos/sktime/sktime/issues/1132","repository_url":"https://api.github.com/repos/sktime/sktime","labels_url":"https://api.github.com/repos/sktime/sktime/issues/1132/labels{/name}","comments_url":"https://api.github.com/repos/sktime/sktime/issues/1132/comments","events_url":"https://api.github.com/repos/sktime/sktime/issues/1132/events","html_url":"https://github.com/sktime/sktime/issues/1132","id":943384974,"node_id":"MDU6SXNzdWU5NDMzODQ5NzQ=","number":1132,"title":"GLobal/Panel Forecasting Using Decision Trees/Decision Tree Ensembles","user":{"login":"satya-pattnaik","id":22102468,"node_id":"MDQ6VXNlcjIyMTAyNDY4","avatar_url":"https://avatars.githubusercontent.com/u/22102468?v=4","gravatar_id":"","url":"https://api.github.com/users/satya-pattnaik","html_url":"https://github.com/satya-pattnaik","followers_url":"https://api.github.com/users/satya-pattnaik/followers","following_url":"https://api.github.com/users/satya-pattnaik/following{/other_user}","gists_url":"https://api.github.com/users/satya-pattnaik/gists{/gist_id}","starred_url":"https://api.github.com/users/satya-pattnaik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/satya-pattnaik/subscriptions","organizations_url":"https://api.github.com/users/satya-pattnaik/orgs","repos_url":"https://api.github.com/users/satya-pattnaik/repos","events_url":"https://api.github.com/users/satya-pattnaik/events{/privacy}","received_events_url":"https://api.github.com/users/satya-pattnaik/received_events","type":"User","site_admin":false},"labels":[{"id":1180363817,"node_id":"MDU6TGFiZWwxMTgwMzYzODE3","url":"https://api.github.com/repos/sktime/sktime/labels/API%20design","name":"API design","color":"874db7","default":false,"description":"API design & software architecture"},{"id":3105906374,"node_id":"MDU6TGFiZWwzMTA1OTA2Mzc0","url":"https://api.github.com/repos/sktime/sktime/labels/module:forecasting","name":"module:forecasting","color":"35FCCE","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2021-07-13T13:31:18Z","updated_at":"2021-08-08T22:57:02Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nWith reference to #1074 \r\n\r\nGiven a dataset in Panel format, for .e.g\r\n\r\n| Time  | Store Id | Sales |\r\n| :---: | :---:    | :---: |\r\n| Jan | Store1   | 283   |\r\n| ... | Store1   | ...   |\r\n| Dec | Store1   | 200   |\r\n| Jan | Store2   | 11   |\r\n| ... | Store2   | ...   |\r\n| Dec | Store2   | 31   |\r\n\r\nWe need a ```make_panel_reduction``` with exogenous variables which transforms the data into the following format.\r\nThe IDs identifying ```multiple panels``` will be passed as Categorical Exogenous Variable.\r\n  \r\n\r\n| Lag2  | Lag1 | Store Id | Target |\r\n| :---: | :---:| :---:    | :---:  |\r\n| 283   | 205  | Store1   | Mar Sales S1   |\r\n| ...   | ...  | Store1   | Dec Sales S1  |\r\n| 11    | 13   | Store2   | Mar Sales S2  |\r\n| ...   | ...  | Store2   | Dec Sales S2  |\r\n\r\nSo we can train a **single model** on the above reduced data set and have a Panel Forecaster. The Decision Tree/GBM/RF will make the first split based on the ```Panel Id```(which will amount to maximum reduction of variance in the data), after which, to put it loosley - the case almost becomes univariate(internal to the Decision Tree), a **naive  depiction** below. (Plotting a feature importance plot for the Decision Tree should show the Panel ID column to be the most important one.)\r\n\r\n\r\n\r\n                               \r\n                                \r\n\r\n<img width=\"525\" alt=\"Screenshot 2021-07-13 at 6 41 40 PM\" src=\"https://user-images.githubusercontent.com/22102468/125457642-92940815-e9ba-4b5d-8da6-ebc503c5dd72.png\">\r\n\r\n\r\n\r\n\r\n**Advantage-**\r\nIn a practical setting where we have 1000s of SKU time series to train as in Retail, a Single Model will be sufficient instead of 1000 different univariate models.\r\n\r\n**Caveats -**\r\n* Boosting models don't do well when it comes to capturing **trend**, this can be taken care of by using differences of the values across different lags as exogenous/ fitting a differenced series like ARIMA etc. \r\n\r\n*Note* - Seasonality can be captured by using Date-time indicators like Month/Day of Week etc. as Categorical Exogenous variables.\r\n\r\n- [Literature on this.](https://www.monash.edu/business/ebs/research/publications/ebs/wp45-2020.pdf)\r\n- https://robjhyndman.com/publications/global-forecasting/\r\n\r\nReferences-\r\n1. [Notebook by microsoft](https://github.com/microsoft/forecasting/blob/master/examples/grocery_sales/python/00_quick_start/lightgbm_single_round.ipynb)\r\n2. [Something similar in Neural Nets by GluonTS](https://github.com/awslabs/gluon-ts/blob/master/examples/m5_gluonts_template.ipynb)\r\n\r\n\r\n**Describe the solution you'd like**\r\nA clear and concise description of what you want to happen, ideally taking into consideration the existing toolbox design, classes and methods. \r\n\r\n**Describe alternatives you've considered**\r\nA clear and concise description of any alternative solutions or features you've considered.\r\n\r\n**Additional context**\r\nAdd any other context or screenshots about the feature request here.\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sktime/sktime/issues/1132/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sktime/sktime/issues/1132/timeline","performed_via_github_app":null,"state_reason":null}