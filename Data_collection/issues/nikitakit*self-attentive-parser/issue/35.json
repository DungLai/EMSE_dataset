{"url":"https://api.github.com/repos/nikitakit/self-attentive-parser/issues/35","repository_url":"https://api.github.com/repos/nikitakit/self-attentive-parser","labels_url":"https://api.github.com/repos/nikitakit/self-attentive-parser/issues/35/labels{/name}","comments_url":"https://api.github.com/repos/nikitakit/self-attentive-parser/issues/35/comments","events_url":"https://api.github.com/repos/nikitakit/self-attentive-parser/issues/35/events","html_url":"https://github.com/nikitakit/self-attentive-parser/issues/35","id":475171619,"node_id":"MDU6SXNzdWU0NzUxNzE2MTk=","number":35,"title":"Incorrect parse_tree when token(s) contain parenthesis","user":{"login":"BramVanroy","id":2779410,"node_id":"MDQ6VXNlcjI3Nzk0MTA=","avatar_url":"https://avatars.githubusercontent.com/u/2779410?v=4","gravatar_id":"","url":"https://api.github.com/users/BramVanroy","html_url":"https://github.com/BramVanroy","followers_url":"https://api.github.com/users/BramVanroy/followers","following_url":"https://api.github.com/users/BramVanroy/following{/other_user}","gists_url":"https://api.github.com/users/BramVanroy/gists{/gist_id}","starred_url":"https://api.github.com/users/BramVanroy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BramVanroy/subscriptions","organizations_url":"https://api.github.com/users/BramVanroy/orgs","repos_url":"https://api.github.com/users/BramVanroy/repos","events_url":"https://api.github.com/users/BramVanroy/events{/privacy}","received_events_url":"https://api.github.com/users/BramVanroy/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-07-31T14:16:12Z","updated_at":"2020-01-15T08:56:00Z","closed_at":"2020-01-15T08:56:00Z","author_association":"NONE","active_lock_reason":null,"body":"I am using your parser to get the `parse_string` of a lot of data to calculate their parse tree depth. Most sentences work fine, but the exception is sentences that contain brackets. Take as input the following sentence.\r\n\r\n> The Solano(r) range is phthalate-free and contains no heavy metals.\r\n\r\nThis will be parsed and stringified as \r\n\r\n```\r\n(S (NP (DT The) (NN Solano (-RRB- -RRB-) (NN range)) (VP (VP (VBZ is) (ADJP (NN phthalate) (: -) (JJ free))) (CC and) (VP (VBZ contains) (NP (DT no) (JJ heavy) (NNS metals)))) (. .))\r\n```\r\n\r\nPrettifying this, gives us the following:\r\n\r\n```\r\n(S\r\n    (NP\r\n        (DT The)\r\n        (NN Solano(r)\r\n            (-RRB- -RRB-)\r\n            (NN range)\r\n        )\r\n        (VP\r\n            (VP\r\n                (VBZ is)\r\n                (ADJP\r\n                    (NN phthalate)\r\n                    (: -)\r\n                    (JJ free)\r\n                )\r\n            )\r\n            (CC and)\r\n            (VP\r\n                (VBZ contains)\r\n                (NP\r\n                    (DT no)\r\n                    (JJ heavy)\r\n                    (NNS metals)\r\n                )\r\n            )\r\n        )\r\n        (. .)\r\n    )\r\n```\r\n\r\nAs is clear, the tree is incomplete. If you try to parse it with NLTK, it will fail. The parentheses don't match. As far as I can see, the NP should've been closed with a parenthesis **and** the `-RBR-` should be removed, so the correct parse looks like this:\r\n\r\n```\r\n(S\r\n    (NP\r\n        (DT The)\r\n        (NN Solano(r)\r\n            (NN range)\r\n        )\r\n    )\r\n    (VP\r\n        (VP\r\n            (VBZ is)\r\n            (ADJP\r\n                (NN phthalate)\r\n                (: -)\r\n                (JJ free)\r\n            )\r\n        )\r\n        (CC and)\r\n        (VP\r\n            (VBZ contains)\r\n            (NP\r\n                (DT no)\r\n                (JJ heavy)\r\n                (NNS metals)\r\n            )\r\n        )\r\n    )\r\n    (. .)\r\n)\r\n```\r\n\r\nThe issue seems to be the word with the parentheses in it. When a parenthesis is not part of a token (like this), it works fine and it is parsed as -RBR-. However, if it's part of the token, things go wrong. Another example sentence is \r\n\r\n> (They like(d) it a lot.) \r\n\r\nThe outer parentheses are parsed correctly, but `(d)` seems to give errors when generating the parse_string. \r\n\r\nThe above seems to be a bug of how the parse string is generated. Of course everything depends on the parsing early on in the pipeline, but even then the parse_string method should at least return a valid string (even if it is not 100% accurate).\r\n\r\nHowever, another issue arises even when the parse string is corrected. Assume the 'correct' parse\r\n\r\n```\r\n(S (-LRB- -LRB-) (NP (PRP They)) (VP like(d) (NP (PRP it)) (NP (DT a) (NN lot))) (. .) (-RRB- -RRB-))\r\n```\r\n\r\nThe NLTK parse would look like\r\n\r\n```\r\n(S\r\n  (-LRB- -LRB-)\r\n  (NP (PRP They))\r\n  (VP like (d ) (NP (PRP it)) (NP (DT a) (NN lot)))\r\n  (. .)\r\n  (-RRB- -RRB-))\r\n```\r\n\r\nYou can see that the `(d)` is, unsurprisingly, interpreted as a node. We don't want that. This is rather an issue with NLTK - but I am not sure how to \"escape\" parentheses here. Suggestions welcome, perhaps better suited on [this SO post](https://stackoverflow.com/questions/57293069/escape-parentheses-in-nltk-parse-tree).","closed_by":{"login":"BramVanroy","id":2779410,"node_id":"MDQ6VXNlcjI3Nzk0MTA=","avatar_url":"https://avatars.githubusercontent.com/u/2779410?v=4","gravatar_id":"","url":"https://api.github.com/users/BramVanroy","html_url":"https://github.com/BramVanroy","followers_url":"https://api.github.com/users/BramVanroy/followers","following_url":"https://api.github.com/users/BramVanroy/following{/other_user}","gists_url":"https://api.github.com/users/BramVanroy/gists{/gist_id}","starred_url":"https://api.github.com/users/BramVanroy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BramVanroy/subscriptions","organizations_url":"https://api.github.com/users/BramVanroy/orgs","repos_url":"https://api.github.com/users/BramVanroy/repos","events_url":"https://api.github.com/users/BramVanroy/events{/privacy}","received_events_url":"https://api.github.com/users/BramVanroy/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/nikitakit/self-attentive-parser/issues/35/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/nikitakit/self-attentive-parser/issues/35/timeline","performed_via_github_app":null,"state_reason":"completed"}