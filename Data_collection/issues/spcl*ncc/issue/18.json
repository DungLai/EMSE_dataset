{"url":"https://api.github.com/repos/spcl/ncc/issues/18","repository_url":"https://api.github.com/repos/spcl/ncc","labels_url":"https://api.github.com/repos/spcl/ncc/issues/18/labels{/name}","comments_url":"https://api.github.com/repos/spcl/ncc/issues/18/comments","events_url":"https://api.github.com/repos/spcl/ncc/issues/18/events","html_url":"https://github.com/spcl/ncc/issues/18","id":522750868,"node_id":"MDU6SXNzdWU1MjI3NTA4Njg=","number":18,"title":"Asm inline call handling","user":{"login":"Baumanar","id":32865396,"node_id":"MDQ6VXNlcjMyODY1Mzk2","avatar_url":"https://avatars.githubusercontent.com/u/32865396?v=4","gravatar_id":"","url":"https://api.github.com/users/Baumanar","html_url":"https://github.com/Baumanar","followers_url":"https://api.github.com/users/Baumanar/followers","following_url":"https://api.github.com/users/Baumanar/following{/other_user}","gists_url":"https://api.github.com/users/Baumanar/gists{/gist_id}","starred_url":"https://api.github.com/users/Baumanar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Baumanar/subscriptions","organizations_url":"https://api.github.com/users/Baumanar/orgs","repos_url":"https://api.github.com/users/Baumanar/repos","events_url":"https://api.github.com/users/Baumanar/events{/privacy}","received_events_url":"https://api.github.com/users/Baumanar/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-11-14T10:03:39Z","updated_at":"2020-02-27T14:02:07Z","closed_at":"2020-02-27T14:02:07Z","author_association":"NONE","active_lock_reason":null,"body":"I have a question about the way you handle assembly calls. In the pre-processing part where you preprocess .ll files, you discard asm call that return void by using the keep() function:\r\n``` \r\nif re.search('call void asm', line):\r\n        return False\r\n```\r\n\r\nHowever you dont handle asm inline calls that return something else during the pre-processing (maybe it is very specific in your case) and you seem to handle other cases specifically while parsing the preprocessed code:\r\n\r\n ```           ############################################################################################################\r\n            # function call\r\n            elif re.match(r'(' + rgx.local_id + r' = )?(tail )?(call|invoke) ', line):\r\n\r\n                # Get function name\r\n                if ' asm ' in line:\r\n                    if line == '%13 = tail call { %struct.rw_semaphore*, i64 } asm sideeffect \"':\r\n                        line = '%13 = tail call { %struct.rw_semaphore*, i64 } asm sideeffect \"# beginning down_read\\0A\\09.pushsection .smp_locks,\\22a\\22\\0A.balign 4\\0A.long 671f - .\\0A.popsection\\0A671:\\0A\\09lock;  incq ($3)\\0A\\09  jns        1f\\0A  call call_rwsem_down_read_failed\\0A1:\\0A\\09# ending down_read\\0A\\09\", \"=*m,={ax},={rsp},{ax},*m,2,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}\"(%struct.atomic64_t* %11, %struct.rw_semaphore* %10, %struct.atomic64_t* %11, i64 %12) #4, !srcloc !9'\r\n                    if line == '%16 = tail call i64 asm sideeffect \"':\r\n                        line = '%16 = tail call i64 asm sideeffect \"# beginning __up_read\\0A\\09.pushsection .smp_locks,\\22a\\22\\0A.balign 4\\0A.long 671f - .\\0A.popsection\\0A671:\\0A\\09lock;   xadd      $1,($2)\\0A\\09  jns        1f\\0A\\09  call call_rwsem_wake\\0A1:\\0A# ending __up_read\\0A\", \"=*m,={dx},{ax},1,*m,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}\"(%struct.atomic64_t* %11, %struct.rw_semaphore* %10, i64 -1, %struct.atomic64_t* %11) #4, !srcloc !11'\r\n                    func_name_ = re.search(r' asm (?:sideeffect )?(\\\".*\\\")\\(', line)\r\n```\r\n\r\nMy question is what is the difference between those two cases ? does it really matter or could we ignore asm inline calls whatever the type returned ?","closed_by":{"login":"Baumanar","id":32865396,"node_id":"MDQ6VXNlcjMyODY1Mzk2","avatar_url":"https://avatars.githubusercontent.com/u/32865396?v=4","gravatar_id":"","url":"https://api.github.com/users/Baumanar","html_url":"https://github.com/Baumanar","followers_url":"https://api.github.com/users/Baumanar/followers","following_url":"https://api.github.com/users/Baumanar/following{/other_user}","gists_url":"https://api.github.com/users/Baumanar/gists{/gist_id}","starred_url":"https://api.github.com/users/Baumanar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Baumanar/subscriptions","organizations_url":"https://api.github.com/users/Baumanar/orgs","repos_url":"https://api.github.com/users/Baumanar/repos","events_url":"https://api.github.com/users/Baumanar/events{/privacy}","received_events_url":"https://api.github.com/users/Baumanar/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/spcl/ncc/issues/18/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/spcl/ncc/issues/18/timeline","performed_via_github_app":null,"state_reason":"completed"}