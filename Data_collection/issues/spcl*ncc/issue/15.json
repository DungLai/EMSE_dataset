{"url":"https://api.github.com/repos/spcl/ncc/issues/15","repository_url":"https://api.github.com/repos/spcl/ncc","labels_url":"https://api.github.com/repos/spcl/ncc/issues/15/labels{/name}","comments_url":"https://api.github.com/repos/spcl/ncc/issues/15/comments","events_url":"https://api.github.com/repos/spcl/ncc/issues/15/events","html_url":"https://github.com/spcl/ncc/issues/15","id":498163354,"node_id":"MDU6SXNzdWU0OTgxNjMzNTQ=","number":15,"title":"llvm ir of linux kernel","user":{"login":"Baumanar","id":32865396,"node_id":"MDQ6VXNlcjMyODY1Mzk2","avatar_url":"https://avatars.githubusercontent.com/u/32865396?v=4","gravatar_id":"","url":"https://api.github.com/users/Baumanar","html_url":"https://github.com/Baumanar","followers_url":"https://api.github.com/users/Baumanar/followers","following_url":"https://api.github.com/users/Baumanar/following{/other_user}","gists_url":"https://api.github.com/users/Baumanar/gists{/gist_id}","starred_url":"https://api.github.com/users/Baumanar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Baumanar/subscriptions","organizations_url":"https://api.github.com/users/Baumanar/orgs","repos_url":"https://api.github.com/users/Baumanar/repos","events_url":"https://api.github.com/users/Baumanar/events{/privacy}","received_events_url":"https://api.github.com/users/Baumanar/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-09-25T09:29:07Z","updated_at":"2019-10-03T11:55:16Z","closed_at":"2019-10-03T11:55:16Z","author_association":"NONE","active_lock_reason":null,"body":"Hello, firstly thanks for your interesting paper and for releasing its code. \r\nThis issue Is similar to #1 . I'm currently working on ways to generate the llvm-ir files of the linux kernel. So I compiled the kernel using Clang, and then I used a python script I found on github (https://github.com/ClangBuiltLinux/linux/blob/master/scripts/gen_compile_commands.py) that parses the .cmd files generated alongside the compilation and generates a Json file of the Clang commands with the correct linkers that were run to compile the kernel. Here is an example of these commands:\r\n\r\n`/usr/bin/clang-9 -Wp,-MD,fs/.pnode.o.d  -nostdinc -isystem /usr/lib/llvm-9/lib/clang/9.0.0/include -I./arch/x86/include -I./arch/x86/include/generated  -I./include -I./arch/x86/include/uapi -I./arch/x86/include/generated/uapi -I./include/uapi -I./include/generated/uapi -include ./include/linux/kconfig.h -D__KERNEL__ -Qunused-arguments -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs -fno-strict-aliasing -fno-common -fshort-wchar -Werror-implicit-function-declaration -Wno-format-security -std=gnu89 -Wno-unused-variable -Wno-format-invalid-specifier -Wno-gnu -Wno-address-of-packed-member -Wno-tautological-compare -mno-global-merge -no-integrated-as -fno-PIE -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -mno-avx -m64 -mno-80387 -mstack-alignment=8 -mtune=generic -mno-red-zone -mcmodel=kernel -funit-at-a-time -DCONFIG_AS_CFI=1 -DCONFIG_AS_CFI_SIGNAL_FRAME=1 -DCONFIG_AS_CFI_SECTIONS=1 -DCONFIG_AS_FXSAVEQ=1 -DCONFIG_AS_SSSE3=1 -DCONFIG_AS_CRC32=1 -DCONFIG_AS_AVX=1 -DCONFIG_AS_AVX2=1 -DCONFIG_AS_AVX512=1 -DCONFIG_AS_SHA1_NI=1 -DCONFIG_AS_SHA256_NI=1 -pipe -Wno-sign-compare -fno-asynchronous-unwind-tables -fno-delete-null-pointer-checks -O2 --param=allow-store-data-races=0 -DCC_HAVE_ASM_GOTO -Wframe-larger-than=2048 -fno-stack-protector -fomit-frame-pointer -Wdeclaration-after-statement -Wno-pointer-sign -fno-strict-overflow -Werror=implicit-int -Werror=strict-prototypes -Werror=date-time -Werror=incompatible-pointer-types -Wno-initializer-overrides -Wno-unused-value -Wno-format -Wno-sign-compare -Wno-format-zero-length -Wno-uninitialized    -DKBUILD_BASENAME='\\\"pnode\\\"'  -DKBUILD_MODNAME='\\\"pnode\\\"' -c -o fs/pnode.o fs/pnode.c`\r\n\r\n\r\nTo build the llvm-ir files (.ll), I replaced the end of the command \r\n`-c -o fs/pnode.o fs/pnode.c` \r\nwith\r\n`-S -emit-llvm fs/pnode.c -o llvm-ir/fs_pnode.ll`\r\nI managed to create 2334 llvm-ir files with version 4.15.1 of the linux kernel.\r\n\r\nMy questions are:\r\n- How did you create the llvm-ir files for the linux kernel project, and more generally, how did you do it for each of the projects you present in the paper ? Is there a general method or is it project specific ?\r\n- Is it because I use a more recent version of clang (9) than you used that I was able to generate a larger amount of llvm-ir files for the linux kernel ?","closed_by":{"login":"Baumanar","id":32865396,"node_id":"MDQ6VXNlcjMyODY1Mzk2","avatar_url":"https://avatars.githubusercontent.com/u/32865396?v=4","gravatar_id":"","url":"https://api.github.com/users/Baumanar","html_url":"https://github.com/Baumanar","followers_url":"https://api.github.com/users/Baumanar/followers","following_url":"https://api.github.com/users/Baumanar/following{/other_user}","gists_url":"https://api.github.com/users/Baumanar/gists{/gist_id}","starred_url":"https://api.github.com/users/Baumanar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Baumanar/subscriptions","organizations_url":"https://api.github.com/users/Baumanar/orgs","repos_url":"https://api.github.com/users/Baumanar/repos","events_url":"https://api.github.com/users/Baumanar/events{/privacy}","received_events_url":"https://api.github.com/users/Baumanar/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/spcl/ncc/issues/15/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/spcl/ncc/issues/15/timeline","performed_via_github_app":null,"state_reason":"completed"}