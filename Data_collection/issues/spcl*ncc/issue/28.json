{"url":"https://api.github.com/repos/spcl/ncc/issues/28","repository_url":"https://api.github.com/repos/spcl/ncc","labels_url":"https://api.github.com/repos/spcl/ncc/issues/28/labels{/name}","comments_url":"https://api.github.com/repos/spcl/ncc/issues/28/comments","events_url":"https://api.github.com/repos/spcl/ncc/issues/28/events","html_url":"https://github.com/spcl/ncc/issues/28","id":689237283,"node_id":"MDU6SXNzdWU2ODkyMzcyODM=","number":28,"title":"Confusion in inst2vec_preprocess.py when reading code","user":{"login":"island255","id":35130302,"node_id":"MDQ6VXNlcjM1MTMwMzAy","avatar_url":"https://avatars.githubusercontent.com/u/35130302?v=4","gravatar_id":"","url":"https://api.github.com/users/island255","html_url":"https://github.com/island255","followers_url":"https://api.github.com/users/island255/followers","following_url":"https://api.github.com/users/island255/following{/other_user}","gists_url":"https://api.github.com/users/island255/gists{/gist_id}","starred_url":"https://api.github.com/users/island255/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/island255/subscriptions","organizations_url":"https://api.github.com/users/island255/orgs","repos_url":"https://api.github.com/users/island255/repos","events_url":"https://api.github.com/users/island255/events{/privacy}","received_events_url":"https://api.github.com/users/island255/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2020-08-31T14:08:39Z","updated_at":"2020-09-02T10:33:07Z","closed_at":"2020-09-02T06:10:02Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"When I reading code in inst2vec_preprocess.py, I find in line 865 that\r\n **_assert check is not None, \"Could not match argument list in:\\n\" + line + \"\\nFunction:\\n\" + func_name_** \r\nmay have to change to\r\n **_assert check is None_**.\r\n But  I'm confused and don't know whether I should change it.\r\n\r\n```\r\n\r\ndef get_num_args_func(line, func_name=None):\r\n    \"\"\"\r\n    Get the number of arguments in a line containing a function\r\n    :param line: LLVM IR line\r\n    :param func_name: function name\r\n    :return num_args: number of arguments\r\n            arg_list: list of arguments\r\n    \"\"\"\r\n    modif_line = re.sub(r'<[^<>]+>', '', line)  # commas in vectors/arrays should not be counted as argument-separators\r\n    arg_list_ = find_outer_most_last_parenthesis(modif_line)  # get last parenthesis\r\n    if arg_list_ is None:\r\n        # Make sure that this is the case because the function has no arguments\r\n        # and not because there was in error in regex matching\r\n        check = re.match(rgx.func_call_pattern + r'\\(\\)', modif_line)\r\n        **_assert check is not None, \"Could not match argument list in:\\n\" + line + \"\\nFunction:\\n\" + func_name_**\r\n        num_args = 0\r\n        arg_list = ''\r\n    elif arg_list_ == '()':\r\n        # Make sure that this is the case because the function has no arguments\r\n        # and not because there was in error in regex matching\r\n        check = re.match(rgx.func_call_pattern + r'\\(\\)', modif_line)\r\n        if check is None:\r\n            check = re.search(r' asm (?:sideeffect )?(\\\".*\\\")\\(\\)', modif_line)\r\n        if check is None:\r\n            check = re.search(rgx.local_id + r'\\(\\)', modif_line)\r\n        if check is None:\r\n            okay = line[-2:] == '()'\r\n            if not okay:\r\n                check = None\r\n            else:\r\n                check = True\r\n        assert check is not None, \"Could not match argument list in:\\n\" + line + \"\\nFunction:\\n\" + func_name\r\n        num_args = 0\r\n        arg_list = ''\r\n    else:\r\n        arg_list = arg_list_[1:-1]\r\n        arg_list = re.sub(r'<[^<>]+>', '', arg_list)\r\n        arg_list_modif = re.sub(r'\\([^\\(\\)]+\\)', '', arg_list)\r\n        arg_list_modif = re.sub(r'\\([^\\(\\)]+\\)', '', arg_list_modif)\r\n        arg_list_modif = re.sub(r'\\([^\\(\\)]+\\)', '', arg_list_modif)\r\n        arg_list_modif = re.sub(r'\\([^\\(\\)]+\\)', '', arg_list_modif)\r\n        arg_list_modif = re.sub(r'\\\"[^\\\"]*\\\"', '', arg_list_modif)\r\n        arg_list_modif = re.sub(r'{.*}', '', arg_list_modif)\r\n        num_args = len(re.findall(',', arg_list_modif)) + 1\r\n\r\n    return num_args, arg_list\r\n```","closed_by":{"login":"tbennun","id":8348955,"node_id":"MDQ6VXNlcjgzNDg5NTU=","avatar_url":"https://avatars.githubusercontent.com/u/8348955?v=4","gravatar_id":"","url":"https://api.github.com/users/tbennun","html_url":"https://github.com/tbennun","followers_url":"https://api.github.com/users/tbennun/followers","following_url":"https://api.github.com/users/tbennun/following{/other_user}","gists_url":"https://api.github.com/users/tbennun/gists{/gist_id}","starred_url":"https://api.github.com/users/tbennun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tbennun/subscriptions","organizations_url":"https://api.github.com/users/tbennun/orgs","repos_url":"https://api.github.com/users/tbennun/repos","events_url":"https://api.github.com/users/tbennun/events{/privacy}","received_events_url":"https://api.github.com/users/tbennun/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/spcl/ncc/issues/28/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/spcl/ncc/issues/28/timeline","performed_via_github_app":null,"state_reason":"completed"}