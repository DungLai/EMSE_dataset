{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/109","repository_url":"https://api.github.com/repos/pyro-ppl/funsor","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/109/labels{/name}","comments_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/109/comments","events_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/109/events","html_url":"https://github.com/pyro-ppl/funsor/issues/109","id":426721865,"node_id":"MDU6SXNzdWU0MjY3MjE4NjU=","number":109,"title":"Implement an Expectation funsor","user":{"login":"fritzo","id":648532,"node_id":"MDQ6VXNlcjY0ODUzMg==","avatar_url":"https://avatars.githubusercontent.com/u/648532?v=4","gravatar_id":"","url":"https://api.github.com/users/fritzo","html_url":"https://github.com/fritzo","followers_url":"https://api.github.com/users/fritzo/followers","following_url":"https://api.github.com/users/fritzo/following{/other_user}","gists_url":"https://api.github.com/users/fritzo/gists{/gist_id}","starred_url":"https://api.github.com/users/fritzo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fritzo/subscriptions","organizations_url":"https://api.github.com/users/fritzo/orgs","repos_url":"https://api.github.com/users/fritzo/repos","events_url":"https://api.github.com/users/fritzo/events{/privacy}","received_events_url":"https://api.github.com/users/fritzo/received_events","type":"User","site_admin":false},"labels":[{"id":1215006862,"node_id":"MDU6TGFiZWwxMjE1MDA2ODYy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/enhancement","name":"enhancement","color":"0e8a16","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false},"assignees":[{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2019-03-28T21:47:19Z","updated_at":"2019-10-16T23:48:31Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Expectation is combines ideas of TraceEnum_ELBO's `Dice` and Funsor's `Integrate` and `plate`:\r\n```py\r\nExpectation((p1, p2, ..., pn),  # log measures\r\n            (c1, c2, ..., cn),  # costs\r\n            sum_vars=frozenset(...),\r\n            prod_vars=frozenset(...))\r\n``` \r\nThe optimizer should perform one instance of Tensor Variable Elimination for each cost term (against all p terms).\r\n\r\nIf `prod_vars` is empty (i.e. no plates), then\r\n```py\r\nExpectation((p1, p2, ..., pn),\r\n            (c1, c2, ..., cn),\r\n            sum_vars=sum_vars,\r\n            prod_vars=frozenset())  # empty\r\n  = Integrate(p1 + p2 + ... + pn,\r\n              c1 + c2 + ... + cn,\r\n              reduced_vars=sum_vars)\r\n  = Contract(p1.exp() * p2.exp() * ... * pn.exp(),\r\n             c1 + c2 + ... + cn,\r\n             reduced_vars=sum_vars)\r\n  = (p1.exp() * p2.exp() * ... * pn.exp()\r\n     * (c1 + c2 + ... + cn)).reduce(ops.add, sum_vars)\r\n```\r\nIf there `prod_vars` is not empty, we could naively evaluate via TVE:\r\n```py\r\nExpectation(log_probs, costs, sum_vars, prod_vars)\r\n  = sum(sum_product(ops.add, ops.mul,\r\n                    [p.exp() for p in log_probs] + [c],\r\n                    sum_vars, prod_vars)\r\n        for c in costs)\r\n```\r\nThis can be used in the [elbo computation in minipyro](https://github.com/pyro-ppl/funsor/pull/100/commits/b2de9ca7177237b2e19365eb35a276f1cc4b9447).","closed_by":null,"reactions":{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/109/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/109/timeline","performed_via_github_app":null,"state_reason":null}