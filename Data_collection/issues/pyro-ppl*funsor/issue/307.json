{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/307","repository_url":"https://api.github.com/repos/pyro-ppl/funsor","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/307/labels{/name}","comments_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/307/comments","events_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/307/events","html_url":"https://github.com/pyro-ppl/funsor/issues/307","id":555327538,"node_id":"MDU6SXNzdWU1NTUzMjc1Mzg=","number":307,"title":"Strengthen algebraic organization of funsor.ops and related code","user":{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false},"labels":[{"id":1215006862,"node_id":"MDU6TGFiZWwxMjE1MDA2ODYy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/enhancement","name":"enhancement","color":"0e8a16","default":true,"description":"New feature or request"},{"id":1245797346,"node_id":"MDU6TGFiZWwxMjQ1Nzk3MzQ2","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/refactor","name":"refactor","color":"ff9900","default":false,"description":""},{"id":1262045842,"node_id":"MDU6TGFiZWwxMjYyMDQ1ODQy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/discussion","name":"discussion","color":"fef2c0","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-01-27T02:16:17Z","updated_at":"2021-01-14T16:57:33Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The changes proposed in #304 and the incorrect code path for `logaddexp` uncovered in #306 suggest adding more structure to the `funsor.ops` module.\r\n\r\nPossible changes:\r\n- [ ] To address the bug found in #306, centralize enforcement of the contract that op implementations are opaque to Funsor and are only invoked on underlying data objects like `torch.Tensor`s, perhaps in the base definition of `ops.Op`\r\n- [ ] As proposed in #304, associate a backward op with each `AssociativeOp` for `argreduce` computations so that the backward op arguments in `funsor.adjoint` methods can be removed\r\n- [ ] Create a `CommutativeOp` or `CommutativeAssociativeOp` class to distinguish between commutative and non-commutative monoids\r\n- [ ] Create a `Semiring` data structure for use by `Contraction` and `normalize` containing a sum and product op and (where applicable) their units and inverses instead of passing around separate ops `sum_op` and `prod_op` and storing units and inverses globally","closed_by":null,"reactions":{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/307/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/307/timeline","performed_via_github_app":null,"state_reason":null}