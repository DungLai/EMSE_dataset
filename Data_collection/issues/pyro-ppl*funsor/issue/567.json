{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/567","repository_url":"https://api.github.com/repos/pyro-ppl/funsor","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/567/labels{/name}","comments_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/567/comments","events_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/567/events","html_url":"https://github.com/pyro-ppl/funsor/issues/567","id":1018469198,"node_id":"I_kwDOCgoJts48tJtO","number":567,"title":"Switch to sqrt(prescision) representation in Gaussian?","user":{"login":"fritzo","id":648532,"node_id":"MDQ6VXNlcjY0ODUzMg==","avatar_url":"https://avatars.githubusercontent.com/u/648532?v=4","gravatar_id":"","url":"https://api.github.com/users/fritzo","html_url":"https://github.com/fritzo","followers_url":"https://api.github.com/users/fritzo/followers","following_url":"https://api.github.com/users/fritzo/following{/other_user}","gists_url":"https://api.github.com/users/fritzo/gists{/gist_id}","starred_url":"https://api.github.com/users/fritzo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fritzo/subscriptions","organizations_url":"https://api.github.com/users/fritzo/orgs","repos_url":"https://api.github.com/users/fritzo/repos","events_url":"https://api.github.com/users/fritzo/events{/privacy}","received_events_url":"https://api.github.com/users/fritzo/received_events","type":"User","site_admin":false},"labels":[{"id":1262045842,"node_id":"MDU6TGFiZWwxMjYyMDQ1ODQy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/discussion","name":"discussion","color":"fef2c0","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-06T14:38:34Z","updated_at":"2021-10-18T14:39:04Z","closed_at":"2021-10-18T14:39:04Z","author_association":"MEMBER","active_lock_reason":null,"body":"Addresses #559 \r\n\r\nThis issue proposes switching the `Gaussian` parameters from `(info_vec, precision)` to `(info_vec, prec_sqrt)`, following @fehiepsi's work in https://github.com/pyro-ppl/pyro/pull/2019.\r\n\r\n## Motivation\r\n\r\nOur original motivation for representing Gaussians as `(info_vec, precision)` was to support operations on rank-deficient precision matrices, which occur in conditional probability distributions. This design choice allows us to uniformly handle priors, conditional distributions, and likelihoods by treating all three agnostically as mere factors in a factor graph.\r\n\r\nHowever while the `(info_vec, precision)` representation is numerically stable, it is computationally inefficient when making low-dimensional observations of a high-dimensional variable.  For example to store a conditional distribution of a 1-dimensional variable given a 1000-dimensional variable, the precision matrix has 1001**2 elements, but since it has rank 1 its square root would cost only 1001 elements.  Indeed we recognized this https://github.com/pyro-ppl/pyro/pull/2005 and https://github.com/pyro-ppl/funsor/pull/217 and created a special `AffineNormal` pattern to avoid materializing rank-1 precision matrices.\r\n\r\nAn alternative representation is the classic square root information filter (SRIF), explored by @fehiepsi in https://github.com/pyro-ppl/pyro/pull/2019. This represents a Gaussian as a pair `(info_vec, prec_sqrt)`, of shapes `batch_shape + (dim,)` and `batch_shape + (dim, rank)` respectively, so that\r\n```py\r\nprecision = prec_sqrt @ prec_sqrt.transpose(-2, -1)\r\n```\r\nAdvantages of the square root information representation include:\r\n- space storage cost is `O(dim * rank)` which can be much smaller than `O(dim ** 2)`\r\n- ops.add can be implemented by mere concatenation (optionally [followed by compression](https://github.com/pyro-ppl/pyro/pull/2019/files#r317249339) if `rank > dim` or maybe `rank > 1.5 * dim`)\r\n- we could drop `AffineNormal`\r\n\r\n## Design questions\r\n\r\n- [x] Should we make this change?\r\n- [x] If we change `Gaussian` interface what will break?\r\n    - the [arXiv paper](https://arxiv.org/abs/1910.10775) will be out of date\r\n    - I believe all Pyro & NumPyro code uses `to_funsor()`, so will be unaffected\r\n- [x] How should we make this change?  Possibilities include:\r\n    - :+1: Simply replace the existing `Gaussian`.\r\n    - ~~Build a separate `GaussianS`.~~\r\n    - ~~Create a new `ConditionalGaussian` as the basic thing and make `Gaussian` a mere alias~~\r\n        (but how do we unify priors, conditionals, and likelihoods?)\r\n    - ~~Create an abstraction for structured precision matrices as in GPyTorch.~~\r\n        (or is it cleaner to allow structured square root matrices, since they have natural block structure?)","closed_by":{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/567/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/567/timeline","performed_via_github_app":null,"state_reason":"completed"}