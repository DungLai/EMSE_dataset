{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/156","repository_url":"https://api.github.com/repos/pyro-ppl/funsor","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/156/labels{/name}","comments_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/156/comments","events_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/156/events","html_url":"https://github.com/pyro-ppl/funsor/issues/156","id":467777294,"node_id":"MDU6SXNzdWU0Njc3NzcyOTQ=","number":156,"title":"Unify multilinear operations","user":{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false},"labels":[{"id":1245797346,"node_id":"MDU6TGFiZWwxMjQ1Nzk3MzQ2","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/refactor","name":"refactor","color":"ff9900","default":false,"description":""},{"id":1262045842,"node_id":"MDU6TGFiZWwxMjYyMDQ1ODQy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/discussion","name":"discussion","color":"fef2c0","default":false,"description":""}],"state":"closed","locked":false,"assignee":{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false},"assignees":[{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false}],"milestone":{"url":"https://api.github.com/repos/pyro-ppl/funsor/milestones/1","html_url":"https://github.com/pyro-ppl/funsor/milestone/1","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/milestones/1/labels","id":4078183,"node_id":"MDk6TWlsZXN0b25lNDA3ODE4Mw==","number":1,"title":"Initial release","description":"Working implementations of the examples in the design doc as well as any necessary infrastructure","creator":{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false},"open_issues":0,"closed_issues":31,"state":"closed","created_at":"2019-02-22T08:11:13Z","updated_at":"2020-11-29T00:45:43Z","due_on":null,"closed_at":"2020-11-29T00:45:43Z"},"comments":1,"created_at":"2019-07-13T23:44:52Z","updated_at":"2019-09-17T19:50:20Z","closed_at":"2019-09-17T19:50:20Z","author_association":"MEMBER","active_lock_reason":null,"body":"Funsor currently contains many different representations of multilinear operations (e.g. `Joint`, `Affine`, `Finitary`, `Contract`, `Integrate`, `Binary`, `Reduce`, `einsum`, `sum_product`, ...) that approximately duplicate lots of logic and don't always play well together.\r\n\r\nIn a sequence of refactoring PRs, I would like to unify most of the duplicated linear algebra or normalization logic in the codebase while preserving all existing test cases and computational properties.  Specifically, I would like to:\r\n1. #157 Add a `Contraction` normal form representing finitary sum-product operations with eager definitions implemented entirely in terms of unary and binary sum-product operations, and a `normalize` interpretation putting multilinear expressions into a DNF-like normal form\r\n2. #157 Insert `normalize` as the underlying interpretation to which `eager` defaults, displacing `reflect` (optionally at first, using an environment variable as with the changes in #149).\r\n3. #173 Remove `Affine` and replace with `Contraction` while preserving all existing test cases and functionality\r\n4. #165 Simplify the optimizer by removing `Finitary`, `Contract`, `funsor.contract._simplify_contract`, and the `associate`, `distribute` and `desugar` interpretations used internally, and making it work with `normalize` and `Contraction`s directly\r\n5. #169 Simplify `Integrate` by removing the duplicate functionality of `funsor.integrate._simplify_integrate`\r\n6. #169 Remove `Joint` and replace with `Contraction` and `MultiDelta` while preserving all `Joint` test cases and computational properties.  This will also further simplify `eager`, since most of `Joint`'s functionality is already contained in the first PR.\r\n7. #169 Remove `Delta` entirely in favor of `MultiDelta` so that deltas are closed under addition/logaddexp like `Gaussian` and `Tensor`\r\n10. Troubleshoot performance issues related to interleaved interpreters (see `test_gaussian.py::test_eager_subs`, `test_samplers.py::test_gaussian_distribution`, `test_terms.py::test_reduce_subset` for cases of severe slowdowns)\r\n8. Simplify `eager` by removing all purely algebraic computations from `eager` that are now handled by `normalize`, such as `funsor.terms.eager.distribute_binary_reduce_other`, and narrowing the focus of `eager` to only performing eager computations that actually invoke backend ops.\r\n9. Rename `Contraction` -> `Contract`, `MultiDelta` -> `Empirical`, remove `Delta` entirely, move patterns in `joint.py` to `integrate.py`\r\n11. Make optimization the default (merge `eager_contraction_generic_tuple` and the optimizer generic `Contraction` pattern from #165 )\r\n\r\nMore speculative: can we naturally and generically handle plate and scan dimensions #70 in `normalize`?\r\n\r\nPlan for code review/merging:\r\n1. Finish PRs for steps 1-6 above\r\n2. Review and merge those PRs into #157, in descending order (i.e. 3, 4, 5, 6, 7)\r\n3. Merge the final version of #157 into `master`\r\n4. Make normalization the default and address steps 8-10 in cleanup PRs\r\n\r\nNon-goals:\r\n- I do not plan to replace or remove `Unary`, `Binary`, `Integrate`, or `Reduce`\r\n- I do not plan to change any `eager` definitions or require them to be written in terms of `Contraction`.  `normalize` should not be proscriptive about the specification of eager operations.","closed_by":{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/156/reactions","total_count":2,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":1,"eyes":0},"timeline_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/156/timeline","performed_via_github_app":null,"state_reason":"completed"}