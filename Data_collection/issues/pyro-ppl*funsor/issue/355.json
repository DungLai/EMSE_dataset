{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/355","repository_url":"https://api.github.com/repos/pyro-ppl/funsor","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/355/labels{/name}","comments_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/355/comments","events_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/355/events","html_url":"https://github.com/pyro-ppl/funsor/issues/355","id":679929794,"node_id":"MDU6SXNzdWU2Nzk5Mjk3OTQ=","number":355,"title":"Make interpreters compatible with Python type-checking","user":{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false},"labels":[{"id":1245797346,"node_id":"MDU6TGFiZWwxMjQ1Nzk3MzQ2","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/refactor","name":"refactor","color":"ff9900","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-08-17T04:49:44Z","updated_at":"2021-02-22T19:42:50Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Currently, while Funsor makes heavy use of `multipledispatch` on parametric types, interpretations and Funsor terms are not compatible with static type-checkers like MyPy or even runtime type-checkers like [pytypes](https://github.com/Stewori/pytypes).  It would improve the development experience, increase performance and beneficially constrain Funsor's design to make Funsor interpreters and lazy expressions more compatible with Python's standard `typing` module and even with MyPy.\r\n\r\nAt a high level, this seems straightforward: just make all subclasses of `funsor.Funsor` inherit from `typing.Generic` and move type annotations from `register` calls to function signatures, e.g.:\r\n```py\r\nOp = TypeVar(\"Op\", bound=ops.AssociativeOp)\r\nArg = TypeVar(\"Arg\", bound=Funsor)\r\nReducedVars = TypeVar(\"ReducedVars\", bound=FrozenSet[str])\r\n\r\nclass Reduce(Funsor, Generic[Op, Arg, ReducedVars]):\r\n    def __init__(self, op: Op, arg: Arg, reduced_vars: ReducedVars):\r\n        ...  # note we should be able to remove all hand-written type assertions here\r\n\r\nLhs = TypeVar(\"Lhs\", bound=Funsor)\r\nRhs = TypeVar(\"Rhs\", bound=Funsor)\r\n\r\nclass Binary(Funsor, Generic[Op, Lhs, Rhs]):\r\n    def __init__(self, op, lhs, rhs):\r\n        ...\r\n\r\n# a random example pattern (a+b).sum() -> (a.sum() + b.sum())\r\n@eager.register(Reduce)\r\ndef eager_reduce_example_pattern(\r\n        op: ops.AddOp, \r\n        arg: Binary[ops.AddOp, Funsor, Funsor],\r\n        reduced_vars: FrozenSet[str]\r\n    ):\r\n    return Binary(arg.op, Reduce(op, arg.lhs, reduced_vars), Reduce(op, arg.rhs, reduced_vars))\r\n```\r\nWe'd also have to modify `KeyedRegistry` along the lines of https://github.com/mrocklin/multipledispatch/pull/69 using `pytypes.deep_type` for dispatch to continue to work correctly, and define `FunsorMeta.__subclasscheck__` with `pytypes.is_subtype` rather than the custom logic it currently contains.\r\n\r\nUnfortunately, there are lots of design details that may prevent fully statically checkable interpreters or at least make them undesirable for other reasons. For example, the obtrusive type variables in the snippet would seem to be mandatory - if their creation were automated and folded into `FunsorMeta.__init__`, the result would not be compatible with static type checkers like MyPy, which seems to be incompatible with any internal logic in metaclasses.  It's also not clear that the way we construct finer types at runtime with `reflect` between intepreter calls would be compatible with MyPy.\r\n\r\nThese caveats may not apply to runtime type checkers like pytypes, which could still cut out lots of boilerplate and improve performance, so perhaps this is the best starting point. Note that there are [Python version compatibility issues](https://github.com/Stewori/pytypes/issues/40) upstream in pytypes that might cause other problems (but seem to be mostly resolved in the master branch).\r\n\r\nNote that this issue is orthogonal to #351, which is about the types of Funsors themselves rather than the type signatures of interpretations, despite the similar motivations.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/355/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/355/timeline","performed_via_github_app":null,"state_reason":null}