{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/411","repository_url":"https://api.github.com/repos/pyro-ppl/funsor","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/411/labels{/name}","comments_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/411/comments","events_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/411/events","html_url":"https://github.com/pyro-ppl/funsor/issues/411","id":772548461,"node_id":"MDU6SXNzdWU3NzI1NDg0NjE=","number":411,"title":"Replace normalize interpretation with rewriting modulo a congruence","user":{"login":"fritzo","id":648532,"node_id":"MDQ6VXNlcjY0ODUzMg==","avatar_url":"https://avatars.githubusercontent.com/u/648532?v=4","gravatar_id":"","url":"https://api.github.com/users/fritzo","html_url":"https://github.com/fritzo","followers_url":"https://api.github.com/users/fritzo/followers","following_url":"https://api.github.com/users/fritzo/following{/other_user}","gists_url":"https://api.github.com/users/fritzo/gists{/gist_id}","starred_url":"https://api.github.com/users/fritzo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fritzo/subscriptions","organizations_url":"https://api.github.com/users/fritzo/orgs","repos_url":"https://api.github.com/users/fritzo/repos","events_url":"https://api.github.com/users/fritzo/events{/privacy}","received_events_url":"https://api.github.com/users/fritzo/received_events","type":"User","site_admin":false},"labels":[{"id":1245797346,"node_id":"MDU6TGFiZWwxMjQ1Nzk3MzQ2","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/refactor","name":"refactor","color":"ff9900","default":false,"description":""},{"id":1262045842,"node_id":"MDU6TGFiZWwxMjYyMDQ1ODQy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/discussion","name":"discussion","color":"fef2c0","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/pyro-ppl/funsor/milestones/3","html_url":"https://github.com/pyro-ppl/funsor/milestone/3","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/milestones/3/labels","id":6235535,"node_id":"MDk6TWlsZXN0b25lNjIzNTUzNQ==","number":3,"title":"1.0 engineering / hardening","description":"Engineering and hardening before Funsor 1.0 release needed for Pyro 2.0 release.","creator":{"login":"fritzo","id":648532,"node_id":"MDQ6VXNlcjY0ODUzMg==","avatar_url":"https://avatars.githubusercontent.com/u/648532?v=4","gravatar_id":"","url":"https://api.github.com/users/fritzo","html_url":"https://github.com/fritzo","followers_url":"https://api.github.com/users/fritzo/followers","following_url":"https://api.github.com/users/fritzo/following{/other_user}","gists_url":"https://api.github.com/users/fritzo/gists{/gist_id}","starred_url":"https://api.github.com/users/fritzo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fritzo/subscriptions","organizations_url":"https://api.github.com/users/fritzo/orgs","repos_url":"https://api.github.com/users/fritzo/repos","events_url":"https://api.github.com/users/fritzo/events{/privacy}","received_events_url":"https://api.github.com/users/fritzo/received_events","type":"User","site_admin":false},"open_issues":3,"closed_issues":1,"state":"open","created_at":"2020-12-22T00:34:04Z","updated_at":"2021-02-23T15:31:29Z","due_on":null,"closed_at":null},"comments":0,"created_at":"2020-12-22T00:21:22Z","updated_at":"2020-12-22T02:09:46Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"I would have more trust in Funsor's rewriting system if we (1) moved some complexity from the `normalize` interpretation to the pattern matching mechanism, and (2) simplified and codified the allowable control flow patterns whereby one interpretation can defer to / nest within another. This issue addresses (1).\r\n\r\nOriginally Funsor interpretations were naive and resulted in small reduction sequences, with depth linear in term length (I believe). Funsor's simple `eager` and `lazy` interpretations were dwarfed in complexity by the `multipledispatch` library on which they were built. But interpretations have became more complex, especially with the usage patterns in `normalize` and with interpretations calling sub-interpretations in increasingly nested ways. As we build more machinery on top of Funsor, pattern matching errors will increasingly surface to users, and increasingly often those users will be unaware that Funsor is being used at all.\r\n\r\nThis issue proposes to move some complexity of `normalize` into a smarter replacement for `multipledispatch`, as a separate library, possibly using `multipledispatch` or Matt's [unification](https://github.com/mrocklin/unification) library or even an SMT solver like Z3. I believe this would:\r\n- simplify the writing of new patterns, \r\n- allow for clearer error handling in case of missing patterns (which users will encounter often!),\r\n- be able to warn about nondeterminism _modulo theory_ (generalizing how `multipledispatch` warns about pattern conflict),\r\n- provide more precise debugging information for authors of new patterns, and\r\n- hopefully reduce complexity of large normalizations (since we can implement custom matching algorithms).\r\n\r\n## Design\r\n\r\nI believe the congruence should include laws for:\r\n- associativity\r\n- commutativity\r\n- unit laws\r\n- possibly distributivity\r\n- possibly idempotence for some ops (e.g. max)\r\n\r\nInitially these can be hard-coded; then we can refactor so the equational theory itself is declared in Funsor rather than in the rewriting library.\r\n\r\n## Possibly relevant references\r\n- Batchmair & Dershowitz (1989) \"Completion for rewriting modulo a congruence\" ([pdf](https://core.ac.uk/download/pdf/82630592.pdf))\r\n- Viry (1995) \"Rewriting modulo a rewrite system\" ([pdf](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.5233&rep=rep1&type=pdf))\r\n- Rocha et al. (2014) \"Rewriting modulo SMT and open systems analysis\" ([pdf](https://core.ac.uk/reader/42708020))","closed_by":null,"reactions":{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/411/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/411/timeline","performed_via_github_app":null,"state_reason":null}