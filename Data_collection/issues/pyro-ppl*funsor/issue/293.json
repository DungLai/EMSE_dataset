{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/293","repository_url":"https://api.github.com/repos/pyro-ppl/funsor","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/293/labels{/name}","comments_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/293/comments","events_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/293/events","html_url":"https://github.com/pyro-ppl/funsor/issues/293","id":541271944,"node_id":"MDU6SXNzdWU1NDEyNzE5NDQ=","number":293,"title":"Add generalized parallel-scan algorithms for dynamic factor graphs","user":{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false},"labels":[{"id":1215006862,"node_id":"MDU6TGFiZWwxMjE1MDA2ODYy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/enhancement","name":"enhancement","color":"0e8a16","default":true,"description":"New feature or request"},{"id":1262045842,"node_id":"MDU6TGFiZWwxMjYyMDQ1ODQy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/discussion","name":"discussion","color":"fef2c0","default":false,"description":""}],"state":"open","locked":false,"assignee":{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false},"assignees":[{"login":"eb8680","id":2032320,"node_id":"MDQ6VXNlcjIwMzIzMjA=","avatar_url":"https://avatars.githubusercontent.com/u/2032320?v=4","gravatar_id":"","url":"https://api.github.com/users/eb8680","html_url":"https://github.com/eb8680","followers_url":"https://api.github.com/users/eb8680/followers","following_url":"https://api.github.com/users/eb8680/following{/other_user}","gists_url":"https://api.github.com/users/eb8680/gists{/gist_id}","starred_url":"https://api.github.com/users/eb8680/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eb8680/subscriptions","organizations_url":"https://api.github.com/users/eb8680/orgs","repos_url":"https://api.github.com/users/eb8680/repos","events_url":"https://api.github.com/users/eb8680/events{/privacy}","received_events_url":"https://api.github.com/users/eb8680/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2019-12-21T02:40:46Z","updated_at":"2021-01-09T06:04:03Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"### Generalizing tensor variable elimination to dynamic factor graphs\r\n\r\n- [x] #398 A version of `modified_partial_sum_product` that works for time lag 1, and tests that compare it to `partial_sum_product` applied to the unrolled factors.\r\n- [x] #400 Making `modified_partial_sum_product` use `MarkovProduct` and additional tests that verify that it works with `funsor.optimize.apply_optimizer`\r\n- [ ] A version of `modified_partial_sum_product` that uses `sarkka_bilmes_product` directly, and tests that compare it to `partial_sum_product` applied to unrolled factors\r\n- [ ] Tests verifying that the `sarkka_bilmes_product`-based `modified_partial_sum_product` works with `funsor.optimize.apply_optimizer`, and any fixes necessary to make them pass (e.g. a first-class `funsor.Funsor` wrapper for `sarkka_bilmes_product` analogous to `MarkovProduct`)\r\n- [ ] A nice Funsor example or two to show off the new algorithm\r\n\r\nOptional or out of scope:\r\n- [ ] Optional: Reformulate algorithm in terms of recursive rewrite rules\r\n- [ ] Optional: removal of less general algorithms implemented in previous steps\r\n- [ ] Optional: Integration with Pyro for use with enumeration\r\n\r\n### Parallel-scan operation implementation\r\n\r\n- [x] #292 Implement parallel-scan `sarkka_bilmes_product` operation\r\n- [x] #294 Support global variables by passing a `global_vars` argument\r\n- [x] #294 Add Gaussian test cases\r\n- [x] #299 Add partially parallel elimination orders\r\n- [x] #409 Handle partial windows, either by padding or by unrolling the first chunk\r\n- [x] #415 Change `sarkka_bilmes_product` dimension name prefix from `P` to something less likely to interfere with user code\r\n- [ ] Make `sarkka_bilmes_product` a first-class Funsor analogous to `MarkovProduct`\r\n- [ ] Add docs defining the operation and explaining the parallelism-memory tradeoff for both `naive_sarkka_bilmes_product` and `sarkka_bilmes_product`\r\n- [ ] Add some examples illustrating the use of `sarkka_bilmes_product`\r\n\r\nOptional tasks:\r\n- [ ] Optional: Add `moment_matching` tests\r\n- [ ] Optional: Update `sarkka_bilmes_product` interface to follow the subscripting design in #167 or the `MarkovProduct`-like design in #399 \r\n- [ ] Optional: Change function name `sarkka_bilmes_product` to something more descriptive\r\n- [ ] Optional: reformulate `sequential_sum_product` into recursive rewrite rule","closed_by":null,"reactions":{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/293/reactions","total_count":2,"+1":1,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/293/timeline","performed_via_github_app":null,"state_reason":null}