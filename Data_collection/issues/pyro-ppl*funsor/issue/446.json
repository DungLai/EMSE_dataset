{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/446","repository_url":"https://api.github.com/repos/pyro-ppl/funsor","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/446/labels{/name}","comments_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/446/comments","events_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/446/events","html_url":"https://github.com/pyro-ppl/funsor/issues/446","id":797236532,"node_id":"MDU6SXNzdWU3OTcyMzY1MzI=","number":446,"title":"Redesign adjoint / transpose interface and algorithms","user":{"login":"fritzo","id":648532,"node_id":"MDQ6VXNlcjY0ODUzMg==","avatar_url":"https://avatars.githubusercontent.com/u/648532?v=4","gravatar_id":"","url":"https://api.github.com/users/fritzo","html_url":"https://github.com/fritzo","followers_url":"https://api.github.com/users/fritzo/followers","following_url":"https://api.github.com/users/fritzo/following{/other_user}","gists_url":"https://api.github.com/users/fritzo/gists{/gist_id}","starred_url":"https://api.github.com/users/fritzo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fritzo/subscriptions","organizations_url":"https://api.github.com/users/fritzo/orgs","repos_url":"https://api.github.com/users/fritzo/repos","events_url":"https://api.github.com/users/fritzo/events{/privacy}","received_events_url":"https://api.github.com/users/fritzo/received_events","type":"User","site_admin":false},"labels":[{"id":1262045842,"node_id":"MDU6TGFiZWwxMjYyMDQ1ODQy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/discussion","name":"discussion","color":"fef2c0","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-01-29T22:04:56Z","updated_at":"2021-02-21T15:36:37Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"[Design doc](https://docs.google.com/document/d/1jbpGwAJLAfTAi6IZyPUSArgXt_Km49573UI7izsDvsE/edit#)\r\n\r\n## Reading list\r\n\r\n- https://popl21.sigplan.org/details/lafi-2021-papers/9/Decomposing-reverse-mode-automatic-differentiation also [The Autodiff Cookbook](https://jax.readthedocs.io/en/latest/notebooks/autodiff_cookbook.html)\r\n- [The Simple Essence of Automatic Differentiation](https://arxiv.org/pdf/1804.00746.pdf)\r\n- [Semiring programming](https://arxiv.org/abs/1609.06954)\r\n- [Two tricks for the price of one: Linear filters and their transposes](https://www.researchgate.net/profile/Dan_Piponi/publication/220494154_Two_Tricks_for_the_Price_of_One_Linear_Filters_and_Their_Transposes/links/02bfe5112ba1e2c419000000.pdf)\r\n\r\n## Questions\r\n\r\n1. **Linear Types:** Funsor metadata includes domains for inputs and output, similar to a type signature `a1 * ... * an -> b`. Should metadata also indicate which inputs are treated linearly, similar to a type signature `a1 * ... * an -> (b1 * ... * bn -o c)`?\r\n2. **linearize():** How can we implement a `linearize(fn: Funsor, linear_vars: Frozenset[Variable])`? Can this introduce new patterns but avoid introducing new Funsor subclasses?\r\n3. **transpose():** How can we implement a `transpose(fn:Funsor, ???)`? Does this require new Funsor subclasses?\r\n4. **Types:** What is the type of backward-marginals? Of backward-sample? Of backward-argmax? Of backward-kbest?\r\n5. **Decomposition:** Can we decompose backward-sample into a Monte Carlo interpretation of backward-marginal? Can we decompose backward-argmax into a \"maximize\" interpretation of backward-marginal?\r\n6. Can we implement a tape-free adjoint algorithm, as suggested in [Elliot's \"Simple Essence of AD\"](https://arxiv.org/pdf/1804.00746.pdf)?","closed_by":null,"reactions":{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/446/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/446/timeline","performed_via_github_app":null,"state_reason":null}