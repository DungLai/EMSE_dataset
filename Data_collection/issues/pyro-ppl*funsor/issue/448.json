{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/448","repository_url":"https://api.github.com/repos/pyro-ppl/funsor","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/448/labels{/name}","comments_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/448/comments","events_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/448/events","html_url":"https://github.com/pyro-ppl/funsor/issues/448","id":797584979,"node_id":"MDU6SXNzdWU3OTc1ODQ5Nzk=","number":448,"title":"Should Number(x).dtype be inferred from type(x)?","user":{"login":"fritzo","id":648532,"node_id":"MDQ6VXNlcjY0ODUzMg==","avatar_url":"https://avatars.githubusercontent.com/u/648532?v=4","gravatar_id":"","url":"https://api.github.com/users/fritzo","html_url":"https://github.com/fritzo","followers_url":"https://api.github.com/users/fritzo/followers","following_url":"https://api.github.com/users/fritzo/following{/other_user}","gists_url":"https://api.github.com/users/fritzo/gists{/gist_id}","starred_url":"https://api.github.com/users/fritzo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fritzo/subscriptions","organizations_url":"https://api.github.com/users/fritzo/orgs","repos_url":"https://api.github.com/users/fritzo/repos","events_url":"https://api.github.com/users/fritzo/events{/privacy}","received_events_url":"https://api.github.com/users/fritzo/received_events","type":"User","site_admin":false},"labels":[{"id":1262045842,"node_id":"MDU6TGFiZWwxMjYyMDQ1ODQy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/discussion","name":"discussion","color":"fef2c0","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-01-31T00:19:27Z","updated_at":"2021-02-01T16:00:51Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Consider the `Flatten21` test, roughly\r\n```py\r\nm = i.output.size\r\nn = j.output.size\r\nij = Arange(\"ij\", m * n)\r\nreturn x(i=ij // Number(n, n + 1), j=ij % Number(n, n + 1))\r\n```\r\nNote since `n` is known statically from input types, we could simplify the final line to\r\n```py\r\nreturn x(i=ij // n, j=ij % n)\r\n```\r\nif we changed `NumberMeta` to coerce depending on Python datatype:\r\n```py\r\nclass NumberMeta(FunsorMeta):\r\n    def __call__(cls, data, dtype=None):\r\n        if dtype is None:\r\n            if isinstance(data, int):\r\n                dtype = data + 1\r\n            else:\r\n                dtype = \"real\"\r\n        return super(NumberMeta, cls).__call__(data, dtype)\r\n```\r\nThis seems reasonable since backends like PyTorch now infer tensor dtype from python datatype.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/448/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/448/timeline","performed_via_github_app":null,"state_reason":null}