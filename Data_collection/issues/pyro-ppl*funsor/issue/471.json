{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/471","repository_url":"https://api.github.com/repos/pyro-ppl/funsor","labels_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/471/labels{/name}","comments_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/471/comments","events_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/471/events","html_url":"https://github.com/pyro-ppl/funsor/issues/471","id":820327285,"node_id":"MDU6SXNzdWU4MjAzMjcyODU=","number":471,"title":"Add a LazyFunsor wrapper similar to LazyTensor","user":{"login":"fritzo","id":648532,"node_id":"MDQ6VXNlcjY0ODUzMg==","avatar_url":"https://avatars.githubusercontent.com/u/648532?v=4","gravatar_id":"","url":"https://api.github.com/users/fritzo","html_url":"https://github.com/fritzo","followers_url":"https://api.github.com/users/fritzo/followers","following_url":"https://api.github.com/users/fritzo/following{/other_user}","gists_url":"https://api.github.com/users/fritzo/gists{/gist_id}","starred_url":"https://api.github.com/users/fritzo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fritzo/subscriptions","organizations_url":"https://api.github.com/users/fritzo/orgs","repos_url":"https://api.github.com/users/fritzo/repos","events_url":"https://api.github.com/users/fritzo/events{/privacy}","received_events_url":"https://api.github.com/users/fritzo/received_events","type":"User","site_admin":false},"labels":[{"id":1215006862,"node_id":"MDU6TGFiZWwxMjE1MDA2ODYy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/enhancement","name":"enhancement","color":"0e8a16","default":true,"description":"New feature or request"},{"id":1262045842,"node_id":"MDU6TGFiZWwxMjYyMDQ1ODQy","url":"https://api.github.com/repos/pyro-ppl/funsor/labels/discussion","name":"discussion","color":"fef2c0","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-03-02T19:41:56Z","updated_at":"2021-03-02T19:43:09Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"This proposes a way to implement a [LazyTensor](https://arxiv.org/abs/2102.13267)-like feature in Funsor, should we decide we want it.\r\n\r\nAs explained in the LazyTensor paper, this interface improves debuggability by allowing code to run in different ways depending on whether or not attributes are accessed (e.g. via an assert statement or debug print statement), i.e. the interpretation is controlled not by an outer context manager but by inner attribute access. This might be a good interface for Funsor use in Pyro, where interpretations are outside of model-author control. E.g.\r\n```diff\r\n  x = pyro.sample(\"x\", dist.Normal(0, 1))\r\n+ print(x)  # <--- this could trigger eager evaluation\r\n  pyro.sample(\"y\", dist.Normal(x, 1), obs=data)\r\n```\r\n\r\nThe idea of `LazyFunsor` would be to create a mutable object with a Funsor-like interface, to allow construction of reflected funsor terms, and then to trigger some other interpretation as soon as any attribute of that `LazyFunsor` is accessed, e.g. `.data` or maybe even `.inputs`. Here's a rough sketch\r\n\r\n<details>\r\n\r\n```py\r\nclass LazyFunsor:\r\n    def __init__(self, term: Funsor):\r\n        self._term = term\r\n        self._done = False\r\n\r\n    # Any sort of access triggers interpretation.\r\n    def __str__(self):\r\n        return str(self._eval())\r\n\r\n    def _eval(self):\r\n        if not self._done:\r\n            self._term = reinterpret(self._term)\r\n            self._done = True\r\n        return self._term\r\n\r\n    # Operations are evaluated under reflect.\r\n    def __add__(self, other):\r\n        if isinstance(other, LazyFunsor):\r\n            other = other._term\r\n        with reflect:\r\n            term = self._term + other\r\n        return LazyFunsor(term, self._interpretation)\r\n\r\n# We'd want to convert to_funsor before leaving the enclosing interpretation context.\r\n@to_funsor.register(LazyFunsor)\r\ndef lazy_funsor_to_funsor(lazy_term):\r\n    return lazy_term._eval()\r\n```\r\n\r\n</details>","closed_by":null,"reactions":{"url":"https://api.github.com/repos/pyro-ppl/funsor/issues/471/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/pyro-ppl/funsor/issues/471/timeline","performed_via_github_app":null,"state_reason":null}