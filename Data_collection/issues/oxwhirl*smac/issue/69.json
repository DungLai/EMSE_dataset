{"url":"https://api.github.com/repos/oxwhirl/smac/issues/69","repository_url":"https://api.github.com/repos/oxwhirl/smac","labels_url":"https://api.github.com/repos/oxwhirl/smac/issues/69/labels{/name}","comments_url":"https://api.github.com/repos/oxwhirl/smac/issues/69/comments","events_url":"https://api.github.com/repos/oxwhirl/smac/issues/69/events","html_url":"https://github.com/oxwhirl/smac/issues/69","id":819451676,"node_id":"MDU6SXNzdWU4MTk0NTE2NzY=","number":69,"title":"Environment Cloning","user":{"login":"dimikout3","id":32622253,"node_id":"MDQ6VXNlcjMyNjIyMjUz","avatar_url":"https://avatars.githubusercontent.com/u/32622253?v=4","gravatar_id":"","url":"https://api.github.com/users/dimikout3","html_url":"https://github.com/dimikout3","followers_url":"https://api.github.com/users/dimikout3/followers","following_url":"https://api.github.com/users/dimikout3/following{/other_user}","gists_url":"https://api.github.com/users/dimikout3/gists{/gist_id}","starred_url":"https://api.github.com/users/dimikout3/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dimikout3/subscriptions","organizations_url":"https://api.github.com/users/dimikout3/orgs","repos_url":"https://api.github.com/users/dimikout3/repos","events_url":"https://api.github.com/users/dimikout3/events{/privacy}","received_events_url":"https://api.github.com/users/dimikout3/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-02T00:34:00Z","updated_at":"2021-07-19T15:20:15Z","closed_at":"2021-07-19T15:20:15Z","author_association":"NONE","active_lock_reason":null,"body":"Is there a way of create a copy of a running environment, in order to perform some kind of breadth-first search or apply Monte Carlo techniques. I have already tried using python's copy library but the threading gives me some hard time and deepcopy() works. I get the following error\r\n```\r\nenv2 = copy.deepcopy(env)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 172, in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 270, in _reconstruct\r\n    state = deepcopy(state, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 146, in deepcopy\r\n    y = copier(x, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 230, in _deepcopy_dict\r\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 172, in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 270, in _reconstruct\r\n    state = deepcopy(state, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 146, in deepcopy\r\n    y = copier(x, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 230, in _deepcopy_dict\r\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 172, in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 270, in _reconstruct\r\n    state = deepcopy(state, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 146, in deepcopy\r\n    y = copier(x, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 230, in _deepcopy_dict\r\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 172, in deepcopy\r\n    y = _reconstruct(x, memo, *rv)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 270, in _reconstruct\r\n    state = deepcopy(state, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 146, in deepcopy\r\n    y = copier(x, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 230, in _deepcopy_dict\r\n    y[deepcopy(key, memo)] = deepcopy(value, memo)\r\n  File \"/home/dkoutras/.conda/envs/GEP/lib/python3.8/copy.py\", line 161, in deepcopy\r\n    rv = reductor(4)\r\nTypeError: cannot pickle '_thread.lock' object\r\n```\r\nenv is the original smac environment and env2 the expected copy.","closed_by":{"login":"samvelyan","id":9724413,"node_id":"MDQ6VXNlcjk3MjQ0MTM=","avatar_url":"https://avatars.githubusercontent.com/u/9724413?v=4","gravatar_id":"","url":"https://api.github.com/users/samvelyan","html_url":"https://github.com/samvelyan","followers_url":"https://api.github.com/users/samvelyan/followers","following_url":"https://api.github.com/users/samvelyan/following{/other_user}","gists_url":"https://api.github.com/users/samvelyan/gists{/gist_id}","starred_url":"https://api.github.com/users/samvelyan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/samvelyan/subscriptions","organizations_url":"https://api.github.com/users/samvelyan/orgs","repos_url":"https://api.github.com/users/samvelyan/repos","events_url":"https://api.github.com/users/samvelyan/events{/privacy}","received_events_url":"https://api.github.com/users/samvelyan/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/oxwhirl/smac/issues/69/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/oxwhirl/smac/issues/69/timeline","performed_via_github_app":null,"state_reason":"completed"}