{"url":"https://api.github.com/repos/oxwhirl/smac/issues/24","repository_url":"https://api.github.com/repos/oxwhirl/smac","labels_url":"https://api.github.com/repos/oxwhirl/smac/issues/24/labels{/name}","comments_url":"https://api.github.com/repos/oxwhirl/smac/issues/24/comments","events_url":"https://api.github.com/repos/oxwhirl/smac/issues/24/events","html_url":"https://github.com/oxwhirl/smac/issues/24","id":545923377,"node_id":"MDU6SXNzdWU1NDU5MjMzNzc=","number":24,"title":"graphing smac_run_data.json data - 3s5z data does not match graph from paper","user":{"login":"GJHall","id":22969068,"node_id":"MDQ6VXNlcjIyOTY5MDY4","avatar_url":"https://avatars.githubusercontent.com/u/22969068?v=4","gravatar_id":"","url":"https://api.github.com/users/GJHall","html_url":"https://github.com/GJHall","followers_url":"https://api.github.com/users/GJHall/followers","following_url":"https://api.github.com/users/GJHall/following{/other_user}","gists_url":"https://api.github.com/users/GJHall/gists{/gist_id}","starred_url":"https://api.github.com/users/GJHall/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GJHall/subscriptions","organizations_url":"https://api.github.com/users/GJHall/orgs","repos_url":"https://api.github.com/users/GJHall/repos","events_url":"https://api.github.com/users/GJHall/events{/privacy}","received_events_url":"https://api.github.com/users/GJHall/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-01-06T20:26:57Z","updated_at":"2020-01-08T19:03:25Z","closed_at":"2020-01-08T16:37:15Z","author_association":"NONE","active_lock_reason":null,"body":"I have not been able to reproduce the graphs based on the .json file available. This is my first time working with json file types so I may be missing something obvious.\r\n\r\nIn the code, I read in smac_run_data.json and pull out the 5 runs based on a specific map and method. In this case, I use \"QMIX\" and \"3s5z\". To get the mean, I use np.mean on the 5 runs for their respective time steps. I then calculate the standard deviation using np.std and multiply by 2 to find my bounds for shading. I am using the 2*std as a ~95% confidence interval.\r\n\r\nHow did you graph smac_run_data.json?\r\n\r\nHere is the code I wrote to graph it.\r\n```\r\nimport pandas as pd\r\nimport numpy as np\r\ndf = pd.read_json('smac_run_data.json', orient='columns')\r\n# display maps and algorithms available\r\n# print(df.head(10))\r\n\r\n# select map and algorithm\r\nrow = 'QMIX'\r\ncolumn = '3s5z'\r\ndf1 = df.loc[row,column]\r\ndf1 = pd.DataFrame(df1)\r\n# select run and mean type\r\ndf2 = df1.iloc[[0],[0]]\r\n# other runs can be selected using: \r\n    # df2 = df1.iloc[[Run_1,Run_2,Run_3,Run_4,Run_5],[test_battle_won_mean, test_return_mean]]\r\n# convert into numpy\r\ndf3=pd.DataFrame(df2).to_numpy()\r\n# select the data from the list\r\ndf4 = df3[0,0]\r\n# convert the data into numpy workable format\r\n# not sure why this is needed to be done twice\r\ndf5=np.asarray(df4)\r\n# select the win ratio for the selected run\r\ndf6=df5[:,1]\r\n# pick up the time step indexes\r\ntimes = df5[:,0]\r\n# create dummy vector to initialize \r\nlength_test=df6.shape\r\nzero_hold = np.zeros(length_test)\r\n\r\nfor i in range(0,5):\r\n    df2 = df1.iloc[[i],[0]]\r\n    # other runs can be selected using: \r\n        # df2 = df1.iloc[[Run_1,Run_2,Run_3,Run_4,Run_5],[test_battle_won_mean, test_return_mean]]\r\n    # convert into numpy\r\n    df3=pd.DataFrame(df2).to_numpy()\r\n    # select the data from the list\r\n    df4 = df3[0,0]\r\n    # convert the data into numpy workable format\r\n    # not sure why this is needed to be done twice\r\n    df5=np.asarray(df4)\r\n    # select the win ratio for the selected run\r\n    df6=df5[:,1]\r\n\r\n    length_test=df6.shape\r\n\r\n    zero_hold = np.vstack((zero_hold,df6))\r\n\r\n# delete the zeros place holder array\r\nbattle_5_runs = zero_hold[1::]\r\n\r\n# calculate standard deviation and \r\nbattle_std=np.std(battle_5_runs,axis=0)*2 # using 2 standard deviation to get relatively close to 95% confidence\r\nbattle_mean=np.mean(battle_5_runs,axis=0)\r\nlower_std=battle_mean+battle_std\r\nupper_std=battle_mean-battle_std\r\nnp.max(times)\r\n\r\n\r\n# https://htmlcolorcodes.com/\r\nimport matplotlib.pyplot as plt\r\n\r\nplt.plot(times, battle_mean, color='#f5b041')\r\n# plt.plot(times, battle_5_runs[0], color='blue') # sanity checking that runs have data\r\nplt.axis([0, np.max(times), 0, 1])\r\nplt.fill_between(times, lower_std, upper_std, facecolor='#f5b041', alpha=0.3)\r\nplt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))\r\nplt.xlabel('T')\r\nplt.ylabel('Test Win Rate')\r\n\r\nplt.show()\r\n```\r\nedit: adding graphs for 3s5z using QMIX\r\nthis is the one I generated:\r\n![3s5z](https://user-images.githubusercontent.com/22969068/71930145-b1554b80-3160-11ea-802e-22e7b6451605.png)\r\n\r\nthis is the one listed in the QMIX publication (Figure 6):\r\n![qmix_fig_6](https://user-images.githubusercontent.com/22969068/71930410-304a8400-3161-11ea-870c-32ef1f162e67.PNG)\r\n","closed_by":{"login":"GJHall","id":22969068,"node_id":"MDQ6VXNlcjIyOTY5MDY4","avatar_url":"https://avatars.githubusercontent.com/u/22969068?v=4","gravatar_id":"","url":"https://api.github.com/users/GJHall","html_url":"https://github.com/GJHall","followers_url":"https://api.github.com/users/GJHall/followers","following_url":"https://api.github.com/users/GJHall/following{/other_user}","gists_url":"https://api.github.com/users/GJHall/gists{/gist_id}","starred_url":"https://api.github.com/users/GJHall/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GJHall/subscriptions","organizations_url":"https://api.github.com/users/GJHall/orgs","repos_url":"https://api.github.com/users/GJHall/repos","events_url":"https://api.github.com/users/GJHall/events{/privacy}","received_events_url":"https://api.github.com/users/GJHall/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/oxwhirl/smac/issues/24/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/oxwhirl/smac/issues/24/timeline","performed_via_github_app":null,"state_reason":"completed"}