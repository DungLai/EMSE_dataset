{"url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/146","repository_url":"https://api.github.com/repos/voxelmorph/voxelmorph","labels_url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/146/labels{/name}","comments_url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/146/comments","events_url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/146/events","html_url":"https://github.com/voxelmorph/voxelmorph/issues/146","id":563118518,"node_id":"MDU6SXNzdWU1NjMxMTg1MTg=","number":146,"title":"Problems with affine transform","user":{"login":"HansLeonardVanBrueggemann","id":445665,"node_id":"MDQ6VXNlcjQ0NTY2NQ==","avatar_url":"https://avatars.githubusercontent.com/u/445665?v=4","gravatar_id":"","url":"https://api.github.com/users/HansLeonardVanBrueggemann","html_url":"https://github.com/HansLeonardVanBrueggemann","followers_url":"https://api.github.com/users/HansLeonardVanBrueggemann/followers","following_url":"https://api.github.com/users/HansLeonardVanBrueggemann/following{/other_user}","gists_url":"https://api.github.com/users/HansLeonardVanBrueggemann/gists{/gist_id}","starred_url":"https://api.github.com/users/HansLeonardVanBrueggemann/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/HansLeonardVanBrueggemann/subscriptions","organizations_url":"https://api.github.com/users/HansLeonardVanBrueggemann/orgs","repos_url":"https://api.github.com/users/HansLeonardVanBrueggemann/repos","events_url":"https://api.github.com/users/HansLeonardVanBrueggemann/events{/privacy}","received_events_url":"https://api.github.com/users/HansLeonardVanBrueggemann/received_events","type":"User","site_admin":false},"labels":[{"id":1347467145,"node_id":"MDU6TGFiZWwxMzQ3NDY3MTQ1","url":"https://api.github.com/repos/voxelmorph/voxelmorph/labels/voxelmorph","name":"voxelmorph","color":"1d76db","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-02-11T10:46:11Z","updated_at":"2020-02-11T20:22:54Z","closed_at":"2020-02-11T20:22:54Z","author_association":"NONE","active_lock_reason":null,"body":"Hi there, \r\n\r\nI'm trying to pass an affine transform matrix to the SpatialTransform layer \r\nThe matrix is of size 4x4, here is the output of the network\r\n\r\n```\r\nW_conv (Conv3D)                 (None, 1, 3, 3, 1)   5161        concat256[0][0]                  \r\n__________________________________________________________________________________________________\r\nb_conv (Conv3D)                 (None, 1, 3, 1, 1)   15481       concat256[0][0]                  \r\n__________________________________________________________________________________________________\r\nlambda_23 (Lambda)              (None, 4, 4)         0           W_conv[0][0]                     \r\n                                                                 b_conv[0][0]                     \r\n==================================================================================================\r\n\r\n```\r\nBut I keep stumbling upon errors. Here is the one I cannot solve:\r\n\r\n(Any idea what's going wrong?)\r\n```\r\n\r\n---------------------------------------------------------------------------\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in _create_c_op(graph, node_def, inputs, control_inputs)\r\n   1627   try:\r\n-> 1628     c_op = c_api.TF_FinishOperation(op_desc)\r\n   1629   except errors.InvalidArgumentError as e:\r\n\r\nInvalidArgumentError: Dimensions must be equal, but are 4 and 3 for 'affine_wrap_8/map/while/add_1' (op: 'Add') with input shapes: [4,4], [3,4].\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-23-d2f6a7ea4918> in <module>\r\n      2 from keras.optimizers import Adam\r\n      3 \r\n----> 4 net = build_network((160, 192, 192, 1))\r\n      5 lambda_reglr, lambda_recon = K.variable(0.), K.variable(0.)\r\n      6 net.compile(Adam(4e-5), 'mse')\r\n\r\n~/mythesis/projects/2018_wholebody/train_deformation.py in build_network(input_shape, name)\r\n    131 \r\n    132     transform_0 = lay.Lambda(function=lambda x: affine_embedding(x[0], x[1]), name='affine')([W, b])\r\n--> 133     wrapped_0 = SpatialTransformer(name='affine_wrap')([inflow_moving, transform_0])\r\n    134 \r\n    135     return Model([inflow_fixed, inflow_moving], [transform_0, wrapped_0], name=name)\r\n\r\n~/tf-1.9/lib/python3.5/site-packages/keras/engine/base_layer.py in __call__(self, inputs, **kwargs)\r\n    455             # Actually call the layer,\r\n    456             # collecting output(s), mask(s), and shape(s).\r\n--> 457             output = self.call(inputs, **kwargs)\r\n    458             output_mask = self.compute_mask(inputs, previous_mask)\r\n    459 \r\n\r\n~/mythesis/externals/neuron/neuron/layers.py in call(self, inputs)\r\n    139         # go from affine\r\n    140         if self.is_affine:\r\n--> 141             trf = tf.map_fn(lambda x: self._single_aff_to_shift(x, vol.shape[1:-1]), trf, dtype=tf.float32)\r\n    142 \r\n    143         # prepare location shift\r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/ops/functional_ops.py in map_fn(fn, elems, dtype, parallel_iterations, back_prop, swap_memory, infer_shape, name)\r\n    492         back_prop=back_prop,\r\n    493         swap_memory=swap_memory,\r\n--> 494         maximum_iterations=n)\r\n    495     results_flat = [r.stack() for r in r_a]\r\n    496 \r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/ops/control_flow_ops.py in while_loop(cond, body, loop_vars, shape_invariants, parallel_iterations, back_prop, swap_memory, name, maximum_iterations, return_same_structure)\r\n   3289       ops.add_to_collection(ops.GraphKeys.WHILE_CONTEXT, loop_context)\r\n   3290     result = loop_context.BuildLoop(cond, body, loop_vars, shape_invariants,\r\n-> 3291                                     return_same_structure)\r\n   3292     if maximum_iterations is not None:\r\n   3293       return result[1]\r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/ops/control_flow_ops.py in BuildLoop(self, pred, body, loop_vars, shape_invariants, return_same_structure)\r\n   3002       with ops.get_default_graph()._mutation_lock():  # pylint: disable=protected-access\r\n   3003         original_body_result, exit_vars = self._BuildLoop(\r\n-> 3004             pred, body, original_loop_vars, loop_vars, shape_invariants)\r\n   3005     finally:\r\n   3006       self.Exit()\r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/ops/control_flow_ops.py in _BuildLoop(self, pred, body, original_loop_vars, loop_vars, shape_invariants)\r\n   2937         flat_sequence=vars_for_body_with_tensor_arrays)\r\n   2938     pre_summaries = ops.get_collection(ops.GraphKeys._SUMMARY_COLLECTION)  # pylint: disable=protected-access\r\n-> 2939     body_result = body(*packed_vars_for_body)\r\n   2940     post_summaries = ops.get_collection(ops.GraphKeys._SUMMARY_COLLECTION)  # pylint: disable=protected-access\r\n   2941     if not nest.is_sequence(body_result):\r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/ops/control_flow_ops.py in <lambda>(i, lv)\r\n   3258         cond = lambda i, lv: (  # pylint: disable=g-long-lambda\r\n   3259             math_ops.logical_and(i < maximum_iterations, orig_cond(*lv)))\r\n-> 3260         body = lambda i, lv: (i + 1, orig_body(*lv))\r\n   3261 \r\n   3262     if context.executing_eagerly():\r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/ops/functional_ops.py in compute(i, tas)\r\n    481       \"\"\"\r\n    482       packed_values = input_pack([elem_ta.read(i) for elem_ta in elems_ta])\r\n--> 483       packed_fn_values = fn(packed_values)\r\n    484       nest.assert_same_structure(dtype or elems, packed_fn_values)\r\n    485       flat_fn_values = output_flatten(packed_fn_values)\r\n\r\n~/mythesis/externals/neuron/neuron/layers.py in <lambda>(x)\r\n    139         # go from affine\r\n    140         if self.is_affine:\r\n--> 141             trf = tf.map_fn(lambda x: self._single_aff_to_shift(x, vol.shape[1:-1]), trf, dtype=tf.float32)\r\n    142 \r\n    143         # prepare location shift\r\n\r\n~/mythesis/externals/neuron/neuron/layers.py in _single_aff_to_shift(self, trf, volshape)\r\n    159 \r\n    160         # note this is unnecessarily extra graph since at every batch entry we have a tf.eye graph\r\n--> 161         trf += tf.eye(self.ndims+1)[:self.ndims,:]  # add identity, hence affine is a shift from identitiy\r\n    162         return affine_to_shift(trf, volshape, shift_center=True)\r\n    163 \r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/ops/math_ops.py in binary_op_wrapper(x, y)\r\n    864     with ops.name_scope(None, op_name, [x, y]) as name:\r\n    865       if isinstance(x, ops.Tensor) and isinstance(y, ops.Tensor):\r\n--> 866         return func(x, y, name=name)\r\n    867       elif not isinstance(y, sparse_tensor.SparseTensor):\r\n    868         try:\r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/ops/gen_math_ops.py in add(x, y, name)\r\n    299   if _ctx is None or not _ctx._eager_context.is_eager:\r\n    300     _, _, _op = _op_def_lib._apply_op_helper(\r\n--> 301         \"Add\", x=x, y=y, name=name)\r\n    302     _result = _op.outputs[:]\r\n    303     _inputs_flat = _op.inputs\r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\r\n    785         op = g.create_op(op_type_name, inputs, output_types, name=scope,\r\n    786                          input_types=input_types, attrs=attr_protos,\r\n--> 787                          op_def=op_def)\r\n    788       return output_structure, op_def.is_stateful, op\r\n    789 \r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\r\n    486                 'in a future version' if date is None else ('after %s' % date),\r\n    487                 instructions)\r\n--> 488       return func(*args, **kwargs)\r\n    489     return tf_decorator.make_decorator(func, new_func, 'deprecated',\r\n    490                                        _add_deprecated_arg_notice_to_docstring(\r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in create_op(***failed resolving arguments***)\r\n   3272           input_types=input_types,\r\n   3273           original_op=self._default_original_op,\r\n-> 3274           op_def=op_def)\r\n   3275       self._create_op_helper(ret, compute_device=compute_device)\r\n   3276     return ret\r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in __init__(self, node_def, g, inputs, output_types, control_inputs, input_types, original_op, op_def)\r\n   1790           op_def, inputs, node_def.attr)\r\n   1791       self._c_op = _create_c_op(self._graph, node_def, grouped_inputs,\r\n-> 1792                                 control_input_ops)\r\n   1793 \r\n   1794     # Initialize self._outputs.\r\n\r\n~/tf-1.9/lib/python3.5/site-packages/tensorflow/python/framework/ops.py in _create_c_op(graph, node_def, inputs, control_inputs)\r\n   1629   except errors.InvalidArgumentError as e:\r\n   1630     # Convert to ValueError for backwards compatibility.\r\n-> 1631     raise ValueError(str(e))\r\n   1632 \r\n   1633   return c_op\r\n\r\nValueError: Dimensions must be equal, but are 4 and 3 for 'affine_wrap_8/map/while/add_1' (op: 'Add') with input shapes: [4,4], [3,4].\r\n```","closed_by":{"login":"adalca","id":3219675,"node_id":"MDQ6VXNlcjMyMTk2NzU=","avatar_url":"https://avatars.githubusercontent.com/u/3219675?v=4","gravatar_id":"","url":"https://api.github.com/users/adalca","html_url":"https://github.com/adalca","followers_url":"https://api.github.com/users/adalca/followers","following_url":"https://api.github.com/users/adalca/following{/other_user}","gists_url":"https://api.github.com/users/adalca/gists{/gist_id}","starred_url":"https://api.github.com/users/adalca/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adalca/subscriptions","organizations_url":"https://api.github.com/users/adalca/orgs","repos_url":"https://api.github.com/users/adalca/repos","events_url":"https://api.github.com/users/adalca/events{/privacy}","received_events_url":"https://api.github.com/users/adalca/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/146/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/146/timeline","performed_via_github_app":null,"state_reason":"completed"}