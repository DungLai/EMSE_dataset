{"url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/214","repository_url":"https://api.github.com/repos/voxelmorph/voxelmorph","labels_url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/214/labels{/name}","comments_url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/214/comments","events_url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/214/events","html_url":"https://github.com/voxelmorph/voxelmorph/issues/214","id":692453001,"node_id":"MDU6SXNzdWU2OTI0NTMwMDE=","number":214,"title":"MeanStream broken in TF2 (with fixes)","user":{"login":"neel-dey","id":46202852,"node_id":"MDQ6VXNlcjQ2MjAyODUy","avatar_url":"https://avatars.githubusercontent.com/u/46202852?v=4","gravatar_id":"","url":"https://api.github.com/users/neel-dey","html_url":"https://github.com/neel-dey","followers_url":"https://api.github.com/users/neel-dey/followers","following_url":"https://api.github.com/users/neel-dey/following{/other_user}","gists_url":"https://api.github.com/users/neel-dey/gists{/gist_id}","starred_url":"https://api.github.com/users/neel-dey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/neel-dey/subscriptions","organizations_url":"https://api.github.com/users/neel-dey/orgs","repos_url":"https://api.github.com/users/neel-dey/repos","events_url":"https://api.github.com/users/neel-dey/events{/privacy}","received_events_url":"https://api.github.com/users/neel-dey/received_events","type":"User","site_admin":false},"labels":[{"id":1347467145,"node_id":"MDU6TGFiZWwxMzQ3NDY3MTQ1","url":"https://api.github.com/repos/voxelmorph/voxelmorph/labels/voxelmorph","name":"voxelmorph","color":"1d76db","default":false,"description":""},{"id":1488776807,"node_id":"MDU6TGFiZWwxNDg4Nzc2ODA3","url":"https://api.github.com/repos/voxelmorph/voxelmorph/labels/neuron","name":"neuron","color":"84cde0","default":false,"description":""}],"state":"closed","locked":false,"assignee":{"login":"ahoopes","id":24280487,"node_id":"MDQ6VXNlcjI0MjgwNDg3","avatar_url":"https://avatars.githubusercontent.com/u/24280487?v=4","gravatar_id":"","url":"https://api.github.com/users/ahoopes","html_url":"https://github.com/ahoopes","followers_url":"https://api.github.com/users/ahoopes/followers","following_url":"https://api.github.com/users/ahoopes/following{/other_user}","gists_url":"https://api.github.com/users/ahoopes/gists{/gist_id}","starred_url":"https://api.github.com/users/ahoopes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ahoopes/subscriptions","organizations_url":"https://api.github.com/users/ahoopes/orgs","repos_url":"https://api.github.com/users/ahoopes/repos","events_url":"https://api.github.com/users/ahoopes/events{/privacy}","received_events_url":"https://api.github.com/users/ahoopes/received_events","type":"User","site_admin":false},"assignees":[{"login":"ahoopes","id":24280487,"node_id":"MDQ6VXNlcjI0MjgwNDg3","avatar_url":"https://avatars.githubusercontent.com/u/24280487?v=4","gravatar_id":"","url":"https://api.github.com/users/ahoopes","html_url":"https://github.com/ahoopes","followers_url":"https://api.github.com/users/ahoopes/followers","following_url":"https://api.github.com/users/ahoopes/following{/other_user}","gists_url":"https://api.github.com/users/ahoopes/gists{/gist_id}","starred_url":"https://api.github.com/users/ahoopes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ahoopes/subscriptions","organizations_url":"https://api.github.com/users/ahoopes/orgs","repos_url":"https://api.github.com/users/ahoopes/repos","events_url":"https://api.github.com/users/ahoopes/events{/privacy}","received_events_url":"https://api.github.com/users/ahoopes/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2020-09-03T22:32:39Z","updated_at":"2020-09-06T20:23:38Z","closed_at":"2020-09-06T20:23:37Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I believe the migration to TF2 from Keras introduced a few bugs in the `MeanStream` layer used for moving average computation in template construction. They are:\r\n- `cap` is set to trainable, which shouldn't happen.\r\n- `self.mean` and `self.count` do not update and remain at their zero initialization.\r\n\r\nThe same issues presumably exist in `CovStream` as well, but I haven't tested that layer.\r\n\r\nMinimal working example to illustrate the problem (assuming that you have the usual dependencies in `./ext/`):\r\n```python\r\nimport sys\r\n\r\nsys.path.append('./ext/voxelmorph/')\r\nsys.path.append('./ext/neurite-master/')\r\nsys.path.append('./ext/pynd-lib/')\r\nsys.path.append('./ext/pytools-lib/')\r\n\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport tensorflow.keras.layers as KL\r\nimport tensorflow.keras.backend as K\r\n\r\nfrom neurite.tf.layers import MeanStream\r\nfrom voxelmorph.tf.layers import SpatialTransformer, VecInt\r\n\r\n# ----------------------------------------------------------------------------------------------------\r\n# Define and initialize network:\r\n\r\ndef dummy_net():\r\n    moving_image = tf.keras.layers.Input(shape=[8, 8, 1])\r\n    fixed_image = tf.keras.layers.Input(shape=[8, 8, 1])\r\n\r\n    image_input = KL.concatenate([moving_image, fixed_image])\r\n\r\n    conv_layer = KL.Conv2D(\r\n        filters=3,\r\n        kernel_size=3,\r\n        padding='same',\r\n        activation='elu',\r\n    )(image_input)\r\n\r\n    vel = KL.Conv2D(\r\n        filters=2,\r\n        kernel_size=3,\r\n        padding='same',\r\n        kernel_initializer=tf.keras.initializers.RandomNormal(\r\n            mean=0.0,\r\n            stddev=1e-3,\r\n        ),\r\n        name='vel_field',\r\n    )(conv_layer)\r\n\r\n    diff_field = VecInt(method='ss', int_steps=5, name='def_field')(vel)\r\n    diff_field_ms = MeanStream(name='mean_stream', cap=10)(diff_field)\r\n    \r\n    # Transform:\r\n    moved_image = SpatialTransformer()([moving_image, diff_field])\r\n    \r\n    return tf.keras.Model(\r\n        inputs=[moving_image, fixed_image],\r\n        outputs=[moved_image, diff_field_ms],\r\n    )\r\n\r\nnet = dummy_net()\r\n\r\n# ----------------------------------------------------------------------------------------------------\r\n# Set up random moving and fixed images to register and a\r\n# blank deformation field for moving average squared 2-norm loss\r\n\r\ndummy_moving = np.random.rand(128, 8, 8, 1)\r\ndummy_fixed = np.random.rand(128, 8, 8, 1)\r\n\r\nzero_phi = np.zeros((128, 8, 8, 2))\r\n\r\n# ----------------------------------------------------------------------------------------------------\r\n# Compile and inspect model:\r\n\r\nmean_stream_loss = lambda _, y_pred: K.mean(K.square(y_pred))\r\n\r\nnet.compile(\r\n    optimizer='Adam',\r\n    loss=['mse', mean_stream_loss],\r\n    loss_weights=[1., 1.],\r\n)\r\n\r\n# Corresponding to cap, mean, and count:\r\nprint('number of weights in MeanStream layer: {}'.format(len(net.layers[-1].weights)))\r\n\r\n# ----------------------------------------------------------------------------------------------------\r\n# Train model\r\n\r\nnet.fit(\r\n    [dummy_moving, dummy_fixed],\r\n    [dummy_fixed, zero_phi],\r\n    epochs=2,\r\n    batch_size=4,\r\n)\r\n\r\n# ----------------------------------------------------------------------------------------------------\r\n# Inspect MeanStream layer:\r\n\r\n# cap should be non trainable, but does get trained:\r\nprint('cap weight (should be 10.0): {}'.format(net.layers[-1].weights[0].numpy()))\r\n\r\n# mean should be updated, but does not update:\r\nprint('mean stream (should be nonzero): {}'.format(net.layers[-1].weights[1].numpy()))\r\n\r\n# count should be updated, but does not update:\r\nprint('count (should be number of iterations): {}'.format(net.layers[-1].weights[2].numpy()))\r\n```\r\n\r\nThe output of the last section is (abbreviated for space):\r\n```\r\ncap weight (should be 10.0): 10.071270942687988\r\nmean stream (should be nonzero): [[[0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]]\r\n\r\n ...\r\n\r\n [[0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]\r\n  [0. 0.]]]\r\ncount (should be number of iterations): [0.]\r\n```\r\n\r\nThe fix to the layer is simple enough,\r\n```python\r\nclass MeanStream(Layer):\r\n    \"\"\" \r\n    Maintain stream of data mean. \r\n    cap refers to mainting an approximation of up to that number of subjects -- that is,\r\n    any incoming datapoint will have at least 1/cap weight.\r\n    \"\"\"\r\n\r\n    def __init__(self, cap=100, **kwargs):\r\n        self.cap = tf.Variable(cap, dtype='float32', trainable=False)\r\n        super(MeanStream, self).__init__(**kwargs)\r\n\r\n    def build(self, input_shape):\r\n        # Create mean and count\r\n        # These are weights because just maintaining variables don't get saved with the model, and we'd like\r\n        # to have these numbers saved when we save the model.\r\n        # But we need to make sure that the weights are untrainable.\r\n        self.mean = self.add_weight(name='mean', \r\n                                      shape=input_shape[1:],\r\n                                      initializer='zeros',\r\n                                      trainable=False)\r\n        self.count = self.add_weight(name='count', \r\n                                      shape=[1],\r\n                                      initializer='zeros',\r\n                                      trainable=False)\r\n\r\n        # self.mean = K.zeros(input_shape[1:], name='mean')\r\n        # self.count = K.variable(0.0, name='count')\r\n        super(MeanStream, self).build(input_shape)  # Be sure to call this somewhere!\r\n\r\n    def call(self, x):\r\n        # get new mean and count\r\n        this_bs_int = K.shape(x)[0]\r\n        new_mean, new_count = _mean_update(self.mean, self.count, x, self.cap)\r\n        \r\n        # update op\r\n        self.count.assign(new_count)\r\n        self.mean.assign(new_mean)\r\n\r\n        # prep for broadcasting :(\r\n        p = tf.concat((K.reshape(this_bs_int, (1,)), K.shape(self.mean)), 0)\r\n        z = tf.ones(p)\r\n        \r\n        # the first few 1000 should not matter that much towards this cost\r\n        return K.minimum(1., new_count/self.cap) * (z * K.expand_dims(new_mean, 0))\r\n\r\n    def compute_output_shape(self, input_shape):\r\n        return input_shape\r\n```\r\n\r\nAnd now the output of the final section is as expected:\r\n```\r\ncap weight (should be 10.0): 10.0\r\nmean stream (should be nonzero): [[[-0.07825246 -0.09038504]\r\n  [-0.10282476 -0.15295237]\r\n  [-0.10901316 -0.16708842]\r\n  [-0.10890472 -0.16592586]\r\n  [-0.11188303 -0.16681042]\r\n  [-0.10905293 -0.16895878]\r\n  [-0.09071881 -0.1536277 ]\r\n  [-0.0681491  -0.1155884 ]]\r\n\r\n ...\r\n\r\n [[-0.11265221 -0.08047441]\r\n  [-0.15044352 -0.12022634]\r\n  [-0.14827192 -0.11675054]\r\n  [-0.142835   -0.11020599]\r\n  [-0.14490151 -0.10929355]\r\n  [-0.15004317 -0.11402743]\r\n  [-0.12494531 -0.10127738]\r\n  [-0.08241522 -0.07053082]]]\r\ncount (should be number of iterations): [256.]\r\n```\r\n\r\nWasn't sure of whether to open this in the `voxelmorph` repo or `neurite`. Happy to send a PR to `neurite` with the changes :)","closed_by":{"login":"neel-dey","id":46202852,"node_id":"MDQ6VXNlcjQ2MjAyODUy","avatar_url":"https://avatars.githubusercontent.com/u/46202852?v=4","gravatar_id":"","url":"https://api.github.com/users/neel-dey","html_url":"https://github.com/neel-dey","followers_url":"https://api.github.com/users/neel-dey/followers","following_url":"https://api.github.com/users/neel-dey/following{/other_user}","gists_url":"https://api.github.com/users/neel-dey/gists{/gist_id}","starred_url":"https://api.github.com/users/neel-dey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/neel-dey/subscriptions","organizations_url":"https://api.github.com/users/neel-dey/orgs","repos_url":"https://api.github.com/users/neel-dey/repos","events_url":"https://api.github.com/users/neel-dey/events{/privacy}","received_events_url":"https://api.github.com/users/neel-dey/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/214/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/voxelmorph/voxelmorph/issues/214/timeline","performed_via_github_app":null,"state_reason":"completed"}