{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/286","repository_url":"https://api.github.com/repos/Neuraxio/Neuraxle","labels_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/286/labels{/name}","comments_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/286/comments","events_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/286/events","html_url":"https://github.com/Neuraxio/Neuraxle/issues/286","id":579534571,"node_id":"MDU6SXNzdWU1Nzk1MzQ1NzE=","number":286,"title":"Feature: Proper Early stopping","user":{"login":"alexbrillant","id":19400226,"node_id":"MDQ6VXNlcjE5NDAwMjI2","avatar_url":"https://avatars.githubusercontent.com/u/19400226?v=4","gravatar_id":"","url":"https://api.github.com/users/alexbrillant","html_url":"https://github.com/alexbrillant","followers_url":"https://api.github.com/users/alexbrillant/followers","following_url":"https://api.github.com/users/alexbrillant/following{/other_user}","gists_url":"https://api.github.com/users/alexbrillant/gists{/gist_id}","starred_url":"https://api.github.com/users/alexbrillant/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexbrillant/subscriptions","organizations_url":"https://api.github.com/users/alexbrillant/orgs","repos_url":"https://api.github.com/users/alexbrillant/repos","events_url":"https://api.github.com/users/alexbrillant/events{/privacy}","received_events_url":"https://api.github.com/users/alexbrillant/received_events","type":"User","site_admin":false},"labels":[{"id":1290971222,"node_id":"MDU6TGFiZWwxMjkwOTcxMjIy","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-03-11T20:43:38Z","updated_at":"2021-02-25T17:39:06Z","closed_at":"2021-02-25T17:38:53Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Use a counter and a min value and update the min value if it changed at each epoch.\r\n\r\n```\r\nclass EarlyStoppingCallback(BaseCallback):\r\n    \"\"\"\r\n    Perform early stopping when there is multiple epochs in a row that didn't improve the performance of the model.\r\n\r\n    Example usage :\r\n\r\n    .. code-block:: python\r\n\r\n        trainer = Trainer(\r\n            metrics=self.metrics,\r\n            callbacks=self.callbacks,\r\n            score=self.scoring_function,\r\n            epochs=self.epochs\r\n        )\r\n\r\n        trial = trainer.execute_trial(\r\n            p=p,\r\n            trial_repository=repo_trial,\r\n            train_data_container=training_data_container,\r\n            validation_data_container=validation_data_container,\r\n            context=context\r\n        )\r\n\r\n        pipeline = trainer.refit(repo_trial.pipeline, data_container, context)\r\n\r\n\r\n    .. seealso::\r\n        :class:`AutoML`,\r\n        :class:`Trial`,\r\n        :class:`HyperparamsRepository`,\r\n        :class:`HyperparameterOptimizer`,\r\n        :class:`RandomSearchHyperparameterOptimizer`,\r\n        :class:`DataContainer`\r\n    \"\"\"\r\n\r\n    def __init__(self, max_epochs_without_improvement):\r\n        self.n_epochs_without_improvement = max_epochs_without_improvement\r\n\r\n    def call(\r\n            self,\r\n            trial: Trial,\r\n            epoch_number: int,\r\n            total_epochs: int,\r\n            input_train: DataContainer,\r\n            pred_train: DataContainer,\r\n            input_val: DataContainer,\r\n            pred_val: DataContainer,\r\n            is_finished_and_fitted: bool\r\n    ):\r\n        validation_scores = trial.get_validation_scores()\r\n        if len(validation_scores) > self.n_epochs_without_improvement:\r\n            higher_score_is_better = trial.get_higher_score_is_better()\r\n            if validation_scores[-self.n_epochs_without_improvement] >= validation_scores[-1] and higher_score_is_better:\r\n                return True\r\n            if validation_scores[-self.n_epochs_without_improvement] <= validation_scores[-1] and not higher_score_is_better:\r\n                return True\r\n        return False\r\n\r\n```","closed_by":{"login":"vincent-antaki","id":74119210,"node_id":"MDQ6VXNlcjc0MTE5MjEw","avatar_url":"https://avatars.githubusercontent.com/u/74119210?v=4","gravatar_id":"","url":"https://api.github.com/users/vincent-antaki","html_url":"https://github.com/vincent-antaki","followers_url":"https://api.github.com/users/vincent-antaki/followers","following_url":"https://api.github.com/users/vincent-antaki/following{/other_user}","gists_url":"https://api.github.com/users/vincent-antaki/gists{/gist_id}","starred_url":"https://api.github.com/users/vincent-antaki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vincent-antaki/subscriptions","organizations_url":"https://api.github.com/users/vincent-antaki/orgs","repos_url":"https://api.github.com/users/vincent-antaki/repos","events_url":"https://api.github.com/users/vincent-antaki/events{/privacy}","received_events_url":"https://api.github.com/users/vincent-antaki/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/286/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/286/timeline","performed_via_github_app":null,"state_reason":"completed"}