{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/468","repository_url":"https://api.github.com/repos/Neuraxio/Neuraxle","labels_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/468/labels{/name}","comments_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/468/comments","events_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/468/events","html_url":"https://github.com/Neuraxio/Neuraxle/issues/468","id":844707363,"node_id":"MDU6SXNzdWU4NDQ3MDczNjM=","number":468,"title":"Bug: Rounding discrete distributions in the Orthogonal (SVD) TPE will offset the best point found","user":{"login":"guillaume-chevalier","id":11862328,"node_id":"MDQ6VXNlcjExODYyMzI4","avatar_url":"https://avatars.githubusercontent.com/u/11862328?v=4","gravatar_id":"","url":"https://api.github.com/users/guillaume-chevalier","html_url":"https://github.com/guillaume-chevalier","followers_url":"https://api.github.com/users/guillaume-chevalier/followers","following_url":"https://api.github.com/users/guillaume-chevalier/following{/other_user}","gists_url":"https://api.github.com/users/guillaume-chevalier/gists{/gist_id}","starred_url":"https://api.github.com/users/guillaume-chevalier/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guillaume-chevalier/subscriptions","organizations_url":"https://api.github.com/users/guillaume-chevalier/orgs","repos_url":"https://api.github.com/users/guillaume-chevalier/repos","events_url":"https://api.github.com/users/guillaume-chevalier/events{/privacy}","received_events_url":"https://api.github.com/users/guillaume-chevalier/received_events","type":"User","site_admin":false},"labels":[{"id":1290971220,"node_id":"MDU6TGFiZWwxMjkwOTcxMjIw","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":1290971225,"node_id":"MDU6TGFiZWwxMjkwOTcxMjI1","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/invalid","name":"invalid","color":"e4e669","default":true,"description":"This doesn't seem right"},{"id":1290971227,"node_id":"MDU6TGFiZWwxMjkwOTcxMjI3","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/wontfix","name":"wontfix","color":"ffffff","default":true,"description":"This will not be worked on"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-30T15:08:27Z","updated_at":"2022-10-01T17:41:16Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"**Describe the bug**\r\nPoint fixe: ré-encoder, trouver point à mi-distance entre point présent et point idéal, re-décoder, re-appliquer arrondi (en considérant le choix fait au point #3), ensuite répéter ces étapes N fois ou jusqu’à convergence. + tenir registre de tous les anciens points en cas de divergence. \r\n\r\n**To Reproduce**\r\n1. Do an SVD TPE\r\n2. Do #466 and #467  \r\n3. Then after the rounding, if you were to re-encode your point into the SVD space, you would find that it drifted compared to the best point you thought you had. \r\n\r\n**Expected behavior**\r\nThe best point found should not drift too much in the step 3 above. \r\n\r\n**Suggested Fix**\r\nUse a [fixed point algorithm](https://en.wikipedia.org/wiki/Fixed-point_iteration) to converge back to the best point after the rounding. \r\nSuggested procedure: \r\n1. decode the \"theoretically best TPE point\" from SVD back to original space\r\n2. round the discrete points using #466 and #467\r\n3. re-encode the new point into the SVD space\r\n4. find the midpoint between the new point and the \"theoretically best TPE point\"\r\n5. go to step 1 again and repeat this loop until convergence and for a maximum of 15 iterations. \r\n\r\nOptional: could perhaps also use [Runge-Kutta methods](https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods) such as RK4 to speed up convergence if the convergence is very slow. \r\n\r\nSuggested code: \r\n```\r\n\tDef fixed_point_iterations(b, a, N_iters)\r\n\t\tTransformed_a = a\r\n\t\tFor _ in range n_iters: \r\n\t\t\tbb = self.transform(a)\r\n\t\t\taa = a + (b - bb)/2  # find midpoint between a and b in encoded space. Could apply RK4 here as well.\r\n\t\t\ta = self.inverse_transform(aa)\r\n\t\t\ta = self._validate_clip_encodings(a, self.original_space_dict)\r\n\t\t\t\r\n\t\t\tIf is_better(a, transformed_a): \r\n\t\t\t\ttransformed_a = a\r\n\t\tReturn transformed_a\r\n```\r\n\r\n**Additional context**\r\n#464 \r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/468/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/468/timeline","performed_via_github_app":null,"state_reason":null}