{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/289","repository_url":"https://api.github.com/repos/Neuraxio/Neuraxle","labels_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/289/labels{/name}","comments_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/289/comments","events_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/289/events","html_url":"https://github.com/Neuraxio/Neuraxle/issues/289","id":579547551,"node_id":"MDU6SXNzdWU1Nzk1NDc1NTE=","number":289,"title":"test_automl_sequential_wrapper: Use something better than RandomSearch to not have flickering tests","user":{"login":"alexbrillant","id":19400226,"node_id":"MDQ6VXNlcjE5NDAwMjI2","avatar_url":"https://avatars.githubusercontent.com/u/19400226?v=4","gravatar_id":"","url":"https://api.github.com/users/alexbrillant","html_url":"https://github.com/alexbrillant","followers_url":"https://api.github.com/users/alexbrillant/followers","following_url":"https://api.github.com/users/alexbrillant/following{/other_user}","gists_url":"https://api.github.com/users/alexbrillant/gists{/gist_id}","starred_url":"https://api.github.com/users/alexbrillant/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexbrillant/subscriptions","organizations_url":"https://api.github.com/users/alexbrillant/orgs","repos_url":"https://api.github.com/users/alexbrillant/repos","events_url":"https://api.github.com/users/alexbrillant/events{/privacy}","received_events_url":"https://api.github.com/users/alexbrillant/received_events","type":"User","site_admin":false},"labels":[{"id":1290971220,"node_id":"MDU6TGFiZWwxMjkwOTcxMjIw","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":1290971225,"node_id":"MDU6TGFiZWwxMjkwOTcxMjI1","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/invalid","name":"invalid","color":"e4e669","default":true,"description":"This doesn't seem right"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-03-11T21:10:37Z","updated_at":"2022-03-31T13:59:05Z","closed_at":"2022-03-31T13:59:05Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"```\r\nimport numpy as np\r\nfrom sklearn.metrics import mean_squared_error\r\n\r\nfrom neuraxle.hyperparams.distributions import RandInt\r\nfrom neuraxle.hyperparams.space import HyperparameterSpace\r\nfrom neuraxle.metaopt.callbacks import MetricCallback\r\nfrom neuraxle.metaopt.deprecated import RandomSearch, HyperparamsJSONRepository, AutoMLSequentialWrapper, \\\r\n    KFoldCrossValidationWrapper\r\nfrom neuraxle.metaopt.random import ValidationSplitWrapper, average_kfold_scores\r\nfrom neuraxle.pipeline import Pipeline\r\nfrom neuraxle.steps.numpy import MultiplyByN\r\n\r\n\r\ndef test_automl_sequential_wrapper(tmpdir):\r\n    # Given\r\n    data_inputs = np.array(range(100))\r\n    expected_outputs = np.array(range(100, 200))\r\n\r\n    hyperparameter_space = HyperparameterSpace({\r\n        'multiplication_1__multiply_by': RandInt(1, 3),\r\n        'multiplication_2__multiply_by': RandInt(1, 3),\r\n        'multiplication_3__multiply_by': RandInt(1, 3),\r\n    })\r\n\r\n    pipeline = Pipeline([\r\n        ('multiplication_1', MultiplyByN()),\r\n        ('multiplication_2', MultiplyByN()),\r\n        ('multiplication_3', MultiplyByN())\r\n    ], cache_folder=tmpdir).set_hyperparams_space(hyperparameter_space)\r\n\r\n    auto_ml = RandomSearch(\r\n        KFoldCrossValidationWrapper().set_step(pipeline),\r\n        hyperparams_repository=HyperparamsJSONRepository(tmpdir), n_iter=10\r\n    )\r\n\r\n    # When\r\n    auto_ml: AutoMLSequentialWrapper = auto_ml.fit(data_inputs, expected_outputs)\r\n    best_model: Pipeline = auto_ml.get_best_model()\r\n    predicted_outputs = best_model.transform(data_inputs)\r\n\r\n    # Then\r\n    actual_mse = ((predicted_outputs - expected_outputs) ** 2).mean()\r\n    assert actual_mse < 20000\r\n\r\n\r\ndef test_automl_sequential_wrapper_with_validation_split_wrapper(tmpdir):\r\n    # Given\r\n    data_inputs = np.array(range(100))\r\n    expected_outputs = np.array(range(100, 200))\r\n\r\n    hyperparameter_space = HyperparameterSpace({\r\n        'multiplication_1__multiply_by': RandInt(1, 3),\r\n        'multiplication_2__multiply_by': RandInt(1, 3),\r\n        'multiplication_3__multiply_by': RandInt(1, 3),\r\n    })\r\n\r\n    pipeline = Pipeline([\r\n        ('multiplication_1', MultiplyByN()),\r\n        ('multiplication_2', MultiplyByN()),\r\n        ('multiplication_3', MultiplyByN())\r\n    ], cache_folder=tmpdir).set_hyperparams_space(hyperparameter_space)\r\n\r\n    random_search = RandomSearch(\r\n        ValidationSplitWrapper(\r\n            pipeline,\r\n            test_size=0.2,\r\n            scoring_function=mean_squared_error,\r\n            run_validation_split_in_test_mode=False\r\n        ),\r\n        hyperparams_repository=HyperparamsJSONRepository(tmpdir),\r\n        higher_score_is_better=False,\r\n        n_iter=100\r\n    )\r\n\r\n    # When\r\n    mse_before = ((data_inputs - expected_outputs) ** 2).mean()\r\n    random_search: AutoMLSequentialWrapper = random_search.fit(data_inputs, expected_outputs)\r\n    best_model: Pipeline = random_search.get_best_model()\r\n    predicted_outputs = best_model.transform(data_inputs)\r\n\r\n    # Then\r\n    actual_mse = ((predicted_outputs - expected_outputs) ** 2).mean()\r\n    assert actual_mse < mse_before\r\n\r\n```","closed_by":{"login":"guillaume-chevalier","id":11862328,"node_id":"MDQ6VXNlcjExODYyMzI4","avatar_url":"https://avatars.githubusercontent.com/u/11862328?v=4","gravatar_id":"","url":"https://api.github.com/users/guillaume-chevalier","html_url":"https://github.com/guillaume-chevalier","followers_url":"https://api.github.com/users/guillaume-chevalier/followers","following_url":"https://api.github.com/users/guillaume-chevalier/following{/other_user}","gists_url":"https://api.github.com/users/guillaume-chevalier/gists{/gist_id}","starred_url":"https://api.github.com/users/guillaume-chevalier/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guillaume-chevalier/subscriptions","organizations_url":"https://api.github.com/users/guillaume-chevalier/orgs","repos_url":"https://api.github.com/users/guillaume-chevalier/repos","events_url":"https://api.github.com/users/guillaume-chevalier/events{/privacy}","received_events_url":"https://api.github.com/users/guillaume-chevalier/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/289/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/289/timeline","performed_via_github_app":null,"state_reason":"completed"}