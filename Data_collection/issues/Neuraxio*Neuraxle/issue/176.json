{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/176","repository_url":"https://api.github.com/repos/Neuraxio/Neuraxle","labels_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/176/labels{/name}","comments_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/176/comments","events_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/176/events","html_url":"https://github.com/Neuraxio/Neuraxle/issues/176","id":516040423,"node_id":"MDU6SXNzdWU1MTYwNDA0MjM=","number":176,"title":"Feature: BaseStep.introspect()","user":{"login":"guillaume-chevalier","id":11862328,"node_id":"MDQ6VXNlcjExODYyMzI4","avatar_url":"https://avatars.githubusercontent.com/u/11862328?v=4","gravatar_id":"","url":"https://api.github.com/users/guillaume-chevalier","html_url":"https://github.com/guillaume-chevalier","followers_url":"https://api.github.com/users/guillaume-chevalier/followers","following_url":"https://api.github.com/users/guillaume-chevalier/following{/other_user}","gists_url":"https://api.github.com/users/guillaume-chevalier/gists{/gist_id}","starred_url":"https://api.github.com/users/guillaume-chevalier/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guillaume-chevalier/subscriptions","organizations_url":"https://api.github.com/users/guillaume-chevalier/orgs","repos_url":"https://api.github.com/users/guillaume-chevalier/repos","events_url":"https://api.github.com/users/guillaume-chevalier/events{/privacy}","received_events_url":"https://api.github.com/users/guillaume-chevalier/received_events","type":"User","site_admin":false},"labels":[{"id":1290971222,"node_id":"MDU6TGFiZWwxMjkwOTcxMjIy","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-11-01T10:45:08Z","updated_at":"2022-04-15T21:00:04Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"As pitched in the [Neuraxle video](https://www.youtube.com/watch?v=WXWDDEkuSaE) on youtube, it should be possible to introspect models. \r\n\r\nUpon calling `.introspect()` on a step, a step that has been fitted might be able to return information about its current state. \r\n\r\n- Default return value: None. Or maybe an empty dict or an empty list or an empty object of type `FeatureDataContainer` would be cool. \r\n\r\nExample usage: \r\n1. Someone train a model: model.fit(X, y). \r\n2. Someone call `some_info_about_model = model.introspect(X, y)`. The `some_info_about_model` could be for example the mean of the weights of each of the neural network's layer, or the mean and std of each neuron's activation, a list of train scores and a list of validation scores, and so on. \r\n\r\nWild idea: make introspect also score the model and bundles that in the container. Example: \r\n`f: FeatureDataContainer = model.introspect(X, y, score_method)`. The FeatureDataContainer.data_inputs contains `some_info_about_model`, and the FeatureDataContainer.expected outputs contains the score obtained from `score_method(y, y_pred)` or something like that. So the FeatureDataContainer would in fact be an aggregate of other FeatureDataContainers(as it may come from a nested pipeline of pipeline). \r\n\r\nAnother idea: whatever the FeatureDataContainer contains, it would be able to call FeatureDataContainers.flatten() to reduce the data to 1D features. As a FeatureDataContainers might be an aggregate of other FeatureDataContainers, it could combine them by flattening them and concatenating them on the feature axis for instance. So a FeatureDataContainers containing a list of train and val scores would be featurisable from 2D lists to 1D features such as min, max, std, slope information, length, amin, amax, etc. \r\n\r\nThis allows for neat AutoML algorithms that can also truly **introspect** the models to be able to better guess the next model to train by having \"features of the model\" (an introspection). \r\n\r\n@Eric2Hamel and @jeromebedard12, this might interest you. ","closed_by":null,"reactions":{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/176/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/176/timeline","performed_via_github_app":null,"state_reason":null}