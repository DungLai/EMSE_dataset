{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/297","repository_url":"https://api.github.com/repos/Neuraxio/Neuraxle","labels_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/297/labels{/name}","comments_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/297/comments","events_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/297/events","html_url":"https://github.com/Neuraxio/Neuraxle/issues/297","id":589661712,"node_id":"MDU6SXNzdWU1ODk2NjE3MTI=","number":297,"title":"Feature: Parallelize Trial Split In AutoML Loop","user":{"login":"alexbrillant","id":19400226,"node_id":"MDQ6VXNlcjE5NDAwMjI2","avatar_url":"https://avatars.githubusercontent.com/u/19400226?v=4","gravatar_id":"","url":"https://api.github.com/users/alexbrillant","html_url":"https://github.com/alexbrillant","followers_url":"https://api.github.com/users/alexbrillant/followers","following_url":"https://api.github.com/users/alexbrillant/following{/other_user}","gists_url":"https://api.github.com/users/alexbrillant/gists{/gist_id}","starred_url":"https://api.github.com/users/alexbrillant/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/alexbrillant/subscriptions","organizations_url":"https://api.github.com/users/alexbrillant/orgs","repos_url":"https://api.github.com/users/alexbrillant/repos","events_url":"https://api.github.com/users/alexbrillant/events{/privacy}","received_events_url":"https://api.github.com/users/alexbrillant/received_events","type":"User","site_admin":false},"labels":[{"id":1290971222,"node_id":"MDU6TGFiZWwxMjkwOTcxMjIy","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1290971227,"node_id":"MDU6TGFiZWwxMjkwOTcxMjI3","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/wontfix","name":"wontfix","color":"ffffff","default":true,"description":"This will not be worked on"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-03-28T21:18:39Z","updated_at":"2022-03-28T23:05:55Z","closed_at":"2022-03-28T23:05:55Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nIt would be nice to be able to parallelize trial splits in the AutoML loop. \r\n\r\n**Describe the solution you'd like**\r\nAdd the necessary changes in the AutoML loop class to allow users to parallelize trial split execution if needed. \r\n\r\n**Additional context**\r\n```\r\ndef _fit_data_container(self, data_container: DataContainer, context: ExecutionContext) -> 'BaseStep':\r\n        \"\"\"\r\n        Run Auto ML Loop.\r\n        Find the best hyperparams using the hyperparameter optmizer.\r\n        Evaluate the pipeline on each trial using a validation technique.\r\n        :param data_container: data container to fit\r\n        :param context: execution context\r\n        :return: self\r\n        \"\"\"\r\n        validation_splits = self.validation_split_function(data_container)\r\n\r\n        for trial_number in range(self.n_trial):\r\n            self.print_func('\\ntrial {}/{}'.format(trial_number + 1, self.n_trial))\r\n            auto_ml_data = AutoMLContainer(\r\n                trial_number=trial_number,\r\n                trials=self.hyperparams_repository.load_all_trials(TRIAL_STATUS.SUCCESS),\r\n                hyperparameter_space=self.pipeline.get_hyperparams_space(),\r\n                main_scoring_metric_name=self.trainer.get_main_metric_name()\r\n            )\r\n\r\n            with self.hyperparams_repository.new_trial(auto_ml_data) as repo_trial:\r\n                for training_data_container, validation_data_container in validation_splits:\r\n                    p = copy.deepcopy(self.pipeline)\r\n                    p.update_hyperparams(repo_trial.hyperparams)\r\n                    repo_trial.set_hyperparams(p.get_hyperparams())\r\n\r\n                    with repo_trial.new_validation_split(p) as repo_trial_split:\r\n                        try:\r\n                            trial_split_description = '{}/{} split {}/{}\\nhyperparams: {}\\nhyperparams_space: {}\\n'.format(\r\n                                trial_number + 1,\r\n                                self.n_trial,\r\n                                repo_trial_split.split_number + 1,\r\n                                len(training_data_container),\r\n                                json.dumps(repo_trial.hyperparams, sort_keys=True, indent=4),\r\n                                json.dumps(auto_ml_data.hyperparameter_space.to_flat_as_dict_primitive(), sort_keys=True, indent=4),\r\n                            )\r\n\r\n                            repo_trial_split = self.trainer.fit_trial_split(\r\n                                trial_split=repo_trial_split,\r\n                                train_data_container=training_data_container,\r\n                                validation_data_container=validation_data_container,\r\n                                context=context\r\n                            )\r\n\r\n                            repo_trial_split.set_success()\r\n\r\n                            self.print_func('{} score: {}'.format(\r\n                                trial_split_description,\r\n                                repo_trial_split.get_validation_score()\r\n                            ))\r\n\r\n                        except Exception as error:\r\n                            track = traceback.format_exc()\r\n                            self.print_func('failed {}'.format(\r\n                                trial_split_description\r\n                            ))\r\n                            self.print_func(track)\r\n                            repo_trial_split.set_failed(error)\r\n\r\n                    repo_trial.update_final_trial_status()\r\n\r\n            self.hyperparams_repository.save_trial(repo_trial)\r\n\r\n        best_hyperparams = self.hyperparams_repository.get_best_hyperparams()\r\n\r\n        self.print_func('best hyperparams:\\n{}'.format(json.dumps(best_hyperparams.to_nested_dict(), sort_keys=True, indent=4)))\r\n        p: BaseStep = self._load_virgin_model(hyperparams=best_hyperparams)\r\n\r\n        if self.refit_trial:\r\n            p = self.trainer.refit(\r\n                p=p,\r\n                data_container=data_container,\r\n                context=context\r\n            )\r\n\r\n            self.hyperparams_repository.save_best_model(p)\r\n\r\n        return self\r\n```","closed_by":{"login":"stale[bot]","id":26384082,"node_id":"MDM6Qm90MjYzODQwODI=","avatar_url":"https://avatars.githubusercontent.com/in/1724?v=4","gravatar_id":"","url":"https://api.github.com/users/stale%5Bbot%5D","html_url":"https://github.com/apps/stale","followers_url":"https://api.github.com/users/stale%5Bbot%5D/followers","following_url":"https://api.github.com/users/stale%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stale%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/stale%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/stale%5Bbot%5D/repos","events_url":"https://api.github.com/users/stale%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/stale%5Bbot%5D/received_events","type":"Bot","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/297/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/297/timeline","performed_via_github_app":null,"state_reason":"completed"}