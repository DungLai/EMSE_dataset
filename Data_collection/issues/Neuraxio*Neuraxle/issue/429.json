{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/429","repository_url":"https://api.github.com/repos/Neuraxio/Neuraxle","labels_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/429/labels{/name}","comments_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/429/comments","events_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/429/events","html_url":"https://github.com/Neuraxio/Neuraxle/issues/429","id":771058785,"node_id":"MDU6SXNzdWU3NzEwNTg3ODU=","number":429,"title":"Neuraxle v.s. Scipy's `LogUniform` distribution for ANNs' learning rates: which is the good one? + check LogNormal as well","user":{"login":"guillaume-chevalier","id":11862328,"node_id":"MDQ6VXNlcjExODYyMzI4","avatar_url":"https://avatars.githubusercontent.com/u/11862328?v=4","gravatar_id":"","url":"https://api.github.com/users/guillaume-chevalier","html_url":"https://github.com/guillaume-chevalier","followers_url":"https://api.github.com/users/guillaume-chevalier/followers","following_url":"https://api.github.com/users/guillaume-chevalier/following{/other_user}","gists_url":"https://api.github.com/users/guillaume-chevalier/gists{/gist_id}","starred_url":"https://api.github.com/users/guillaume-chevalier/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guillaume-chevalier/subscriptions","organizations_url":"https://api.github.com/users/guillaume-chevalier/orgs","repos_url":"https://api.github.com/users/guillaume-chevalier/repos","events_url":"https://api.github.com/users/guillaume-chevalier/events{/privacy}","received_events_url":"https://api.github.com/users/guillaume-chevalier/received_events","type":"User","site_admin":false},"labels":[{"id":1290971223,"node_id":"MDU6TGFiZWwxMjkwOTcxMjIz","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/help%20wanted","name":"help wanted","color":"008672","default":true,"description":"Extra attention is needed"},{"id":1290971225,"node_id":"MDU6TGFiZWwxMjkwOTcxMjI1","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/invalid","name":"invalid","color":"e4e669","default":true,"description":"This doesn't seem right"},{"id":1290971226,"node_id":"MDU6TGFiZWwxMjkwOTcxMjI2","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/question","name":"question","color":"d876e3","default":true,"description":"Further information is requested"},{"id":1290971227,"node_id":"MDU6TGFiZWwxMjkwOTcxMjI3","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/wontfix","name":"wontfix","color":"ffffff","default":true,"description":"This will not be worked on"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-12-18T17:40:57Z","updated_at":"2023-01-09T01:43:28Z","closed_at":"2023-01-09T01:43:28Z","author_association":"MEMBER","active_lock_reason":null,"body":"**Is your feature request related to a problem? Please describe.**\r\nI think that there is either an error with Neuraxle's LogUniform, or else with [scipy's LogUniform](https://github.com/scipy/scipy/pull/10815 ). \r\n\r\n**Describe the solution you'd like**\r\nThe LogUniform distribution should be the good one for a learning rate, and I believe it's inverse \" 1 / · \" distribution should be the same and that this is the good mathematical test to verify that the distribution is the good one. Same for LogNormal\r\n\r\n*Ultimately I want a simple to use distribution such as `LogUniform(0.001, 0.1)` whereas the learning rate would be allowed to take values loguniformally between 0.001 to 0.1 simply with those easy to read and easy to change arguments.*\r\n\r\n**Describe alternatives you've considered**\r\n- See my comment here on the relevant scipy issue thread: https://github.com/scipy/scipy/pull/10815#issuecomment-574387083 \r\n- I firmly believe my way of proceeding is the right one due what I've written [here](https://medium.com/vooban-ai/hyperopt-tutorial-for-optimizing-neural-networks-hyperparameters-e3102814b919) in 2017 at Vooban under the subtitle `On the loguniform and lognormal distributions` whereas I've validated [plotting the inverse \" 1 / · \" distributions](https://miro.medium.com/max/3000/0*gec5rKDZf7JPLifB.png) of hyperopt, and whereas I've did this validation with scipy and Neuraxle's distributions and Neuraxle's distribution was effectively the good one. \r\n\r\n\r\n**Additional context**\r\nHere is the code from the Vooban article (note: the following code is licensed under [this MIT License](https://github.com/Vooban/Hyperopt-Keras-CNN-CIFAR-100/blob/master/LICENSE)) where Hyperopt's LogUniform and LogNormal are investigated and looks right according to my plotting test: \r\n\r\n```python\r\n\r\nlog_hyperparam_generators = {\r\n    'loguniform': hp.loguniform('loguniform', -0.3, 0.3),\r\n    'lognormal': hp.lognormal('lognormal', 0, 0.3)\r\n}\r\n\r\n# For more info about the lognormal distribution, see: \r\n# https://www.wolframalpha.com/input/?i=y%3D2%5E(+(-log4(x))%5E0.5+),+y%3D2%5E(-+(-log4(x))%5E0.5+)+from+0+to+1\r\n# https://www.wolframalpha.com/input/?i=y%3D4%5E-(log2(x)%5E2)+from+0+to+5\r\n\r\nn_samples = 5000\r\n\r\nfor title, space in log_hyperparam_generators.items():\r\n    evaluated = [\r\n        pyll.stochastic.sample(space) for _ in range(n_samples)\r\n    ]\r\n    inverse_evaluated = [1.0 / y for y in evaluated]\r\n    x_domain = np.linspace(min(evaluated), max(evaluated), n_samples)\r\n    \r\nplt.figure(figsize=(18,6))\r\nhist = gaussian_kde(evaluated, 0.001)\r\nplt.plot(x_domain, hist(x_domain), label=\"True Histogram\")\r\n\r\ninverse_hist = gaussian_kde(inverse_evaluated, 0.001)\r\nplt.plot(x_domain, inverse_hist(x_domain), label=\"1 / True Histogram\")\r\n\r\nblurred_hist = gaussian_kde(evaluated, 0.1)\r\nplt.plot(x_domain, blurred_hist(x_domain), label=\"Smoothed Histogram\")\r\n\r\nblurred_inverse_hist = gaussian_kde(inverse_evaluated, 0.1)\r\nplt.plot(x_domain, blurred_inverse_hist(x_domain), label=\"1 / Smoothed Histogram\")\r\n\r\nplt.title(\"Histogram (pdf) comparing a {} distribution and the distribution of the inverse of all its values\".format(title))\r\nplt.legend()\r\nplt.show()\r\n```\r\n\r\n![](https://miro.medium.com/max/3000/0*TVAiY65ll-2dBopM.png)\r\n\r\n![](https://miro.medium.com/max/3000/0*gec5rKDZf7JPLifB.png)\r\n\r\nSee full code here: https://github.com/guillaume-chevalier/Hyperopt-Keras-CNN-CIFAR-100/blob/Vooban/IntroductionToHyperopt.ipynb","closed_by":{"login":"stale[bot]","id":26384082,"node_id":"MDM6Qm90MjYzODQwODI=","avatar_url":"https://avatars.githubusercontent.com/in/1724?v=4","gravatar_id":"","url":"https://api.github.com/users/stale%5Bbot%5D","html_url":"https://github.com/apps/stale","followers_url":"https://api.github.com/users/stale%5Bbot%5D/followers","following_url":"https://api.github.com/users/stale%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stale%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/stale%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/stale%5Bbot%5D/repos","events_url":"https://api.github.com/users/stale%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/stale%5Bbot%5D/received_events","type":"Bot","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/429/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/429/timeline","performed_via_github_app":null,"state_reason":"completed"}