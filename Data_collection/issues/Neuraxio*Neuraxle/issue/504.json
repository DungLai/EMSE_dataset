{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/504","repository_url":"https://api.github.com/repos/Neuraxio/Neuraxle","labels_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/504/labels{/name}","comments_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/504/comments","events_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/504/events","html_url":"https://github.com/Neuraxio/Neuraxle/issues/504","id":934170420,"node_id":"MDU6SXNzdWU5MzQxNzA0MjA=","number":504,"title":"Feature: 3rd Version for AutoML module.","user":{"login":"guillaume-chevalier","id":11862328,"node_id":"MDQ6VXNlcjExODYyMzI4","avatar_url":"https://avatars.githubusercontent.com/u/11862328?v=4","gravatar_id":"","url":"https://api.github.com/users/guillaume-chevalier","html_url":"https://github.com/guillaume-chevalier","followers_url":"https://api.github.com/users/guillaume-chevalier/followers","following_url":"https://api.github.com/users/guillaume-chevalier/following{/other_user}","gists_url":"https://api.github.com/users/guillaume-chevalier/gists{/gist_id}","starred_url":"https://api.github.com/users/guillaume-chevalier/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guillaume-chevalier/subscriptions","organizations_url":"https://api.github.com/users/guillaume-chevalier/orgs","repos_url":"https://api.github.com/users/guillaume-chevalier/repos","events_url":"https://api.github.com/users/guillaume-chevalier/events{/privacy}","received_events_url":"https://api.github.com/users/guillaume-chevalier/received_events","type":"User","site_admin":false},"labels":[{"id":1290971222,"node_id":"MDU6TGFiZWwxMjkwOTcxMjIy","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1290971225,"node_id":"MDU6TGFiZWwxMjkwOTcxMjI1","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/invalid","name":"invalid","color":"e4e669","default":true,"description":"This doesn't seem right"},{"id":3130929938,"node_id":"MDU6TGFiZWwzMTMwOTI5OTM4","url":"https://api.github.com/repos/Neuraxio/Neuraxle/labels/breaking-change","name":"breaking-change","color":"B60205","default":false,"description":"Destined for a major version number update"}],"state":"closed","locked":false,"assignee":{"login":"guillaume-chevalier","id":11862328,"node_id":"MDQ6VXNlcjExODYyMzI4","avatar_url":"https://avatars.githubusercontent.com/u/11862328?v=4","gravatar_id":"","url":"https://api.github.com/users/guillaume-chevalier","html_url":"https://github.com/guillaume-chevalier","followers_url":"https://api.github.com/users/guillaume-chevalier/followers","following_url":"https://api.github.com/users/guillaume-chevalier/following{/other_user}","gists_url":"https://api.github.com/users/guillaume-chevalier/gists{/gist_id}","starred_url":"https://api.github.com/users/guillaume-chevalier/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guillaume-chevalier/subscriptions","organizations_url":"https://api.github.com/users/guillaume-chevalier/orgs","repos_url":"https://api.github.com/users/guillaume-chevalier/repos","events_url":"https://api.github.com/users/guillaume-chevalier/events{/privacy}","received_events_url":"https://api.github.com/users/guillaume-chevalier/received_events","type":"User","site_admin":false},"assignees":[{"login":"guillaume-chevalier","id":11862328,"node_id":"MDQ6VXNlcjExODYyMzI4","avatar_url":"https://avatars.githubusercontent.com/u/11862328?v=4","gravatar_id":"","url":"https://api.github.com/users/guillaume-chevalier","html_url":"https://github.com/guillaume-chevalier","followers_url":"https://api.github.com/users/guillaume-chevalier/followers","following_url":"https://api.github.com/users/guillaume-chevalier/following{/other_user}","gists_url":"https://api.github.com/users/guillaume-chevalier/gists{/gist_id}","starred_url":"https://api.github.com/users/guillaume-chevalier/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guillaume-chevalier/subscriptions","organizations_url":"https://api.github.com/users/guillaume-chevalier/orgs","repos_url":"https://api.github.com/users/guillaume-chevalier/repos","events_url":"https://api.github.com/users/guillaume-chevalier/events{/privacy}","received_events_url":"https://api.github.com/users/guillaume-chevalier/received_events","type":"User","site_admin":false},{"login":"vincent-antaki","id":74119210,"node_id":"MDQ6VXNlcjc0MTE5MjEw","avatar_url":"https://avatars.githubusercontent.com/u/74119210?v=4","gravatar_id":"","url":"https://api.github.com/users/vincent-antaki","html_url":"https://github.com/vincent-antaki","followers_url":"https://api.github.com/users/vincent-antaki/followers","following_url":"https://api.github.com/users/vincent-antaki/following{/other_user}","gists_url":"https://api.github.com/users/vincent-antaki/gists{/gist_id}","starred_url":"https://api.github.com/users/vincent-antaki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vincent-antaki/subscriptions","organizations_url":"https://api.github.com/users/vincent-antaki/orgs","repos_url":"https://api.github.com/users/vincent-antaki/repos","events_url":"https://api.github.com/users/vincent-antaki/events{/privacy}","received_events_url":"https://api.github.com/users/vincent-antaki/received_events","type":"User","site_admin":false}],"milestone":{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/milestones/11","html_url":"https://github.com/Neuraxio/Neuraxle/milestone/11","labels_url":"https://api.github.com/repos/Neuraxio/Neuraxle/milestones/11/labels","id":6608501,"node_id":"MDk6TWlsZXN0b25lNjYwODUwMQ==","number":11,"title":"0.7.0","description":"","creator":{"login":"guillaume-chevalier","id":11862328,"node_id":"MDQ6VXNlcjExODYyMzI4","avatar_url":"https://avatars.githubusercontent.com/u/11862328?v=4","gravatar_id":"","url":"https://api.github.com/users/guillaume-chevalier","html_url":"https://github.com/guillaume-chevalier","followers_url":"https://api.github.com/users/guillaume-chevalier/followers","following_url":"https://api.github.com/users/guillaume-chevalier/following{/other_user}","gists_url":"https://api.github.com/users/guillaume-chevalier/gists{/gist_id}","starred_url":"https://api.github.com/users/guillaume-chevalier/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guillaume-chevalier/subscriptions","organizations_url":"https://api.github.com/users/guillaume-chevalier/orgs","repos_url":"https://api.github.com/users/guillaume-chevalier/repos","events_url":"https://api.github.com/users/guillaume-chevalier/events{/privacy}","received_events_url":"https://api.github.com/users/guillaume-chevalier/received_events","type":"User","site_admin":false},"open_issues":0,"closed_issues":17,"state":"closed","created_at":"2021-03-30T14:35:51Z","updated_at":"2022-08-16T19:54:56Z","due_on":null,"closed_at":"2022-08-16T19:54:56Z"},"comments":1,"created_at":"2021-06-30T22:20:09Z","updated_at":"2022-04-15T21:03:30Z","closed_at":"2022-03-31T13:59:14Z","author_association":"MEMBER","active_lock_reason":null,"body":"```python\r\n\r\n\"\"\"\r\nSome packages: \r\n\r\n# neuraxle.metaopt.deprecated --> neuraxle.deprecated.metaoptv1\r\n# neuraxle.metaopt --> neuraxle.deprecated.metaoptv2\r\n# neuraxle.plotting.TrialMetricsPlottingObserver --> neuraxle.automl.observers.TrialMetricsPlottingObserver\r\n\r\n\r\nneuraxle.automl.base [BaseControllerLoop, BaseHPSelectionStrategy, BaseValSplitter, BaseTrainer, AutoML]\r\nneuraxle.automl.repositories.base [BaseRepo, BaseRun, BaseTrial]\r\nneuraxle.automl.repositories.inmemory\r\nneuraxle.automl.repositories.ondisk\r\nneuraxle.automl.optim.base [RandomSearchHPSelectionStrategy]\r\nneuraxle.automl.optim.hyperopt [TPE]\r\n# uraxle.automl.optim.hyperband [controller, trainer]\r\n# uraxle.automl.optim.bohb [BOHB]\r\nneuraxle.automl.validation [PresetValidationSetSplitter, DefaultValSplitter, KFoldCVSplitter, KFoldCVTrainer, KFoldTimeSeriesTrainmer1234]\r\nneuraxle.automl.callbacks [...]\r\nneuraxle.automl.observers [BaseObserver, TrialMetricsPlottingObserver]\r\n\r\nneuraxle V. 0.1.0\r\n\r\n\"\"\"\r\n\r\n# package `neuraxle.automl`: \r\n\r\n\r\n\r\ndef Context.with_run(...):\r\n\tself.push_root_path(run.id)\r\n\r\ndef Context.with_trial(...):\r\n\tself.push_root_path(trial.id)\r\n\tself.update_services({BaseTrial: trial})  # sql trial \r\n\r\n\r\n\r\n\r\n\r\nclass AutoML(FitTransformOnlyStepMixin, MetaStep):\r\n\r\n\tdef _fit_data_container(...): \r\n\t\twith self.repo.launch_run(context, start_new_run=self.start_new_run) as repo_run: \r\n\t\t\tbest_model = self.loop_controller.loop(repo_run)\r\n\t\t\t# assert repo_run.repo == self.repo\r\n\t\tif refit: \r\n\t\t\tbest_model = ...\r\n\t\tself.best_model = best_model\r\n\r\n\r\n\tdef _fit_transform_data_container(...): \r\n\t\tassert hasattr(self, \"best_model\"): \r\n\t\t\treturn self.best_model.handle_transform(...)\r\n\t\r\n\r\n\r\nclass DefaultControllerLoop(BaseControllerLoop):\r\n\t\tdistributed_or_parallel_for i in n_trials: \r\n\r\n\t\t\trepo.lock()\r\n\t\t\tp = next_best_prediction_algo.prepare_new_trial(p, repo.all_trials())\r\n\t\t\thps = p.get_hyperparams()\r\n\t\t\twith repo_run.new_trial(hps) as trial: \r\n\t\t\t\trepo.unlock()\r\n\t\t\t\t# assert trial.is_started()\r\n\t\t\t\t# assert not trial.is_finished()\r\n\r\n\t\t\t\ttrial_result: TrialResult = self.trainer.train(\r\n\t\t\t\t\tp, \r\n\t\t\t\t\tdata_container, \r\n\t\t\t\t\tcontext.with_trial(trial),\r\n\t\t\t\t\t  # this param is for allowing hyperband to easily control the n_epochs in percents...\r\n\t\t\t\t)\r\n\r\n\t\t\t\t# assert trial.repo_run == repo_run\r\n\t\t\t\t# if isinstance(trial.repo_run.repo, PostGreSQLHPRepo): assert hasattr(trial.repo_run.repo.db.connection)\r\n\t\t\t\ttrial.set_finished(p, trial_result)\r\n\r\n\tdef next_best_prediction_algo.prepare_new_trial(p: BaseStep, past_trials_with_scores) -> BaseStep:\r\n\t\t\ttrial_p = p.copy()\r\n\r\n\t\t\tspace = trial_p.get_hyperparam_space()\r\n\t\t\trvs = next_best_prediction_algo.rvs(space, past_trials_with_scores)  # can have NULL scores as well. \r\n\t\t\ttrial_p.set_hyperparams(rvs)\r\n\t\t\treturn trial_p\r\n\r\n\r\n\r\ndef InMemoryRepoRun.new_trial(hps) -> Trial: \r\n\t# assert isinstance(self BaseRepoRun).\r\n\r\n\ttrial = Trial(hps)\r\n\tself._update_trial(trial)  # TODO: must have a way to do the diff and not re-save whole self anew every time we change a little thing.\r\n \r\n\treturn trial\r\n\r\ndef RepoRun._update_trial(trial): \r\n\tself.trials.update({trial.id: trial}\r\n\tself.repo.update_trial(self.id, trial)\r\n\r\n# questions in suspens: \r\n# plotting on trial save?\r\n# plotting on metric save of trial?\r\n# plotting on callback call of trial?\r\n\r\n# trial.log_train_metric\r\n# trial.log_val_metric\r\n# trial.log_txt_output\r\n# trial.log_folder_content??????? (or files)\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass HyperbandControllerLoop(BaseControlLoop):\r\n\r\n\tdef loop(repo_run): \r\n\t\r\n\t\tsuper(... )\r\n\t\tfor rounds in n_rounds: \r\n\t\t\tsuper(... )\r\n\t\t\t# train until would resumes training from cache folder, if training was already started earlier. For Hyperband.\r\n\t\t\t# self.trainer.train_until(p, dact, context.with_trial(trial), train_until_percent=round/n_rounds)\r\n\t\t\t# v.s. training all in one shot with \".train(...)\" simply.\r\n\t\t\tsuper(... )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass MetaCallback(Callback): \r\n\tdef __init__(wrapped: Callback): \r\n\t\tself.wrapped: Callback = wrapped \r\n\r\n\r\nclass SoftCrashCallback(MetaCallback):\r\n\r\n\tdef __call__(self, ...): \r\n\t\ttry: return ... except: ... finally: ... return None\r\n\r\nclass EachNEpoch(MetaCallback): \r\n\tdef __init__(wrapped: Callback, skip_call_eval_each_n_epochs=5): \r\n\t\tMetaCallback.__init__(self)\r\n\t\tself._counter = 0\r\n\t\tself._skip_call_eval_each_n_epochs\r\n\r\n\tdef __call__(...): \r\n\t\tif self._counter mod self._skip_call_eval_each_n_epochs == 0: \r\n\t\t\treturn self.wrapped(...)\r\n\r\n\r\nAutoThresholdTuningMetric(MetaCallback):\r\n\r\n\tdef __init__(wrapped: Callback, skip_call_eval_each_n_epochs=5, a, b, interval): \r\n\t\tMetaCallback.__init__(self)\r\n\t\tself. a, b, interval = a, b, interval\r\n\t\tself.best_threshold = None\r\n \r\n\tdef __call__(...):\r\n\r\n\t\tmnax_score = ±np.inf if self.wrapped.hishger_score_is_better else -±np-inf\r\n\t\tfor i in np.arange(a, b, interval): \r\n\t\t\tscore = self.wrapped(...)\r\n\t\t\tif score > max_score: max_score = score; self.best_threshold = i\r\n\r\n\t\treturn max_score\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n____________________________ main _________________ : \r\n\r\n\r\na = AutoML(\r\n\tpipeline=p,\r\n\tcontroller_loop=DefaultLoop(  # HyperbandControllerLoop(), ClusteringParallelFor()\r\n\t\ttrainer=Trainer(val_splitter=v, callbacks=callbacks, main_metric_name=\"\"),\r\n\t\t# or `Trainer(...).with_val_set(sdsdfg)`  # TODO: add this `with_val_set` method that would change splitter to PresetValidationSetSplitter(self, val) and override. \r\n\t\tnext_best_prediction_algo=SVD_TPE(), \r\n\t\tn_trials=20,\r\n\t\tn_epochs=150, \r\n\t\tcontinue_loop_on_error=True\r\n\t), \r\n\thp_repo=r,\r\n\tstart_new_run=True,  # otherwise, pick last run.\r\n\trefit_best_trial=True,\r\n)\r\n\r\na.handle_fit_transform(\r\n\tdata_container, \r\n\tcontext\r\n)\r\n\r\n```","closed_by":{"login":"guillaume-chevalier","id":11862328,"node_id":"MDQ6VXNlcjExODYyMzI4","avatar_url":"https://avatars.githubusercontent.com/u/11862328?v=4","gravatar_id":"","url":"https://api.github.com/users/guillaume-chevalier","html_url":"https://github.com/guillaume-chevalier","followers_url":"https://api.github.com/users/guillaume-chevalier/followers","following_url":"https://api.github.com/users/guillaume-chevalier/following{/other_user}","gists_url":"https://api.github.com/users/guillaume-chevalier/gists{/gist_id}","starred_url":"https://api.github.com/users/guillaume-chevalier/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/guillaume-chevalier/subscriptions","organizations_url":"https://api.github.com/users/guillaume-chevalier/orgs","repos_url":"https://api.github.com/users/guillaume-chevalier/repos","events_url":"https://api.github.com/users/guillaume-chevalier/events{/privacy}","received_events_url":"https://api.github.com/users/guillaume-chevalier/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/504/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Neuraxio/Neuraxle/issues/504/timeline","performed_via_github_app":null,"state_reason":"completed"}