{"url":"https://api.github.com/repos/theislab/diffxpy/issues/189","repository_url":"https://api.github.com/repos/theislab/diffxpy","labels_url":"https://api.github.com/repos/theislab/diffxpy/issues/189/labels{/name}","comments_url":"https://api.github.com/repos/theislab/diffxpy/issues/189/comments","events_url":"https://api.github.com/repos/theislab/diffxpy/issues/189/events","html_url":"https://github.com/theislab/diffxpy/issues/189","id":818177705,"node_id":"MDU6SXNzdWU4MTgxNzc3MDU=","number":189,"title":"Constraints doc string","user":{"login":"Hrovatin","id":47607471,"node_id":"MDQ6VXNlcjQ3NjA3NDcx","avatar_url":"https://avatars.githubusercontent.com/u/47607471?v=4","gravatar_id":"","url":"https://api.github.com/users/Hrovatin","html_url":"https://github.com/Hrovatin","followers_url":"https://api.github.com/users/Hrovatin/followers","following_url":"https://api.github.com/users/Hrovatin/following{/other_user}","gists_url":"https://api.github.com/users/Hrovatin/gists{/gist_id}","starred_url":"https://api.github.com/users/Hrovatin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hrovatin/subscriptions","organizations_url":"https://api.github.com/users/Hrovatin/orgs","repos_url":"https://api.github.com/users/Hrovatin/repos","events_url":"https://api.github.com/users/Hrovatin/events{/privacy}","received_events_url":"https://api.github.com/users/Hrovatin/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-02-28T10:51:13Z","updated_at":"2021-03-05T21:50:35Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In wald test it says that: \"constraints_loc: Array with constraints in rows and model parameters in columns. Each constraint contains non-zero entries for the a of parameters that has to sum to zero. \" However, when I try to parse constraints as they are within wald it actually seems that constraints should be params*constraints with columns summing to 0 on constrained parameters.\r\n ```\r\n np.unique(np.asarray(dmat_est_loc),axis=0)\r\n\r\narray([[1., 0., 0., 0., 1., 1.],\r\n       [1., 0., 0., 1., 0., 1.],\r\n       [1., 0., 1., 0., 0., 0.],\r\n       [1., 1., 0., 0., 0., 0.]])\r\n\r\ndmat_est_loc.design_info.column_names\r\n\r\n['Intercept',\r\n 'rep1[T.1.0]',\r\n 'rep1[T.2.0]',\r\n 'rep2[T.1.0]',\r\n 'rep2[T.2.0]',\r\n 'treatment[T.1.0]']\r\n  \r\nconstraints_loc=de.utils.constraint_matrix_from_string(\r\n        dmat= dmat_est_loc,\r\n        coef_names=dmat_est_loc.design_info.column_names,\r\n        constraints = [\"rep1[T.1.0] + rep1[T.2.0] = 0\",\"rep2[T.1.0] + rep2[T.2.0] = 0\"]\r\n) \r\n\r\nconstraints_loc\r\n\r\narray([[ 1.,  0.,  0.,  0.],\r\n       [ 0., -1.,  0.,  0.],\r\n       [ 0.,  1.,  0.,  0.],\r\n       [ 0.,  0., -1.,  0.],\r\n       [ 0.,  0.,  1.,  0.],\r\n       [ 0.,  0.,  0.,  1.]])\r\n\r\n# Constraints in rows\r\ndesign_loc, design_loc_names, constraints_loc, term_names_loc = de.utils.constraint_system_from_star(\r\n\r\n    dmat=dmat_est_loc,\r\n\r\n    constraints=constraints_loc.T,\r\n\r\n    return_type=\"patsy\"\r\n\r\n)\r\n\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-118-2dcc36b42735> in <module>\r\n----> 1 design_loc, design_loc_names, constraints_loc, term_names_loc = de.utils.constraint_system_from_star(\r\n      2     dmat=dmat_est_loc,\r\n      3     constraints=constraints_loc.T,\r\n      4     return_type=\"patsy\"\r\n      5 )\r\n\r\n~/miniconda3/envs/rpy2_3/lib/python3.8/site-packages/diffxpy/testing/utils.py in constraint_system_from_star(dmat, sample_description, formula, as_numeric, constraints, return_type)\r\n    264         as_categorical = True\r\n    265 \r\n--> 266     return glm.data.constraint_system_from_star(\r\n    267         dmat=dmat,\r\n    268         sample_description=sample_description,\r\n\r\n~/miniconda3/envs/rpy2_3/lib/python3.8/site-packages/batchglm/data.py in constraint_system_from_star(dmat, sample_description, formula, as_categorical, constraints, return_type)\r\n    253             )\r\n    254     else:\r\n--> 255         if np.linalg.matrix_rank(np.matmul(dmat, cmat)) != cmat.shape[1]:\r\n    256             raise ValueError(\r\n    257                 \"constrained design matrix is not full rank: %i %i\" %\r\n\r\nValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 4 is different from 6)\r\n\r\n# Constraints in columns\r\ndesign_loc, design_loc_names, constraints_loc, term_names_loc = de.utils.constraint_system_from_star(\r\n\r\n    dmat=dmat_est_loc,\r\n\r\n    constraints=constraints_loc,\r\n\r\n    return_type=\"patsy\"\r\n\r\n)\r\n\r\n---------------------------------------------------------------------------\r\nUnboundLocalError                         Traceback (most recent call last)\r\n<ipython-input-116-54a1124d090d> in <module>\r\n----> 1 design_loc, design_loc_names, constraints_loc, term_names_loc = de.utils.constraint_system_from_star(\r\n      2     dmat=dmat_est_loc,\r\n      3     constraints=constraints_loc,\r\n      4     return_type=\"patsy\"\r\n      5 )\r\n\r\n~/miniconda3/envs/rpy2_3/lib/python3.8/site-packages/diffxpy/testing/utils.py in constraint_system_from_star(dmat, sample_description, formula, as_numeric, constraints, return_type)\r\n    264         as_categorical = True\r\n    265 \r\n--> 266     return glm.data.constraint_system_from_star(\r\n    267         dmat=dmat,\r\n    268         sample_description=sample_description,\r\n\r\n~/miniconda3/envs/rpy2_3/lib/python3.8/site-packages/batchglm/data.py in constraint_system_from_star(dmat, sample_description, formula, as_categorical, constraints, return_type)\r\n    259             )\r\n    260 \r\n--> 261     return dmat, coef_names, cmat, term_names\r\n    262 \r\n    263 \r\n\r\nUnboundLocalError: local variable 'coef_names' referenced before assignment\r\n\r\n# However, this works if I change it to\r\ndesign_loc, design_loc_names, constraints_loc, term_names_loc = de.utils.constraint_system_from_star(\r\n    dmat=pd.DataFrame(np.array(dmat_est_loc),columns=dmat_est_loc.design_info.column_names),\r\n    constraints=constraints_loc,\r\n    return_type=\"patsy\"\r\n)\r\n\r\ndesign_loc_names\r\n\r\nIndex(['Intercept', 'rep1[T.1.0]', 'rep1[T.2.0]', 'rep2[T.1.0]', 'rep2[T.2.0]',\r\n       'treatment[T.1.0]'],\r\n      dtype='object')\r\n\r\nnp.unique(design_loc,axis=0)\r\n\r\narray([[1., 0., 0., 0., 1., 1.],\r\n       [1., 0., 0., 1., 0., 1.],\r\n       [1., 0., 1., 0., 0., 0.],\r\n       [1., 1., 0., 0., 0., 0.]])\r\n\r\nconstraints_loc\r\n\r\narray([[ 1.,  0.,  0.,  0.],\r\n       [ 0., -1.,  0.,  0.],\r\n       [ 0.,  1.,  0.,  0.],\r\n       [ 0.,  0., -1.,  0.],\r\n       [ 0.,  0.,  1.,  0.],\r\n       [ 0.,  0.,  0.,  1.]])\r\n\r\nterm_names_loc\r\n\r\n```\r\nCan you clarify this in the doc string?","closed_by":null,"reactions":{"url":"https://api.github.com/repos/theislab/diffxpy/issues/189/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/theislab/diffxpy/issues/189/timeline","performed_via_github_app":null,"state_reason":null}