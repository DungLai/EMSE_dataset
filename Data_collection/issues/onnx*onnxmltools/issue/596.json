{"url":"https://api.github.com/repos/onnx/onnxmltools/issues/596","repository_url":"https://api.github.com/repos/onnx/onnxmltools","labels_url":"https://api.github.com/repos/onnx/onnxmltools/issues/596/labels{/name}","comments_url":"https://api.github.com/repos/onnx/onnxmltools/issues/596/comments","events_url":"https://api.github.com/repos/onnx/onnxmltools/issues/596/events","html_url":"https://github.com/onnx/onnxmltools/issues/596","id":1449958234,"node_id":"I_kwDOB0J-H85WbJta","number":596,"title":"[Bug] Can't use sparkml imputer for more than 1 variable","user":{"login":"VenezianoMauro","id":11358106,"node_id":"MDQ6VXNlcjExMzU4MTA2","avatar_url":"https://avatars.githubusercontent.com/u/11358106?v=4","gravatar_id":"","url":"https://api.github.com/users/VenezianoMauro","html_url":"https://github.com/VenezianoMauro","followers_url":"https://api.github.com/users/VenezianoMauro/followers","following_url":"https://api.github.com/users/VenezianoMauro/following{/other_user}","gists_url":"https://api.github.com/users/VenezianoMauro/gists{/gist_id}","starred_url":"https://api.github.com/users/VenezianoMauro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/VenezianoMauro/subscriptions","organizations_url":"https://api.github.com/users/VenezianoMauro/orgs","repos_url":"https://api.github.com/users/VenezianoMauro/repos","events_url":"https://api.github.com/users/VenezianoMauro/events{/privacy}","received_events_url":"https://api.github.com/users/VenezianoMauro/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-11-15T15:20:23Z","updated_at":"2022-11-15T15:20:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"\r\nI was trying to convert a sparkml pipeline that has an imputer. Got an error and tried to run  _imputer_test_multi  from  TestSparkmlImputer. But keep getting the error.\r\nThe error is not limited to the test and i can't run mi pipeline on Onnx.\r\n\r\n```\r\nfrom onnxmltools.convert.sparkml.ops_names import sparkml_operator_name_map\r\nimport numpy\r\nimport onnxruntime \r\nfrom pyspark.ml.feature import Imputer\r\nfrom onnxconverter_common.onnx_ex import DEFAULT_OPSET_NUMBER\r\nfrom onnxmltools import convert_sparkml\r\nfrom onnxmltools.convert.common.data_types import FloatTensorType\r\n\r\ndata = spark.createDataFrame([\r\n    (1.0, float(\"nan\")),\r\n    (2.0, float(\"nan\")),\r\n    (float(\"nan\"), 3.0),\r\n    (4.0, 4.0),\r\n    (5.0, 5.0)\r\n], [\"a\", \"b\"])\r\nimputer = Imputer(inputCols=[\"a\", \"b\"], outputCols=[\"out_a\", \"out_b\"])\r\nmodel = imputer.fit(data)\r\n\r\n# the input name should match the inputCols above\r\nmodel_onnx = convert_sparkml(model, 'Sparkml Imputer Multi Input', [\r\n    ('a', FloatTensorType([None, 1])),\r\n    ('b', FloatTensorType([None, 1]))])\r\n\r\nwith open(\"model2.onnx\", \"wb\") as f:\r\n    f.write(model_onnx.SerializeToString())\r\n\r\n\r\nss = onnxruntime.InferenceSession(\"model2.onnx\")\r\n\r\ninput_data = {}\r\ndata_np = data.toPandas().values.astype(numpy.float32)\r\ndata_np = {'a': data_np[:, :1], 'b': data_np[:, 1:]}\r\n\r\nss.run(None, data_np)   \r\n\r\n2022-11-15 10:58:37.834941613 [E:onnxruntime:, sequential_executor.cc:369 Execute] Non-zero status code returned while running Split node. Name:'Split' Status Message: Cannot split using values in 'split' attribute. Axis=1 Input shape={5,2} NumOutputs=2 Num entries in 'split' (must equal number of outputs) was 1 Sum of sizes in 'split' (must equal size of selected axis) was 1\r\n---------------------------------------------------------------------------\r\nFail                                      Traceback (most recent call last)\r\n/tmp/ipykernel_118391/346882267.py in <module>\r\n      3 data_np = {'a': data_np[:, :1], 'b': data_np[:, 1:]}\r\n      4 \r\n----> 5 ss.run(None, data_np)\r\n\r\n~/venv/lib/python3.7/site-packages/onnxruntime/capi/onnxruntime_inference_collection.py in run(self, output_names, input_feed, run_options)\r\n    198             output_names = [output.name for output in self._outputs_meta]\r\n    199         try:\r\n--> 200             return self._sess.run(output_names, input_feed, run_options)\r\n    201         except C.EPFail as err:\r\n    202             if self._enable_fallback:\r\n\r\nFail: [ONNXRuntimeError] : 1 : FAIL : Non-zero status code returned while running Split node. Name:'Split' Status Message: Cannot split using values in 'split' attribute. Axis=1 Input shape={5,2} NumOutputs=2 Num entries in 'split' (must equal number of outputs) was 1 Sum of sizes in 'split' (must equal size of selected axis) was 1\r\n```\r\n\r\n\r\nBut i think i found a solution.\r\nIf i change the convert_inputer to this:\r\n```\r\ndef convert_imputer(scope, operator, container):\r\n    op = operator.raw_operator\r\n\r\n    op_type = 'Imputer'\r\n    \r\n    for i,_ in enumerate(operator.input_full_names):\r\n\r\n        attrs = {}\r\n        input_type = operator.inputs[0].type\r\n        surrogates = op.surrogateDF.toPandas().values[0].tolist()\r\n        value = op.getOrDefault('missingValue')\r\n        print(surrogates)\r\n        if isinstance(input_type, FloatTensorType):\r\n            attrs['imputed_value_floats'] = [surrogates[i]]\r\n            attrs['replaced_value_float'] = value\r\n        elif isinstance(input_type, Int64TensorType):\r\n            attrs['imputed_value_int64s'] = [[int(x) for x in surrogates][i]]\r\n            attrs['replaced_value_int64'] = int(value)\r\n        else:\r\n            raise RuntimeError(\"Invalid input type: \" + input_type)\r\n\r\n        container.add_node(op_type, operator.input_full_names[i], operator.output_full_names[i],\r\n                            name=scope.get_unique_operator_name('Imputer'),\r\n                           op_domain='ai.onnx.ml',\r\n                           **attrs)\r\n\r\n```\r\nAnd now I can use the imputer.\r\nThe problem is that, now, the tests fails because it expects only one array of two columns:\r\narray([[1., 4.],\r\n       [2., 4.],\r\n       [3., 3.],\r\n       [4., 4.],\r\n       [5., 5.]], dtype=float32)\r\n\r\nbut the output is now two arrays of 1 column each:\r\n[array([[1.],\r\n       [2.],\r\n       [3.],\r\n       [4.],\r\n       [5.]], dtype=float32), array([[4.],\r\n       [4.],\r\n       [3.],\r\n       [4.],\r\n       [5.]], dtype=float32)].\r\n\r\n\r\nIm not sure if that is a problem. The graph of the original implementation is this:\r\n![Screenshot from 2022-11-15 12-16-12](https://user-images.githubusercontent.com/11358106/201955958-dadf12c9-ebbc-4acf-926c-43c679e2350e.png)\r\n\r\nand the new graph is this:\r\n![image](https://user-images.githubusercontent.com/11358106/201956296-62eeb659-f159-4882-bca0-e1d7248141d0.png)\r\n\r\nIm seeing the same input and same output. \r\nSo, is it okey if i change the test and make a pr?\r\n\r\nwhat do you think?","closed_by":null,"reactions":{"url":"https://api.github.com/repos/onnx/onnxmltools/issues/596/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/onnxmltools/issues/596/timeline","performed_via_github_app":null,"state_reason":null}