{"url":"https://api.github.com/repos/onnx/onnxmltools/issues/500","repository_url":"https://api.github.com/repos/onnx/onnxmltools","labels_url":"https://api.github.com/repos/onnx/onnxmltools/issues/500/labels{/name}","comments_url":"https://api.github.com/repos/onnx/onnxmltools/issues/500/comments","events_url":"https://api.github.com/repos/onnx/onnxmltools/issues/500/events","html_url":"https://github.com/onnx/onnxmltools/issues/500","id":1001564736,"node_id":"I_kwDOB0J-H847sqpA","number":500,"title":"Error Converting pyspark.ml.classification.MultilayerPerceptronClassificationModel","user":{"login":"raudipra","id":19368538,"node_id":"MDQ6VXNlcjE5MzY4NTM4","avatar_url":"https://avatars.githubusercontent.com/u/19368538?v=4","gravatar_id":"","url":"https://api.github.com/users/raudipra","html_url":"https://github.com/raudipra","followers_url":"https://api.github.com/users/raudipra/followers","following_url":"https://api.github.com/users/raudipra/following{/other_user}","gists_url":"https://api.github.com/users/raudipra/gists{/gist_id}","starred_url":"https://api.github.com/users/raudipra/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/raudipra/subscriptions","organizations_url":"https://api.github.com/users/raudipra/orgs","repos_url":"https://api.github.com/users/raudipra/repos","events_url":"https://api.github.com/users/raudipra/events{/privacy}","received_events_url":"https://api.github.com/users/raudipra/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-09-20T23:41:02Z","updated_at":"2022-06-29T01:31:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Got an error when calling convert_sparkml() function on MultilayerPerceptronClassificationModel. \r\nSupposedly a minor bug in `convert/sparkml/ops_input_output.py` the key value of the model is missing. I've submitted my pull request of the solution. \r\n\r\nError logs:\r\n```\r\n/usr/local/lib/python3.7/dist-packages/aimodelshare/aimsonnx.py in _pyspark_to_onnx(model, initial_types, spark_session, transfer_learning, deep_learning, task_type)\r\n    360     # convert to onnx\r\n    361     onx = convert_sparkml(model, 'Pyspark model', initial_types, \r\n--> 362                          spark_session=spark_session)\r\n    363 \r\n    364     # generate metadata dict\r\n\r\n/usr/local/lib/python3.7/dist-packages/onnxmltools/convert/main.py in convert_sparkml(model, name, initial_types, doc_string, target_opset, targeted_onnx, custom_conversion_functions, custom_shape_calculators, spark_session)\r\n    164     from .sparkml.convert import convert\r\n    165     return convert(model, name, initial_types, doc_string, target_opset, targeted_onnx,\r\n--> 166                    custom_conversion_functions, custom_shape_calculators, spark_session)\r\n    167 \r\n    168 \r\n\r\n/usr/local/lib/python3.7/dist-packages/onnxmltools/convert/sparkml/convert.py in convert(model, name, initial_types, doc_string, target_opset, targeted_onnx, custom_conversion_functions, custom_shape_calculators, spark_session)\r\n     63     target_opset = target_opset if target_opset else get_maximum_opset_supported()\r\n     64     # Parse spark-ml model as our internal data structure (i.e., Topology)\r\n---> 65     topology = parse_sparkml(spark_session, model, initial_types, target_opset, custom_conversion_functions, custom_shape_calculators)\r\n     66 \r\n     67     # Infer variable shapes\r\n\r\n/usr/local/lib/python3.7/dist-packages/onnxmltools/convert/sparkml/_parse.py in parse_sparkml(spark, model, initial_types, target_opset, custom_conversion_functions, custom_shape_calculators)\r\n    117     # Parse the input spark-ml model as a Topology object.\r\n    118     output_dict = {}\r\n--> 119     _parse_sparkml(spark, scope, model, inputs, output_dict)\r\n    120     outputs = []\r\n    121     for k, v in output_dict.items():\r\n\r\n/usr/local/lib/python3.7/dist-packages/onnxmltools/convert/sparkml/_parse.py in _parse_sparkml(spark, scope, model, global_inputs, output_dict)\r\n     85         return _parse_sparkml_pipeline(spark, scope, model, global_inputs, output_dict)\r\n     86     else:\r\n---> 87         return _parse_sparkml_simple_model(spark, scope, model, global_inputs, output_dict)\r\n     88 \r\n     89 \r\n\r\n/usr/local/lib/python3.7/dist-packages/onnxmltools/convert/sparkml/_parse.py in _parse_sparkml_simple_model(spark, scope, model, global_inputs, output_dict)\r\n     48     this_operator = scope.declare_local_operator(get_sparkml_operator_name(type(model)), model)\r\n     49     this_operator.raw_params = {'SparkSession': spark}\r\n---> 50     raw_input_names = get_input_names(model)\r\n     51     this_operator.inputs = [_get_variable_for_input(scope, x, global_inputs, output_dict) for x in raw_input_names]\r\n     52     raw_output_names = get_output_names(model)\r\n\r\n/usr/local/lib/python3.7/dist-packages/onnxmltools/convert/sparkml/ops_input_output.py in get_input_names(model)\r\n    175     :return: list of input names\r\n    176     '''\r\n--> 177     return io_name_map[get_sparkml_operator_name(type(model))][0](model)\r\n    178 \r\n    179 \r\n\r\nKeyError: 'pyspark.ml.classification.MultilayerPerceptronClassificationModel'\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/onnx/onnxmltools/issues/500/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/onnxmltools/issues/500/timeline","performed_via_github_app":null,"state_reason":null}