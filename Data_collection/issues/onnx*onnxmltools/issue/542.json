{"url":"https://api.github.com/repos/onnx/onnxmltools/issues/542","repository_url":"https://api.github.com/repos/onnx/onnxmltools","labels_url":"https://api.github.com/repos/onnx/onnxmltools/issues/542/labels{/name}","comments_url":"https://api.github.com/repos/onnx/onnxmltools/issues/542/comments","events_url":"https://api.github.com/repos/onnx/onnxmltools/issues/542/events","html_url":"https://github.com/onnx/onnxmltools/issues/542","id":1218349219,"node_id":"I_kwDOB0J-H85Inoij","number":542,"title":"Missing H2O Converters","user":{"login":"dka-lmis","id":99737959,"node_id":"U_kgDOBfHhZw","avatar_url":"https://avatars.githubusercontent.com/u/99737959?v=4","gravatar_id":"","url":"https://api.github.com/users/dka-lmis","html_url":"https://github.com/dka-lmis","followers_url":"https://api.github.com/users/dka-lmis/followers","following_url":"https://api.github.com/users/dka-lmis/following{/other_user}","gists_url":"https://api.github.com/users/dka-lmis/gists{/gist_id}","starred_url":"https://api.github.com/users/dka-lmis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dka-lmis/subscriptions","organizations_url":"https://api.github.com/users/dka-lmis/orgs","repos_url":"https://api.github.com/users/dka-lmis/repos","events_url":"https://api.github.com/users/dka-lmis/events{/privacy}","received_events_url":"https://api.github.com/users/dka-lmis/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-04-28T07:58:30Z","updated_at":"2022-04-28T09:17:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am currently working on converters from H2O to ONNX for most of the missing model types.\r\n \r\nI've seen the Issues #409 and #414 and that some work needs to be done for the GBM models as well. \r\n\r\nThe current way of the model conversion, as explained in the current [GBM converter](https://github.com/onnx/onnxmltools/blob/main/onnxmltools/convert/h2o/convert.py) works by using the H2O MOJO format, which is a zip file with model descriptions and meta data as ini/json files and binaries for the model values themselves.\r\nThis MOJO file is being read as an input for the h2o-function `print_mojo(\"path/to/mojo.zip\", \"json\")`.\r\nThe Python H2O library maps to [this H2O jar file](https://github.com/h2oai/h2o-3/blob/master/h2o-genmodel/src/main/java/hex/genmodel/tools/PrintMojo.java). \r\nThis print-function returns a json-string which is used to iterate upon to convert each layer/node/operator to ONNX. \r\n\r\nDuring my research I've encountered 2 major issues with this approach: \r\n\r\n1. The Export of models to the MOJO format is not (yet) fully implemented, as can be seen in their [documentation](https://docs.h2o.ai/h2o/latest-stable/h2o-docs/save-and-load-model.html#supported-mojos).\r\n    - H2O further provides the models as binaries (I haven't looked into this yet) and POJO (Plain Java Objects), which would require parsing a Java File\r\n3. The `print_mojo(\"path/to/mojo.zip\", \"json\")`-function checks if the model type [is tree-based](https://github.com/h2oai/h2o-3/blob/master/h2o-genmodel/src/main/java/hex/genmodel/tools/PrintMojo.java#L279) since it is not meant to parse every MOJO model as JSON, but to _paint_ a canvas with the tree structure of certain MOJO types \r\n    - Distributed Random Forests (DRF) and Isolation Forests (IF) may be implemented using this approach, since they are tree based and thus are supported and can be exported as a json string.\r\n\r\nAs I see it now I may be limited to implementing DRF and IF models using the current workflow and updating the conversion for GBM models. \r\n\r\nI have most likely overlooked features provided by H2O, as it is a huge framework, and would ask for advice if someone else knows of another possible way to parse the models provided by H2O. \r\n\r\nEdit: Forgot to mention relevant H2O Jira issues regarding H2O: \r\n[Implement a convertor from GBM MOJO to ONNX](https://h2oai.atlassian.net/browse/PUBDEV-7057) - initial ONNX request, lead to the current implementation in PR\r\n[Unsupported MOJO type](https://h2oai.atlassian.net/browse/PUBDEV-7707) - back-references #409 \r\n\r\nAnd [further details](https://github.com/onnx/onnxmltools/pull/358/commits/ef356d1c42f149fcae4058d941bd18e6150e34f3#r359548806) on the conversation how to implement the model ingest. ","closed_by":null,"reactions":{"url":"https://api.github.com/repos/onnx/onnxmltools/issues/542/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/onnxmltools/issues/542/timeline","performed_via_github_app":null,"state_reason":null}