{"url":"https://api.github.com/repos/onnx/onnxmltools/issues/410","repository_url":"https://api.github.com/repos/onnx/onnxmltools","labels_url":"https://api.github.com/repos/onnx/onnxmltools/issues/410/labels{/name}","comments_url":"https://api.github.com/repos/onnx/onnxmltools/issues/410/comments","events_url":"https://api.github.com/repos/onnx/onnxmltools/issues/410/events","html_url":"https://github.com/onnx/onnxmltools/issues/410","id":669540332,"node_id":"MDU6SXNzdWU2Njk1NDAzMzI=","number":410,"title":"Issue handling XGBoost conversion with multiple input types","user":{"login":"ghost","id":10137,"node_id":"MDQ6VXNlcjEwMTM3","avatar_url":"https://avatars.githubusercontent.com/u/10137?v=4","gravatar_id":"","url":"https://api.github.com/users/ghost","html_url":"https://github.com/ghost","followers_url":"https://api.github.com/users/ghost/followers","following_url":"https://api.github.com/users/ghost/following{/other_user}","gists_url":"https://api.github.com/users/ghost/gists{/gist_id}","starred_url":"https://api.github.com/users/ghost/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ghost/subscriptions","organizations_url":"https://api.github.com/users/ghost/orgs","repos_url":"https://api.github.com/users/ghost/repos","events_url":"https://api.github.com/users/ghost/events{/privacy}","received_events_url":"https://api.github.com/users/ghost/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-07-31T08:05:35Z","updated_at":"2020-08-08T07:12:15Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Issue when Converting XGBoost models -> Onnx\r\nThere might be an Issue that we have come across when converting xgboost models.\r\nIn short, there are no existing examples on how to convert an XGBoost model to onnx that requires multiple input types.\r\n\r\nWhen converting with a single input type everything seems to go fine, but when using multiple types\r\nwe get an error that explains that only a single input type is expected (Even though the xgboost model expects multiple inputs).\r\n\r\n**Does anyone have an example (python statement) where a xgboost (or if not possible another type of model) is converted with onnxmltools with multiple TensorTypes as input.**\r\n\r\nWe have tried various statements but this statement produces the following error:\r\n\r\n## Statement\r\n``onnxmltools.convert_xgboost(xgb_reg, initial_types=[\r\n('input', FloatTensorType([1, 2])),\r\n('another_input', Int64TensorType([1, 1]))\r\n])``\r\n\r\n## Error \r\n    \r\n```\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-196-4ad3856a5ad3> in <module>()\r\n      8 xgb_reg.predict(X_heter)\r\n      9 \r\n---> 10onnxmltools.convert_xgboost(xgb_reg, initial_types=[('input', FloatTensorType([1, 2])),('another_input', Int64TensorType([1, 1]))])\r\n/opt/anaconda3/lib/python3.6/site-packages/onnxmltools/convert/main.py in convert_xgboost(*args, **kwargs)\r\n     83     if not utils.keras2onnx_installed():\r\n     84         raise RuntimeError('keras2onnx is not installed. Please install it to use this feature.')\r\n---> 85 \r\n     86     from keras2onnx import convert_tensorflow as convert\r\n     87     return convert(frozen_graph_def, name, input_names, output_names, doc_string,\r\n/opt/anaconda3/lib/python3.6/site-packages/onnxmltools/convert/xgboost/convert.py in convert(model, name, initial_types, doc_string, target_opset, targeted_onnx, custom_conversion_functions, custom_shape_calculators)\r\n     44     return onnx_model\r\n/opt/anaconda3/lib/python3.6/site-packages/onnxconverter_common/topology.py in compile(self)\r\n    676         self._resolve_duplicates()\r\n    677         self._fix_shapes()\r\n--> 678self._infer_all_types()\r\n    679         self._check_structure()\r\n    680 \r\n/opt/anaconda3/lib/python3.6/site-packages/onnxconverter_common/topology.py in _infer_all_types(self)\r\n    551                 pass  # in Keras converter, the shape calculator can be optional.\r\n    552             else:\r\n--> 553operator.infer_types()\r\n    554 \r\n    555     def _resolve_duplicates(self):\r\n/opt/anaconda3/lib/python3.6/site-packages/onnxconverter_common/topology.py in infer_types(self)\r\n    105     def infer_types(self):\r\n    106         # Invoke a core inference function\r\n--> 107get_shape_calculator(self.type)(self)\r\n    108 \r\n    109 \r\n/opt/anaconda3/lib/python3.6/site-packages/onnxconverter_common/shape_calculator.py in calculate_linear_regressor_output_shapes(operator)\r\n     68     shape may be [N, 1].\r\n     69     '''\r\n---> 70check_input_and_output_numbers(operator, input_count_range=1, output_count_range=1)\r\n     71 \r\n     72     N = operator.inputs[0].type.shape[0]\r\n/opt/anaconda3/lib/python3.6/site-packages/onnxconverter_common/utils.py in check_input_and_output_numbers(operator, input_count_range, output_count_range)\r\n    283         raise RuntimeError(\r\n    284             'For operator %s (type: %s), at most %s input(s) is(are) supported but we got %s output(s) which are %s'\r\n--> 285             % (operator.full_name, operator.type, max_input_count, len(operator.inputs), operator.input_full_names))\r\n    286 \r\n    287     if min_output_count is not None and len(operator.outputs) < min_output_count:\r\nRuntimeError: For operator XGBRegressor (type: XGBRegressor), at most 1 input(s) is(are) supported but we got 2 output(s) which are ['input', 'another_input']\r\n```\r\n\r\n\r\n\r\n\r\n## Want to reproduce the described scenario?\r\n\r\n```\r\nimport pandas as pd\r\nimport xgboost as xgb\r\nimport numpy as np\r\nimport skl2onnx.common.data_types as data_types\r\nimport onnxmltools\r\n\r\ncolumn_1 = np.array([10, 20, 30, 40, 50], dtype=int)\r\ncolumn_2 = np.array([1.00, 1.20, 1.14, 9.10, 9.38], dtype=float)\r\ncolumn_3 = np.array([1., 2., 3., 4., 5.], dtype=float)\r\n\r\nall_columns = [ '0', '1', '2']\r\n\r\nrandom_dataframe = pd.DataFrame(columns=all_columns)\r\nrandom_dataframe['0'] = column_1\r\nrandom_dataframe['1'] = column_2\r\nrandom_dataframe['2'] = column_3\r\nprint(random_dataframe)\r\n\r\nvalidate_index = 2\r\nx_train = random_dataframe.drop(columns=['2'])\r\ny_train = random_dataframe['2']\r\nxgb_reg = xgb.XGBRegressor(objective ='reg:squarederror', validate_parameters=True, colsample_bytree = 0.3, learning_rate = 0.1,\r\n                            max_depth = 5, alpha = 10, n_estimators = 10)\r\n\r\nprint(xgb_reg.validate_parameters)\r\nxgb_reg = xgb_reg.fit(x_train, y_train)\r\n\r\ninput_row = np.array([[int(10),float(0.76)]])\r\nprint(input_row)\r\n\r\nprediction_result = xgb_reg.predict(input_row, validate_features=False)\r\nprint(prediction_result)\r\n\r\nxgb_reg.save_model('multiple-inputs.json')\r\n**model_dimensions = [('A', data_types.Int64TensorType()), ('B', data_types.FloatType())]**\r\nonnx_model = onnxmltools.convert_xgboost(xgb_reg, \"multi-model\", model_dimensions)\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/onnx/onnxmltools/issues/410/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/onnxmltools/issues/410/timeline","performed_via_github_app":null,"state_reason":null}