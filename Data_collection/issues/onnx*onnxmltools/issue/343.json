{"url":"https://api.github.com/repos/onnx/onnxmltools/issues/343","repository_url":"https://api.github.com/repos/onnx/onnxmltools","labels_url":"https://api.github.com/repos/onnx/onnxmltools/issues/343/labels{/name}","comments_url":"https://api.github.com/repos/onnx/onnxmltools/issues/343/comments","events_url":"https://api.github.com/repos/onnx/onnxmltools/issues/343/events","html_url":"https://github.com/onnx/onnxmltools/issues/343","id":506975189,"node_id":"MDU6SXNzdWU1MDY5NzUxODk=","number":343,"title":"ONNX CLI","user":{"login":"joshthoward","id":10055613,"node_id":"MDQ6VXNlcjEwMDU1NjEz","avatar_url":"https://avatars.githubusercontent.com/u/10055613?v=4","gravatar_id":"","url":"https://api.github.com/users/joshthoward","html_url":"https://github.com/joshthoward","followers_url":"https://api.github.com/users/joshthoward/followers","following_url":"https://api.github.com/users/joshthoward/following{/other_user}","gists_url":"https://api.github.com/users/joshthoward/gists{/gist_id}","starred_url":"https://api.github.com/users/joshthoward/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joshthoward/subscriptions","organizations_url":"https://api.github.com/users/joshthoward/orgs","repos_url":"https://api.github.com/users/joshthoward/repos","events_url":"https://api.github.com/users/joshthoward/events{/privacy}","received_events_url":"https://api.github.com/users/joshthoward/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-10-15T03:02:26Z","updated_at":"2019-10-29T13:16:16Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This repo seems to be the best place for the discussion; I apologize if it has already happened elsewhere. \r\n\r\nI believe that a more natural workflow for interacting with ONNX models would be through a CLI rather than a Python library. This would more closely mimic configuration management tools like `git` or `docker`. Is there anyone else who would like to see this?\r\n\r\nIf so, I would be open to discussing features. My wish list is below:\r\n\r\n1. A user should be able to use a similar interface for building ONNX models regardless of the source framework. The interface might require a the framework to be specified as a flag or accommodate slight variations between static and dynamic computation graphs, but either way, the interface should be simplified.\r\n\r\n2. A user should not have to deal with files directly. The interface should abstract away the method of accessing or storing files at a local or remote location.\r\n\r\n3. Global or project level settings should be automatically applied or inferred for model metadata e.g. `metadata_props`. These fields are all sparingly populated from what I have seen. This is not necessarily a CLI only feature. \r\n \r\n4. A user should be able to deploy models with the same interface that they retrieve them with. I am a little skeptical that this is feasible, but it would be convenient.\r\n\r\nI would be interested in spending some time to get this off the ground. \r\n\r\nThoughts? ","closed_by":null,"reactions":{"url":"https://api.github.com/repos/onnx/onnxmltools/issues/343/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/onnxmltools/issues/343/timeline","performed_via_github_app":null,"state_reason":null}