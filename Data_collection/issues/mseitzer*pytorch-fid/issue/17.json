{"url":"https://api.github.com/repos/mseitzer/pytorch-fid/issues/17","repository_url":"https://api.github.com/repos/mseitzer/pytorch-fid","labels_url":"https://api.github.com/repos/mseitzer/pytorch-fid/issues/17/labels{/name}","comments_url":"https://api.github.com/repos/mseitzer/pytorch-fid/issues/17/comments","events_url":"https://api.github.com/repos/mseitzer/pytorch-fid/issues/17/events","html_url":"https://github.com/mseitzer/pytorch-fid/issues/17","id":451408627,"node_id":"MDU6SXNzdWU0NTE0MDg2Mjc=","number":17,"title":"New weight still produce wrong result","user":{"login":"AtlantixJJ","id":20163080,"node_id":"MDQ6VXNlcjIwMTYzMDgw","avatar_url":"https://avatars.githubusercontent.com/u/20163080?v=4","gravatar_id":"","url":"https://api.github.com/users/AtlantixJJ","html_url":"https://github.com/AtlantixJJ","followers_url":"https://api.github.com/users/AtlantixJJ/followers","following_url":"https://api.github.com/users/AtlantixJJ/following{/other_user}","gists_url":"https://api.github.com/users/AtlantixJJ/gists{/gist_id}","starred_url":"https://api.github.com/users/AtlantixJJ/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AtlantixJJ/subscriptions","organizations_url":"https://api.github.com/users/AtlantixJJ/orgs","repos_url":"https://api.github.com/users/AtlantixJJ/repos","events_url":"https://api.github.com/users/AtlantixJJ/events{/privacy}","received_events_url":"https://api.github.com/users/AtlantixJJ/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2019-06-03T10:32:25Z","updated_at":"2021-01-10T04:34:45Z","closed_at":"2019-10-19T17:15:27Z","author_association":"NONE","active_lock_reason":null,"body":"Using the updated weights still get wrong result. See this repo https://github.com/AtlantixJJ/PytorchInceptionV3 for detail.\r\n\r\nRun this code (need to store some image in data/cifar10_test, or go to the repo above):\r\n\r\n```python\r\n\"\"\"\r\nA script to test Pytorch and Tensorflow InceptionV3 have consistent behavior.\r\n\"\"\"\r\nimport sys, argparse, os, pathlib\r\nsys.path.insert(0, \".\")\r\nimport numpy as np\r\nimport tensorflow as tf\r\nimport torch\r\nfrom inception_modified import inception_v3\r\nfrom PIL import Image\r\n\r\nparser = argparse.ArgumentParser()\r\nparser.add_argument(\"--load_path\", default=\"\", help=\"The path to changed pytorch inceptionv3 weight. Run change_statedict.py to obtain.\")\r\nargs = parser.parse_args()\r\n\r\ndef check_or_download_inception(inception_path):\r\n    ''' Checks if the path to the inception file is valid, or downloads\r\n        the file if it is not present. '''\r\n    INCEPTION_URL = 'http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz'\r\n    if inception_path is None:\r\n        inception_path = '/tmp'\r\n    inception_path = pathlib.Path(inception_path)\r\n    model_file = inception_path / 'classify_image_graph_def.pb'\r\n    if not model_file.exists():\r\n        print(\"Downloading Inception model\")\r\n        from urllib import request\r\n        import tarfile\r\n        fn, _ = request.urlretrieve(INCEPTION_URL)\r\n        with tarfile.open(fn, mode='r') as f:\r\n            f.extract('classify_image_graph_def.pb', str(model_file.parent))\r\n    return str(model_file)\r\n\r\ndef torch2numpy(x):\r\n    return x.detach().cpu().numpy().transpose(0, 2, 3, 1)\r\n\r\ntorch.backends.cudnn.benchmark = True\r\ntorch.manual_seed(1)\r\ntorch.cuda.manual_seed(1)\r\n\r\ndata_dir = \"data/cifar10_test/\"\r\nimgs_pil = [Image.open(open(data_dir + s, \"rb\")).resize((299,299), Image.BILINEAR) for s in os.listdir(data_dir)]\r\nimgs = [np.asarray(img).astype(\"float32\") for img in imgs_pil]\r\nx_arr = np.array(imgs)\r\nx_arr_tf = x_arr\r\n# TF InceptionV3 graph use [0, 255] scale image\r\nfeed = {'FID_Inception_Net/ExpandDims:0': x_arr_tf}\r\n# This is identical to TF image transformation\r\nx_arr_torch = x_arr / 255. #(x_arr - 128) * 0.0078125\r\nx_torch = torch.from_numpy(x_arr_torch.transpose(0, 3, 1, 2)).float().cuda()\r\n\r\nmodel = inception_v3(pretrained=True, aux_logits=False, transform_input=False)\r\nif len(args.load_path) > 1:\r\n    # default: pretrained/inception_v3_google.pth\r\n    print(\"=> Get changed weight from %s\" % args.load_path)\r\n    try:\r\n        model.load_state_dict(torch.load(args.load_path))\r\n    except RuntimeError:\r\n        pass\r\nmodel.cuda()\r\nmodel.eval()\r\n\r\nif x_torch.size(2) != 299:\r\n    import torch.nn.functional as F\r\n    x_torch = F.interpolate(x_torch,\r\n            size=(299, 299),\r\n            mode='bilinear',\r\n            align_corners=False)\r\nfeatures = model.get_feature(x_torch)\r\nfeature_pytorch = features[-1].detach().cpu().numpy()\r\nif len(feature_pytorch.shape) == 4:\r\n    feature_pytorch = feature_pytorch[:, :, 0, 0]\r\n\r\ninception_path = check_or_download_inception(\"pretrained\")\r\nwith tf.gfile.FastGFile(\"pretrained/classify_image_graph_def.pb\", 'rb') as f:\r\n    graph_def = tf.GraphDef()\r\n    graph_def.ParseFromString(f.read())\r\n    _ = tf.import_graph_def( graph_def, name='FID_Inception_Net')\r\n    \r\nconfig = tf.ConfigProto()\r\nconfig.gpu_options.allow_growth = True\r\nsess = tf.Session(config=config)\r\n\r\nlayername = \"FID_Inception_Net/pool_3:0\"\r\nlayer = sess.graph.get_tensor_by_name(layername)\r\nops = layer.graph.get_operations()\r\nfor op_idx, op in enumerate(ops):\r\n    for o in op.outputs:\r\n        shape = o.get_shape()\r\n        if shape._dims != []:\r\n            shape = [s.value for s in shape]\r\n            new_shape = []\r\n            for j, s in enumerate(shape):\r\n                if s == 1 and j == 0:\r\n                    new_shape.append(None)\r\n                else:\r\n                    new_shape.append(s)\r\n            # print(o.name, shape, new_shape)\r\n            o.__dict__['_shape_val'] = tf.TensorShape(new_shape)\r\n\r\ntensor_list = [n.name for n in tf.get_default_graph().as_graph_def().node]\r\n\r\ntarget_layer_names = [\"FID_Inception_Net/Mul:0\", \"FID_Inception_Net/conv:0\", \"FID_Inception_Net/pool_3:0\"]\r\ntarget_layers = [sess.graph.get_tensor_by_name(l) for l in target_layer_names]\r\n\r\nsess.run(tf.global_variables_initializer())\r\nres = sess.run(target_layers, feed)\r\nx_tf = res[0]\r\nfeature_tensorflow = res[-1][:, 0, 0, :]\r\n\r\nprint(\"=> Pytorch pool3:\")\r\nprint(feature_pytorch[0][:6])\r\nprint(\"=> Tensorflow pool3:\")\r\nprint(feature_tensorflow[0][:6])\r\nprint(\"=> Mean abs difference\")\r\nprint(np.abs(feature_pytorch - feature_tensorflow).mean())\r\n\r\ndef get_tf_layer(name):\r\n    return sess.run(sess.graph.get_tensor_by_name(name + ':0'), feed)\r\n```\r\n\r\nresult:\r\n\r\n```\r\n=> Pytorch pool3:\r\n[0.42730308 0.00819586 0.27243498 0.2880235  0.10205843 0.05626289]\r\n=> Tensorflow pool3:\r\n[0.13085267 0.5260418  0.22931635 0.02919772 0.2439549  0.50965333]\r\n=> Mean abs difference\r\n0.34774715\r\n```","closed_by":{"login":"mseitzer","id":16725193,"node_id":"MDQ6VXNlcjE2NzI1MTkz","avatar_url":"https://avatars.githubusercontent.com/u/16725193?v=4","gravatar_id":"","url":"https://api.github.com/users/mseitzer","html_url":"https://github.com/mseitzer","followers_url":"https://api.github.com/users/mseitzer/followers","following_url":"https://api.github.com/users/mseitzer/following{/other_user}","gists_url":"https://api.github.com/users/mseitzer/gists{/gist_id}","starred_url":"https://api.github.com/users/mseitzer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mseitzer/subscriptions","organizations_url":"https://api.github.com/users/mseitzer/orgs","repos_url":"https://api.github.com/users/mseitzer/repos","events_url":"https://api.github.com/users/mseitzer/events{/privacy}","received_events_url":"https://api.github.com/users/mseitzer/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mseitzer/pytorch-fid/issues/17/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mseitzer/pytorch-fid/issues/17/timeline","performed_via_github_app":null,"state_reason":"completed"}