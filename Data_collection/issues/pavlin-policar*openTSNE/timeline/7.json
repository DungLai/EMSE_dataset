[{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421729222","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-421729222","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":421729222,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMTcyOTIyMg==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-09-16T09:13:25Z","updated_at":"2018-09-16T09:13:25Z","author_association":"OWNER","body":"These are all excellent questions, and I should include a lot of this into the readme, but I've found writing good documentation is quite hard.\r\n\r\n> I did not know about Orange but I am working with scRNA-seq data myself\r\n\r\nOrange actually provides a rich ecosystem of add-ons for text-mining and image embedding to name a few. Over the past year or so, we've been working on a single-cell version - [scOrange](https://singlecell.biolab.si/#Orange-Features), which adds a lot of popular techniques from the widely used R `seurat` package and others. It's not the greatest for dealing with really big data sets as of this moment, but we'll get there.\r\n\r\n1. So I should probably rephrase this since both are fast for smaller data sets, but BH is instantaneous while with FFT we have to wait a couple seconds. I'm sure they both go in under a minute, but since we are incorporating this into Orange, a tool based on interactivity, instant versus a couple seconds matters. Same goes for nearest neighbor search: the exact search is near instantaneous, while the approximate one has some overhead which takes a couple of seconds. On smaller data sets the difference will probably end up being seconds or minutes, but like I said, in an interactive environment, this is important for user experience.\r\n\r\n2. I think I tested a couple libraries for NN search. One criteria I had was easy packaging and ideally, it would have a conda package. I was told C++ makes things hard to package, so a lot of popular libraries (including annoy) fell through there. I don't remember exactly how I came to settle on pynndescent, but I did try several other implementations. I didn't benchmark this much, but it did orders of magnitude better than exact search, so I was satisfied (see MNIST benchmark in readme). And if it turns out there's a better method, we can always just switch it out.\r\nLooking through the code, a single line is missing to make this extensible so the user could potentially implement their own NN search method and pass that as an argument, so I'll probably add that.\r\nI did notice a few days ago that `pynndescent` is actually written by Leland McInnes, and he just copied the code over to UMAP, so there must be some merit to it.\r\n\r\n3. That is true, there is no exact tSNE implementation. I don't think this is much of an issue since both BH and FFT approximations produce results that are almost indistinguishable from exact tSNE. The gradient *could* be computed exactly by setting the BH angle parameter to 0, but there is currently no way to exactly compute the affinity matrix for neighbors. Once I add that one line this will be possible, but, again, I don't think this is really all that important. Have you ever found a case where the exact embedding was much different from an approximate embedding?\r\n\r\n4. Yes, so it's similar to what you describe. I fix the existing embedding, compute the affinities from the new points to the existing points and optimize the new points' positions. I do not consider interactions between the new points. One reason for is that I believe I'd have to rebuild the KNN index if I did this, which could take a long time. The other reason is purely from a usability standpoint - I want to know how new data relates to my existing data - what existing clusters do new data points correspond with. If I have a representative sample in the existing embedding, this should work fine. There are problems with this if we have points that aren't similar to any of the existing ones, and thinking about it now, it may make sense to include those interactions as well. I'll have to play around with this some more...\r\n\r\n5. While benchmarking, I too found that computing the positive forces was the main bottleneck - even with multithreading. Everything in the cython code is multithreaded - where possible and reasonable (sometimes the overhead of running multiple threads makes it slower than single threaded).\r\nI would note that since I replaced FFTW with numpy's implementation of FFT (for ease of packaging) the negative forces part has been slower, and I haven't had the time to properly benchmark that. I am hoping to speed this back up by adding the option to use FFTW if it's available on the system, or by looking into Intel's MKL FFT implementation, which looks promising.\r\n\r\n6. I got the Zeisel data set from [Linnarsson Lab](http://loom.linnarssonlab.org/) and they provide several labellings for the cells. I took a lower level of the ontology than the one they show in the figure you provided, so there are actually 30 cell types on my plot. The colors overlap because there's too many. I didn't really compare the plots - I am guessing the plot in the paper uses a bigger perplexity than I did (I just used the default 30), so the telencephalon neurons cluster together more nicely than in my plot. The plot looked neat and I had it at hand, so I included it here. It serves no purpose other than being pretty :smile: and I'll probably replace this one with a bigger data set when I get around to running that.\r\n\r\nI believe that several things can still be done to improve this code, and speed the FFT back up - I think I've pretty much optimized the other parts as much as possible. The goal of this package is to be easy to use and easy to install - I found running FIt-SNE quite daunting at first, and then I ran it through the R interface. I really like working with numpy arrays more than through text files.\r\n\r\nI haven't really done much with adding new points, but it is sometimes hard to get nice plots. Increasing exaggeration here can help a lot for a couple iterations.\r\n\r\nThank's for your questions and feedback, it's very welcome.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421729222/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421834666","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-421834666","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":421834666,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMTgzNDY2Ng==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-09-16T21:13:34Z","updated_at":"2018-09-17T08:40:14Z","author_association":"CONTRIBUTOR","body":"Thanks a lot for the detailed reply! Everything that you said makes sense.\r\n\r\n* scOrange looks really cool.\r\n\r\n* Regarding nearest neighbours, I wasn't aware that `pynndescent` is packaged as a library on its own and that it's actually faster than `annoy` according to https://github.com/erikbern/ann-benchmarks. So this is clarified.\r\n\r\n* Regarding exact t-SNE, \"Have you ever found a case where the exact embedding was much different from an approximate embedding?\" -- no. But I guess for a small enough dataset many people could still prefer to use vanilla t-SNE just because it makes it somewhat simpler to explain/understand.\r\n\r\nWhat you wrote about projecting new points is very interesting:\r\n\r\n>  I fix the existing embedding, compute the affinities from the new points to the existing points and optimize the new points' positions. I do not consider interactions between the new points.\r\n\r\nThis is similar to what I have been doing, which is to position each new point at the median position of its e.g. 25 nearest neighbours among the old points. This is very simple because it does not require any optimization at all. What you do is similar but slightly more complicated: you find e.g. 90 nearest neighbours, compute affinities using perplexity 30, and then optimize the location of the new point based on the t-SNE loss. Right? So the new point is repulsed from all old points and attracted to these 90.\r\n\r\nI am wondering how different this is in practice. How do you initialize the positions of the new points? If you use something like what I am doing as an initialization (which would be sensible, I guess), then did you look at how the result changes after the optimization?\r\n\r\n> There are problems with this if we have points that aren't similar to any of the existing ones, and thinking about it now, it may make sense to include those interactions as well. I'll have to play around with this some more...\r\n\r\nYes, but this becomes a very different setting then. I tried it some time ago, and if there is some \"batch effect\" present, i.e. the new points are substantially different from the old points (e.g. think different RNAseq protocol), then all new points will gather in a cluster on their own, outside of all old clusters. I did not find this very useful.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421834666/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421835639","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-421835639","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":421835639,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMTgzNTYzOQ==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-09-16T21:20:30Z","updated_at":"2018-09-16T21:20:30Z","author_association":"CONTRIBUTOR","body":"P.S. Just noticed that you updated the Zeisel runtime to 2 minutes. This is very impressive for n=160k. Did you actually compare it to https://github.com/KlugerLab/FIt-SNE with the same parameters on the same machine?","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421835639/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421932954","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-421932954","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":421932954,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMTkzMjk1NA==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-09-17T08:53:46Z","updated_at":"2018-09-17T08:53:46Z","author_association":"OWNER","body":"So, regarding exact tSNE - I suppose some people may want to try it, but I still feel that this will very rarely come up. I believe scikit-learn provides exact tSNE, and I don't think that has any performance issues (their BH implementation is notoriously slow), so that's readily available. I may add it at some point, but it really isn't high on my list of priorities.\r\n\r\n> ... So the new point is repulsed from all old points and attracted to these 90.\r\n\r\nYou're spot on. I tried three types of initialization:\r\n- random is more for fun - I don't think it should be used in practice. I wanted to see if we're able to manoeuver the new points around the slew of points in the existing embedding. This works, but it's sometimes hard and requires playing with the exaggeration and learning rate,\r\n- weighted mean of k nearest neighbors (this is what you described). This often works quite well and the optimization at the end serves only to refine the positions and doesn't really need to be run for many iterations. The point positions don't typically change much.\r\n- PCA - sometimes PCA is used to find a good initial embedding for the training set. This sometimes works, but for sc data specifically, I found it gives terrible results. It smears similar points across the space and tSNE has to group them back together. But on smaller data sets it's fine.\r\nIf we do this, we can use the same basis to find initial positions for new points as well. This needs to be refined with optimization since the initial points could have moved quite a lot.\r\n\r\nI haven't throughoutly compared any of these methods, apart from verifying I can get reasonable results. I think it's safe to say that using the weighted mean is probably the best of the three options.\r\n\r\nOur idea was that we could likely get tSNE to run faster if we embed only a subset of points then add the rest of the data set in afterwards, using this direct optimization technique. This was before I ran across George Linderman's paper. With his method, things run so fast that there's no need for this trickery.\r\n\r\nYeah, I've been playing around with how to deal with batch effects, but it's a hard problem. Like you said, they cluster completely separately. I verified this with UMAP and get similar results.\r\n\r\n> Just noticed that you updated the Zeisel runtime to 2 minutes.\r\n\r\nSo this may be a little bit misleading I suppose - it's meant as a *wow* factor and requires clarification :) I first preprocessed the data using SVD and took the first 100 components - this is fairly standard (typically people use PCA, but since sc data are sparse, PCA uses a lot more memory due to the centering step). I used the default perplexity 30, the runtime is quite dependent on this parameter. Also, here I'm still using FFTW - using numpy FFT (as currently implemented on master) would likely be a bit slower. I am planning to include the option of using FFTW if it's available. So the entire pipeline took longer to run, but the tSNE part did run in exactly 2 minutes. I did run it on 8 cores on an Intel Xeon, but these have lower clock speeds than typical i5 or i7 processors. But this is all a bit much to include at the top of the readme, but when I include proper benchmarks, I'll be sure to describe everything in detail.\r\n\r\nI did not check how it compares to the C++ implementation, I have not had the time to run a proper set of benchmarks, but I will include them, in october (if not sooner) when my schedule clears up a bit. Likely they are comparable, since both use FFTW, maybe this one is a little bit faster because of I use NN descent and George uses annoy, which the benchmark you linked to says is slower.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421932954/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421938245","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-421938245","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":421938245,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMTkzODI0NQ==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-09-17T09:12:47Z","updated_at":"2018-09-17T09:13:27Z","author_association":"CONTRIBUTOR","body":"> I think it's safe to say that using the weighted mean is probably the best of the three options.\r\n\r\nI agree. Random initialization should not work very well, as you say. PCA either. It's good to know that optimizing tSNE loss does not change the positions too much, compared to the weighted mean initialization. I guess using tSNE loss can be seen as more principled though.\r\n\r\n> sometimes PCA is used to find a good initial embedding for the training set. This sometimes works, but for sc data specifically, I found it gives terrible results. It smears similar points across the space and tSNE has to group them back together.\r\n\r\nThis is actually not at all what I observe. I always recommend PCA for initializing t-SNE. I briefly looked at your code and it seems that when you use PCA, you just take the raw PCA projections as the initialization? The standard initialization is random Gaussian with a very small variance, and this is important to get t-SNE to converge nicely. So when I use PCA initialization, I take PCA projection and scale both x and y to have variance=0.01. I am wondering if this is maybe why you had \"terrible\" results.\r\n\r\n> (typically people use PCA, but since sc data are sparse, PCA uses a lot more memory due to the centering step)\r\n\r\nInteresting remark! That's true. I usually use PCA after selecting ~1000 most variable genes, and I found that even for n=1.3mln dataset this works reasonably fast. But it's a good trick to use SVD without centering.\r\n","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421938245/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421943460","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-421943460","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":421943460,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMTk0MzQ2MA==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-09-17T09:31:49Z","updated_at":"2018-09-17T09:31:49Z","author_association":"OWNER","body":"> you just take the raw PCA projections as the initialization?\r\n\r\nYes, I believe I got this from scikit-learn. In that case, it's possible that they've got it wrong as well.\r\n\r\n> The standard initialization is random Gaussian with a very small variance, and this is important to get t-SNE to converge nicely.\r\n\r\nReally? I was not aware of this at all. Why exactly is small variance so important?\r\n\r\n> So when I use PCA initialization, I take PCA projection and scale both x and y to have variance=0.01. I am wondering if this is maybe why you had \"terrible\" results.\r\n\r\nI'll definitely have to try this. If small variance is really that important, this is very likely the reason for the bad results. Thanks for pointing this out!\r\n\r\n> I usually use PCA after selecting ~1000 most variable genes, and I found that even for n=1.3mln dataset this works reasonably fast.\r\n\r\nInteresting, my approaches have been either straight up SVD, or some feature selection e.g. most variable genes - but I pick less of them e.g. 100-500 - and running tSNE on that directly. I'll have to try this method as well.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421943460/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421946020","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-421946020","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":421946020,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMTk0NjAyMA==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-09-17T09:40:37Z","updated_at":"2018-09-17T09:40:37Z","author_association":"CONTRIBUTOR","body":"> Why exactly is small variance so important?\r\n\r\nI am not entirely sure, and I did not experiment with it too much myself. My intuition is that if the \"output\" distances are large then the gradients will be small, and the optimization can get stuck. \r\n\r\nBut in any case, note that the standard initialization is Gaussian with std=0.0001, and if this value were irrelevant then people would just use std=1.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421946020/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421958984","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-421958984","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":421958984,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMTk1ODk4NA==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-09-17T10:27:04Z","updated_at":"2018-09-17T10:27:04Z","author_association":"OWNER","body":"> But in any case, note that the standard initialization is Gaussian with std=0.0001, and if this value were irrelevant then people would just use std=1.\r\n\r\nGood point. I'll fix this ASAP. Thanks for pointing this out.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/421958984/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/423109485","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-423109485","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":423109485,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMzEwOTQ4NQ==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-09-20T09:24:13Z","updated_at":"2018-09-20T09:24:13Z","author_association":"CONTRIBUTOR","body":"I guess this can be closed now.\r\n\r\nBTW, I am preparing a write-up on \"How to use t-SNE effectively for scRNA-seq data\". It will mainly focus on some useful tricks to preserve global geometry (I see in papers that everybody gets this very suboptimal), but I am also discussing things like projecting new cells on an exiting t-SNE atlas of a reference dataset (simple method - simply using knn), etc. I have all the code and figures almost ready, but still have to write the text. Should be done by the end of the month, I hope. If you like, I can send you the draft when it's ready; I'd very much appreciate your comments.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/423109485/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"id":1857142943,"node_id":"MDExOkNsb3NlZEV2ZW50MTg1NzE0Mjk0Mw==","url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/events/1857142943","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2018-09-20T09:24:13Z","state_reason":null,"performed_via_github_app":null},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/423111953","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-423111953","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":423111953,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMzExMTk1Mw==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-09-20T09:31:23Z","updated_at":"2018-09-20T09:31:23Z","author_association":"OWNER","body":"Sounds very interesting. I'd definitely be interested in giving it a read.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/423111953/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/423852357","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-423852357","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":423852357,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMzg1MjM1Nw==","user":{"login":"linqiaozhi","id":19375944,"node_id":"MDQ6VXNlcjE5Mzc1OTQ0","avatar_url":"https://avatars.githubusercontent.com/u/19375944?v=4","gravatar_id":"","url":"https://api.github.com/users/linqiaozhi","html_url":"https://github.com/linqiaozhi","followers_url":"https://api.github.com/users/linqiaozhi/followers","following_url":"https://api.github.com/users/linqiaozhi/following{/other_user}","gists_url":"https://api.github.com/users/linqiaozhi/gists{/gist_id}","starred_url":"https://api.github.com/users/linqiaozhi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/linqiaozhi/subscriptions","organizations_url":"https://api.github.com/users/linqiaozhi/orgs","repos_url":"https://api.github.com/users/linqiaozhi/repos","events_url":"https://api.github.com/users/linqiaozhi/events{/privacy}","received_events_url":"https://api.github.com/users/linqiaozhi/received_events","type":"User","site_admin":false},"created_at":"2018-09-23T22:21:49Z","updated_at":"2018-09-23T22:21:49Z","author_association":"NONE","body":"Great discussion here! Just one comment about the following:\r\n \r\n> > (typically people use PCA, but since sc data are sparse, PCA uses a lot more memory due to the centering step)\r\n> \r\n> Interesting remark! That's true. I usually use PCA after selecting ~1000 most variable genes, and I found that even for n=1.3mln dataset this works reasonably fast. But it's a good trick to use SVD without centering.\r\n\r\nI presume you are using Lanczos methods for SVD of this large sparse matrix. You might consider using randomized PCA, instead ([here](https://dl.acm.org/citation.cfm?id=2078881) is the standard review). There are advantages of randomized PCA over the Lanczos iteration methods, some of which are described [here](https://dl.acm.org/citation.cfm?id=3004053) (let me know if the paywall gets in your way) in the context of our Matlab implementation. \r\n\r\nI bring it up here though because you do not have to pre-center the data, but rather can keep it sparse throughout the algorithm. Randomized PCA is essentially just matrix multiplication, so you can  just keep subtracting out the center after each matrix multiplication. You can see how we do this subtraction [here](https://github.com/KlugerLab/pcafast/blob/master/src/pcafast.m#L215-L224).\r\n\r\nThe python package [fbpca](https://github.com/facebook/fbpca) does this, so you might consider trying it out. Something like this is definitely possible with R, but I don't think the randomized SVD R package [rsvd](https://github.com/erichson/rSVD) supports sparse matrices.\r\n\r\nI mention this because SVD without first centering is not technically PCA (i.e. it's not the eigenvectors of the covariance matrix), but rather an (optimal) low rank approximation to the data. The resulting representations can be very different, but it's not clear to me if the distances between points would be very different (which is all t-SNE cares about). But using randomized methods you can get PCA without making the sparse matrix dense, so you might consider doing that to avoid any issues :) and not to mention that randomized methods are so fast, you don't even need to subselect your genes for computational reasons (although there might be other reasons to do that, of course).","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/423852357/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"linqiaozhi","id":19375944,"node_id":"MDQ6VXNlcjE5Mzc1OTQ0","avatar_url":"https://avatars.githubusercontent.com/u/19375944?v=4","gravatar_id":"","url":"https://api.github.com/users/linqiaozhi","html_url":"https://github.com/linqiaozhi","followers_url":"https://api.github.com/users/linqiaozhi/followers","following_url":"https://api.github.com/users/linqiaozhi/following{/other_user}","gists_url":"https://api.github.com/users/linqiaozhi/gists{/gist_id}","starred_url":"https://api.github.com/users/linqiaozhi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/linqiaozhi/subscriptions","organizations_url":"https://api.github.com/users/linqiaozhi/orgs","repos_url":"https://api.github.com/users/linqiaozhi/repos","events_url":"https://api.github.com/users/linqiaozhi/events{/privacy}","received_events_url":"https://api.github.com/users/linqiaozhi/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/423914696","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-423914696","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":423914696,"node_id":"MDEyOklzc3VlQ29tbWVudDQyMzkxNDY5Ng==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-09-24T09:08:09Z","updated_at":"2018-09-24T09:08:09Z","author_association":"OWNER","body":"I'm not familiar with the details of these methods, but Lanczos seems a lot like power iteration. I had heard of randomized methods for PCA, but never tried them. I guess I had always supposed that centring was a crucial step for PCA. I also just used the default implementations from scikit learn, I assume those are pretty well done. Thanks, I'll definitely take a look!\r\n\r\nI used SVD because it was fast and didn't require me to form a dense matrix of my data. Since the data were also on the same scale i.e. in sc data the gene counts are comparable and meaningful to compare inside a single experiment, I assumed it wouldn't be too problematic. Of course, all of my assumptions could be wrong - I haven't been working with sc data very long and I am constantly being surprised. I'll definitely look at the randomized methods!","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/423914696/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433535178","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433535178","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433535178,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzUzNTE3OA==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-10-26T20:33:40Z","updated_at":"2018-10-26T20:33:40Z","author_association":"CONTRIBUTOR","body":"Hey Pavlin. We have finally made our preprint available: https://www.biorxiv.org/content/early/2018/10/25/453449. I hope you don't mind that I thanked you in the acknowledgments for discussions! The format of the paper is a bit odd, due to the journal requirements where we decided to send it first. I'd obviously be very grateful for any comments.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433535178/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433609622","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433609622","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433609622,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzYwOTYyMg==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T10:37:42Z","updated_at":"2018-10-27T10:37:42Z","author_association":"OWNER","body":"Hi Dmitry, thanks!\r\n\r\n> I hope you don't mind that I thanked you in the acknowledgments for discussions!\r\n\r\nNot at all.\r\n\r\nI've given it a quick read and it's really interesting and well written.\r\n\r\nI'd never heard of the multiscale approach you mention and I'll definitely give that paper a read. What a neat trick! You write that you found the global perplexity to be good around N/50 - why 50? I guess it's more of a guideline, but did you check what ranges are acceptable? Also, how sensitive is this to specific data sets?\r\n\r\nIn the section about adding new points to an embedding, you are using data from two different sources e.g. macosko and shekhar. I found that between sources, the batch effect can be quite large, and it's interesting that you get good results. Did you address batch effects in any way or do you think that maybe just using the nearest neighbors was good enough? My guess is that if the batch effect is large enough, then if we optimize the new points with the t-SNE criteron the points would move away from the reference embedding and the resulting embedding would be meaningless.\r\n\r\nI am wondering about the data set alignment. Point initialiasations don't really restrict the point positions very much, so if you had a much larger data set, and \"aligned\" it to a much smaller initial set, my guess would be that, if left to optimize for a large number of iterations, the new embedding could look quite different from the original embedding. To me, it seems this would work if 1. you don't have too many new points (relative to the initial data) and 2. if the new data come from the same distribution as the old data i.e. you don't have any new cell types. Otherwise I don't think we can assume what the result will look like. This doesn't at all take away from the use case, which I think is very helpful and the example you showed is cool, but I the approach can sometimes fail. Any thoughts?\r\n\r\nI'm also curious about the runtime of the 10x data set. I didn't think exaggeration had that much of an impact. I really like Figure 7, it's very pretty and really makes the impact of each step very apparent.\r\n\r\nI'll give it a proper read ASAP, the multiscale approach seems particularly useful and I'll definitely to incorporate it into my library. Thanks for sharing, even at a glance, there's a lot of useful stuff here :)","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433609622/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433613892","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433613892","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433613892,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzYxMzg5Mg==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T11:51:51Z","updated_at":"2018-10-27T11:51:51Z","author_association":"CONTRIBUTOR","body":"> You write that you found the global perplexity to be good around N/50 - why 50? I guess it's more of a guideline, but did you check what ranges are acceptable? Also, how sensitive is this to specific data sets?\r\n\r\nI guess I shouldn't have written N/50, it makes it sound too definitive. I might change it to N/100 -- N/10 in the revision. I don't remember seeing useful results with perplexity larger than N/10; I guess p_j|i get too close to the uniform distribution then (it gets exactly uniform at N-1). With perplexity less than N/100 one quite clearly is not capturing any *global* geometry anymore. So this gives some range.\r\n\r\n> Did you address batch effects in any way or do you think that maybe just using the nearest neighbors was good enough? My guess is that if the batch effect is large enough, then if we optimize the new points with the t-SNE criteron the points would move away from the reference embedding and the resulting embedding would be meaningless.\r\n\r\nI did not do anything about the batch effect (apart from using correlation distance which I think should be a bit more robust than Euclidean distance; but I haven't experimentally compared them, to be honest). I think if the nearest neighbours are meaningful, then the points will not move away from the reference embedding even if the batch effect is enormous. A new cell is still attracted to its nearest neighbours, right?\r\n\r\n> Point initialiasations don't really restrict the point positions very much, so if you had a much larger data set, and \"aligned\" it to a much smaller initial set, my guess would be that, if left to optimize for a large number of iterations, the new embedding could look quite different from the original embedding. To me, it seems this would work if 1. you don't have too many new points (relative to the initial data) and 2. if the new data come from the same distribution as the old data i.e. you don't have any new cell types.\r\n\r\n\"Point initialiasations don't really restrict the point positions very much\" -- I don't think that's true. For large datasets they restrict the final positions quite a lot, and one needs to take special care to prevent this from happening (e.g. early exaggeration etc.). So one can switch early exaggeration off, or make it small, etc. Of course if the new dataset is very different from the old, then the embedding can get very distorted, you are right. So this procedure assumes that the data distributions are similar. The number of points is less of an issue, I think.\r\n\r\n> I'm also curious about the runtime of the 10x data set. I didn't think exaggeration had that much of an impact.\r\n\r\nAre you asking how long it took? I have some approximate benchmarks for 1mln points in the paper; for 1.3 mln points it's a bit slower than that but not too much. Regarding exaggeration -- yes, this seems to be really essential once one is beyond N=1e+6.\r\n\r\n> the multiscale approach seems particularly useful and I'll definitely to incorporate it into my library\r\n\r\nTo be completely honest, multiscale worked really well for the Tasic et al. 2017 dataset, but wasn't super useful for other datasets. One can argue that Tasic 2017 has the clearest hierarchical structure though. Still, it's quite easy to implement, and it's been described in the literature, so why not! If you implement it here, then I'd be happy to include a link to your library into the revision, because then your library would be capable of everything that we are doing in the paper. (Ah, wait, do you have functionality for using fixed sigma? I'd suggest to add that too, it's even simpler to do.)\r\n\r\nBy the way, by a remarkable coincidence, there was a related preprint published on the same day: https://www.biorxiv.org/content/early/2018/10/24/451690. I think you might find it interesting too.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433613892/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433625810","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433625810","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433625810,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzYyNTgxMA==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T14:33:16Z","updated_at":"2018-10-27T14:33:16Z","author_association":"OWNER","body":"> I did not do anything about the batch effect\r\n\r\nActually I just remembered from some of my old experiments that dropout based feature selection actually does kind of, implicitly mitigate batch effects, not very well, but I guess it must have been good enough here.\r\n\r\n> I think if the nearest neighbours are meaningful, then the points will not move away from the reference embedding even if the batch effect is enormous. A new cell is still attracted to its nearest neighbours, right?\r\n\r\nMy reasoning against this is that if the batch effect is large, then the nearest neighbors will actually be very far away from the new point (probably less so for correlation distance, but it's pretty big for euclidean distance). This, in turn, means that the sigma for that point will have to be very large or equivalently, the Gaussian will have to be very flat to accommodate the nearest neighbors. This, in turn, means that the probabilities of each neighbor will be fairly low and the embedding will try to accommodate the low probability by positioning it farther away from the nearest neighbors. Have I made a mistake somewhere? Again, this only happens if we optimize, which you don't, and even still you might not see this because you kind of implicitly mitigate batch effects via feature selection.\r\n\r\n> For large datasets they restrict the final positions quite a lot, and one needs to take special care to prevent this from happening\r\n\r\nInteresting, that's really very useful then, and this could explain the issue I was having with non-scaled PCA initialization. I suppose it's the scale of the embedding that restricts the points? On a large scale the repulsive forces are smaller, so the points don't move as much?  I wonder what would happen if you took the initial embedding, scaled it down to have small variance, embedded the new points and, only then, ran the optimization.\r\n\r\n> Are you asking how long it took?\r\n\r\nYes, but I see I missed that part in the manuscript - sorry about that.\r\n\r\n> To be completely honest, multiscale worked really well for the Tasic et al. 2017 dataset, but wasn't super useful for other datasets.\r\n\r\nBut are the results ever worse than using the other method - perplexity annealing - which you use in almost all the other examples. The multiscale version is just a regular t-SNE run, we just consider more neighbors with different weights. Perplexity annealing requires two steps - if I got this correctly - first we run regular t-SNE (both early exaggeration and no exaggeration) with perplexity e.g. 500, then another run of t-SNE (again, both phases), but with a lower perplexity. In both cases we need to compute 1500 nearest neighbors for each point, but perplexity annealing requires twice as many iterations. \r\n\r\n> If you implement it here, then I'd be happy to include a link to your library into the revision\r\n\r\nSure thing! I'll add the missing pieces. You and George are doing fantasitc work on the C++ implementation, but distributing a C++ package for all platforms is a nightmare, hence this package.\r\n\r\n> Ah, wait, do you have functionality for using fixed sigma? I'd suggest to add that too, it's even simpler to do.\r\n\r\nDo you mean that instead of adapting each \\sigma_i for each point and finding it using perplexity and binary search, we just use a fixed, predefined value? If so, yes - that's super easy. Is this for the case you describe in the text where you have a large data set but small groups of cells ~50 cells for a particular type? How difficult is it to find a good sigma value? It seems like it might require a lot of trial and error, or is there a principled way to find a good setting?\r\n\r\n> By the way, by a remarkable coincidence, there was a related preprint published on the same day\r\n\r\nI'll definitely take a look, thanks!","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433625810/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433635315","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433635315","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433635315,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzYzNTMxNQ==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T16:34:39Z","updated_at":"2018-10-27T16:34:39Z","author_association":"CONTRIBUTOR","body":"> This, in turn, means that the sigma for that point will have to be very large [...] This, in turn, means that the probabilities of each neighbor will be fairly low and the embedding will try to accommodate the low probability by positioning it farther away from the nearest neighbors. Have I made a mistake somewhere?\r\n\r\nYes, I think it's wrong. Sigma might be large, but all p_{j|i}'s are normalized to sum to 1 anyway. Think about what happens with strongly outlying points in t-SNE: they don't stay outside of the embedding but usually get attracted to the other points quite strongly and rather get attached to the next cluster.\r\n\r\n> I suppose it's the scale of the embedding that restricts the points? On a large scale the repulsive forces are smaller, so the points don't move as much? I wonder what would happen if you took the initial embedding, scaled it down to have small variance, embedded the new points and, only then, ran the optimization.\r\n\r\nTo be honest I'm not exactly sure about the mechanics of this, but on the small scale the points are more \"transparent\" and can move through each other easily. On large scale they don't seem to be able to move through distant points that easily anymore. I'd like to understand this better.\r\n\r\nI did have to scale the initial embedding down in some cases :) I have this remark in the methods, see \"Aligning Tasic et al. 2016 and 2017\" paragraph: \"Note that this initialisation was not scaled (as we do for PCA initialisation, see above) because otherwise it gets distorted during optimisation (however, when applying the alignment procedure to larger data sets, we did have to scale the initialisation as otherwise t-SNE did not converge well)\". Also, when doing the downsampled-based initialisation for N=1.3 mln, I scaled down the initialisation to std=0.0001.\r\n\r\n> But are the results ever worse than using the other method - perplexity annealing - which you use in almost all the other examples. [...]\r\n\r\nBut I don't use annealing much. Let's see: for Tasic 2017 I use perplexity combination and it works very nicely. For Macosko I did also use perplexity combination. It worked kind of okay with perplexity 50 on its own, but I did like the result with 50+500 more. For Shekhar I used the annealing from fixed sigma, that was a bit of a special case. Tasic 2016 and Harris 2018 (with 1.5k and 3k cells) worked fine with perplexity 50 and PCA initialization (possibly even with random init.). For the N=25000 subsample of the 10x dataset I used perplexity=500. If I remember correctly, 50+500 did not look better (but not worse either).\r\n\r\nI think one would need to explore more datasets with N in the 10000--100000 range to say what works more often. In this manuscript I rather tried to show a variety of different approaches that can be used. I think perplexity combination is a nice tool to have.\r\n\r\n> You and George are doing fantasitc work on the C++ implementation, but distributing a C++ package for all platforms is a nightmare, hence this package.\r\n\r\nI am using Python so I might very well switch to your implementation myself :) I have some ideas I want to experiment with and it's easier to experiment with the full Python code.\r\n\r\n> Do you mean that instead of adapting each \\sigma_i for each point and finding it using perplexity and binary search, we just use a fixed, predefined value? If so, yes - that's super easy. Is this for the case you describe in the text where you have a large data set but small groups of cells ~50 cells for a particular type? How difficult is it to find a good sigma value? It seems like it might require a lot of trial and error, or is there a principled way to find a good setting?\r\n\r\nYes, that's what I mean. You need two parameters: the value of sigma and the K nearest neighbours that this sigma is applied to (for perplexity, K is chosen as 3*perplexity, but for fixed sigma one needs to supply K).  Yes, I did use for Shekhar data, but I find it's a nice feature to have to play around. Re trial and error -- yes, it does require quite some. See also \"Step 4\" here https://github.com/berenslab/rna-seq-tsne/blob/master/demo.ipynb and my comments there.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433635315/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433646562","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433646562","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433646562,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzY0NjU2Mg==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T19:00:08Z","updated_at":"2018-10-27T19:00:08Z","author_association":"OWNER","body":"> Think about what happens with strongly outlying points in t-SNE: they don't stay outside of the embedding but usually get attracted to the other points quite strongly and rather get attached to the next cluster.\r\n\r\nYes, but I don't understand why this happens... Empirically, the outliers get pulled together, but why?\r\n\r\n> Sigma might be large, but all p_{j|i}'s are normalized to sum to 1 anyway.\r\n\r\nTrue, but P is normalized as a whole, not row-wise, so all the probabilities will still be scaled the same way. I mean clearly I'm missing something, somewhere, I'll figure it out :)\r\n\r\n> In this manuscript I rather tried to show a variety of different approaches that can be used.\r\n\r\nLike the title says, t-SNE is an art! I'm just thinking what might be safe defaults. Both the extensions - multiscale and annealing - probably won't hurt the visualization quality, just the runtime. The trend from these 6 data sets seems to be that the more points we have, the more we need to do to introduce global structure. But 6 is very few data sets to draw definitive consclusions off.\r\n\r\n> I am using Python so I might very well switch to your implementation myself :) I have some ideas I want to experiment with and it's easier to experiment with the full Python code.\r\n\r\nGlad to hear it! I completely agree, trying things out in Python is much simpler than C++.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433646562/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433647323","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433647323","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433647323,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzY0NzMyMw==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T19:11:12Z","updated_at":"2018-10-27T19:11:27Z","author_association":"CONTRIBUTOR","body":"> True, but P is normalized as a whole, not row-wise, so all the probabilities will still be scaled the same way.\r\n\r\nBut it *is* normalized row-wise! For each $i$, all $p_{j|i}$ are normalized to sum to 1. After that P is symmetrized and multiplied by 1/N to normalize \"as a whole\", but the important step is the row-wise normalisation in the beginning!","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433647323/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433647806","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433647806","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433647806,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzY0NzgwNg==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T19:17:21Z","updated_at":"2018-10-27T19:17:21Z","author_association":"OWNER","body":"Wow, you're absolutely right. How on earth did I manage to forget that - I wrote it in the code after all! It's been a while I suppose :) Yes. Then this makes perfect sense. Thanks for clearing this up.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433647806/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433649603","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433649603","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433649603,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzY0OTYwMw==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T19:41:23Z","updated_at":"2018-10-27T19:41:23Z","author_association":"CONTRIBUTOR","body":"One thing about multiscale similarities that I want to mention: the approach of Lee et al. (and the one that I implemented in FIt-SNE) is to compute p_{j|i} with perplexity 50 and 500 and then average; i.e. each set of values is row-normalized, then averaged. This is sort of like using a kernel that is an average of two Gaussians, a narrow and a wide one (see page 16 of our preprint). However, I think it's NOT exactly the same; using such a kernel would mean computing p_{j|i} via this kernel and *then* row-normalizing (only once). \r\n\r\nSomehow using such a \"multi-scale\" kernel makes more sense to me theoretically, but I only realized that there is a difference a couple of days ago, and did not have a chance to try it out yet.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433649603/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433654028","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433654028","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433654028,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzY1NDAyOA==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T20:47:55Z","updated_at":"2018-10-27T20:47:55Z","author_association":"OWNER","body":"I wrote a short script to check this (hopefully I got it right)\r\n\r\n```python\r\nnormalize = lambda x: x / np.sum(x)\r\ngauss = lambda x, std: np.exp(-x ** 2) / (2 * std ** 2) / std\r\nx = np.array([.5, 1, 2, 4, 6])\r\n\r\n# Option 1: compute GMM probabilities -> average -> normalize\r\nresult1 = normalize((gauss(x, 1) + gauss(x, 5)) / 2)\r\n# [0.67 0.32 0.02 0.   0.  ]\r\n\r\n# Option 2: compute probabilities -> normalize -> average -> normalize\r\nresult2 = normalize(normalize(gauss(x, 1)) + normalize(gauss(x, 5)))\r\n# [0.67 0.32 0.02 0.   0.  ]\r\n```\r\nSo it seems they actually are equivalent.\r\n\r\nAlso, I've just noticed you forgot minus signs when defining the Gaussian kernel on page 16 i.e. P ~ exp( - mu² / 2sigma²)\r\n","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433654028/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433654431","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433654431","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433654431,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzY1NDQzMQ==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T20:54:02Z","updated_at":"2018-10-27T20:54:02Z","author_association":"CONTRIBUTOR","body":"It should be `gauss = lambda x, std: np.exp((-x ** 2) / (2 * std ** 2)) / std` and then the results are not the same anymore...\r\n\r\nThanks for noticing the typo!","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433654431/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433655237","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433655237","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433655237,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzY1NTIzNw==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T21:06:05Z","updated_at":"2018-10-27T21:06:05Z","author_association":"OWNER","body":"Oh, you're right. Well there we go, they aren't equivalent. In that case, I agree, the kernel seems more principled.\r\n\r\nShape-wise they are pretty similar and it seems that differences are fairly small. I wonder whether the difference would be noticeable on the embedding.\r\n\r\n```python\r\nplt.subplot(211)\r\nplt.plot(x, normalize((gauss(x, 50) + gauss(x, 500)) / 2), label='Option 1')\r\nplt.plot(x, normalize(normalize(gauss(x, 50)) + normalize(gauss(x, 500))), label='Option 2')\r\nplt.legend()\r\nplt.subplot(212)\r\nplt.plot(x, normalize((gauss(x, 50) + gauss(x, 1000)) / 2), label='Option 1')\r\nplt.plot(x, normalize(normalize(gauss(x, 50)) + normalize(gauss(x, 1000))), label='Option 2')\r\nplt.legend()\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/5758119/47609318-7fb10280-da3c-11e8-8c4d-06dfc88bb4ea.png)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433655237/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433662497","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-433662497","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":433662497,"node_id":"MDEyOklzc3VlQ29tbWVudDQzMzY2MjQ5Nw==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-10-27T23:04:53Z","updated_at":"2018-10-27T23:04:53Z","author_association":"CONTRIBUTOR","body":">  I wonder whether the difference would be noticeable on the embedding.\r\n\r\nExactly -- that's what I am wondering as well. Might try it out during next week.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/433662497/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/434045394","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-434045394","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":434045394,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDA0NTM5NA==","user":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false},"created_at":"2018-10-29T19:22:57Z","updated_at":"2018-10-29T19:22:57Z","author_association":"OWNER","body":"@dkobak I suppose another difference between the two methods is that with the multiscale Gaussian mixture, we're evaluating the kernel on the same number of neighbors for all the scales. The way I've implemented it now is to find the largest perplexity, compute nearest neighbors then evaluate a multiscale kernel (like the one on p16 in your paper) on all the neighbors. Please, correct me if this is wrong. I believe this is what is described in the paper you cited.\r\n\r\nConversely, using the other method (so Option 2) computes the probabilities on a different number of neighors each time. So for perplexity 50, we compute probabilities for 150 neighbors then normalize, and for 500 neighbors we compute probabilities for 1500 neighbors then normalize. Then average the two, then normalize again one final time.\r\n\r\nIf what I've written above is correct, then the differences will be even larger than the ones I plotted.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/434045394/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"pavlin-policar","id":5758119,"node_id":"MDQ6VXNlcjU3NTgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/5758119?v=4","gravatar_id":"","url":"https://api.github.com/users/pavlin-policar","html_url":"https://github.com/pavlin-policar","followers_url":"https://api.github.com/users/pavlin-policar/followers","following_url":"https://api.github.com/users/pavlin-policar/following{/other_user}","gists_url":"https://api.github.com/users/pavlin-policar/gists{/gist_id}","starred_url":"https://api.github.com/users/pavlin-policar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pavlin-policar/subscriptions","organizations_url":"https://api.github.com/users/pavlin-policar/orgs","repos_url":"https://api.github.com/users/pavlin-policar/repos","events_url":"https://api.github.com/users/pavlin-policar/events{/privacy}","received_events_url":"https://api.github.com/users/pavlin-policar/received_events","type":"User","site_admin":false}},{"id":1933217011,"node_id":"MDE0Ok1lbnRpb25lZEV2ZW50MTkzMzIxNzAxMQ==","url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/events/1933217011","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"event":"mentioned","commit_id":null,"commit_url":null,"created_at":"2018-10-29T19:22:58Z","performed_via_github_app":null},{"id":1933217013,"node_id":"MDE1OlN1YnNjcmliZWRFdmVudDE5MzMyMTcwMTM=","url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/events/1933217013","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"event":"subscribed","commit_id":null,"commit_url":null,"created_at":"2018-10-29T19:22:58Z","performed_via_github_app":null},{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/434048415","html_url":"https://github.com/pavlin-policar/openTSNE/issues/7#issuecomment-434048415","issue_url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/7","id":434048415,"node_id":"MDEyOklzc3VlQ29tbWVudDQzNDA0ODQxNQ==","user":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false},"created_at":"2018-10-29T19:32:40Z","updated_at":"2018-10-29T19:32:40Z","author_association":"CONTRIBUTOR","body":"To be honest, I don't think this matters.\r\n\r\n> The way I've implemented it now is to find the largest perplexity, compute nearest neighbors then evaluate a multiscale kernel (like the one on p16 in your paper) on all the neighbors. Please, correct me if this is wrong. I believe this is what is described in the paper you cited.\r\n\r\nThat's OK but are you sure this is described in Lee et al? Actually I was under impression that they are describing Option 2!\r\n\r\n> Conversely, using the other method (so Option 2) computes the probabilities on a different number of neighors each time. So for perplexity 50, we compute probabilities for 150 neighbors then normalize, and for 500 neighbors we compute probabilities for 1500 neighbors then normalize.\r\n\r\nYes you can compute it like that, but you can as well compute probabilities for all 1500 neighbors with perplexity 50. The probabilities for the 1500-150=1350 non-nearest neighbors will be around 0 anyway. Usually with perplexity 50 we only use 150 neighbors to avoid computing near-zero numbers and save time. But here we have to deal with 1500 neighbors anyway. So we can as well use all 1500. That's how I implemented it in C++.\r\n\r\n> Then average the two, then normalize again one final time.\r\n\r\nNote that you don't need to normalize again. Both sets sum to 1, so the average will sum to 1.","reactions":{"url":"https://api.github.com/repos/pavlin-policar/openTSNE/issues/comments/434048415/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dkobak","id":8970231,"node_id":"MDQ6VXNlcjg5NzAyMzE=","avatar_url":"https://avatars.githubusercontent.com/u/8970231?v=4","gravatar_id":"","url":"https://api.github.com/users/dkobak","html_url":"https://github.com/dkobak","followers_url":"https://api.github.com/users/dkobak/followers","following_url":"https://api.github.com/users/dkobak/following{/other_user}","gists_url":"https://api.github.com/users/dkobak/gists{/gist_id}","starred_url":"https://api.github.com/users/dkobak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dkobak/subscriptions","organizations_url":"https://api.github.com/users/dkobak/orgs","repos_url":"https://api.github.com/users/dkobak/repos","events_url":"https://api.github.com/users/dkobak/events{/privacy}","received_events_url":"https://api.github.com/users/dkobak/received_events","type":"User","site_admin":false}}]