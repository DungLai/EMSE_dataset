{"url":"https://api.github.com/repos/google-research/google-research/issues/940","repository_url":"https://api.github.com/repos/google-research/google-research","labels_url":"https://api.github.com/repos/google-research/google-research/issues/940/labels{/name}","comments_url":"https://api.github.com/repos/google-research/google-research/issues/940/comments","events_url":"https://api.github.com/repos/google-research/google-research/issues/940/events","html_url":"https://github.com/google-research/google-research/issues/940","id":1099233309,"node_id":"I_kwDOCQmIhc5BhPgd","number":940,"title":"[depth_from_video_in_the_wild]: A question about occlusion aware mask","user":{"login":"hcv1027","id":12728923,"node_id":"MDQ6VXNlcjEyNzI4OTIz","avatar_url":"https://avatars.githubusercontent.com/u/12728923?v=4","gravatar_id":"","url":"https://api.github.com/users/hcv1027","html_url":"https://github.com/hcv1027","followers_url":"https://api.github.com/users/hcv1027/followers","following_url":"https://api.github.com/users/hcv1027/following{/other_user}","gists_url":"https://api.github.com/users/hcv1027/gists{/gist_id}","starred_url":"https://api.github.com/users/hcv1027/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hcv1027/subscriptions","organizations_url":"https://api.github.com/users/hcv1027/orgs","repos_url":"https://api.github.com/users/hcv1027/repos","events_url":"https://api.github.com/users/hcv1027/events{/privacy}","received_events_url":"https://api.github.com/users/hcv1027/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-11T14:31:00Z","updated_at":"2022-02-25T04:33:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"https://github.com/google-research/google-research/blob/742c8e68a411247264ef338a430a95be9e700faf/depth_and_motion_learning/consistency_losses.py#L95\r\n\r\nI just can't understand why the occlusion mask is generated by comparing between `frame1transformed_depth.depth` and `frame2depth_resampled`. Since `frame1transformed_depth` is at frame2's location, `frame2depth_resampled` is at frame1's location, what's the meaning of compare the depth at the same pixel when they are at different location? Does not compare `frame1depth` and `frame2depth_resampled` at the same pixel more reasonable?","closed_by":null,"reactions":{"url":"https://api.github.com/repos/google-research/google-research/issues/940/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/google-research/google-research/issues/940/timeline","performed_via_github_app":null,"state_reason":null}