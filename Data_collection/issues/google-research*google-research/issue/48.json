{"url":"https://api.github.com/repos/google-research/google-research/issues/48","repository_url":"https://api.github.com/repos/google-research/google-research","labels_url":"https://api.github.com/repos/google-research/google-research/issues/48/labels{/name}","comments_url":"https://api.github.com/repos/google-research/google-research/issues/48/comments","events_url":"https://api.github.com/repos/google-research/google-research/issues/48/events","html_url":"https://github.com/google-research/google-research/issues/48","id":484661113,"node_id":"MDU6SXNzdWU0ODQ2NjExMTM=","number":48,"title":"Code readability and potential confusion in tcc/visualize_alignment.py","user":{"login":"awmillerUCSD","id":26909829,"node_id":"MDQ6VXNlcjI2OTA5ODI5","avatar_url":"https://avatars.githubusercontent.com/u/26909829?v=4","gravatar_id":"","url":"https://api.github.com/users/awmillerUCSD","html_url":"https://github.com/awmillerUCSD","followers_url":"https://api.github.com/users/awmillerUCSD/followers","following_url":"https://api.github.com/users/awmillerUCSD/following{/other_user}","gists_url":"https://api.github.com/users/awmillerUCSD/gists{/gist_id}","starred_url":"https://api.github.com/users/awmillerUCSD/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/awmillerUCSD/subscriptions","organizations_url":"https://api.github.com/users/awmillerUCSD/orgs","repos_url":"https://api.github.com/users/awmillerUCSD/repos","events_url":"https://api.github.com/users/awmillerUCSD/events{/privacy}","received_events_url":"https://api.github.com/users/awmillerUCSD/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-08-23T18:38:02Z","updated_at":"2019-08-24T21:14:43Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\na section of the tcc code in visualize_alignment.py has high potential for confusion and misuse. The align function is defined as follows:\r\n\r\n```\r\ndef align(candidate_feats, query_feats, use_dtw):\r\n  \"\"\"Align videos based on nearest neighbor in embedding space.\"\"\"\r\n  if use_dtw:\r\n    _, _, _, path = dtw(candidate_feats, query_feats, dist=dist_fn)\r\n    _, uix = np.unique(path[0], return_index=True)\r\n    nns = path[1][uix]\r\n  else:\r\n    nns = []\r\n    for i in range(len(candidate_feats)):\r\n      nn_frame_id, _ = get_nn(query_feats, candidate_feats[i])\r\n      nns.append(nn_frame_id)\r\n  return nns\r\n```\r\n\r\nThe function call is: \r\n```nns.append(align(embs[query], embs[candidate], use_dtw))```\r\n\r\nThe positional arguments for the query and candidate features are reversed. Clearly, we do not want to iterate over the candidate frame matching it to the reference. There is no logical error as the arguments are passed in to the function in reverse order but it may lead to issues downstream if these functions are built upon.\r\n\r\nThe function definition should read:\r\n\r\n```\r\ndef align(query_feats,candidate_feats, use_dtw):\r\n  \"\"\"Align videos based on nearest neighbor in embedding space.\"\"\"\r\n  if use_dtw:\r\n    _, _, _, path = dtw(query_feats,candidate_feats, dist=dist_fn)\r\n    _, uix = np.unique(path[0], return_index=True)\r\n    nns = path[1][uix]\r\n  else:\r\n    nns = []\r\n    for i in range(len(query_feats)):\r\n      nn_frame_id, _ = get_nn(query_feats[i], candidate_feats)\r\n      nns.append(nn_frame_id)\r\n  return nns\r\n```\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/google-research/google-research/issues/48/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/google-research/google-research/issues/48/timeline","performed_via_github_app":null,"state_reason":null}