{"url":"https://api.github.com/repos/google-research/google-research/issues/688","repository_url":"https://api.github.com/repos/google-research/google-research","labels_url":"https://api.github.com/repos/google-research/google-research/issues/688/labels{/name}","comments_url":"https://api.github.com/repos/google-research/google-research/issues/688/comments","events_url":"https://api.github.com/repos/google-research/google-research/issues/688/events","html_url":"https://github.com/google-research/google-research/issues/688","id":876496304,"node_id":"MDU6SXNzdWU4NzY0OTYzMDQ=","number":688,"title":"Performer faster than Linear Transformer","user":{"login":"thomasw21","id":24695242,"node_id":"MDQ6VXNlcjI0Njk1MjQy","avatar_url":"https://avatars.githubusercontent.com/u/24695242?v=4","gravatar_id":"","url":"https://api.github.com/users/thomasw21","html_url":"https://github.com/thomasw21","followers_url":"https://api.github.com/users/thomasw21/followers","following_url":"https://api.github.com/users/thomasw21/following{/other_user}","gists_url":"https://api.github.com/users/thomasw21/gists{/gist_id}","starred_url":"https://api.github.com/users/thomasw21/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thomasw21/subscriptions","organizations_url":"https://api.github.com/users/thomasw21/orgs","repos_url":"https://api.github.com/users/thomasw21/repos","events_url":"https://api.github.com/users/thomasw21/events{/privacy}","received_events_url":"https://api.github.com/users/thomasw21/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-05T14:12:59Z","updated_at":"2021-05-05T14:12:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\n\r\nIn \"Rethinking Attention with Performers\", in the appendix, section D.5, Performers seem to be faster than Linear Transformers. I'm not sure I understand how. \r\n\r\nLet's assume we're in a base case  (nb_heads, nb_layers, d_ff, d), and we have a sequence of size n:\r\n - Linear transformer simply applie `elu(x) + 1`, thus converts out input from `(batch_size, nb_heads, sequence_length, d // nb_heads)` to `(batch_size, nb_heads, sequence_length, d // nb_heads)`\r\n - Performer converts input from `(batch_size, nb_heads, sequence_length, d // nb_heads)` to `(batch_size, nb_heads, sequence_length, m * l)` (m being the number of random vector we use, and l the number of kernel functions).\r\n \r\n Performers approximation should be slower, unless `m*l < d // nb_heads` right? ","closed_by":null,"reactions":{"url":"https://api.github.com/repos/google-research/google-research/issues/688/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/google-research/google-research/issues/688/timeline","performed_via_github_app":null,"state_reason":null}