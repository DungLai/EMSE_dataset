{"url":"https://api.github.com/repos/google-research/google-research/issues/836","repository_url":"https://api.github.com/repos/google-research/google-research","labels_url":"https://api.github.com/repos/google-research/google-research/issues/836/labels{/name}","comments_url":"https://api.github.com/repos/google-research/google-research/issues/836/comments","events_url":"https://api.github.com/repos/google-research/google-research/issues/836/events","html_url":"https://github.com/google-research/google-research/issues/836","id":1009500839,"node_id":"I_kwDOCQmIhc48K8Kn","number":836,"title":"[kws_streaming] Issue on Quantization for STREAM_EXTERNAL_STATE_INFERENCE(ds-cnn,  micro:  no feature extractor)","user":{"login":"wenjingyang","id":4407779,"node_id":"MDQ6VXNlcjQ0MDc3Nzk=","avatar_url":"https://avatars.githubusercontent.com/u/4407779?v=4","gravatar_id":"","url":"https://api.github.com/users/wenjingyang","html_url":"https://github.com/wenjingyang","followers_url":"https://api.github.com/users/wenjingyang/followers","following_url":"https://api.github.com/users/wenjingyang/following{/other_user}","gists_url":"https://api.github.com/users/wenjingyang/gists{/gist_id}","starred_url":"https://api.github.com/users/wenjingyang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wenjingyang/subscriptions","organizations_url":"https://api.github.com/users/wenjingyang/orgs","repos_url":"https://api.github.com/users/wenjingyang/repos","events_url":"https://api.github.com/users/wenjingyang/events{/privacy}","received_events_url":"https://api.github.com/users/wenjingyang/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-09-28T09:21:33Z","updated_at":"2021-10-20T02:17:44Z","closed_at":"2021-10-20T02:17:44Z","author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\nI followed kws_streaming/models/cnn_test.py.  Generate \"feature.npz\" to prepare calibration_data. \r\n[feature.zip](https://github.com/google-research/google-research/files/7242587/feature.zip)\r\n\r\nI used the code below to convert the stream_state_external model to quantize model. But the final model I got is still float32. Is there anything I did wrong?  \r\nquantize_opt_for_size_tflite_stream_state_external folder:  [stream_state_external.zip](https://github.com/google-research/google-research/files/7242640/stream_state_external.zip)\r\n\r\n      npzfile = np.load(\"feature.npz\",allow_pickle=True)\r\n      ttt=npzfile.f.arr_0\r\n      calibration_data = prepare_calibration_data(model,100, ttt)\r\n      def representative_dataset(dtype):\r\n        def _representative_dataset_gen():\r\n            for i in range(len(calibration_data)):\r\n                yield [\r\n                    calibration_data[i][0].astype(dtype),  # input audio packet\r\n                    calibration_data[i][1].astype(dtype),  # conv state\r\n                    calibration_data[i][2].astype(dtype)  # flatten state\r\n                    ]\r\n        return _representative_dataset_gen\r\n\r\n\r\n        with quantize.quantize_scope():\r\n            fd.write(\r\n                utils.model_to_tflite(sess=sess, model_non_stream=model, flags=flags, mode=mode, save_model_path=path_model,\r\n                                optimizations=optimizations,inference_type=tf.int8,experimental_new_quantizer=True,\r\n                                representative_dataset=representative_dataset(np.float32)))\r\n\r\nConvert parameters: \r\n\r\n  converter.inference_type = inference_type\r\n  converter.experimental_new_quantizer = experimental_new_quantizer\r\n  converter.experimental_enable_resource_variables = True\r\n  if representative_dataset is not None:\r\n    converter.representative_dataset = representative_dataset\r\n\r\n  converter.target_spec.supported_ops = [\r\n      tf.lite.OpsSet.TFLITE_BUILTINS_INT8, tf.lite.OpsSet.SELECT_TF_OPS\r\n  ]\r\n  converter.inference_input_type = tf.int8\r\n  converter.inference_output_type = tf.int8\r\n  converter.allow_custom_ops = True\r\n  if optimizations:\r\n    converter.optimizations = optimizations\r\n  tflite_model = converter.convert()","closed_by":{"login":"wenjingyang","id":4407779,"node_id":"MDQ6VXNlcjQ0MDc3Nzk=","avatar_url":"https://avatars.githubusercontent.com/u/4407779?v=4","gravatar_id":"","url":"https://api.github.com/users/wenjingyang","html_url":"https://github.com/wenjingyang","followers_url":"https://api.github.com/users/wenjingyang/followers","following_url":"https://api.github.com/users/wenjingyang/following{/other_user}","gists_url":"https://api.github.com/users/wenjingyang/gists{/gist_id}","starred_url":"https://api.github.com/users/wenjingyang/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wenjingyang/subscriptions","organizations_url":"https://api.github.com/users/wenjingyang/orgs","repos_url":"https://api.github.com/users/wenjingyang/repos","events_url":"https://api.github.com/users/wenjingyang/events{/privacy}","received_events_url":"https://api.github.com/users/wenjingyang/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/google-research/google-research/issues/836/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/google-research/google-research/issues/836/timeline","performed_via_github_app":null,"state_reason":"completed"}