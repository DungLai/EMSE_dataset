{"url":"https://api.github.com/repos/intel/dffml/issues/639","repository_url":"https://api.github.com/repos/intel/dffml","labels_url":"https://api.github.com/repos/intel/dffml/issues/639/labels{/name}","comments_url":"https://api.github.com/repos/intel/dffml/issues/639/comments","events_url":"https://api.github.com/repos/intel/dffml/issues/639/events","html_url":"https://github.com/intel/dffml/issues/639","id":619513776,"node_id":"MDU6SXNzdWU2MTk1MTM3NzY=","number":639,"title":"cleanup: Audit use of asyncio.create_subprocess_exec","user":{"login":"pdxjohnny","id":5950433,"node_id":"MDQ6VXNlcjU5NTA0MzM=","avatar_url":"https://avatars.githubusercontent.com/u/5950433?v=4","gravatar_id":"","url":"https://api.github.com/users/pdxjohnny","html_url":"https://github.com/pdxjohnny","followers_url":"https://api.github.com/users/pdxjohnny/followers","following_url":"https://api.github.com/users/pdxjohnny/following{/other_user}","gists_url":"https://api.github.com/users/pdxjohnny/gists{/gist_id}","starred_url":"https://api.github.com/users/pdxjohnny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdxjohnny/subscriptions","organizations_url":"https://api.github.com/users/pdxjohnny/orgs","repos_url":"https://api.github.com/users/pdxjohnny/repos","events_url":"https://api.github.com/users/pdxjohnny/events{/privacy}","received_events_url":"https://api.github.com/users/pdxjohnny/received_events","type":"User","site_admin":false},"labels":[{"id":1740452585,"node_id":"MDU6TGFiZWwxNzQwNDUyNTg1","url":"https://api.github.com/repos/intel/dffml/labels/p3","name":"p3","color":"f2f76a","default":false,"description":"Average Priority"},{"id":1740453954,"node_id":"MDU6TGFiZWwxNzQwNDUzOTU0","url":"https://api.github.com/repos/intel/dffml/labels/tS","name":"tS","color":"4acc74","default":false,"description":"Esitmated Time To Complete: Short"},{"id":1771893059,"node_id":"MDU6TGFiZWwxNzcxODkzMDU5","url":"https://api.github.com/repos/intel/dffml/labels/housekeeping","name":"housekeeping","color":"055663","default":false,"description":"Restructuring, refactoring, removal of old functionality, etc."}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/intel/dffml/milestones/3","html_url":"https://github.com/intel/dffml/milestone/3","labels_url":"https://api.github.com/repos/intel/dffml/milestones/3/labels","id":4447271,"node_id":"MDk6TWlsZXN0b25lNDQ0NzI3MQ==","number":3,"title":"1.0 Release","description":"","creator":{"login":"pdxjohnny","id":5950433,"node_id":"MDQ6VXNlcjU5NTA0MzM=","avatar_url":"https://avatars.githubusercontent.com/u/5950433?v=4","gravatar_id":"","url":"https://api.github.com/users/pdxjohnny","html_url":"https://github.com/pdxjohnny","followers_url":"https://api.github.com/users/pdxjohnny/followers","following_url":"https://api.github.com/users/pdxjohnny/following{/other_user}","gists_url":"https://api.github.com/users/pdxjohnny/gists{/gist_id}","starred_url":"https://api.github.com/users/pdxjohnny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdxjohnny/subscriptions","organizations_url":"https://api.github.com/users/pdxjohnny/orgs","repos_url":"https://api.github.com/users/pdxjohnny/repos","events_url":"https://api.github.com/users/pdxjohnny/events{/privacy}","received_events_url":"https://api.github.com/users/pdxjohnny/received_events","type":"User","site_admin":false},"open_issues":108,"closed_issues":1,"state":"open","created_at":"2019-06-27T19:59:32Z","updated_at":"2022-04-27T22:07:45Z","due_on":null,"closed_at":null},"comments":0,"created_at":"2020-05-16T16:51:05Z","updated_at":"2021-08-31T17:08:26Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"There are places where we've used `asyncio.create_subprocess_exec` but not\nchecked that `proc.returncode == 0` (for success, or raise\n`if proc.returncode != 0`\n\nThe first exmaple below is an instance where this is done correctly (however it\nused to be incorrect before this issue was filed).\n\nWe need to go through the rest of the places and make sure we raise on error. If\nthat's appropriate, or at least check the error code.\n\n```\ndffml/service/dev.py=class Install(CMD):\n--\ndffml/service/dev.py-            local_path = Path(\"~\", \".local\").expanduser().absolute()\ndffml/service/dev.py-            cmd.append(f\"--prefix={local_path}\")\ndffml/service/dev.py-        for package in packages:\ndffml/service/dev.py-            cmd += [\"-e\", str(package.absolute())]\ndffml/service/dev.py-        self.logger.debug(\"Running: %s\", \" \".join(cmd))\ndffml/service/dev.py:        proc = await asyncio.create_subprocess_exec(*cmd)\ndffml/service/dev.py-        await proc.wait()\ndffml/service/dev.py-        if proc.returncode != 0:\ndffml/service/dev.py-            raise RuntimeError(\"pip failed to install dependencies\")\ndffml/service/dev.py-\ndffml/service/dev.py-\n--\ndffml/service/dev.py=class Release(CMD):\n--\ndffml/service/dev.py-\ndffml/service/dev.py-    async def run(self):\ndffml/service/dev.py-        # Ensure target plugin directory has no unstaged changes\ndffml/service/dev.py-        cmd = [\"git\", \"status\", \"--porcelain\", str(self.package)]\ndffml/service/dev.py-        self.logger.debug(\"Running: %s\", \" \".join(cmd))\ndffml/service/dev.py:        proc = await asyncio.create_subprocess_exec(\ndffml/service/dev.py-            *cmd,\ndffml/service/dev.py-            stdout=asyncio.subprocess.PIPE,\ndffml/service/dev.py-            stderr=asyncio.subprocess.PIPE,\ndffml/service/dev.py-        )\ndffml/service/dev.py-        stdout, stderr = await proc.communicate()\n--\ndffml/service/dev.py-                archive_file = pathlib.Path(tempdir, \"archive.tar\")\ndffml/service/dev.py-                # Create the archive\ndffml/service/dev.py-                with open(archive_file, \"wb\") as archive:\ndffml/service/dev.py-                    cmd = [\"git\", \"archive\", \"--format=tar\", \"HEAD\"]\ndffml/service/dev.py-                    print(f\"$ {' '.join(cmd)}\")\ndffml/service/dev.py:                    proc = await asyncio.create_subprocess_exec(\ndffml/service/dev.py-                        *cmd, stdout=archive\ndffml/service/dev.py-                    )\ndffml/service/dev.py-                    await proc.wait()\ndffml/service/dev.py-                    if proc.returncode != 0:\ndffml/service/dev.py-                        raise RuntimeError\n--\ndffml/service/dev.py-                    for cmd in [\ndffml/service/dev.py-                        [sys.executable, \"setup.py\", \"sdist\"],\ndffml/service/dev.py-                        [sys.executable, \"-m\", \"twine\", \"upload\", \"dist/*\"],\ndffml/service/dev.py-                    ]:\ndffml/service/dev.py-                        print(f\"$ {' '.join(cmd)}\")\ndffml/service/dev.py:                        proc = await asyncio.create_subprocess_exec(*cmd)\ndffml/service/dev.py-                        await proc.wait()\ndffml/service/dev.py-                        if proc.returncode != 0:\ndffml/service/dev.py-                            raise RuntimeError\ndffml/service/dev.py-\ndffml/service/dev.py-\ndffml/service/dev.py=class BumpMain(CMD):\n--\ndffml/service/dev.py-        if not main_package:\ndffml/service/dev.py-            raise NotImplementedError(\ndffml/service/dev.py-                \"Need to reinstall the main package in development mode.\"\ndffml/service/dev.py-            )\ndffml/service/dev.py-        # TODO Implement this in Python\ndffml/service/dev.py:        proc = await asyncio.create_subprocess_exec(\ndffml/service/dev.py-            \"bash\", str(pathlib.Path(main_package, \"scripts\", \"bump_deps.sh\"))\ndffml/service/dev.py-        )\ndffml/service/dev.py-        await proc.wait()\ndffml/service/dev.py-        if proc.returncode != 0:\ndffml/service/dev.py-            raise RuntimeError\n--\ndocs/usage/webhook/webhook.rst-which is running gets redeployed from the fresh pull. To check this we will modify the\ndocs/usage/webhook/webhook.rst=end time of the conversion from 10 to 12 in ``ffmpeg/operations.py`` by changing\ndocs/usage/webhook/webhook.rst-\ndocs/usage/webhook/webhook.rst-.. code-block:: python\ndocs/usage/webhook/webhook.rst-\ndocs/usage/webhook/webhook.rst:    proc = await asyncio.create_subprocess_exec(\ndocs/usage/webhook/webhook.rst-        \"ffmpeg\",\ndocs/usage/webhook/webhook.rst-        \"-ss\",\ndocs/usage/webhook/webhook.rst-        \"0.3\",\ndocs/usage/webhook/webhook.rst-        \"-t\",\ndocs/usage/webhook/webhook.rst-        \"10\",\n--\ndocs/usage/webhook/webhook.rst-\ndocs/usage/webhook/webhook.rst=to\ndocs/usage/webhook/webhook.rst-\ndocs/usage/webhook/webhook.rst-.. code-block:: python\ndocs/usage/webhook/webhook.rst-\ndocs/usage/webhook/webhook.rst:    proc = await asyncio.create_subprocess_exec(\ndocs/usage/webhook/webhook.rst-        \"ffmpeg\",\ndocs/usage/webhook/webhook.rst-        \"-ss\",\ndocs/usage/webhook/webhook.rst-        \"0.3\",\ndocs/usage/webhook/webhook.rst-        \"-t\",\ndocs/usage/webhook/webhook.rst-        \"12\",\n--\nexamples/ffmpeg/ffmpeg/operations.py-)\nexamples/ffmpeg/ffmpeg/operations.py=async def convert_to_gif(input_file, resolution):\nexamples/ffmpeg/ffmpeg/operations.py-    temp_input_file = tempfile.NamedTemporaryFile(prefix=\"ffmpeg-\")\nexamples/ffmpeg/ffmpeg/operations.py-    temp_input_file.write(input_file)\nexamples/ffmpeg/ffmpeg/operations.py-    temp_input_file.seek(0)\nexamples/ffmpeg/ffmpeg/operations.py:    proc = await asyncio.create_subprocess_exec(\nexamples/ffmpeg/ffmpeg/operations.py-        \"ffmpeg\",\nexamples/ffmpeg/ffmpeg/operations.py-        \"-ss\",\nexamples/ffmpeg/ffmpeg/operations.py-        \"0.3\",\nexamples/ffmpeg/ffmpeg/operations.py-        \"-t\",\nexamples/ffmpeg/ffmpeg/operations.py-        \"10\",\n--\nexamples/shouldi/shouldi/bandit.py-@op(inputs={\"pkg\": package_src_dir}, outputs={\"report\": bandit_output})\nexamples/shouldi/shouldi/bandit.py=async def run_bandit(pkg: str) -> Dict[str, Any]:\nexamples/shouldi/shouldi/bandit.py-    \"\"\"\nexamples/shouldi/shouldi/bandit.py-    CLI usage: dffml service dev run -log debug shouldi.bandit:run_bandit -pkg .\nexamples/shouldi/shouldi/bandit.py-    \"\"\"\nexamples/shouldi/shouldi/bandit.py:    proc = await asyncio.create_subprocess_exec(\nexamples/shouldi/shouldi/bandit.py-        sys.executable,\nexamples/shouldi/shouldi/bandit.py-        \"-m\",\nexamples/shouldi/shouldi/bandit.py-        \"bandit\",\nexamples/shouldi/shouldi/bandit.py-        \"-r\",\nexamples/shouldi/shouldi/bandit.py-        \"-f\",\n--\nexamples/shouldi/shouldi/cargo_audit.py-    \"\"\"\nexamples/shouldi/shouldi/cargo_audit.py-\nexamples/shouldi/shouldi/cargo_audit.py-\nexamples/shouldi/shouldi/cargo_audit.py=async def run_cargo_build(pkg_input: str):\nexamples/shouldi/shouldi/cargo_audit.py-\nexamples/shouldi/shouldi/cargo_audit.py:    new_proc = await asyncio.create_subprocess_exec(\nexamples/shouldi/shouldi/cargo_audit.py-        \"cargo\",\nexamples/shouldi/shouldi/cargo_audit.py-        \"build\",\nexamples/shouldi/shouldi/cargo_audit.py-        \"--release\",\nexamples/shouldi/shouldi/cargo_audit.py-        cwd=pkg_input,\nexamples/shouldi/shouldi/cargo_audit.py-        stdout=asyncio.subprocess.PIPE,\n--\nexamples/shouldi/shouldi/cargo_audit.py-@op(inputs={\"pkg\": package_src_dir}, outputs={\"report\": cargo_audit_output})\nexamples/shouldi/shouldi/cargo_audit.py=async def run_cargo_audit(pkg: str) -> Dict[str, Any]:\nexamples/shouldi/shouldi/cargo_audit.py-    \"\"\"\nexamples/shouldi/shouldi/cargo_audit.py-    CLI usage: dffml service dev run -log debug shouldi.cargo_audit:run_cargo_audit -pkg .\nexamples/shouldi/shouldi/cargo_audit.py-    \"\"\"\nexamples/shouldi/shouldi/cargo_audit.py:    proc = await asyncio.create_subprocess_exec(\nexamples/shouldi/shouldi/cargo_audit.py-        \"cargo\",\nexamples/shouldi/shouldi/cargo_audit.py-        \"audit\",\nexamples/shouldi/shouldi/cargo_audit.py-        \"--json\",\nexamples/shouldi/shouldi/cargo_audit.py-        cwd=pkg,\nexamples/shouldi/shouldi/cargo_audit.py-        stdout=asyncio.subprocess.PIPE,\n--\nexamples/shouldi/shouldi/dependency_check.py=async def run_dependency_check(pkg: str) -> Dict[str, Any]:\nexamples/shouldi/shouldi/dependency_check.py-    \"\"\"\nexamples/shouldi/shouldi/dependency_check.py-    CLI usage: dffml service dev run -log debug shouldi.dependency_check:run_dependency_check -pkg .\nexamples/shouldi/shouldi/dependency_check.py-    \"\"\"\nexamples/shouldi/shouldi/dependency_check.py-    with tempfile.TemporaryDirectory() as tempdir:\nexamples/shouldi/shouldi/dependency_check.py-        if Path(pkg).is_file():\nexamples/shouldi/shouldi/dependency_check.py:            proc = await asyncio.create_subprocess_exec(\nexamples/shouldi/shouldi/dependency_check.py-                \"dependency-check.sh\",\nexamples/shouldi/shouldi/dependency_check.py-                \"-f\",\nexamples/shouldi/shouldi/dependency_check.py-                \"JSON\",\nexamples/shouldi/shouldi/dependency_check.py-                \"--out\",\nexamples/shouldi/shouldi/dependency_check.py-                os.path.abspath(tempdir),\n--\nexamples/shouldi/shouldi/dependency_check.py-            )\nexamples/shouldi/shouldi/dependency_check.py-            _, stderr = await proc.communicate()\nexamples/shouldi/shouldi/dependency_check.py-            if proc.returncode != 0:\nexamples/shouldi/shouldi/dependency_check.py-                raise DependencyCheckError(stderr.decode())\nexamples/shouldi/shouldi/dependency_check.py-        else:\nexamples/shouldi/shouldi/dependency_check.py:            proc = await asyncio.create_subprocess_exec(\nexamples/shouldi/shouldi/dependency_check.py-                \"dependency-check.sh\",\nexamples/shouldi/shouldi/dependency_check.py-                \"-f\",\nexamples/shouldi/shouldi/dependency_check.py-                \"JSON\",\nexamples/shouldi/shouldi/dependency_check.py-                \"--out\",\nexamples/shouldi/shouldi/dependency_check.py-                os.path.abspath(tempdir),\n--\nexamples/shouldi/shouldi/golangci_lint.py-@op(inputs={\"pkg\": package_src_dir}, outputs={\"report\": golangci_lint_output})\nexamples/shouldi/shouldi/golangci_lint.py=async def run_golangci_lint(pkg: str) -> Dict[str, Any]:\nexamples/shouldi/shouldi/golangci_lint.py-    \"\"\"\nexamples/shouldi/shouldi/golangci_lint.py-    CLI usage: dffml service dev run -log debug shouldi.golangci_lint:run_golangci_lint -pkg .\nexamples/shouldi/shouldi/golangci_lint.py-    \"\"\"\nexamples/shouldi/shouldi/golangci_lint.py:    proc = await asyncio.create_subprocess_exec(\nexamples/shouldi/shouldi/golangci_lint.py-        \"golangci-lint\",\nexamples/shouldi/shouldi/golangci_lint.py-        \"run\",\nexamples/shouldi/shouldi/golangci_lint.py-        \"--out-format\",\nexamples/shouldi/shouldi/golangci_lint.py-        \"json\",\nexamples/shouldi/shouldi/golangci_lint.py-        \"./...\",\n--\nexamples/shouldi/shouldi/npm_audit.py-@op(inputs={\"pkg\": package_src_dir}, outputs={\"report\": npm_audit_output})\nexamples/shouldi/shouldi/npm_audit.py=async def run_npm_audit(pkg: str) -> Dict[str, Any]:\nexamples/shouldi/shouldi/npm_audit.py-    \"\"\"\nexamples/shouldi/shouldi/npm_audit.py-    CLI usage: dffml service dev run -log debug shouldi.npm_audit:run_npm_audit -pkg .\nexamples/shouldi/shouldi/npm_audit.py-    \"\"\"\nexamples/shouldi/shouldi/npm_audit.py:    proc = await asyncio.create_subprocess_exec(\nexamples/shouldi/shouldi/npm_audit.py-        \"npm\",\nexamples/shouldi/shouldi/npm_audit.py-        \"audit\",\nexamples/shouldi/shouldi/npm_audit.py-        \"--json\",\nexamples/shouldi/shouldi/npm_audit.py-        cwd=pkg,\nexamples/shouldi/shouldi/npm_audit.py-        stdout=asyncio.subprocess.PIPE,\n--\nexamples/shouldi/shouldi/safety.py-    conditions=[],\nexamples/shouldi/shouldi/safety.py-)\nexamples/shouldi/shouldi/safety.py=async def safety_check(package: str, version: str) -> Dict[str, Any]:\nexamples/shouldi/shouldi/safety.py-    pinned = f\"{package}=={version}\"\nexamples/shouldi/shouldi/safety.py-\nexamples/shouldi/shouldi/safety.py:    proc = await asyncio.create_subprocess_exec(\nexamples/shouldi/shouldi/safety.py-        sys.executable,\nexamples/shouldi/shouldi/safety.py-        \"-m\",\nexamples/shouldi/shouldi/safety.py-        \"safety\",\nexamples/shouldi/shouldi/safety.py-        \"check\",\nexamples/shouldi/shouldi/safety.py-        \"--stdin\",\n--\nexamples/test_quickstart.py=class TestQuickstart(AsyncTestCase):\n--\nexamples/test_quickstart.py-                # Modify the curl command to use the correct port\nexamples/test_quickstart.py-                curl_cmd = curl_cmd.replace(\"8080\", str(cli.port))\nexamples/test_quickstart.py-                # Write out the modified curl command\nexamples/test_quickstart.py-                pathlib.Path(\"curl.sh\").write_text(curl_cmd)\nexamples/test_quickstart.py-                # Make the prediction\nexamples/test_quickstart.py:                proc = await asyncio.create_subprocess_exec(\nexamples/test_quickstart.py-                    \"sh\",\nexamples/test_quickstart.py-                    \"curl.sh\",\nexamples/test_quickstart.py-                    stdout=asyncio.subprocess.PIPE,\nexamples/test_quickstart.py-                    stderr=asyncio.subprocess.PIPE,\nexamples/test_quickstart.py-                )\n--\nfeature/git/dffml_feature_git/util/proc.py-    return exit_code, proc\nfeature/git/dffml_feature_git/util/proc.py-\nfeature/git/dffml_feature_git/util/proc.py-\nfeature/git/dffml_feature_git/util/proc.py=async def create(*args, **kwargs):\nfeature/git/dffml_feature_git/util/proc.py-    \"\"\"\nfeature/git/dffml_feature_git/util/proc.py:    Runs a subprocess using asyncio.create_subprocess_exec and returns the\nfeature/git/dffml_feature_git/util/proc.py-    process.\nfeature/git/dffml_feature_git/util/proc.py-    \"\"\"\nfeature/git/dffml_feature_git/util/proc.py-    LOGGER.debug(\"proc.create: %r\", args)\nfeature/git/dffml_feature_git/util/proc.py:    proc = await asyncio.create_subprocess_exec(\nfeature/git/dffml_feature_git/util/proc.py-        *args,\nfeature/git/dffml_feature_git/util/proc.py-        stdout=asyncio.subprocess.PIPE,\nfeature/git/dffml_feature_git/util/proc.py-        stderr=asyncio.subprocess.PIPE,\nfeature/git/dffml_feature_git/util/proc.py-        start_new_session=True,\nfeature/git/dffml_feature_git/util/proc.py-        **kwargs,\n--\nfeature/git/dffml_feature_git/util/proc.py-    return stdout, stderr\nfeature/git/dffml_feature_git/util/proc.py-\nfeature/git/dffml_feature_git/util/proc.py-\nfeature/git/dffml_feature_git/util/proc.py=async def check_output(*args, **kwargs):\nfeature/git/dffml_feature_git/util/proc.py-    \"\"\"\nfeature/git/dffml_feature_git/util/proc.py:    Runs a subprocess using asyncio.create_subprocess_exec and returns either\nfeature/git/dffml_feature_git/util/proc.py-    its standard error or output.\nfeature/git/dffml_feature_git/util/proc.py-    \"\"\"\nfeature/git/dffml_feature_git/util/proc.py-    proc = await create(*args, **kwargs)\nfeature/git/dffml_feature_git/util/proc.py-    stdout, stderr = await get_output(proc)\nfeature/git/dffml_feature_git/util/proc.py-    await stop(proc)\n--\ntests/service/test_dev.py=class TestRelease(AsyncTestCase):\n--\ntests/service/test_dev.py-        class FailedFakeProcess(FakeProcess):\ntests/service/test_dev.py-            async def communicate(self):\ntests/service/test_dev.py-                return b\"There are changes\", b\"\"\ntests/service/test_dev.py-\ntests/service/test_dev.py-        with unittest.mock.patch(\ntests/service/test_dev.py:            \"asyncio.create_subprocess_exec\", new=mkexec(FailedFakeProcess)\ntests/service/test_dev.py-        ):\ntests/service/test_dev.py-            with self.assertRaises(RepoDirtyError):\ntests/service/test_dev.py-                await Develop.cli(\"release\", \".\")\ntests/service/test_dev.py-\ntests/service/test_dev.py-    async def test_already_on_pypi(self):\ntests/service/test_dev.py-        stdout = io.StringIO()\ntests/service/test_dev.py-        with unittest.mock.patch(\ntests/service/test_dev.py:            \"asyncio.create_subprocess_exec\", new=mkexec()\ntests/service/test_dev.py-        ), unittest.mock.patch(\ntests/service/test_dev.py-            \"urllib.request.urlopen\", new=fake_urlopen\ntests/service/test_dev.py-        ), contextlib.redirect_stdout(\ntests/service/test_dev.py-            stdout\ntests/service/test_dev.py-        ):\n--\ntests/service/test_dev.py-    async def test_okay(self):\ntests/service/test_dev.py-        stdout = io.StringIO()\ntests/service/test_dev.py-        global VERSION\ntests/service/test_dev.py-        VERSION = \"0.0.0\"\ntests/service/test_dev.py-        with unittest.mock.patch(\ntests/service/test_dev.py:            \"asyncio.create_subprocess_exec\", new=mkexec()\ntests/service/test_dev.py-        ), unittest.mock.patch(\ntests/service/test_dev.py-            \"urllib.request.urlopen\", new=fake_urlopen\ntests/service/test_dev.py-        ), contextlib.redirect_stdout(\ntests/service/test_dev.py-            stdout\ntests/service/test_dev.py-        ):\n```\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/intel/dffml/issues/639/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/intel/dffml/issues/639/timeline","performed_via_github_app":null,"state_reason":null}