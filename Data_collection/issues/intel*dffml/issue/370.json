{"url":"https://api.github.com/repos/intel/dffml/issues/370","repository_url":"https://api.github.com/repos/intel/dffml","labels_url":"https://api.github.com/repos/intel/dffml/issues/370/labels{/name}","comments_url":"https://api.github.com/repos/intel/dffml/issues/370/comments","events_url":"https://api.github.com/repos/intel/dffml/issues/370/events","html_url":"https://github.com/intel/dffml/issues/370","id":557859786,"node_id":"MDU6SXNzdWU1NTc4NTk3ODY=","number":370,"title":"cli: dataflow: Shorthand for create command","user":{"login":"pdxjohnny","id":5950433,"node_id":"MDQ6VXNlcjU5NTA0MzM=","avatar_url":"https://avatars.githubusercontent.com/u/5950433?v=4","gravatar_id":"","url":"https://api.github.com/users/pdxjohnny","html_url":"https://github.com/pdxjohnny","followers_url":"https://api.github.com/users/pdxjohnny/followers","following_url":"https://api.github.com/users/pdxjohnny/following{/other_user}","gists_url":"https://api.github.com/users/pdxjohnny/gists{/gist_id}","starred_url":"https://api.github.com/users/pdxjohnny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdxjohnny/subscriptions","organizations_url":"https://api.github.com/users/pdxjohnny/orgs","repos_url":"https://api.github.com/users/pdxjohnny/repos","events_url":"https://api.github.com/users/pdxjohnny/events{/privacy}","received_events_url":"https://api.github.com/users/pdxjohnny/received_events","type":"User","site_admin":false},"labels":[{"id":1062701220,"node_id":"MDU6TGFiZWwxMDYyNzAxMjIw","url":"https://api.github.com/repos/intel/dffml/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1474884231,"node_id":"MDU6TGFiZWwxNDc0ODg0MjMx","url":"https://api.github.com/repos/intel/dffml/labels/kind/sources","name":"kind/sources","color":"0c0fb5","default":false,"description":"Issues partaining to the data sources"},{"id":1740406473,"node_id":"MDU6TGFiZWwxNzQwNDA2NDcz","url":"https://api.github.com/repos/intel/dffml/labels/p1","name":"p1","color":"dba06d","default":false,"description":"High Priority"},{"id":1740462774,"node_id":"MDU6TGFiZWwxNzQwNDYyNzc0","url":"https://api.github.com/repos/intel/dffml/labels/tL","name":"tL","color":"ea81ad","default":false,"description":"Esitmated Time To Complete: Long"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/intel/dffml/milestones/3","html_url":"https://github.com/intel/dffml/milestone/3","labels_url":"https://api.github.com/repos/intel/dffml/milestones/3/labels","id":4447271,"node_id":"MDk6TWlsZXN0b25lNDQ0NzI3MQ==","number":3,"title":"1.0 Release","description":"","creator":{"login":"pdxjohnny","id":5950433,"node_id":"MDQ6VXNlcjU5NTA0MzM=","avatar_url":"https://avatars.githubusercontent.com/u/5950433?v=4","gravatar_id":"","url":"https://api.github.com/users/pdxjohnny","html_url":"https://github.com/pdxjohnny","followers_url":"https://api.github.com/users/pdxjohnny/followers","following_url":"https://api.github.com/users/pdxjohnny/following{/other_user}","gists_url":"https://api.github.com/users/pdxjohnny/gists{/gist_id}","starred_url":"https://api.github.com/users/pdxjohnny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdxjohnny/subscriptions","organizations_url":"https://api.github.com/users/pdxjohnny/orgs","repos_url":"https://api.github.com/users/pdxjohnny/repos","events_url":"https://api.github.com/users/pdxjohnny/events{/privacy}","received_events_url":"https://api.github.com/users/pdxjohnny/received_events","type":"User","site_admin":false},"open_issues":108,"closed_issues":1,"state":"open","created_at":"2019-06-27T19:59:32Z","updated_at":"2022-04-27T22:07:45Z","due_on":null,"closed_at":null},"comments":2,"created_at":"2020-01-31T01:37:00Z","updated_at":"2021-08-31T17:08:16Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"This issue combines notes where we've talked about creating a source which would do preprocessing on various pieces of feature data on the fly as `Repo`s are feed to models.\r\n\r\n```python\r\n\r\n    # These classes should code in dffml/source/preprocess.py\r\n    # Then you need to modify dffml/base.py to understand how to property load\r\n    # and populate Dict Arg's when they are encountered\r\n\r\n    @config\r\n    class PreprocessOpConfig:\r\n        # -source-images-features-image-op array_normalize \\\r\n        op: Operation # array_normalize Operation instance\r\n        # -source-images-features-image-feature array \\\r\n        feature: str = field(\"Name of operation input feature is passed to\") # array\r\n        # -source-images-features-image-inputs-denominator 255 \\\r\n        features: Dict[str, Any] # {\"denominator\": 255}\r\n\r\n    @config\r\n    class PreprocessConfig:\r\n        # -source-images-source idx3 \\\r\n        # -source-images-source-filename train-images-idx3-ubyte \\\r\n        # -source-images-source-feature image \\\r\n        source: BaseSource # source = idx3(filename=train-images-idx3-ubyte, feature=image)\r\n        # -source-images-features-image-op array_normalize \\\r\n        # -source-images-features-image-feature array \\\r\n        # -source-images-features-image-inputs-denominator 255 \\\r\n        features: Dict[str, PreprocessOpConfig]\r\n```\r\n\r\nWe essentially if we could modify the config loading code in dffml/base.py to understand how to load a property with the type annotation of Dict[str, SomeType] defined withing a class that has been decorated with @config. Then we'd be able to specify what operation a feature should be run through (the feature would be be top level of this new dict). Then the SomeType would be some other @config where we've specified the operation name that the feature should go through. We'd then have another property, with a type definition of something like Dict[str, typing.Any] in SomeType which would allow us to map the inputs of the operation to values given on the command line. The final property we'd need in SomeType is to specify which input the feature should be used as.\r\n\r\n```console\r\n    $ dffml train \\\r\n        -model tfdnnc \\\r\n        -model-batchsize 1000 \\\r\n        -model-hidden 30 50 25 \\\r\n        -model-clstype int \\\r\n        -model-classification label \\\r\n        -model-classifications $(seq 0 9) \\\r\n        `# BEGIN new stuff` \\\r\n        -model-features def:image:float:$((28 * 28)) \\\r\n        -sources images=preprocess label=idx1 \\\r\n        -source-images-source idx3 \\\r\n        -source-images-source-filename train-images-idx3-ubyte \\\r\n        -source-images-source-feature image \\\r\n        `# Add to config parsing codee a way to do dict[str, some class]` \\\r\n        -source-images-features-image-op array_normalize \\\r\n        -source-images-features-image-feature array \\\r\n        -source-images-features-image-inputs-denominator 255 \\\r\n        `# END new stuff` \\\r\n        -source-label-filename train-labels-idx1-ubyte \\\r\n        -source-label-feature label \\\r\n        -log debug\r\n```\r\n\r\nThe issue I see us hitting first is that we need to find a good way to tell the\r\n``preprocess`` source what operations should be given to what features. And we\r\nneed a way to specify what input gets what value. There will probably be some\r\nediting of the ``config_get`` code...\r\n\r\nThis is just for quick and dirty pre-processing. Later we'll want to add a\r\n``dfpreprocess`` to use a dataflow to do pre-processing. For this example that\r\nwould be too much overhead. Creating something that normalizes the dataset just\r\nby adding a few more CLI arguments will be very powerfull through it's\r\nsimplicity.\r\n\r\nhttps://github.com/intel/dffml/pull/294#discussion_r365492444\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/intel/dffml/issues/370/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/intel/dffml/issues/370/timeline","performed_via_github_app":null,"state_reason":null}