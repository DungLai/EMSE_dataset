{"url":"https://api.github.com/repos/intel/dffml/issues/1150","repository_url":"https://api.github.com/repos/intel/dffml","labels_url":"https://api.github.com/repos/intel/dffml/issues/1150/labels{/name}","comments_url":"https://api.github.com/repos/intel/dffml/issues/1150/comments","events_url":"https://api.github.com/repos/intel/dffml/issues/1150/events","html_url":"https://github.com/intel/dffml/issues/1150","id":938094146,"node_id":"MDU6SXNzdWU5MzgwOTQxNDY=","number":1150,"title":"base: convert_value(): Support for typing.Any","user":{"login":"pdxjohnny","id":5950433,"node_id":"MDQ6VXNlcjU5NTA0MzM=","avatar_url":"https://avatars.githubusercontent.com/u/5950433?v=4","gravatar_id":"","url":"https://api.github.com/users/pdxjohnny","html_url":"https://github.com/pdxjohnny","followers_url":"https://api.github.com/users/pdxjohnny/followers","following_url":"https://api.github.com/users/pdxjohnny/following{/other_user}","gists_url":"https://api.github.com/users/pdxjohnny/gists{/gist_id}","starred_url":"https://api.github.com/users/pdxjohnny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdxjohnny/subscriptions","organizations_url":"https://api.github.com/users/pdxjohnny/orgs","repos_url":"https://api.github.com/users/pdxjohnny/repos","events_url":"https://api.github.com/users/pdxjohnny/events{/privacy}","received_events_url":"https://api.github.com/users/pdxjohnny/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-06T17:03:20Z","updated_at":"2021-07-06T17:49:54Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Currently config objects do not support when a property is labeled with `typing.Any`. Currently is throws an exception.\r\n\r\nWe need to figure out how to support this. Ideally developers would put the correct type. However, there are cases, such as operations, where `typing.Any` might be a common input type definition (good examples is `print_output()` and `create_mapping()`).\r\n\r\n@mHash1m provided a tentative fix to this issue.\r\n\r\n```diff\r\ndiff --git a/dffml/base.py b/dffml/base.py\r\nindex e79bea494..8f8a6feb1 100644\r\n--- a/dffml/base.py\r\n+++ b/dffml/base.py\r\n@@ -169,6 +169,11 @@ def convert_value(arg, value):\r\n         value = value[0]\r\n     if \"type\" in arg:\r\n         type_cls = arg[\"type\"]\r\n+        if arg[\"type\"] == Any:\r\n+            if isinstance(value, dict):\r\n+                type_cls = dict\r\n+            else:\r\n+                return value\r\n         if type_cls == Type:\r\n             type_cls = type_lookup\r\n         # TODO This is a oversimplification of argparse's nargs\r\n```\r\n\r\nWe are not sure if we can safely fix this issue by simply returning the value in this case. Further investigation is needed.\r\n\r\n```diff\r\ndiff --git a/dffml/base.py b/dffml/base.py\r\nindex e79bea494..4d899113c 100644\r\n--- a/dffml/base.py\r\n+++ b/dffml/base.py\r\n@@ -169,6 +169,8 @@ def convert_value(arg, value):\r\n         value = value[0]\r\n     if \"type\" in arg:\r\n         type_cls = arg[\"type\"]\r\n+        if arg[\"type\"] == Any:\r\n+            return value\r\n         if type_cls == Type:\r\n             type_cls = type_lookup\r\n         # TODO This is a oversimplification of argparse's nargs\r\n```\r\n\r\nReferences:\r\n- #1148","closed_by":null,"reactions":{"url":"https://api.github.com/repos/intel/dffml/issues/1150/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/intel/dffml/issues/1150/timeline","performed_via_github_app":null,"state_reason":null}