{"url":"https://api.github.com/repos/intel/dffml/issues/701","repository_url":"https://api.github.com/repos/intel/dffml","labels_url":"https://api.github.com/repos/intel/dffml/issues/701/labels{/name}","comments_url":"https://api.github.com/repos/intel/dffml/issues/701/comments","events_url":"https://api.github.com/repos/intel/dffml/issues/701/events","html_url":"https://github.com/intel/dffml/issues/701","id":636589870,"node_id":"MDU6SXNzdWU2MzY1ODk4NzA=","number":701,"title":"model: xgboost: New model","user":{"login":"pdxjohnny","id":5950433,"node_id":"MDQ6VXNlcjU5NTA0MzM=","avatar_url":"https://avatars.githubusercontent.com/u/5950433?v=4","gravatar_id":"","url":"https://api.github.com/users/pdxjohnny","html_url":"https://github.com/pdxjohnny","followers_url":"https://api.github.com/users/pdxjohnny/followers","following_url":"https://api.github.com/users/pdxjohnny/following{/other_user}","gists_url":"https://api.github.com/users/pdxjohnny/gists{/gist_id}","starred_url":"https://api.github.com/users/pdxjohnny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdxjohnny/subscriptions","organizations_url":"https://api.github.com/users/pdxjohnny/orgs","repos_url":"https://api.github.com/users/pdxjohnny/repos","events_url":"https://api.github.com/users/pdxjohnny/events{/privacy}","received_events_url":"https://api.github.com/users/pdxjohnny/received_events","type":"User","site_admin":false},"labels":[{"id":1062701220,"node_id":"MDU6TGFiZWwxMDYyNzAxMjIw","url":"https://api.github.com/repos/intel/dffml/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1062701224,"node_id":"MDU6TGFiZWwxMDYyNzAxMjI0","url":"https://api.github.com/repos/intel/dffml/labels/good%20first%20issue","name":"good first issue","color":"7057ff","default":true,"description":"Good for newcomers"},{"id":1474883282,"node_id":"MDU6TGFiZWwxNDc0ODgzMjgy","url":"https://api.github.com/repos/intel/dffml/labels/kind/ml","name":"kind/ml","color":"0e8a16","default":false,"description":"Issues partaining to machine learning"},{"id":1740452585,"node_id":"MDU6TGFiZWwxNzQwNDUyNTg1","url":"https://api.github.com/repos/intel/dffml/labels/p3","name":"p3","color":"f2f76a","default":false,"description":"Average Priority"},{"id":1740453954,"node_id":"MDU6TGFiZWwxNzQwNDUzOTU0","url":"https://api.github.com/repos/intel/dffml/labels/tS","name":"tS","color":"4acc74","default":false,"description":"Esitmated Time To Complete: Short"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/intel/dffml/milestones/2","html_url":"https://github.com/intel/dffml/milestone/2","labels_url":"https://api.github.com/repos/intel/dffml/milestones/2/labels","id":4447270,"node_id":"MDk6TWlsZXN0b25lNDQ0NzI3MA==","number":2,"title":"0.5.0 Beta Release","description":"","creator":{"login":"pdxjohnny","id":5950433,"node_id":"MDQ6VXNlcjU5NTA0MzM=","avatar_url":"https://avatars.githubusercontent.com/u/5950433?v=4","gravatar_id":"","url":"https://api.github.com/users/pdxjohnny","html_url":"https://github.com/pdxjohnny","followers_url":"https://api.github.com/users/pdxjohnny/followers","following_url":"https://api.github.com/users/pdxjohnny/following{/other_user}","gists_url":"https://api.github.com/users/pdxjohnny/gists{/gist_id}","starred_url":"https://api.github.com/users/pdxjohnny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdxjohnny/subscriptions","organizations_url":"https://api.github.com/users/pdxjohnny/orgs","repos_url":"https://api.github.com/users/pdxjohnny/repos","events_url":"https://api.github.com/users/pdxjohnny/events{/privacy}","received_events_url":"https://api.github.com/users/pdxjohnny/received_events","type":"User","site_admin":false},"open_issues":5,"closed_issues":102,"state":"open","created_at":"2019-06-27T19:58:47Z","updated_at":"2022-06-18T15:55:29Z","due_on":null,"closed_at":null},"comments":1,"created_at":"2020-06-10T22:32:00Z","updated_at":"2020-08-02T02:00:19Z","closed_at":"2020-08-02T02:00:19Z","author_association":"MEMBER","active_lock_reason":null,"body":"A first pass at this is below. If you end up using it, applicable `Co-authored-by`'s are as follows\r\n\r\n```\r\nCo-authored-by: John Andersen <johnandersenpdx@gmail.com>\r\nCo-authored-by: Soren Andersen <sorenpdx@gmail.com>\r\n```\r\n\r\n```python\r\nimport pathlib\r\n\r\nimport joblib\r\nimport pandas as pd\r\nfrom xgboost import XGBRegressor\r\nfrom sklearn.metrics import mean_absolute_error\r\n\r\nfrom dffml import *\r\n\r\n\r\n# TODO Add parameters you want to have access to within self.config here\r\n# For example, search for n_estimators to see how that works\r\n@config\r\nclass XDGRegressorModelConfig:\r\n    directory: pathlib.Path\r\n    features: Features\r\n    predict: Feature\r\n    n_estimators: int = 1000\r\n\r\n\r\nclass XDGRegressorModel(SimpleModel):\r\n    CONFIG = XDGRegressorModelConfig\r\n\r\n    def __init__(self, config) -> None:\r\n        super().__init__(config)\r\n        # The saved model\r\n        self.saved = None\r\n        self.saved_filepath = pathlib.Path(self.config.directory, \"model.joblib\")\r\n        # Load saved model if it exists\r\n        if self.saved_filepath.is_file():\r\n            self.saved = joblib.load(str(self.saved_filepath))\r\n\r\n    async def train(self, sources: Sources) -> None:\r\n        # Get data into memory\r\n        data = pd.DataFrame.from_records(\r\n            [\r\n                record.features()\r\n                async for record in sources.with_features(\r\n                    self.config.features.names() + [self.config.predict.name]\r\n                )\r\n            ]\r\n        )\r\n        # Select subset of predictors\r\n        x_data = data[self.config.features.names()]\r\n        # Select target\r\n        y_data = getattr(data, self.config.predict.name)\r\n        # XGBoost is a the leading software library for working with standard tabular data (the type of data you store in Pandas DataFrames,\r\n        # as opposed to more exotic types of data like images and videos). With careful parameter tuning, you can train highly accurate models.\r\n        # Parameters for xgboost\r\n        #   n_estimators = 100-1000 range,\r\n        #   learning_rate - In general, a small learning rate and large number of estimators will yield more accurate XGBoost models\r\n        #       e.g. learning_rate=0.1\r\n        #   n_jobs - specify number of cores to run in parallel\r\n        # my_model = XGBRegressor()\r\n        # my_model = XGBRegressor(n_estimators=1000)\r\n\r\n        # TODO Tweak this?\r\n        self.saved = XGBRegressor(\r\n            n_estimators=self.config.n_estimators, learning_rate=0.05\r\n        )\r\n        # my_model = XGBRegressor(n_estimators=1000, learning_rate=0.05, n_jobs=4) *NOTE:  n_jobs made it slightly worse\r\n\r\n        # TODO Tweak this?\r\n        self.saved.fit(\r\n            x_data, y_data, verbose=False,\r\n        )\r\n\r\n        # Save the trained model\r\n        joblib.dump(self.saved, str(self.saved_filepath))\r\n\r\n    async def accuracy(self, sources: Sources) -> Accuracy:\r\n        predictions = []\r\n        acctuals = []\r\n        # Make predictions\r\n        async for record in self.predict(\r\n            sources.with_features(\r\n                self.config.features.names() + [self.config.predict.name]\r\n            )\r\n        ):\r\n            # Appends prediction and accutal to respective lists\r\n            predictions.append(record.prediction(self.config.predict.name).value)\r\n            acctuals.append(record.feature(self.config.predict.name))\r\n        # Calculate MAE\r\n        return mean_absolute_error(predictions, acctuals)\r\n\r\n    async def predict(self, records):\r\n        # Grab records and input data (X data)\r\n        saved_records = []\r\n        input_data = []\r\n        async for record in records:\r\n            saved_records.append(record)\r\n            input_data.append(record.features(self.config.features.names()))\r\n        # Make predictions\r\n        predictions = self.saved.predict(pd.DataFrame.from_records(input_data))\r\n        # Update records and yield them to caller\r\n        for record, prediction in zip(saved_records, predictions):\r\n            record.predicted(self.config.predict.name, prediction, float(\"nan\"))\r\n            yield record\r\n```","closed_by":{"login":"pdxjohnny","id":5950433,"node_id":"MDQ6VXNlcjU5NTA0MzM=","avatar_url":"https://avatars.githubusercontent.com/u/5950433?v=4","gravatar_id":"","url":"https://api.github.com/users/pdxjohnny","html_url":"https://github.com/pdxjohnny","followers_url":"https://api.github.com/users/pdxjohnny/followers","following_url":"https://api.github.com/users/pdxjohnny/following{/other_user}","gists_url":"https://api.github.com/users/pdxjohnny/gists{/gist_id}","starred_url":"https://api.github.com/users/pdxjohnny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pdxjohnny/subscriptions","organizations_url":"https://api.github.com/users/pdxjohnny/orgs","repos_url":"https://api.github.com/users/pdxjohnny/repos","events_url":"https://api.github.com/users/pdxjohnny/events{/privacy}","received_events_url":"https://api.github.com/users/pdxjohnny/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/intel/dffml/issues/701/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/intel/dffml/issues/701/timeline","performed_via_github_app":null,"state_reason":"completed"}