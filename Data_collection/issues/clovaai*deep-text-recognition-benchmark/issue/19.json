{"url":"https://api.github.com/repos/clovaai/deep-text-recognition-benchmark/issues/19","repository_url":"https://api.github.com/repos/clovaai/deep-text-recognition-benchmark","labels_url":"https://api.github.com/repos/clovaai/deep-text-recognition-benchmark/issues/19/labels{/name}","comments_url":"https://api.github.com/repos/clovaai/deep-text-recognition-benchmark/issues/19/comments","events_url":"https://api.github.com/repos/clovaai/deep-text-recognition-benchmark/issues/19/events","html_url":"https://github.com/clovaai/deep-text-recognition-benchmark/issues/19","id":462589863,"node_id":"MDU6SXNzdWU0NjI1ODk4NjM=","number":19,"title":"training is ZeroDivisionError:division by zero and how to automatically generate gt.txt file ","user":{"login":"Changs92","id":45062017,"node_id":"MDQ6VXNlcjQ1MDYyMDE3","avatar_url":"https://avatars.githubusercontent.com/u/45062017?v=4","gravatar_id":"","url":"https://api.github.com/users/Changs92","html_url":"https://github.com/Changs92","followers_url":"https://api.github.com/users/Changs92/followers","following_url":"https://api.github.com/users/Changs92/following{/other_user}","gists_url":"https://api.github.com/users/Changs92/gists{/gist_id}","starred_url":"https://api.github.com/users/Changs92/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Changs92/subscriptions","organizations_url":"https://api.github.com/users/Changs92/orgs","repos_url":"https://api.github.com/users/Changs92/repos","events_url":"https://api.github.com/users/Changs92/events{/privacy}","received_events_url":"https://api.github.com/users/Changs92/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-07-01T08:46:54Z","updated_at":"2019-07-01T12:17:59Z","closed_at":"2019-07-01T12:17:59Z","author_association":"NONE","active_lock_reason":null,"body":"Hi, How to solve ZeroDivisionError\r\nis the error caused by the small dataset?\r\n\r\nAlso, When you need to create lmdb dataset,\r\nhow to automatically generate gt.txt file  \r\n\r\n----------------------------------------------------------\r\nCUDA_VISIBLE_DEVICES=0 python train.py \\\r\n> --train_data result_training_cp/ --valid_data result_validation_cp/ --select_data / --batch_ratio 1 \\\r\n> --Transformation TPS --FeatureExtraction ResNet --SequenceModeling BiLSTM --Prediction Attn\r\n--------------------------------------------------------------------------------\r\ndataset_root: result_training_cp/\r\nopt.select_data: ['/']\r\nopt.batch_ratio: ['1']\r\n--------------------------------------------------------------------------------\r\ndataset_root:    result_training_cp/     dataset: /\r\nsub-directory:  /.       num samples: 735\r\nnum total samples of /: 735 x 1.0 (total_data_usage_ratio) = 735\r\nnum samples of / per batch: 192 x 1.0 (batch_ratio) = 192\r\n--------------------------------------------------------------------------------\r\nTotal_batch_size:  192 = 192\r\n--------------------------------------------------------------------------------\r\ndataset_root:    result_validation_cp/   dataset: /\r\nsub-directory:  /.       num samples: 203\r\n--------------------------------------------------------------------------------\r\nmodel input parameters 32 100 20 1 512 256 38 25 TPS ResNet BiLSTM Attn\r\nSkip Transformation.LocalizationNetwork.localization_fc2.weight as it is already initialized\r\nSkip Transformation.LocalizationNetwork.localization_fc2.bias as it is already initialized\r\nModel:\r\nDataParallel(\r\n  (module): Model(\r\n    (Transformation): TPS_SpatialTransformerNetwork(\r\n      (LocalizationNetwork): LocalizationNetwork(\r\n        (conv): Sequential(\r\n          (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n          (2): ReLU(inplace)\r\n          (3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\r\n          (4): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n          (5): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n          (6): ReLU(inplace)\r\n          (7): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\r\n          (8): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n          (9): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n          (10): ReLU(inplace)\r\n          (11): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\r\n          (12): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n          (13): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n          (14): ReLU(inplace)\r\n          (15): AdaptiveAvgPool2d(output_size=1)\r\n        )\r\n        (localization_fc1): Sequential(\r\n          (0): Linear(in_features=512, out_features=256, bias=True)\r\n          (1): ReLU(inplace)\r\n        )\r\n        (localization_fc2): Linear(in_features=256, out_features=40, bias=True)\r\n      )\r\n      (GridGenerator): GridGenerator()\r\n    )\r\n    (FeatureExtraction): ResNet_FeatureExtractor(\r\n      (ConvNet): ResNet(\r\n        (conv0_1): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n        (bn0_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n        (conv0_2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n        (bn0_2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n        (relu): ReLU(inplace)\r\n        (maxpool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\r\n        (layer1): Sequential(\r\n          (0): BasicBlock(\r\n            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (relu): ReLU(inplace)\r\n            (downsample): Sequential(\r\n              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\r\n              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            )\r\n          )\r\n        )\r\n        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n        (maxpool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\r\n        (layer2): Sequential(\r\n          (0): BasicBlock(\r\n            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (relu): ReLU(inplace)\r\n            (downsample): Sequential(\r\n              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\r\n              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            )\r\n          )\r\n          (1): BasicBlock(\r\n            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (relu): ReLU(inplace)\r\n          )\r\n        )\r\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n        (maxpool3): MaxPool2d(kernel_size=2, stride=(2, 1), padding=(0, 1), dilation=1, ceil_mode=False)\r\n        (layer3): Sequential(\r\n          (0): BasicBlock(\r\n            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (relu): ReLU(inplace)\r\n            (downsample): Sequential(\r\n              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\r\n              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            )\r\n          )\r\n          (1): BasicBlock(\r\n            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (relu): ReLU(inplace)\r\n          )\r\n          (2): BasicBlock(\r\n            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (relu): ReLU(inplace)\r\n          )\r\n          (3): BasicBlock(\r\n            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (relu): ReLU(inplace)\r\n          )\r\n          (4): BasicBlock(\r\n            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (relu): ReLU(inplace)\r\n          )\r\n        )\r\n        (conv3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n        (layer4): Sequential(\r\n          (0): BasicBlock(\r\n            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (relu): ReLU(inplace)\r\n          )\r\n          (1): BasicBlock(\r\n            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (relu): ReLU(inplace)\r\n          )\r\n          (2): BasicBlock(\r\n            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\r\n            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n            (relu): ReLU(inplace)\r\n          )\r\n        )\r\n        (conv4_1): Conv2d(512, 512, kernel_size=(2, 2), stride=(2, 1), padding=(0, 1), bias=False)\r\n        (bn4_1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n        (conv4_2): Conv2d(512, 512, kernel_size=(2, 2), stride=(1, 1), bias=False)\r\n        (bn4_2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\r\n      )\r\n    )\r\n    (AdaptiveAvgPool): AdaptiveAvgPool2d(output_size=(None, 1))\r\n    (SequenceModeling): Sequential(\r\n      (0): BidirectionalLSTM(\r\n        (rnn): LSTM(512, 256, batch_first=True, bidirectional=True)\r\n        (linear): Linear(in_features=512, out_features=256, bias=True)\r\n      )\r\n      (1): BidirectionalLSTM(\r\n        (rnn): LSTM(256, 256, batch_first=True, bidirectional=True)\r\n        (linear): Linear(in_features=512, out_features=256, bias=True)\r\n      )\r\n    )\r\n    (Prediction): Attention(\r\n      (attention_cell): AttentionCell(\r\n        (i2h): Linear(in_features=256, out_features=256, bias=False)\r\n        (h2h): Linear(in_features=256, out_features=256, bias=True)\r\n        (score): Linear(in_features=256, out_features=1, bias=False)\r\n        (rnn): LSTMCell(294, 256)\r\n      )\r\n      (generator): Linear(in_features=256, out_features=38, bias=True)\r\n    )\r\n  )\r\n)\r\nTrainable params num :  49555182\r\nOptimizer:\r\nAdadelta (\r\nParameter Group 0\r\n    eps: 1e-08\r\n    lr: 1\r\n    rho: 0.95\r\n    weight_decay: 0\r\n)\r\n------------ Options -------------\r\nexperiment_name: TPS-ResNet-BiLSTM-Attn-Seed1111\r\ntrain_data: result_training_cp/\r\nvalid_data: result_validation_cp/\r\nmanualSeed: 1111\r\nworkers: 4\r\nbatch_size: 192\r\nnum_iter: 300000\r\nvalInterval: 2000\r\ncontinue_model:\r\nadam: False\r\nlr: 1\r\nbeta1: 0.9\r\nrho: 0.95\r\neps: 1e-08\r\ngrad_clip: 5\r\nselect_data: ['/']\r\nbatch_ratio: ['1']\r\ntotal_data_usage_ratio: 1.0\r\nbatch_max_length: 25\r\nimgH: 32\r\nimgW: 100\r\nrgb: False\r\ncharacter: 0123456789abcdefghijklmnopqrstuvwxyz\r\nsensitive: False\r\nPAD: False\r\nTransformation: TPS\r\nFeatureExtraction: ResNet\r\nSequenceModeling: BiLSTM\r\nPrediction: Attn\r\nnum_fiducial: 20\r\ninput_channel: 1\r\noutput_channel: 512\r\nhidden_size: 256\r\nnum_gpu: 1\r\nnum_class: 38\r\n---------------------------------------\r\n\r\n[0/300000] Loss: 3.74243 elapsed_time: 15.06362\r\nTraceback (most recent call last):\r\n  File \"train.py\", line 278, in <module>\r\n    train(opt)\r\n  File \"train.py\", line 160, in train\r\n    model, criterion, valid_loader, converter, opt)\r\n  File \"/home/cloudera1/deep/yc_reco/yc_reco/test.py\", line 129, in validation\r\n    norm_ED += edit_distance(pred, gt) / len(gt)\r\nZeroDivisionError: division by zero","closed_by":{"login":"ku21fan","id":7953971,"node_id":"MDQ6VXNlcjc5NTM5NzE=","avatar_url":"https://avatars.githubusercontent.com/u/7953971?v=4","gravatar_id":"","url":"https://api.github.com/users/ku21fan","html_url":"https://github.com/ku21fan","followers_url":"https://api.github.com/users/ku21fan/followers","following_url":"https://api.github.com/users/ku21fan/following{/other_user}","gists_url":"https://api.github.com/users/ku21fan/gists{/gist_id}","starred_url":"https://api.github.com/users/ku21fan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ku21fan/subscriptions","organizations_url":"https://api.github.com/users/ku21fan/orgs","repos_url":"https://api.github.com/users/ku21fan/repos","events_url":"https://api.github.com/users/ku21fan/events{/privacy}","received_events_url":"https://api.github.com/users/ku21fan/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/clovaai/deep-text-recognition-benchmark/issues/19/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/clovaai/deep-text-recognition-benchmark/issues/19/timeline","performed_via_github_app":null,"state_reason":"completed"}