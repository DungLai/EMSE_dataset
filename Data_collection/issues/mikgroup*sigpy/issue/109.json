{"url":"https://api.github.com/repos/mikgroup/sigpy/issues/109","repository_url":"https://api.github.com/repos/mikgroup/sigpy","labels_url":"https://api.github.com/repos/mikgroup/sigpy/issues/109/labels{/name}","comments_url":"https://api.github.com/repos/mikgroup/sigpy/issues/109/comments","events_url":"https://api.github.com/repos/mikgroup/sigpy/issues/109/events","html_url":"https://github.com/mikgroup/sigpy/issues/109","id":1186486780,"node_id":"I_kwDOCFKrHc5GuFn8","number":109,"title":"Creating an app with multi-regularizers (wavelet and total variation)","user":{"login":"joeyplum","id":75384637,"node_id":"MDQ6VXNlcjc1Mzg0NjM3","avatar_url":"https://avatars.githubusercontent.com/u/75384637?v=4","gravatar_id":"","url":"https://api.github.com/users/joeyplum","html_url":"https://github.com/joeyplum","followers_url":"https://api.github.com/users/joeyplum/followers","following_url":"https://api.github.com/users/joeyplum/following{/other_user}","gists_url":"https://api.github.com/users/joeyplum/gists{/gist_id}","starred_url":"https://api.github.com/users/joeyplum/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/joeyplum/subscriptions","organizations_url":"https://api.github.com/users/joeyplum/orgs","repos_url":"https://api.github.com/users/joeyplum/repos","events_url":"https://api.github.com/users/joeyplum/events{/privacy}","received_events_url":"https://api.github.com/users/joeyplum/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-03-30T13:44:40Z","updated_at":"2022-04-15T12:46:13Z","closed_at":"2022-04-13T00:42:10Z","author_association":"NONE","active_lock_reason":null,"body":"Hi SigPy group,\r\n\r\nFirst, thank you for creating this powerful software - I've found it easy to use and very helpful for understanding CS in MRI.\r\n\r\nI've been working on a problem for a few weeks now: I want to build an app that is capable of solving a multi-regularizer problem. Specifically, I want to solve the following optimization problem:\r\n\r\n```math\r\n\\min_x \\frac{1}{2} \\| A x - y \\|_2^2 + \\lambda_{W} \\| W x \\|_1 + \\lambda_{TV} \\| G x \\|_1\r\n```\r\n\r\nwhere lambdaW and lambdaTV are penalties for the wavelet and total variation components, respectively. This optimization problem can also be found in Miki Lustig's 2007 paper. \r\n\r\nI came here to see if you have solved this issue in SigPy before, or if you have any advice? So far, I have tried reformulating the problem to use temporary variables for x in each of the regularizer components. However, I haven't been able to get my head around getting to the final solution (i.e. how to recombine the temporary variables). Perhaps it is my inexperience with Python, but I can't quite figure out where to go next.\r\n\r\nThanks for your help, and I look forward to hearing back from you!\r\nJoey\r\n\r\n\r\n\r\nCopied below is the most recent version of an app I tried to create using the current apps as a template: (please be critical)\r\n\r\n```python\r\nclass TVWaveletRecon(sp.app.LinearLeastSquares):\r\n    r\"\"\"L1 Wavelet and total variation regularized reconstruction.\r\n    \r\n    Wavelet is good at preserving edges and low contrast information while TV \r\n    is efficient at suppressing noise and streaking artifacts.\r\n\r\n    Considers the problem\r\n\r\n    .. math::\r\n        \\min_x \\frac{1}{2} \\| A x - y \\|_2^2 + \\lambdaW \\| W x \\|_1 + \\lambdaTV \\| G x \\|_1\r\n\r\n    where A is the sampling operator,\r\n    W is the wavelet operator,\r\n    x is the image, and y is the k-space measurements.\r\n\r\n    Args:\r\n        y (array): k-space measurements.\r\n        mps (array): sensitivity maps.\r\n        lamdaW (float): regularization parameter for the wavelet component.\r\n        lamdaTV (float): regularization parameter for the finite difference component.\r\n        weights (float or array): weights for data consistency.\r\n        coord (None or array): coordinates.\r\n        wave_name (str): wavelet name.\r\n        device (Device): device to perform reconstruction.\r\n        coil_batch_size (int): batch size to process coils.\r\n        Only affects memory usage.\r\n        comm (Communicator): communicator for distributed computing.\r\n        **kwargs: Other optional arguments.\r\n\r\n    References:\r\n        Lustig, M., Donoho, D., & Pauly, J. M. (2007).\r\n        Sparse MRI: The application of compressed sensing for rapid MR imaging.\r\n        Magnetic Resonance in Medicine, 58(6), 1082-1195.\r\n        \r\n        Zangen, Z., Khan, W., Babyn, P., Cooper, D., Pratt, I., Carter, Y. (2013)\r\n        Improved Compressed Sensing-Based Algorithm for Sparse-View CT Image Reconstruction.\r\n        Computational and Mathematical Methods in Medicine.\r\n        10.1155/2013/185750\r\n\r\n    \"\"\"\r\n\r\n    def __init__(self, y, mps, lamdaW, lamdaTV,\r\n                 weights=None, coord=None,\r\n                 wave_name='db4', device=sp.cpu_device,\r\n                 coil_batch_size=None, comm=None, show_pbar=True,\r\n                 transp_nufft=False, **kwargs):\r\n        weights = _estimate_weights(y, weights, coord)\r\n        if weights is not None:\r\n            y = sp.to_device(y * weights**0.5, device=device)\r\n        else:\r\n            y = sp.to_device(y, device=device)\r\n\r\n        A = linop.Sense(mps, coord=coord, weights=weights,\r\n                        comm=comm, coil_batch_size=coil_batch_size,\r\n                        transp_nufft=transp_nufft)\r\n        img_shape = mps.shape[1:]\r\n        \r\n        # Wavelet\r\n        W = sp.linop.Wavelet(img_shape, wave_name=wave_name)\r\n        # Finite difference\r\n        G = sp.linop.FiniteDifference(A.ishape)\r\n        \r\n        proxg1 = sp.prox.UnitaryTransform(sp.prox.L1Reg(W.oshape, lamdaW), W)\r\n        proxg2 = sp.prox.L1Reg(G.oshape, lamdaTV)\r\n        \r\n        def g(input):\r\n            device = sp.get_device(input)\r\n            xp = device.xp\r\n            with device:\r\n                return lamdaW * xp.sum(xp.abs(W(input))).item() + lamdaTV * xp.sum(xp.abs(input)).item()\r\n        if comm is not None:\r\n            show_pbar = show_pbar and comm.rank == 0\r\n            \r\n        # Call super().__init(...) to call the __init(...) of the parent class,\r\n        # sp.app.LinearLeastSquares\r\n        super().__init__(A, y, proxg=proxg1, g=g, show_pbar=show_pbar, **kwargs)\r\n\r\n\r\n        def h(input):\r\n            device = sp.get_device(input)\r\n            xp = device.xp\r\n            with device:\r\n                return lamdaW * xp.sum(xp.abs(W(input))).item() + lamdaTV * xp.sum(xp.abs(input)).item()\r\n        if comm is not None:\r\n            show_pbar = show_pbar and comm.rank == 0\r\n        \r\n        super().__init__(A, y, proxg=proxg2, g=h, G=G, show_pbar=show_pbar, **kwargs)\r\n```","closed_by":{"login":"sidward","id":7364812,"node_id":"MDQ6VXNlcjczNjQ4MTI=","avatar_url":"https://avatars.githubusercontent.com/u/7364812?v=4","gravatar_id":"","url":"https://api.github.com/users/sidward","html_url":"https://github.com/sidward","followers_url":"https://api.github.com/users/sidward/followers","following_url":"https://api.github.com/users/sidward/following{/other_user}","gists_url":"https://api.github.com/users/sidward/gists{/gist_id}","starred_url":"https://api.github.com/users/sidward/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sidward/subscriptions","organizations_url":"https://api.github.com/users/sidward/orgs","repos_url":"https://api.github.com/users/sidward/repos","events_url":"https://api.github.com/users/sidward/events{/privacy}","received_events_url":"https://api.github.com/users/sidward/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mikgroup/sigpy/issues/109/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mikgroup/sigpy/issues/109/timeline","performed_via_github_app":null,"state_reason":"completed"}