[{"id":3118110333,"node_id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MzExODExMDMzMw==","url":"https://api.github.com/repos/TimoBolkart/voca/issues/events/3118110333","actor":{"login":"plmsmile","id":17981649,"node_id":"MDQ6VXNlcjE3OTgxNjQ5","avatar_url":"https://avatars.githubusercontent.com/u/17981649?v=4","gravatar_id":"","url":"https://api.github.com/users/plmsmile","html_url":"https://github.com/plmsmile","followers_url":"https://api.github.com/users/plmsmile/followers","following_url":"https://api.github.com/users/plmsmile/following{/other_user}","gists_url":"https://api.github.com/users/plmsmile/gists{/gist_id}","starred_url":"https://api.github.com/users/plmsmile/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/plmsmile/subscriptions","organizations_url":"https://api.github.com/users/plmsmile/orgs","repos_url":"https://api.github.com/users/plmsmile/repos","events_url":"https://api.github.com/users/plmsmile/events{/privacy}","received_events_url":"https://api.github.com/users/plmsmile/received_events","type":"User","site_admin":false},"event":"renamed","commit_id":null,"commit_url":null,"created_at":"2020-03-11T10:07:58Z","rename":{"from":"could not broadcast input array from shape (296) into shape (295)","to":"Edit Sequence Problem: could not broadcast input array from shape (296) into shape (295)"},"performed_via_github_app":null},{"url":"https://api.github.com/repos/TimoBolkart/voca/issues/comments/597660007","html_url":"https://github.com/TimoBolkart/voca/issues/32#issuecomment-597660007","issue_url":"https://api.github.com/repos/TimoBolkart/voca/issues/32","id":597660007,"node_id":"MDEyOklzc3VlQ29tbWVudDU5NzY2MDAwNw==","user":{"login":"plmsmile","id":17981649,"node_id":"MDQ6VXNlcjE3OTgxNjQ5","avatar_url":"https://avatars.githubusercontent.com/u/17981649?v=4","gravatar_id":"","url":"https://api.github.com/users/plmsmile","html_url":"https://github.com/plmsmile","followers_url":"https://api.github.com/users/plmsmile/followers","following_url":"https://api.github.com/users/plmsmile/following{/other_user}","gists_url":"https://api.github.com/users/plmsmile/gists{/gist_id}","starred_url":"https://api.github.com/users/plmsmile/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/plmsmile/subscriptions","organizations_url":"https://api.github.com/users/plmsmile/orgs","repos_url":"https://api.github.com/users/plmsmile/repos","events_url":"https://api.github.com/users/plmsmile/events{/privacy}","received_events_url":"https://api.github.com/users/plmsmile/received_events","type":"User","site_admin":false},"created_at":"2020-03-11T14:16:42Z","updated_at":"2020-03-11T14:20:37Z","author_association":"NONE","body":"I found the reason is that num_frames//4, num_frames//2. And I update two methods of edit_sequences.py then the problem disappear.\r\n\r\n```\r\ndef alter_sequence_shape(source_path, out_path, flame_model_fname, pc_idx=0, pc_range=(0,3)):\r\n    '''\r\n    Load existing animation sequence in \"zero pose\" and change the identity dependent shape over time.\r\n    :param source_path:         path of the animation sequence (files must be provided in OBJ file format)\r\n    :param out_path:            output path of the altered sequence\r\n    :param flame_model_fname:   path of the FLAME model\r\n    :param pc_idx               Identity shape parameter to be varied in [0,300) as FLAME provides 300 shape paramters\r\n    :param pc_range             Tuple (start/end, max/min) defining the range of the shape variation.\r\n                                i.e. (0,3) varies the shape from 0 to 3 stdev and back to 0\r\n    '''\r\n\r\n    if pc_idx < 0 or pc_idx >= 300:\r\n        print('shape parameter index out of range [0,300)')\r\n        return\r\n\r\n    if not os.path.exists(out_path):\r\n        os.makedirs(out_path)\r\n\r\n    # Load sequence files\r\n    sequence_fnames = sorted(glob.glob(os.path.join(source_path, '*.obj')))\r\n    num_frames = len(sequence_fnames)\r\n    if num_frames == 0:\r\n        print('No sequence meshes found')\r\n        return\r\n\r\n    # Load FLAME head model\r\n    model = load_model(flame_model_fname)\r\n    model_parms = np.zeros((num_frames, 300))\r\n\r\n    # Generate interpolated shape parameters for each frame\r\n    half_n = int(num_frames / 2)\r\n    x1, y1 = [0, half_n], pc_range\r\n    x2, y2 = [half_n, num_frames], pc_range[::-1]\r\n\r\n    xsteps1 = np.arange(0, half_n)\r\n    xsteps2 = np.arange(half_n, num_frames)\r\n\r\n    model_parms[:, pc_idx] = np.hstack((np.interp(xsteps1, x1, y1), np.interp(xsteps2, x2, y2)))\r\n\r\n    predicted_vertices = np.zeros((num_frames, model.v_template.shape[0], model.v_template.shape[1]))\r\n\r\n    for frame_idx in range(num_frames):\r\n        model.v_template[:] = Mesh(filename=sequence_fnames[frame_idx]).v\r\n        model.betas[:300] = model_parms[frame_idx]\r\n        predicted_vertices[frame_idx] = model.r\r\n\r\n    output_sequence_meshes(predicted_vertices, Mesh(model.v_template, model.f), out_path)\r\n\r\n\r\ndef alter_sequence_head_pose(source_path, out_path, flame_model_fname, pose_idx=3, rot_angle=np.pi/6):\r\n    '''\r\n    Load existing animation sequence in \"zero pose\" and change the head pose (i.e. rotation around the neck) over time.\r\n    :param source_path:         path of the animation sequence (files must be provided in OBJ file format)\r\n    :param out_path:            output path of the altered sequence\r\n    :param flame_model_fname:   path of the FLAME model\r\n    :param pose_idx:            head pose parameter to be varied in [3,6)\r\n    :param rot_angle:           maximum rotation angle in [0,2pi)\r\n    '''\r\n\r\n    if pose_idx < 3 or pose_idx >= 6:\r\n        print('pose parameter index out of range [3,6)')\r\n        return\r\n\r\n    if not os.path.exists(out_path):\r\n        os.makedirs(out_path)\r\n\r\n    # Load sequence files\r\n    sequence_fnames = sorted(glob.glob(os.path.join(source_path, '*.obj')))\r\n    num_frames = len(sequence_fnames)\r\n    if num_frames == 0:\r\n        print('No sequence meshes found')\r\n        return\r\n\r\n    # Load FLAME head model\r\n    model = load_model(flame_model_fname)\r\n    model_parms = np.zeros((num_frames, model.pose.shape[0]))\r\n\r\n    # Generate interpolated pose parameters for each frame\r\n    num_4 = int(num_frames//4)\r\n    num_2 = int(num_frames//2)\r\n    x1, y1 = [0, num_4], [0, rot_angle]\r\n    x2, y2 = [num_4, num_2], [rot_angle, 0]\r\n    x3, y3 = [num_2, 3*num_4], [0, -rot_angle]\r\n    x4, y4 = [3*num_4, num_frames], [-rot_angle, 0]\r\n\r\n    xsteps1 = np.arange(0, num_4)\r\n    xsteps2 = np.arange(num_4, num_2)\r\n    xsteps3 = np.arange(num_2, 3*num_4)\r\n    xsteps4 = np.arange(3*num_4, num_frames)\r\n\r\n    model_parms[:, pose_idx] = np.hstack((np.interp(xsteps1, x1, y1),\r\n                                   np.interp(xsteps2, x2, y2),\r\n                                   np.interp(xsteps3, x3, y3),\r\n                                   np.interp(xsteps4, x4, y4)))\r\n\r\n    predicted_vertices = np.zeros((num_frames, model.v_template.shape[0], model.v_template.shape[1]))\r\n\r\n    for frame_idx in range(num_frames):\r\n        model.v_template[:] = Mesh(filename=sequence_fnames[frame_idx]).v\r\n        model.pose[:] = model_parms[frame_idx]\r\n        predicted_vertices[frame_idx] = model.r\r\n\r\n    output_sequence_meshes(predicted_vertices, Mesh(model.v_template, model.f), out_path)\r\n```","reactions":{"url":"https://api.github.com/repos/TimoBolkart/voca/issues/comments/597660007/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"plmsmile","id":17981649,"node_id":"MDQ6VXNlcjE3OTgxNjQ5","avatar_url":"https://avatars.githubusercontent.com/u/17981649?v=4","gravatar_id":"","url":"https://api.github.com/users/plmsmile","html_url":"https://github.com/plmsmile","followers_url":"https://api.github.com/users/plmsmile/followers","following_url":"https://api.github.com/users/plmsmile/following{/other_user}","gists_url":"https://api.github.com/users/plmsmile/gists{/gist_id}","starred_url":"https://api.github.com/users/plmsmile/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/plmsmile/subscriptions","organizations_url":"https://api.github.com/users/plmsmile/orgs","repos_url":"https://api.github.com/users/plmsmile/repos","events_url":"https://api.github.com/users/plmsmile/events{/privacy}","received_events_url":"https://api.github.com/users/plmsmile/received_events","type":"User","site_admin":false}},{"id":3119015814,"node_id":"MDExOkNsb3NlZEV2ZW50MzExOTAxNTgxNA==","url":"https://api.github.com/repos/TimoBolkart/voca/issues/events/3119015814","actor":{"login":"plmsmile","id":17981649,"node_id":"MDQ6VXNlcjE3OTgxNjQ5","avatar_url":"https://avatars.githubusercontent.com/u/17981649?v=4","gravatar_id":"","url":"https://api.github.com/users/plmsmile","html_url":"https://github.com/plmsmile","followers_url":"https://api.github.com/users/plmsmile/followers","following_url":"https://api.github.com/users/plmsmile/following{/other_user}","gists_url":"https://api.github.com/users/plmsmile/gists{/gist_id}","starred_url":"https://api.github.com/users/plmsmile/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/plmsmile/subscriptions","organizations_url":"https://api.github.com/users/plmsmile/orgs","repos_url":"https://api.github.com/users/plmsmile/repos","events_url":"https://api.github.com/users/plmsmile/events{/privacy}","received_events_url":"https://api.github.com/users/plmsmile/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2020-03-11T14:20:40Z","state_reason":null,"performed_via_github_app":null}]