[{"url":"https://api.github.com/repos/HazyResearch/fonduer/issues/comments/912068627","html_url":"https://github.com/HazyResearch/fonduer/issues/546#issuecomment-912068627","issue_url":"https://api.github.com/repos/HazyResearch/fonduer/issues/546","id":912068627,"node_id":"IC_kwDOByebXM42XRAT","user":{"login":"robbieculkin","id":20375994,"node_id":"MDQ6VXNlcjIwMzc1OTk0","avatar_url":"https://avatars.githubusercontent.com/u/20375994?v=4","gravatar_id":"","url":"https://api.github.com/users/robbieculkin","html_url":"https://github.com/robbieculkin","followers_url":"https://api.github.com/users/robbieculkin/followers","following_url":"https://api.github.com/users/robbieculkin/following{/other_user}","gists_url":"https://api.github.com/users/robbieculkin/gists{/gist_id}","starred_url":"https://api.github.com/users/robbieculkin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/robbieculkin/subscriptions","organizations_url":"https://api.github.com/users/robbieculkin/orgs","repos_url":"https://api.github.com/users/robbieculkin/repos","events_url":"https://api.github.com/users/robbieculkin/events{/privacy}","received_events_url":"https://api.github.com/users/robbieculkin/received_events","type":"User","site_admin":false},"created_at":"2021-09-02T21:24:41Z","updated_at":"2021-09-02T21:24:41Z","author_association":"NONE","body":"The first workaround that comes to mind is to override the `CandidateExtractorUDF.apply` method where temporary candidates are formed from the product of a document's mentions.\r\nhttps://github.com/HazyResearch/fonduer/blob/c9fd6b91998cd708ab95aeee3dfaf47b9e549ffd/src/fonduer/candidates/candidates.py#L263-L274\r\n\r\nIf we're able to group mentions by their contexts and form products *within* these groups, it can reduce the number of temporary candidates passed to the throttler. This restriction can be applied across the hierarchy of Fonduer's data model (Paragraph, Sentence, Table, ...).\r\n\r\nFor example, we can \r\n1. select all mentions within a given page \r\n2. take their Cartesian product, \r\n3. then sum the results across all pages produced via steps 1-2. \r\n\r\nThis way, we eliminate all temporary candidates that span different pages (if this is what the programmer indicates). This is preferable to the `same_page` method as it reduces computational complexity significantly - there are far fewer temporary candidates formed. Ultimately, the programmer can use a `shared_context` parameter to the `.apply` method to indicate the right degree of detail.","reactions":{"url":"https://api.github.com/repos/HazyResearch/fonduer/issues/comments/912068627/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"robbieculkin","id":20375994,"node_id":"MDQ6VXNlcjIwMzc1OTk0","avatar_url":"https://avatars.githubusercontent.com/u/20375994?v=4","gravatar_id":"","url":"https://api.github.com/users/robbieculkin","html_url":"https://github.com/robbieculkin","followers_url":"https://api.github.com/users/robbieculkin/followers","following_url":"https://api.github.com/users/robbieculkin/following{/other_user}","gists_url":"https://api.github.com/users/robbieculkin/gists{/gist_id}","starred_url":"https://api.github.com/users/robbieculkin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/robbieculkin/subscriptions","organizations_url":"https://api.github.com/users/robbieculkin/orgs","repos_url":"https://api.github.com/users/robbieculkin/repos","events_url":"https://api.github.com/users/robbieculkin/events{/privacy}","received_events_url":"https://api.github.com/users/robbieculkin/received_events","type":"User","site_admin":false}}]