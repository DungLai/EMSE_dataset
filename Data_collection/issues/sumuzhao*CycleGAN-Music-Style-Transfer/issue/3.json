{"url":"https://api.github.com/repos/sumuzhao/CycleGAN-Music-Style-Transfer/issues/3","repository_url":"https://api.github.com/repos/sumuzhao/CycleGAN-Music-Style-Transfer","labels_url":"https://api.github.com/repos/sumuzhao/CycleGAN-Music-Style-Transfer/issues/3/labels{/name}","comments_url":"https://api.github.com/repos/sumuzhao/CycleGAN-Music-Style-Transfer/issues/3/comments","events_url":"https://api.github.com/repos/sumuzhao/CycleGAN-Music-Style-Transfer/issues/3/events","html_url":"https://github.com/sumuzhao/CycleGAN-Music-Style-Transfer/issues/3","id":364772628,"node_id":"MDU6SXNzdWUzNjQ3NzI2Mjg=","number":3,"title":"How to correctly generate npy files from a midi file","user":{"login":"aihobbyist","id":43666274,"node_id":"MDQ6VXNlcjQzNjY2Mjc0","avatar_url":"https://avatars.githubusercontent.com/u/43666274?v=4","gravatar_id":"","url":"https://api.github.com/users/aihobbyist","html_url":"https://github.com/aihobbyist","followers_url":"https://api.github.com/users/aihobbyist/followers","following_url":"https://api.github.com/users/aihobbyist/following{/other_user}","gists_url":"https://api.github.com/users/aihobbyist/gists{/gist_id}","starred_url":"https://api.github.com/users/aihobbyist/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aihobbyist/subscriptions","organizations_url":"https://api.github.com/users/aihobbyist/orgs","repos_url":"https://api.github.com/users/aihobbyist/repos","events_url":"https://api.github.com/users/aihobbyist/events{/privacy}","received_events_url":"https://api.github.com/users/aihobbyist/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-09-28T07:29:04Z","updated_at":"2018-09-28T08:30:51Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm trying to train a model and test it, the first step being to generate npy files representing numpy arrays from midi files (as the current dataset uploaded only includes individual midi files). I'm trying the following code (from Testfile.py):\r\n\r\n```\r\nimport math\r\nimport random\r\nimport os\r\nimport shutil\r\nfrom dataprocessing import pretty_midi_to_piano_roll\r\nimport matplotlib.pyplot as plt\r\nimport pretty_midi\r\nfrom pypianoroll import Multitrack, Track\r\nimport librosa.display\r\nfrom utils import *\r\n\r\ndef get_bar_piano_roll(piano_roll):\r\n    if int(piano_roll.shape[0] % 64) is not 0:\r\n        if LAST_BAR_MODE == 'fill':\r\n            piano_roll = np.concatenate((piano_roll, np.zeros((64 - piano_roll.shape[0] % 64, 128))), axis=0)\r\n        elif LAST_BAR_MODE == 'remove':\r\n            piano_roll = np.delete(piano_roll,  np.s_[-int(piano_roll.shape[0] % 64):], axis=0)\r\n    piano_roll = piano_roll.reshape(-1, 64, 128)\r\n    return piano_roll\r\n\r\nLAST_BAR_MODE = 'remove'\r\n\r\n# convert midi files to npy - midi files will be in the ./Classic/ directory\r\n\r\nl = [f for f in os.listdir('./Classic/')]\r\ncount = 0\r\ncount2 = 0\r\nfor i in range(len(l)):\r\n    try:\r\n        multitrack = Multitrack(beat_resolution=4, name=os.path.splitext(l[i])[0])\r\n        x = pretty_midi.PrettyMIDI(os.path.join('./Classic/', l[i]))\r\n        multitrack.parse_pretty_midi(x)\r\n        category_list = {'Piano': [], 'Drums': []}\r\n        program_dict = {'Piano': 0, 'Drums': 0}\r\n        for idx, track in enumerate(multitrack.tracks):\r\n            if track.is_drum:\r\n                category_list['Drums'].append(idx)\r\n            else:\r\n                category_list['Piano'].append(idx)\r\n        tracks = []\r\n        merged = multitrack[category_list['Piano']].get_merged_pianoroll()\r\n        merged = multitrack.get_merged_pianoroll()\r\n        tracks = [(Track(merged, program=0, is_drum=False, name=os.path.splitext(l[i])[0]))]\r\n        mt = Multitrack(None, tracks, multitrack.tempo, multitrack.downbeat, multitrack.beat_resolution, multitrack.name)\r\n        pr = get_bar_piano_roll(merged)\r\n        pr_clip = pr[:, :, 24:108]\r\n        if int(pr_clip.shape[0] % 4) != 0:\r\n            pr_clip = np.delete(pr_clip, np.s_[-int(pr_clip.shape[0] % 4):], axis=0)\r\n        pr_re = pr_clip.reshape(-1, 64, 84, 1)\r\n        print(pr_re.shape)\r\n\r\n        # pr_re.shape will be something like (4, 64, 84, 1) or (8, 64, 84, 1) etc\r\n\r\n        for j in range(len(pr_re)):\r\n            # this would save each part of pr_re, with each part being of shape (64, 84, 1)\r\n            np.save(os.path.join('./datasets/Classic/train', 'classic_piano_train_' + str(count2) + '.npy'), pr_re[j])\r\n            count2 += 1\r\n        count += 1\r\n        print(str(count))\r\n    except:\r\n        print('Wrong', l[i])\r\n        continue\r\n```\r\n\r\nPer the readme, this is of course incorrect as train data should be arrays of shape (1, 64, 84, 1) and in the above I'm generating them with shape (64, 84, 1). How should midi files be properly converted to numpy arrays in the shape (1, 64, 84, 1)?","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sumuzhao/CycleGAN-Music-Style-Transfer/issues/3/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sumuzhao/CycleGAN-Music-Style-Transfer/issues/3/timeline","performed_via_github_app":null,"state_reason":null}