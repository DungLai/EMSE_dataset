{"url":"https://api.github.com/repos/waspinator/pycococreator/issues/26","repository_url":"https://api.github.com/repos/waspinator/pycococreator","labels_url":"https://api.github.com/repos/waspinator/pycococreator/issues/26/labels{/name}","comments_url":"https://api.github.com/repos/waspinator/pycococreator/issues/26/comments","events_url":"https://api.github.com/repos/waspinator/pycococreator/issues/26/events","html_url":"https://github.com/waspinator/pycococreator/issues/26","id":507940328,"node_id":"MDU6SXNzdWU1MDc5NDAzMjg=","number":26,"title":"COCO sample previews show multiple sample masks","user":{"login":"Mahi-Mai","id":17129394,"node_id":"MDQ6VXNlcjE3MTI5Mzk0","avatar_url":"https://avatars.githubusercontent.com/u/17129394?v=4","gravatar_id":"","url":"https://api.github.com/users/Mahi-Mai","html_url":"https://github.com/Mahi-Mai","followers_url":"https://api.github.com/users/Mahi-Mai/followers","following_url":"https://api.github.com/users/Mahi-Mai/following{/other_user}","gists_url":"https://api.github.com/users/Mahi-Mai/gists{/gist_id}","starred_url":"https://api.github.com/users/Mahi-Mai/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Mahi-Mai/subscriptions","organizations_url":"https://api.github.com/users/Mahi-Mai/orgs","repos_url":"https://api.github.com/users/Mahi-Mai/repos","events_url":"https://api.github.com/users/Mahi-Mai/events{/privacy}","received_events_url":"https://api.github.com/users/Mahi-Mai/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-10-16T15:49:58Z","updated_at":"2020-07-01T11:45:02Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I'm not sure what the deal is, but I set up my dataset as described in your guide.  The json file generates fine, but when I generate several random previews, some of my samples have some technicolor nonsense going on.\r\n\r\nBy that I mean 11 masks (they happen to be consecutive masks in the index) are drawn/assigned over the one sample.  I've checked the json file, and it looks like all these annotations have been assigned to the one sample for some reason.  Each sample is named according to the suggested format, so I'm not sure what's up.\r\n\r\nFor example:\r\n\r\nimage filename: DSC_5409_1.jpg\r\nannotation filename:  DSC_5409_1_mask_1.png\r\n\r\nimage: MVI_0155_1107_140.jpg\r\nannotation: MVI_0155_1107_140_mask_1.png\r\n\r\nThere's the same number of unique filenames under each directory, and I've stripped the extensions and \"_mask_1\" from the annotation filenames to ensure they match.\r\n\r\nAnyone else have this problem?\r\n\r\n===\r\n\r\nTo explain further, I have a source image, let's say MVI_0155_1107.jpg.  This is sampled using a sliding window technique to produce x number of samples saved as MVI_0155_1107_#.jpg, with x going as high as 350 in some cases.\r\n\r\n...ah, that's the problem.  When it reaches images xx_3.jpg, and starts looking for annotations, it's going to pick up ANY annotations with 'xx_3' in the filename.  So, if I have annotations with:  xx_3, xx_30, xx_31, xx_32, xx_33, xx_34, xx_35, xx_36, xx_37, xx_38, and xx_39, that leaves me with 11 annotations assigned to one sample.\r\n\r\nSo it's a matter of improving how the script parses annotation filenames for comparison.  I'll try something like this...\r\n\r\n```\r\n#  I'm going to index out what I need.  To do that...\r\n\r\nwords_to_strip = annotation_filename.split('_')[-2:]  # in our case we'll get ['mask', '1.png']\r\n\r\nchar_sum = 0\r\nfor word in words_to_strip:\r\n    char_sum += len(word)\r\n\r\n# We still need to add 2 to account for the underscore before and after 'mask'.\r\n\r\nchar_sum +=2\r\n\r\n# Use the sum to index out the part of the filename we want to compare\r\n\r\nannotation_filename_match = annotation_filename[:-char_sum]\r\n```\r\n\r\nNow we can use the image filename to match to the appropriate annotation regardless of naming scheme.\r\n\r\nThere are probably better ways to do this, so please feel free to suggest!  I'm not closing this yet because I haven't tested my method.  :)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/waspinator/pycococreator/issues/26/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/waspinator/pycococreator/issues/26/timeline","performed_via_github_app":null,"state_reason":null}