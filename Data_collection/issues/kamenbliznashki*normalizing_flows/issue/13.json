{"url":"https://api.github.com/repos/kamenbliznashki/normalizing_flows/issues/13","repository_url":"https://api.github.com/repos/kamenbliznashki/normalizing_flows","labels_url":"https://api.github.com/repos/kamenbliznashki/normalizing_flows/issues/13/labels{/name}","comments_url":"https://api.github.com/repos/kamenbliznashki/normalizing_flows/issues/13/comments","events_url":"https://api.github.com/repos/kamenbliznashki/normalizing_flows/issues/13/events","html_url":"https://github.com/kamenbliznashki/normalizing_flows/issues/13","id":891333733,"node_id":"MDU6SXNzdWU4OTEzMzM3MzM=","number":13,"title":"Model behaving differently in train and eval modes","user":{"login":"RuskinManku","id":30204792,"node_id":"MDQ6VXNlcjMwMjA0Nzky","avatar_url":"https://avatars.githubusercontent.com/u/30204792?v=4","gravatar_id":"","url":"https://api.github.com/users/RuskinManku","html_url":"https://github.com/RuskinManku","followers_url":"https://api.github.com/users/RuskinManku/followers","following_url":"https://api.github.com/users/RuskinManku/following{/other_user}","gists_url":"https://api.github.com/users/RuskinManku/gists{/gist_id}","starred_url":"https://api.github.com/users/RuskinManku/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/RuskinManku/subscriptions","organizations_url":"https://api.github.com/users/RuskinManku/orgs","repos_url":"https://api.github.com/users/RuskinManku/repos","events_url":"https://api.github.com/users/RuskinManku/events{/privacy}","received_events_url":"https://api.github.com/users/RuskinManku/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-13T20:07:18Z","updated_at":"2021-05-13T20:07:18Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I am training a RealNvP model on some distribution, however I am getting very different loss when I switch the model from eval() mode to train() mode or vice versa. I know that changing modes in PyTorch basically changes the behavior of dropout and batchnorm, and then it makes sense for the loss to change, as the RealNVP model contains batch_norm layers . However, this difference is giving an error regarding my input being out of support when I am doing eval. One way around this is to deactivate the batch_norm, which is a direct argument to RealNVP. However, is this really the only way? And also, if batch_norm affects distribution like this, then why do we add it?","closed_by":null,"reactions":{"url":"https://api.github.com/repos/kamenbliznashki/normalizing_flows/issues/13/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/kamenbliznashki/normalizing_flows/issues/13/timeline","performed_via_github_app":null,"state_reason":null}