[{"url":"https://api.github.com/repos/rwightman/posenet-python/issues/comments/566515065","html_url":"https://github.com/rwightman/posenet-python/issues/24#issuecomment-566515065","issue_url":"https://api.github.com/repos/rwightman/posenet-python/issues/24","id":566515065,"node_id":"MDEyOklzc3VlQ29tbWVudDU2NjUxNTA2NQ==","user":{"login":"ctittel","id":42185809,"node_id":"MDQ6VXNlcjQyMTg1ODA5","avatar_url":"https://avatars.githubusercontent.com/u/42185809?v=4","gravatar_id":"","url":"https://api.github.com/users/ctittel","html_url":"https://github.com/ctittel","followers_url":"https://api.github.com/users/ctittel/followers","following_url":"https://api.github.com/users/ctittel/following{/other_user}","gists_url":"https://api.github.com/users/ctittel/gists{/gist_id}","starred_url":"https://api.github.com/users/ctittel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ctittel/subscriptions","organizations_url":"https://api.github.com/users/ctittel/orgs","repos_url":"https://api.github.com/users/ctittel/repos","events_url":"https://api.github.com/users/ctittel/events{/privacy}","received_events_url":"https://api.github.com/users/ctittel/received_events","type":"User","site_admin":false},"created_at":"2019-12-17T12:09:34Z","updated_at":"2019-12-17T12:09:34Z","author_association":"NONE","body":"I would be also interested in this, is there a simple way to implement single pose?","reactions":{"url":"https://api.github.com/repos/rwightman/posenet-python/issues/comments/566515065/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"ctittel","id":42185809,"node_id":"MDQ6VXNlcjQyMTg1ODA5","avatar_url":"https://avatars.githubusercontent.com/u/42185809?v=4","gravatar_id":"","url":"https://api.github.com/users/ctittel","html_url":"https://github.com/ctittel","followers_url":"https://api.github.com/users/ctittel/followers","following_url":"https://api.github.com/users/ctittel/following{/other_user}","gists_url":"https://api.github.com/users/ctittel/gists{/gist_id}","starred_url":"https://api.github.com/users/ctittel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ctittel/subscriptions","organizations_url":"https://api.github.com/users/ctittel/orgs","repos_url":"https://api.github.com/users/ctittel/repos","events_url":"https://api.github.com/users/ctittel/events{/privacy}","received_events_url":"https://api.github.com/users/ctittel/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/rwightman/posenet-python/issues/comments/566563722","html_url":"https://github.com/rwightman/posenet-python/issues/24#issuecomment-566563722","issue_url":"https://api.github.com/repos/rwightman/posenet-python/issues/24","id":566563722,"node_id":"MDEyOklzc3VlQ29tbWVudDU2NjU2MzcyMg==","user":{"login":"b005t3r","id":757150,"node_id":"MDQ6VXNlcjc1NzE1MA==","avatar_url":"https://avatars.githubusercontent.com/u/757150?v=4","gravatar_id":"","url":"https://api.github.com/users/b005t3r","html_url":"https://github.com/b005t3r","followers_url":"https://api.github.com/users/b005t3r/followers","following_url":"https://api.github.com/users/b005t3r/following{/other_user}","gists_url":"https://api.github.com/users/b005t3r/gists{/gist_id}","starred_url":"https://api.github.com/users/b005t3r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b005t3r/subscriptions","organizations_url":"https://api.github.com/users/b005t3r/orgs","repos_url":"https://api.github.com/users/b005t3r/repos","events_url":"https://api.github.com/users/b005t3r/events{/privacy}","received_events_url":"https://api.github.com/users/b005t3r/received_events","type":"User","site_admin":false},"created_at":"2019-12-17T14:26:41Z","updated_at":"2019-12-17T14:26:41Z","author_association":"NONE","body":"> I would be also interested in this, is there a simple way to implement single pose?\r\n\r\nActually someone already explained it to me that there are no separate models for multi-pose and single-pose recognition, it's just how you interpret the output what's different. I haven't tested it yet myself, will try to do it later this week and report back if it worked.","reactions":{"url":"https://api.github.com/repos/rwightman/posenet-python/issues/comments/566563722/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"b005t3r","id":757150,"node_id":"MDQ6VXNlcjc1NzE1MA==","avatar_url":"https://avatars.githubusercontent.com/u/757150?v=4","gravatar_id":"","url":"https://api.github.com/users/b005t3r","html_url":"https://github.com/b005t3r","followers_url":"https://api.github.com/users/b005t3r/followers","following_url":"https://api.github.com/users/b005t3r/following{/other_user}","gists_url":"https://api.github.com/users/b005t3r/gists{/gist_id}","starred_url":"https://api.github.com/users/b005t3r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b005t3r/subscriptions","organizations_url":"https://api.github.com/users/b005t3r/orgs","repos_url":"https://api.github.com/users/b005t3r/repos","events_url":"https://api.github.com/users/b005t3r/events{/privacy}","received_events_url":"https://api.github.com/users/b005t3r/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/rwightman/posenet-python/issues/comments/568782218","html_url":"https://github.com/rwightman/posenet-python/issues/24#issuecomment-568782218","issue_url":"https://api.github.com/repos/rwightman/posenet-python/issues/24","id":568782218,"node_id":"MDEyOklzc3VlQ29tbWVudDU2ODc4MjIxOA==","user":{"login":"b005t3r","id":757150,"node_id":"MDQ6VXNlcjc1NzE1MA==","avatar_url":"https://avatars.githubusercontent.com/u/757150?v=4","gravatar_id":"","url":"https://api.github.com/users/b005t3r","html_url":"https://github.com/b005t3r","followers_url":"https://api.github.com/users/b005t3r/followers","following_url":"https://api.github.com/users/b005t3r/following{/other_user}","gists_url":"https://api.github.com/users/b005t3r/gists{/gist_id}","starred_url":"https://api.github.com/users/b005t3r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b005t3r/subscriptions","organizations_url":"https://api.github.com/users/b005t3r/orgs","repos_url":"https://api.github.com/users/b005t3r/repos","events_url":"https://api.github.com/users/b005t3r/events{/privacy}","received_events_url":"https://api.github.com/users/b005t3r/received_events","type":"User","site_admin":false},"created_at":"2019-12-24T17:28:39Z","updated_at":"2019-12-24T17:28:39Z","author_association":"NONE","body":"@ctonic, here's my sample code for using PoseNet models for single pose recognition - it works very well and is very fast, even on low-end hardware (like SBCs, I'm using this with UDOO Bolt and get between 17 and 20 FPS):\r\n\r\n```java\r\npublic class Images {\r\n    public enum BodyPart {\r\n        NOSE(0), LEFT_EYE(1), RIGHT_EYE(2), LEFT_EAR(3), RIGHT_EAR(4),\r\n        LEFT_SHOULDER(5), RIGHT_SHOULDER(6), LEFT_ELBOW(7), RIGHT_ELBOW(8), LEFT_WRIST(9), RIGHT_WRIST(10),\r\n        LEFT_HIP(11), RIGHT_HIP(12), LEFT_KNEE(13), RIGHT_KNEE(14), LEFT_ANKLE(15), RIGHT_ANKLE(16);\r\n\r\n        private int index;\r\n\r\n        BodyPart(int index) {\r\n            this.index = index;\r\n        }\r\n\r\n        public int getIndex() {\r\n            return index;\r\n        }\r\n    }\r\n\r\n    public static final int IMAGE_SIZE          = 200;\r\n    public static final int STRIDE              = 16;\r\n    public static final File MODEL_050_FILE     = new File(\"models/model-mobilenet_v1_050.pb\");\r\n    public static final File MODEL_075_FILE     = new File(\"models/model-mobilenet_v1_075.pb\");\r\n    public static final File MODEL_100_FILE     = new File(\"models/model-mobilenet_v1_100.pb\");\r\n\r\n    private static Mat scaledInput      = null;\r\n    private static Mat multiplierInput = null;\r\n    private static Mat offsetInput = null;\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        Graph graph = loadGraph(MODEL_100_FILE);\r\n        Session session = new Session(graph);\r\n\r\n        List<File> imageFiles = getAllFilePaths(new File(\"images\"));\r\n\r\n        for(File imageFile : imageFiles) {\r\n//            if(! imageFile.getName().contains(\"rectange_centered\"))\r\n//                continue;\r\n\r\n            BufferedImage img   = ImageIO.read(imageFile);\r\n            Bitmap bmp          = new Bitmap(img, Bitmap.Config.ARGB_8888, true, false, null, Bitmap.getDefaultDensity());\r\n\r\n            long startRunner = System.currentTimeMillis();\r\n            Mat input = VideoUtil.bitmapToMat(bmp, null);\r\n            List<PointF> points = findPoints(input, session, IMAGE_SIZE);\r\n            long durationRunner = System.currentTimeMillis() - startRunner;\r\n            System.out.println(\"Duration: \" + durationRunner / 1000.0f);\r\n            System.out.println();\r\n\r\n            renderSkeleton(points, bmp);\r\n            new File(\"images_out\").mkdirs();\r\n            ImageIO.write(bmp.getImage(), \"png\", new File(\"images_out\", imageFile.getName()));\r\n        }\r\n\r\n        session.close();\r\n        graph.close();\r\n    }\r\n\r\n    public static Graph loadGraph(File modelFile) {\r\n        byte[] modelBytes;\r\n\r\n        try {\r\n            InputStream in = new BufferedInputStream(new FileInputStream(modelFile));\r\n            modelBytes = in.readAllBytes();\r\n        } catch (IOException e) {\r\n            throw new IllegalStateException(\"model file not found: \" + modelFile, e);\r\n        }\r\n\r\n        Graph graph = new Graph();\r\n        graph.importGraphDef(modelBytes);\r\n\r\n        System.out.println(\"graph operations:\");\r\n        for (Iterator<Operation> it = graph.operations(); it.hasNext(); ) {\r\n            Operation op = it.next();\r\n\r\n            System.out.println(op.name() + \": \" + op.type());\r\n        }\r\n\r\n        return graph;\r\n    }\r\n\r\n    public static List<PointF> findPoints(Mat input, Session session, int maxImageSize) {\r\n        if(scaledInput == null) {\r\n            scaledInput     = new Mat(maxImageSize, maxImageSize, CV_8UC3, new Scalar(0xFF, 0x00, 0xFF, 0));\r\n            multiplierInput = new Mat(maxImageSize, maxImageSize, CV_32FC3, new Scalar(1.0 / 128.0, 1.0 / 128.0, 1.0 / 128.0, 0));\r\n            offsetInput     = new Mat(maxImageSize, maxImageSize, CV_32FC3, new Scalar(128.0, 128.0, 128.0, 0));\r\n        }\r\n\r\n        long startImage = System.currentTimeMillis();\r\n        int imageSize = Math.max(input.cols(), input.rows());\r\n        float scale = imageSize <= maxImageSize ? 1.0f : (float) maxImageSize / imageSize;\r\n\r\n        Mat scaled;\r\n        if(scale < 1) {\r\n            Size newSize = new org.bytedeco.opencv.opencv_core.Size(Math.round(input.cols() * scale), Math.round(input.rows() * scale));\r\n            scaled = new Mat(scaledInput, new Rect(0, 0, newSize.width(), newSize.height()));\r\n\r\n            opencv_imgproc.resize(input, scaled, newSize, 0, 0, opencv_imgproc.CV_INTER_LINEAR);\r\n            opencv_imgproc.cvtColor(scaled, scaled, COLOR_BGR2RGB);\r\n        }\r\n        else {\r\n            scaled = input;\r\n        }\r\n\r\n        Mat converted = new Mat(); // needs to be dynamically created because of later createBuffer() call\r\n        scaled.convertTo(converted, CV_32FC3);\r\n\r\n        Mat multiplier = new Mat(multiplierInput, new Rect(0, 0, scaled.cols(), scaled.rows()));\r\n        Mat off = new Mat(offsetInput, new Rect(0, 0, scaled.cols(), scaled.rows()));\r\n\r\n        subtract(converted, off, converted);\r\n        multiply(converted, multiplier, converted);\r\n\r\n        long durationImage = System.currentTimeMillis() - startImage;\r\n//        System.out.println(\"Image: \" + durationImage / 1000.0f);\r\n\r\n        long startInit = System.currentTimeMillis();\r\n        FloatBuffer buffer = converted.createBuffer();\r\n        Tensor tensor = Tensor.create(new long[]{ 1, converted.rows(), converted.cols(), 3 }, buffer);\r\n        long durationInit = System.currentTimeMillis() - startInit;\r\n//        System.out.println(\"Init: \" + durationInit / 1000.0f);\r\n\r\n        long startNetwork = System.currentTimeMillis();\r\n        List<Tensor<?>> result = session.runner()\r\n                .feed(\"image\", tensor)\r\n                .fetch(\"heatmap\")\r\n                .fetch(\"offset_2\")\r\n                .run();\r\n\r\n        long durationNetwork = System.currentTimeMillis() - startNetwork;\r\n//        System.out.println(\"Network: \" + durationNetwork / 1000.0f);\r\n\r\n        Tensor<?> heatMapsTensor       = result.get(0);\r\n        Tensor<?> offsetVectorsTensor  = result.get(1);\r\n\r\n        long startCopy = System.currentTimeMillis();\r\n        float[][][][] heatMaps = heatMapsTensor.copyTo(new float[(int) heatMapsTensor.shape()[0]][(int) heatMapsTensor.shape()[1]][(int) heatMapsTensor.shape()[2]][(int) heatMapsTensor.shape()[3]]);\r\n        float[][][][] offsetVectors = offsetVectorsTensor.copyTo(new float[(int) offsetVectorsTensor.shape()[0]][(int) offsetVectorsTensor.shape()[1]][(int) offsetVectorsTensor.shape()[2]][(int) offsetVectorsTensor.shape()[3]]);\r\n        long durationCopy = System.currentTimeMillis() - startCopy;\r\n//        System.out.println(\"Copy: \" + durationCopy / 1000.0f);\r\n\r\n        PointF[] skeleton = new PointF[heatMaps[0][0][0].length];\r\n        for(int i = 0; i < skeleton.length; ++i)\r\n            skeleton[i] = new PointF(Float.NaN, Float.NaN);\r\n\r\n        for(int y = 0; y < heatMaps[0].length; ++y) {\r\n            for(int x = 0; x < heatMaps[0][y].length; ++x) {\r\n                for(int bodyPart = 0; bodyPart < heatMaps[0][y][x].length; ++bodyPart) {\r\n                    float confidence = heatMaps[0][y][x][bodyPart];\r\n\r\n                    if(confidence < 0.6)\r\n                        continue;\r\n\r\n                    PointF currCoords = skeleton[bodyPart];\r\n\r\n                    if(Float.isNaN(currCoords.x) || heatMaps[0][(int) currCoords.y][(int) currCoords.x][bodyPart] < heatMaps[0][y][x][bodyPart])\r\n                        currCoords.set(x, y);\r\n                }\r\n            }\r\n        }\r\n\r\n//        for(int bodyPart = 0; bodyPart < skeleton.length; ++bodyPart) {\r\n//            System.out.println(\"\" + bodyPart + \": \" + heatMaps[0][(int) skeleton[bodyPart].y][(int) skeleton[bodyPart].x][bodyPart]);\r\n//        }\r\n\r\n        float widthOffset = (heatMaps[0][0].length * STRIDE - scaled.cols()) * 0.5f;\r\n        float heightOffset = (heatMaps[0].length * STRIDE - scaled.rows()) * 0.5f;\r\n\r\n        for(int bodyPart = 0; bodyPart < skeleton.length; ++bodyPart) {\r\n            PointF p            = skeleton[bodyPart];\r\n\r\n            if(Float.isNaN(p.x) || Float.isNaN(p.y))\r\n                continue;\r\n\r\n            int x               = (int) p.x;\r\n            int y               = (int) p.y;\r\n            float maxConfidence = heatMaps[0][y][x][bodyPart];\r\n\r\n            final int offset    = 1;\r\n            int minX            = Math.max(x - offset, 0);\r\n            int maxX            = Math.min(x + offset, heatMaps[0][0].length - 1);\r\n            int minY            = Math.max(y - offset, 0);\r\n            int maxY            = Math.min(y + offset, heatMaps[0].length - 1);\r\n            float total         = 0;\r\n\r\n            p.x = 0;\r\n            p.y = 0;\r\n            for(int ix = minX; ix <= maxX; ++ix) {\r\n                for(int iy = minY; iy <= maxY; ++iy) {\r\n                    float confidence = heatMaps[0][iy][ix][bodyPart];\r\n\r\n                    if(confidence < maxConfidence * 0.8f)\r\n                        continue;\r\n\r\n                    float xOffset = offsetVectors[0][iy][ix][bodyPart + skeleton.length];\r\n                    float yOffset = offsetVectors[0][iy][ix][bodyPart];\r\n\r\n                    p.x += (ix * STRIDE + STRIDE * 0.5f + xOffset - widthOffset) / scale * confidence;\r\n                    p.y += (iy * STRIDE + STRIDE * 0.5f + yOffset - heightOffset) / scale * confidence;\r\n                    total += confidence;\r\n                }\r\n            }\r\n\r\n            p.x /= total;\r\n            p.y /= total;\r\n\r\n  /*          float xOffset = offsetVectors[0][y][x][bodyPart + skeleton.length];\r\n            float yOffset = offsetVectors[0][y][x][bodyPart];\r\n            p.x = (x * STRIDE + STRIDE * 0.5f + xOffset - widthOffset) / scale;\r\n            p.y = (y * STRIDE + STRIDE * 0.5f + yOffset - heightOffset) / scale;\r\n  */      }\r\n\r\n        long startRelease = System.currentTimeMillis();\r\n        heatMapsTensor.close();\r\n        offsetVectorsTensor.close();\r\n        tensor.close();\r\n        long durationRelease = System.currentTimeMillis() - startRelease;\r\n//        System.out.println(\"Release: \" + durationRelease / 1000.0f);\r\n\r\n        return Arrays.asList(skeleton);\r\n    }\r\n\r\n    private static List<File> getAllFilePaths(File dir) {\r\n        List<File> result = new ArrayList<>();\r\n\r\n        for(File file : dir.listFiles()) {\r\n            if(file.isDirectory())\r\n                result.addAll(getAllFilePaths(file));\r\n            else\r\n                result.add(file);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n```","reactions":{"url":"https://api.github.com/repos/rwightman/posenet-python/issues/comments/568782218/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"b005t3r","id":757150,"node_id":"MDQ6VXNlcjc1NzE1MA==","avatar_url":"https://avatars.githubusercontent.com/u/757150?v=4","gravatar_id":"","url":"https://api.github.com/users/b005t3r","html_url":"https://github.com/b005t3r","followers_url":"https://api.github.com/users/b005t3r/followers","following_url":"https://api.github.com/users/b005t3r/following{/other_user}","gists_url":"https://api.github.com/users/b005t3r/gists{/gist_id}","starred_url":"https://api.github.com/users/b005t3r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b005t3r/subscriptions","organizations_url":"https://api.github.com/users/b005t3r/orgs","repos_url":"https://api.github.com/users/b005t3r/repos","events_url":"https://api.github.com/users/b005t3r/events{/privacy}","received_events_url":"https://api.github.com/users/b005t3r/received_events","type":"User","site_admin":false}},{"id":2907181258,"node_id":"MDE0Ok1lbnRpb25lZEV2ZW50MjkwNzE4MTI1OA==","url":"https://api.github.com/repos/rwightman/posenet-python/issues/events/2907181258","actor":{"login":"ctittel","id":42185809,"node_id":"MDQ6VXNlcjQyMTg1ODA5","avatar_url":"https://avatars.githubusercontent.com/u/42185809?v=4","gravatar_id":"","url":"https://api.github.com/users/ctittel","html_url":"https://github.com/ctittel","followers_url":"https://api.github.com/users/ctittel/followers","following_url":"https://api.github.com/users/ctittel/following{/other_user}","gists_url":"https://api.github.com/users/ctittel/gists{/gist_id}","starred_url":"https://api.github.com/users/ctittel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ctittel/subscriptions","organizations_url":"https://api.github.com/users/ctittel/orgs","repos_url":"https://api.github.com/users/ctittel/repos","events_url":"https://api.github.com/users/ctittel/events{/privacy}","received_events_url":"https://api.github.com/users/ctittel/received_events","type":"User","site_admin":false},"event":"mentioned","commit_id":null,"commit_url":null,"created_at":"2019-12-24T17:28:39Z","performed_via_github_app":null},{"id":2907181259,"node_id":"MDE1OlN1YnNjcmliZWRFdmVudDI5MDcxODEyNTk=","url":"https://api.github.com/repos/rwightman/posenet-python/issues/events/2907181259","actor":{"login":"ctittel","id":42185809,"node_id":"MDQ6VXNlcjQyMTg1ODA5","avatar_url":"https://avatars.githubusercontent.com/u/42185809?v=4","gravatar_id":"","url":"https://api.github.com/users/ctittel","html_url":"https://github.com/ctittel","followers_url":"https://api.github.com/users/ctittel/followers","following_url":"https://api.github.com/users/ctittel/following{/other_user}","gists_url":"https://api.github.com/users/ctittel/gists{/gist_id}","starred_url":"https://api.github.com/users/ctittel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ctittel/subscriptions","organizations_url":"https://api.github.com/users/ctittel/orgs","repos_url":"https://api.github.com/users/ctittel/repos","events_url":"https://api.github.com/users/ctittel/events{/privacy}","received_events_url":"https://api.github.com/users/ctittel/received_events","type":"User","site_admin":false},"event":"subscribed","commit_id":null,"commit_url":null,"created_at":"2019-12-24T17:28:39Z","performed_via_github_app":null},{"id":2908137374,"node_id":"MDExOkNsb3NlZEV2ZW50MjkwODEzNzM3NA==","url":"https://api.github.com/repos/rwightman/posenet-python/issues/events/2908137374","actor":{"login":"b005t3r","id":757150,"node_id":"MDQ6VXNlcjc1NzE1MA==","avatar_url":"https://avatars.githubusercontent.com/u/757150?v=4","gravatar_id":"","url":"https://api.github.com/users/b005t3r","html_url":"https://github.com/b005t3r","followers_url":"https://api.github.com/users/b005t3r/followers","following_url":"https://api.github.com/users/b005t3r/following{/other_user}","gists_url":"https://api.github.com/users/b005t3r/gists{/gist_id}","starred_url":"https://api.github.com/users/b005t3r/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/b005t3r/subscriptions","organizations_url":"https://api.github.com/users/b005t3r/orgs","repos_url":"https://api.github.com/users/b005t3r/repos","events_url":"https://api.github.com/users/b005t3r/events{/privacy}","received_events_url":"https://api.github.com/users/b005t3r/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2019-12-25T18:28:37Z","state_reason":null,"performed_via_github_app":null}]