{"url":"https://api.github.com/repos/catalyst-team/catalyst/issues/562","repository_url":"https://api.github.com/repos/catalyst-team/catalyst","labels_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/562/labels{/name}","comments_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/562/comments","events_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/562/events","html_url":"https://github.com/catalyst-team/catalyst/issues/562","id":540701844,"node_id":"MDU6SXNzdWU1NDA3MDE4NDQ=","number":562,"title":"Fixes required to run segmentation-tutorial.ipynb","user":{"login":"adriangrepo","id":37989457,"node_id":"MDQ6VXNlcjM3OTg5NDU3","avatar_url":"https://avatars.githubusercontent.com/u/37989457?v=4","gravatar_id":"","url":"https://api.github.com/users/adriangrepo","html_url":"https://github.com/adriangrepo","followers_url":"https://api.github.com/users/adriangrepo/followers","following_url":"https://api.github.com/users/adriangrepo/following{/other_user}","gists_url":"https://api.github.com/users/adriangrepo/gists{/gist_id}","starred_url":"https://api.github.com/users/adriangrepo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adriangrepo/subscriptions","organizations_url":"https://api.github.com/users/adriangrepo/orgs","repos_url":"https://api.github.com/users/adriangrepo/repos","events_url":"https://api.github.com/users/adriangrepo/events{/privacy}","received_events_url":"https://api.github.com/users/adriangrepo/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-12-20T02:13:49Z","updated_at":"2019-12-24T12:25:17Z","closed_at":"2019-12-24T12:25:17Z","author_association":"NONE","active_lock_reason":null,"body":"torch: 1.3.1, catalyst: 19.12.2\r\n\r\nTo get examples/notebooks/segmentation-tutorial.ipynb to train I made some modifications:\r\n\r\nsegmentation_models_pytorch api has changed since the nb was written, now need to do:\r\n\r\n`\r\n\r\n    import segmentation_models_pytorch as smp\r\n\r\n    aux_params=dict(\r\n        dropout=0.5,               # dropout ratio, default is None\r\n        classes=1,                 # define number of output labels\r\n    )\r\n\r\n    # We will use Feature Pyramid Network with pre-trained ResNeXt50 backbone\r\n    model = smp.FPN(encoder_name=\"resnext50_32x4d\", classes=1, aux_params=aux_params)\r\n`\r\n\r\nTo get tensorboard running in nb without error, need to load it:\r\n\r\n`\r\n\r\n    %load_ext tensorboard\r\n    %tensorboard --logdir {logdir}\r\n`\r\n\r\nthen in the catalyst codebase made the following hacks to get it to run:\r\n\r\ncatalyst.dl.callbacks.crtiterion.callbacks.py\r\n\r\n`\r\n\r\n    class CriterionCallback(...)\r\n\r\n        def _compute_loss(self, state: RunnerState, criterion):\r\n            output = self._get(state.output, self.output_key)\r\n            input = self._get(state.input, self.input_key)\r\n            if isinstance(output, tuple):    #added check\r\n                output=output[0]\r\n            loss = criterion(output, input)\r\n            return loss\r\n`\r\n\r\ncatalyst.dl.utils.criterion.iou.py\r\n\r\n`\r\n\r\n     def iuo(...)\r\n\r\n        activation_fn = get_activation_fn(activation)\r\n        if isinstance(outputs, tuple):    #added check\r\n            outputs = outputs[0]\r\n        outputs = activation_fn(outputs)\r\n`\r\n\r\ncatalyst.dl.utils.criterion.dice.py\r\n\r\n`\r\n\r\n    def dice(...)\r\n\r\n        activation_fn = get_activation_fn(activation)\r\n        if isinstance(outputs, tuple):    #aded check\r\n            outputs = outputs[0]\r\n        outputs = activation_fn(outputs)\r\n\r\n`\r\nThen for inference another hack:\r\n\r\n`\r\n\r\n    class InferCallback(Callback):\r\n        ....\r\n        def on_batch_end(self, state: RunnerState):\r\n            dct = state.output\r\n            for key, value in dct.items():    #modified to add check for tuple\r\n                if isinstance(value, tuple):\r\n                    dct[key] = value[0].detach().cpu().numpy()\r\n                else:\r\n                    dct[key] = value.detach().cpu().numpy()\r\n            for key, value in dct.items():\r\n                self.predictions[key].append(value)\r\n`\r\n\r\n\r\nI am guessing there may be a more robust way of dealing with the tuple vs Tensor errors that apear pre-fixes above.\r\n\r\nPre fix tuple / Tensor error shown below:\r\n\r\n/.../catalyst/dl/callbacks/criterion.py in _compute_loss(self, state, criterion)\r\n---> 78         loss = criterion(output, input)\r\n     79         return loss\r\n     80 \r\n     81     def on_stage_start(self, state: RunnerState):\r\n     82         \"\"\"\r\n\r\n~/.virtualenvs/catalyst_base/lib/python3.7/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    539             result = self._slow_forward(*input, **kwargs)\r\n    540         else:\r\n--> 541             result = self.forward(*input, **kwargs)\r\n    542         for hook in self._forward_hooks.values():\r\n    543             hook_result = hook(self, input, result)\r\n\r\n~/.virtualenvs/catalyst_base/lib/python3.7/site-packages/torch/nn/modules/loss.py in forward(self, input, target)\r\n    599                                                   self.weight,\r\n    600                                                   pos_weight=self.pos_weight,\r\n--> 601                                                   reduction=self.reduction)\r\n    602 \r\n    603 \r\n\r\n~/.virtualenvs/catalyst_base/lib/python3.7/site-packages/torch/nn/functional.py in binary_cross_entropy_with_logits(input, target, weight, size_average, reduce, reduction, pos_weight)\r\n   2109         reduction_enum = _Reduction.get_enum(reduction)\r\n   2110 \r\n-> 2111     if not (target.size() == input.size()):\r\n   2112         raise ValueError(\"Target size ({}) must be the same as input size ({})\".format(target.size(), input.size()))\r\n   2113 \r\n\r\nAttributeError: 'tuple' object has no attribute 'size'\r\n\r\n","closed_by":{"login":"Scitator","id":7606451,"node_id":"MDQ6VXNlcjc2MDY0NTE=","avatar_url":"https://avatars.githubusercontent.com/u/7606451?v=4","gravatar_id":"","url":"https://api.github.com/users/Scitator","html_url":"https://github.com/Scitator","followers_url":"https://api.github.com/users/Scitator/followers","following_url":"https://api.github.com/users/Scitator/following{/other_user}","gists_url":"https://api.github.com/users/Scitator/gists{/gist_id}","starred_url":"https://api.github.com/users/Scitator/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Scitator/subscriptions","organizations_url":"https://api.github.com/users/Scitator/orgs","repos_url":"https://api.github.com/users/Scitator/repos","events_url":"https://api.github.com/users/Scitator/events{/privacy}","received_events_url":"https://api.github.com/users/Scitator/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/catalyst-team/catalyst/issues/562/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/562/timeline","performed_via_github_app":null,"state_reason":"completed"}