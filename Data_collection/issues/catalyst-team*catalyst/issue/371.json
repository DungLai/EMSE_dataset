{"url":"https://api.github.com/repos/catalyst-team/catalyst/issues/371","repository_url":"https://api.github.com/repos/catalyst-team/catalyst","labels_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/371/labels{/name}","comments_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/371/comments","events_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/371/events","html_url":"https://github.com/catalyst-team/catalyst/issues/371","id":494965057,"node_id":"MDU6SXNzdWU0OTQ5NjUwNTc=","number":371,"title":" AttributeError: 'MulticlassDiceMetricCallback' object has no attribute 'order'","user":{"login":"ternaus","id":5481618,"node_id":"MDQ6VXNlcjU0ODE2MTg=","avatar_url":"https://avatars.githubusercontent.com/u/5481618?v=4","gravatar_id":"","url":"https://api.github.com/users/ternaus","html_url":"https://github.com/ternaus","followers_url":"https://api.github.com/users/ternaus/followers","following_url":"https://api.github.com/users/ternaus/following{/other_user}","gists_url":"https://api.github.com/users/ternaus/gists{/gist_id}","starred_url":"https://api.github.com/users/ternaus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ternaus/subscriptions","organizations_url":"https://api.github.com/users/ternaus/orgs","repos_url":"https://api.github.com/users/ternaus/repos","events_url":"https://api.github.com/users/ternaus/events{/privacy}","received_events_url":"https://api.github.com/users/ternaus/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2019-09-18T03:24:49Z","updated_at":"2019-09-27T07:54:19Z","closed_at":"2019-09-26T18:45:59Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"What exactly should I add to the Callback to avoid this error?\r\n```\r\nfrom typing import Dict\r\n\r\nimport numpy as np\r\nimport torch\r\nfrom catalyst.dl.core import Callback, RunnerState\r\n\r\n\r\ndef calculate_confusion_matrix_from_arrays(prediction, ground_truth, num_classes):\r\n    # a long 2xn array with each column being a pixel pair\r\n    replace_indices = np.vstack((ground_truth.flatten(), prediction.flatten())).T\r\n\r\n    # add up confusion matrix\r\n    confusion_matrix, _ = np.histogramdd(\r\n        replace_indices, bins=(num_classes, num_classes), range=[(0, num_classes), (0, num_classes)]\r\n    )\r\n    confusion_matrix = confusion_matrix.astype(np.uint64)\r\n    return confusion_matrix\r\n\r\n\r\ndef get_confusion_matrix(y_pred_logits: torch.Tensor, y_true: torch.Tensor):\r\n    num_classes = y_pred_logits.shape[1]\r\n    y_pred = torch.argmax(y_pred_logits, dim=1)\r\n    ground_truth = y_true.cpu().numpy()\r\n    prediction = y_pred.cpu().numpy()\r\n\r\n    return calculate_confusion_matrix_from_arrays(prediction, ground_truth, num_classes)\r\n\r\n\r\ndef calculate_tp_fp_fn(confusion_matrix):\r\n    true_positives = {}\r\n    false_positives = {}\r\n    false_negatives = {}\r\n\r\n    for index in range(confusion_matrix.shape[0]):\r\n        true_positives[index] = confusion_matrix[index, index]\r\n        false_positives[index] = confusion_matrix[:, index].sum() - true_positives[index]\r\n        false_negatives[index] = confusion_matrix[index, :].sum() - true_positives[index]\r\n\r\n    return {\"true_positives\": true_positives, \"false_positives\": false_positives, \"false_negatives\": false_negatives}\r\n\r\n\r\ndef calculate_dice(tp_fp_fn_dict):\r\n    epsilon = 1e-7\r\n\r\n    dice = {}\r\n\r\n    for i in range(len(tp_fp_fn_dict[\"true_positives\"])):\r\n        tp = tp_fp_fn_dict[\"true_positives\"][i]\r\n        fp = tp_fp_fn_dict[\"false_positives\"][i]\r\n        fn = tp_fp_fn_dict[\"true_positives\"][i]\r\n\r\n        dice[i] = (2 * tp + epsilon) / (2 * tp + fp + fn + epsilon)\r\n\r\n        assert 0 <= dice[i] <= 1\r\n\r\n    return dice\r\n\r\n\r\nclass MulticlassDiceMetricCallback(Callback):\r\n    \"\"\"\r\n    A callback that returns dictionary\r\n    \"\"\"\r\n\r\n    def __init__(self, prefix: str = \"dice\", input_key: str = \"targets\", output_key: str = \"logits\", **metric_params):\r\n        self.prefix = prefix\r\n        self.input_key = input_key\r\n        self.output_key = output_key\r\n        self.metric_params = metric_params\r\n        self.confusion_matrix = None\r\n        self.class_names = metric_params[\"class_names\"]\r\n\r\n    def _reset_stats(self):\r\n        self.confusion_matrix = None\r\n\r\n    def on_batch_end(self, state: RunnerState):\r\n        outputs = state.output[self.output_key]\r\n        targets = state.input[self.input_key]\r\n\r\n        confusion_matrix = get_confusion_matrix(outputs, targets)\r\n\r\n        if self.confusion_matrix is None:\r\n            self.confusion_matrix = confusion_matrix\r\n        else:\r\n            self.confusion_matrix += confusion_matrix\r\n\r\n        tp_fp_fn_dict = calculate_tp_fp_fn(confusion_matrix)\r\n\r\n        batch_metrics: Dict = {self.class_names[key]: value for key, value in calculate_dice(tp_fp_fn_dict).items()}\r\n\r\n        state.metrics.add_batch_value(metrics_dict=batch_metrics)\r\n\r\n    def on_loader_end(self, state: RunnerState):\r\n\r\n        tp_fp_fn_dict = calculate_tp_fp_fn(self.confusion_matrix)\r\n\r\n        batch_metrics: Dict = calculate_dice(tp_fp_fn_dict)\r\n\r\n        for metric_id, dice_value in batch_metrics.items():\r\n            metric_name = self.class_names[metric_id]\r\n            state.metrics.epoch_values[state.loader_name][metric_name] = dice_value\r\n\r\n        self._reset_stats()\r\n\r\n```","closed_by":{"login":"ternaus","id":5481618,"node_id":"MDQ6VXNlcjU0ODE2MTg=","avatar_url":"https://avatars.githubusercontent.com/u/5481618?v=4","gravatar_id":"","url":"https://api.github.com/users/ternaus","html_url":"https://github.com/ternaus","followers_url":"https://api.github.com/users/ternaus/followers","following_url":"https://api.github.com/users/ternaus/following{/other_user}","gists_url":"https://api.github.com/users/ternaus/gists{/gist_id}","starred_url":"https://api.github.com/users/ternaus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ternaus/subscriptions","organizations_url":"https://api.github.com/users/ternaus/orgs","repos_url":"https://api.github.com/users/ternaus/repos","events_url":"https://api.github.com/users/ternaus/events{/privacy}","received_events_url":"https://api.github.com/users/ternaus/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/catalyst-team/catalyst/issues/371/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/371/timeline","performed_via_github_app":null,"state_reason":"completed"}