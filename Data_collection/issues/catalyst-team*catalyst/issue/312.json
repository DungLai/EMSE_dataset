{"url":"https://api.github.com/repos/catalyst-team/catalyst/issues/312","repository_url":"https://api.github.com/repos/catalyst-team/catalyst","labels_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/312/labels{/name}","comments_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/312/comments","events_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/312/events","html_url":"https://github.com/catalyst-team/catalyst/issues/312","id":482398624,"node_id":"MDU6SXNzdWU0ODIzOTg2MjQ=","number":312,"title":"[feature] add multiple model/optimizer/criterion/scheduler support in single stage","user":{"login":"asmekal","id":14358106,"node_id":"MDQ6VXNlcjE0MzU4MTA2","avatar_url":"https://avatars.githubusercontent.com/u/14358106?v=4","gravatar_id":"","url":"https://api.github.com/users/asmekal","html_url":"https://github.com/asmekal","followers_url":"https://api.github.com/users/asmekal/followers","following_url":"https://api.github.com/users/asmekal/following{/other_user}","gists_url":"https://api.github.com/users/asmekal/gists{/gist_id}","starred_url":"https://api.github.com/users/asmekal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/asmekal/subscriptions","organizations_url":"https://api.github.com/users/asmekal/orgs","repos_url":"https://api.github.com/users/asmekal/repos","events_url":"https://api.github.com/users/asmekal/events{/privacy}","received_events_url":"https://api.github.com/users/asmekal/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-08-19T16:06:19Z","updated_at":"2019-10-05T00:00:10Z","closed_at":"2019-10-05T00:00:09Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"For now there is no support for multiple models/optimizers/etc in the single stage of an experiment, which is essential, for instance, for GAN training.\r\n\r\nMy suggestion is the following:\r\n1. Refactor `RunnerState` to have all model/optimizer/scheduler/criterior attributes in plural form (model**s**/optimizer**s**/scheduler**s**/criterion**s**) in form of `OrderedDict`. Or alternatively subclass `MultiModelRunnerState(RunnerState)` with such properties.\r\n2. Add `ActivationCallback` - which role is to turn on/off backprop of models and to choose optimizers/schedulers/criterions which are important and needed to be called at the moment (see example below).\r\n3. Support multiple/composite models, multiple optimizers/schedulers/criterions reading from config. Add `activity_params` to optimizers/schedulers/criterions/models in config which specifies when they will be activated.\r\n4. Add simple GAN example which will use all that functionality\r\n\r\nThe approximate look of the proposed scheme:\r\n```python\r\n# begin batch event\r\ndef activity_callback.on_batch_begin(self, state):\r\n        # set models train/eval mode\r\n        if state.need_backward:  # we are in train loader\r\n            for model_name, model in state.models.items():\r\n                active_on, activity_period = state.activity_params[model_name]\r\n                if state.training_step % activity_period in active_on:\r\n                    model.eval()\r\n                else:\r\n                    model.train()\r\n            self.active_optimizers = [is_active(state.training_step, state.activity_params[opt] for opt in state.optimizers]\r\n            self.active_schedulers = [is_active(state.training_step, state.activity_params[opt] for opt in state.schedulers]\r\n            self.active_criterions = [is_active(state.training_step, state.activity_params[opt] for opt in state.criterions]\r\n        else:  # we are in valid/infer loader\r\n            self.active_optimizers = self.optimizers.values()\r\n            self.active_schedulers = self.schedulers.values()\r\n            self.active_criterions = self.criterions.values()\r\n\r\n# optimizer_callback sets state.loss = None\r\n# scheduler_callback & criterion_callback do nothing\r\n# begin batch event end\r\n\r\n# batch prediction\r\n\r\n# end batch event\r\n# activity callback -> do nothing\r\ncriterion_callback: for crit in state.active_optimizers: crit.compute_loss()\r\noptimizer_callback: for optim in state.active_optimizers: optim.step()\r\nscheduler_callback: for optim in state.active_optimizers: optim.step()\r\n# end batch event end\r\n```\r\n\r\nconfig.yml (for this part I am unsure what is the best way to write this config to make it look less repetitive):\r\n```yaml\r\nmodel_params:\r\n  model:\r\n    generator:\r\n      model: SimpleGenerator\r\n      ... # SimpleGenerator params\r\n      activity_period: 6\r\n      active_on: [5]\r\n    discriminator:\r\n      model: SimpleDiscriminator\r\n      ... # SimpleDiscriminator params\r\n      activity_period: 6\r\n      active_on: [0, 1, 2, 3, 4]\r\n```\r\n\r\nI think the most complicated/boring part with this may be config organization/parsing/registering models part. The rest is quite clear for me, so the implementation may be devided into:\r\n1. No-config example (pp 1, 2, 4)\r\n2. Config example + parsing + registering (pp 3)","closed_by":{"login":"asmekal","id":14358106,"node_id":"MDQ6VXNlcjE0MzU4MTA2","avatar_url":"https://avatars.githubusercontent.com/u/14358106?v=4","gravatar_id":"","url":"https://api.github.com/users/asmekal","html_url":"https://github.com/asmekal","followers_url":"https://api.github.com/users/asmekal/followers","following_url":"https://api.github.com/users/asmekal/following{/other_user}","gists_url":"https://api.github.com/users/asmekal/gists{/gist_id}","starred_url":"https://api.github.com/users/asmekal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/asmekal/subscriptions","organizations_url":"https://api.github.com/users/asmekal/orgs","repos_url":"https://api.github.com/users/asmekal/repos","events_url":"https://api.github.com/users/asmekal/events{/privacy}","received_events_url":"https://api.github.com/users/asmekal/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/catalyst-team/catalyst/issues/312/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/312/timeline","performed_via_github_app":null,"state_reason":"completed"}