{"url":"https://api.github.com/repos/catalyst-team/catalyst/issues/344","repository_url":"https://api.github.com/repos/catalyst-team/catalyst","labels_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/344/labels{/name}","comments_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/344/comments","events_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/344/events","html_url":"https://github.com/catalyst-team/catalyst/issues/344","id":488177547,"node_id":"MDU6SXNzdWU0ODgxNzc1NDc=","number":344,"title":"[proposal] Visdom support","user":{"login":"devforfu","id":6022009,"node_id":"MDQ6VXNlcjYwMjIwMDk=","avatar_url":"https://avatars.githubusercontent.com/u/6022009?v=4","gravatar_id":"","url":"https://api.github.com/users/devforfu","html_url":"https://github.com/devforfu","followers_url":"https://api.github.com/users/devforfu/followers","following_url":"https://api.github.com/users/devforfu/following{/other_user}","gists_url":"https://api.github.com/users/devforfu/gists{/gist_id}","starred_url":"https://api.github.com/users/devforfu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/devforfu/subscriptions","organizations_url":"https://api.github.com/users/devforfu/orgs","repos_url":"https://api.github.com/users/devforfu/repos","events_url":"https://api.github.com/users/devforfu/events{/privacy}","received_events_url":"https://api.github.com/users/devforfu/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-09-02T12:56:48Z","updated_at":"2020-01-31T05:54:40Z","closed_at":"2020-01-31T05:54:40Z","author_association":"NONE","active_lock_reason":null,"body":"You probably know about a great dashboard library called [`visdom`](https://github.com/facebookresearch/visdom) that helps to easily report training logs and stats when working with PyTorch. Especially for basic cases when one just needs to draw a loss curve. For example, if you want to send a tensor parameter into dashboard, you can do something like this:\r\n```python\r\nvis = Visdom(**visdom_params)\r\nvis.line(X=[step], Y=[value], win='loss', name='train_loss', update='append')\r\n```\r\nAnd the value will show up in the dashboard's window. \r\n\r\nIt would be great to have at least some basic integration with the `catalyst` library, like this simple callback:\r\n```python\r\nimport os\r\nfrom catalyst.dl.core import Callback\r\nfrom visdom import Visdom\r\n\r\nclass VisdomCallback(Callback):\r\n    \r\n    def __init__(self, \r\n                 username='username', password='password', \r\n                 host='0.0.0.0', port=9090, use_env_creds=False):\r\n        \"\"\"\r\n        Args:\r\n            username (str): Visdom server username.\r\n            password (str): Visdom server password.\r\n            host (str): Visdom server address.\r\n            port (int): Visdom server port.\r\n            use_env_creds (bool): If True, then ignore credentials\r\n                passed as __init__ parameters and use Visdom \r\n                environment variables instead.\r\n        \"\"\"\r\n        \r\n        super().__init__()\r\n\r\n        if use_env_creds:\r\n            username = os.environ['VISDOM_USERNAME']\r\n            password = os.environ['VISDOM_PASSWORD']\r\n            \r\n        self.vis = Visdom(\r\n            username=username, password=password,\r\n            server=host, port=port)        \r\n\r\n        \r\nclass BatchMetricsPlotCallback(VisdomCallback):\r\n\r\n    def on_batch_end(self, state):\r\n        for k, v in state.metrics.batch_values.items():\r\n            self.vis.line(X=[state.step], Y=[v], win=k, name=k, update='append')\r\n```\r\n\r\nDo you think that could be a good idea to include something like this into `catalyst`? Would be glad to hear your thoughts.","closed_by":{"login":"Scitator","id":7606451,"node_id":"MDQ6VXNlcjc2MDY0NTE=","avatar_url":"https://avatars.githubusercontent.com/u/7606451?v=4","gravatar_id":"","url":"https://api.github.com/users/Scitator","html_url":"https://github.com/Scitator","followers_url":"https://api.github.com/users/Scitator/followers","following_url":"https://api.github.com/users/Scitator/following{/other_user}","gists_url":"https://api.github.com/users/Scitator/gists{/gist_id}","starred_url":"https://api.github.com/users/Scitator/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Scitator/subscriptions","organizations_url":"https://api.github.com/users/Scitator/orgs","repos_url":"https://api.github.com/users/Scitator/repos","events_url":"https://api.github.com/users/Scitator/events{/privacy}","received_events_url":"https://api.github.com/users/Scitator/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/catalyst-team/catalyst/issues/344/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/catalyst-team/catalyst/issues/344/timeline","performed_via_github_app":null,"state_reason":"completed"}