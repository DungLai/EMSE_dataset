[{"id":2737748809,"node_id":"MDEyOkxhYmVsZWRFdmVudDI3Mzc3NDg4MDk=","url":"https://api.github.com/repos/mozilla/bugbug/issues/events/2737748809","actor":{"login":"marco-c","id":1616846,"node_id":"MDQ6VXNlcjE2MTY4NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1616846?v=4","gravatar_id":"","url":"https://api.github.com/users/marco-c","html_url":"https://github.com/marco-c","followers_url":"https://api.github.com/users/marco-c/followers","following_url":"https://api.github.com/users/marco-c/following{/other_user}","gists_url":"https://api.github.com/users/marco-c/gists{/gist_id}","starred_url":"https://api.github.com/users/marco-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marco-c/subscriptions","organizations_url":"https://api.github.com/users/marco-c/orgs","repos_url":"https://api.github.com/users/marco-c/repos","events_url":"https://api.github.com/users/marco-c/events{/privacy}","received_events_url":"https://api.github.com/users/marco-c/received_events","type":"User","site_admin":false},"event":"labeled","commit_id":null,"commit_url":null,"created_at":"2019-10-23T16:28:34Z","label":{"name":"enhancement","color":"a2eeef"},"performed_via_github_app":null},{"url":"https://api.github.com/repos/mozilla/bugbug/issues/comments/592229288","html_url":"https://github.com/mozilla/bugbug/issues/1037#issuecomment-592229288","issue_url":"https://api.github.com/repos/mozilla/bugbug/issues/1037","id":592229288,"node_id":"MDEyOklzc3VlQ29tbWVudDU5MjIyOTI4OA==","user":{"login":"marco-c","id":1616846,"node_id":"MDQ6VXNlcjE2MTY4NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1616846?v=4","gravatar_id":"","url":"https://api.github.com/users/marco-c","html_url":"https://github.com/marco-c","followers_url":"https://api.github.com/users/marco-c/followers","following_url":"https://api.github.com/users/marco-c/following{/other_user}","gists_url":"https://api.github.com/users/marco-c/gists{/gist_id}","starred_url":"https://api.github.com/users/marco-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marco-c/subscriptions","organizations_url":"https://api.github.com/users/marco-c/orgs","repos_url":"https://api.github.com/users/marco-c/repos","events_url":"https://api.github.com/users/marco-c/events{/privacy}","received_events_url":"https://api.github.com/users/marco-c/received_events","type":"User","site_admin":false},"created_at":"2020-02-27T23:25:57Z","updated_at":"2020-02-27T23:26:08Z","author_association":"COLLABORATOR","body":"I've tried:\r\n```Python\r\nimport pickle\r\nimport random\r\nimport time\r\nfrom collections import deque\r\nimport numpy as np\r\n\r\n\r\nclass ExpQueue:\r\n    def __init__(self, start_day, maxlen, default):\r\n        self.list = deque([default] * maxlen, maxlen=maxlen)\r\n        self.start_day = start_day - (maxlen - 1)\r\n        self.default = default\r\n\r\n    def __getstate__(self):\r\n        return (self.list, self.start_day, self.default)\r\n\r\n    def __setstate__(self, newstate):\r\n        self.list = newstate[0]\r\n        self.start_day = newstate[1]\r\n        self.default = newstate[2]\r\n\r\n    def __deepcopy__(self, memo):\r\n        result = ExpQueue.__new__(ExpQueue)\r\n\r\n        # We don't need to deepcopy the list, as elements in the list are immutable.\r\n        result.list = self.list.copy()\r\n        result.start_day = self.start_day\r\n        result.default = self.default\r\n\r\n        return result\r\n\r\n    @property\r\n    def last_day(self):\r\n        return self.start_day + (self.list.maxlen - 1)\r\n\r\n    def __getitem__(self, day):\r\n        assert (\r\n            day >= self.start_day\r\n        ), f\"Can't get a day ({day}) from earlier than start day ({self.start_day})\"\r\n\r\n        if day < 0:\r\n            return self.default\r\n\r\n        if day > self.last_day:\r\n            return self.list[-1]\r\n\r\n        return self.list[day - self.start_day]\r\n\r\n    def __setitem__(self, day, value):\r\n        if day == self.last_day:\r\n            self.list[day - self.start_day] = value\r\n        elif day > self.last_day:\r\n            last_val = self.list[-1]\r\n            # We need to extend the list except for 2 elements (the last, which\r\n            # is going to be the same, and the one we are adding now).\r\n            range_end = min(day - self.last_day, self.list.maxlen) - 2\r\n            if range_end > 0:\r\n                self.list.extend(last_val for _ in range(range_end))\r\n\r\n            self.start_day = day - (self.list.maxlen - 1)\r\n\r\n            self.list.append(value)\r\n        else:\r\n            assert False, \"Can't insert in the past\"\r\n\r\n        assert day == self.last_day\r\n\r\n\r\nclass ExpQueueSmaller:\r\n    def __init__(self, start_day, maxlen, default):\r\n        self.list = deque([default] * maxlen, maxlen=maxlen)\r\n        self.start_day = start_day - (maxlen - 1)\r\n        self.default = default\r\n\r\n    def save(self):\r\n        ret = np.zeros(2 + len(self.list), dtype=np.int32)\r\n        ret[0] = self.start_day\r\n        ret[1] = self.default\r\n        ret[2:] = self.list\r\n        return ret.tobytes()\r\n\r\n    def __getstate__(self):\r\n        ret = np.zeros(2 + len(self.list), dtype=np.int32)\r\n        ret[0] = self.start_day\r\n        ret[1] = self.default\r\n        ret[2:] = self.list\r\n        return ret.tobytes()\r\n\r\n    def __setstate__(self, newstate):\r\n        self.start_day = newstate[0]\r\n        self.default = newstate[1]\r\n        self.list = newstate[2:]\r\n\r\n    def __deepcopy__(self, memo):\r\n        result = ExpQueue.__new__(ExpQueue)\r\n\r\n        # We don't need to deepcopy the list, as elements in the list are immutable.\r\n        result.list = self.list.copy()\r\n        result.start_day = self.start_day\r\n        result.default = self.default\r\n\r\n        return result\r\n\r\n    @property\r\n    def last_day(self):\r\n        return self.start_day + (self.list.maxlen - 1)\r\n\r\n    def __getitem__(self, day):\r\n        assert (\r\n            day >= self.start_day\r\n        ), f\"Can't get a day ({day}) from earlier than start day ({self.start_day})\"\r\n\r\n        if day < 0:\r\n            return self.default\r\n\r\n        if day > self.last_day:\r\n            return self.list[-1]\r\n\r\n        return self.list[day - self.start_day]\r\n\r\n    def __setitem__(self, day, value):\r\n        if day == self.last_day:\r\n            self.list[day - self.start_day] = value\r\n        elif day > self.last_day:\r\n            last_val = self.list[-1]\r\n            # We need to extend the list except for 2 elements (the last, which\r\n            # is going to be the same, and the one we are adding now).\r\n            range_end = min(day - self.last_day, self.list.maxlen) - 2\r\n            if range_end > 0:\r\n                self.list.extend(last_val for _ in range(range_end))\r\n\r\n            self.start_day = day - (self.list.maxlen - 1)\r\n\r\n            self.list.append(value)\r\n        else:\r\n            assert False, \"Can't insert in the past\"\r\n\r\n        assert day == self.last_day\r\n\r\n\r\nmy1 = ExpQueue(0, 91, 0)\r\nmy2 = ExpQueueSmaller(0, 91, 0)\r\nfor i in range(91):\r\n    a = random.randint(1, 900000)\r\n    my1[i] = a\r\n    my2[i] = a\r\n\r\nprint(\"Dumping orig\")\r\nprint(pickle.dumps(my1, protocol=pickle.HIGHEST_PROTOCOL))\r\nprint(len(pickle.dumps(my1, protocol=pickle.HIGHEST_PROTOCOL)))\r\nstart = time.process_time()\r\nfor i in range(70000):\r\n    pickle.dumps(my1, protocol=pickle.HIGHEST_PROTOCOL)\r\nprint(time.process_time() - start)\r\n\r\nprint(\"Dumping modi\")\r\nprint(pickle.dumps(my2, protocol=pickle.HIGHEST_PROTOCOL))\r\nprint(len(pickle.dumps(my2, protocol=pickle.HIGHEST_PROTOCOL)))\r\nstart = time.process_time()\r\nfor i in range(70000):\r\n    pickle.dumps(my2, protocol=pickle.HIGHEST_PROTOCOL)\r\nprint(time.process_time() - start)\r\n\r\nprint(\"Dumping save\")\r\nprint(my2.save())\r\nprint(len(my2.save()))\r\nstart = time.process_time()\r\nfor i in range(70000):\r\n    my2.save()\r\nprint(time.process_time() - start)\r\n\r\nprint(my1.list)\r\nprint(pickle.loads(pickle.dumps(my1)).list)\r\n\r\nwith open(\"data/commit_experiences.pickle\", \"rb\") as f:\r\n    experiences, first_commit_time = pickle.load(f)\r\n\r\nconverted_experiences1 = {}\r\nconverted_experiences2 = {}\r\nfor exp_type in experiences.keys():\r\n    if exp_type not in converted_experiences1:\r\n        converted_experiences1[exp_type] = {}\r\n        converted_experiences2[exp_type] = {}\r\n\r\n    for commit_type in experiences[exp_type].keys():\r\n        if commit_type not in converted_experiences1[exp_type]:\r\n            converted_experiences1[exp_type][commit_type] = {}\r\n            converted_experiences2[exp_type][commit_type] = {}\r\n\r\n        for item, val in experiences[exp_type][commit_type].items():\r\n            if val.default != 0:\r\n                continue\r\n\r\n            converted_experiences1[exp_type][commit_type][item] = val\r\n\r\n            ret = np.zeros(2 + len(val.list), dtype=np.int32)\r\n            ret[0] = val.start_day\r\n            ret[1] = val.default\r\n            ret[2:] = val.list\r\n            converted_experiences2[exp_type][commit_type][item] = ret.tobytes()\r\n\r\nwith open(\"prova-exp1.pickle\", \"wb\") as f:\r\n    pickle.dump(converted_experiences1, f)\r\n\r\nwith open(\"prova-exp2.pickle\", \"wb\") as f:\r\n    pickle.dump(converted_experiences2, f)\r\n```\r\n\r\nIt didn't help. Infact, the result with deque seems smaller (probably because many numbers are small).","reactions":{"url":"https://api.github.com/repos/mozilla/bugbug/issues/comments/592229288/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"marco-c","id":1616846,"node_id":"MDQ6VXNlcjE2MTY4NDY=","avatar_url":"https://avatars.githubusercontent.com/u/1616846?v=4","gravatar_id":"","url":"https://api.github.com/users/marco-c","html_url":"https://github.com/marco-c","followers_url":"https://api.github.com/users/marco-c/followers","following_url":"https://api.github.com/users/marco-c/following{/other_user}","gists_url":"https://api.github.com/users/marco-c/gists{/gist_id}","starred_url":"https://api.github.com/users/marco-c/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/marco-c/subscriptions","organizations_url":"https://api.github.com/users/marco-c/orgs","repos_url":"https://api.github.com/users/marco-c/repos","events_url":"https://api.github.com/users/marco-c/events{/privacy}","received_events_url":"https://api.github.com/users/marco-c/received_events","type":"User","site_admin":false}}]