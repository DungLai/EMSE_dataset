{"url":"https://api.github.com/repos/nubank/fklearn/issues/175","repository_url":"https://api.github.com/repos/nubank/fklearn","labels_url":"https://api.github.com/repos/nubank/fklearn/issues/175/labels{/name}","comments_url":"https://api.github.com/repos/nubank/fklearn/issues/175/comments","events_url":"https://api.github.com/repos/nubank/fklearn/issues/175/events","html_url":"https://github.com/nubank/fklearn/issues/175","id":1056149614,"node_id":"I_kwDOCk64ls4-85Bu","number":175,"title":"Double/Debiased Resusing Models when Curried","user":{"login":"matheusfacure","id":18542597,"node_id":"MDQ6VXNlcjE4NTQyNTk3","avatar_url":"https://avatars.githubusercontent.com/u/18542597?v=4","gravatar_id":"","url":"https://api.github.com/users/matheusfacure","html_url":"https://github.com/matheusfacure","followers_url":"https://api.github.com/users/matheusfacure/followers","following_url":"https://api.github.com/users/matheusfacure/following{/other_user}","gists_url":"https://api.github.com/users/matheusfacure/gists{/gist_id}","starred_url":"https://api.github.com/users/matheusfacure/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/matheusfacure/subscriptions","organizations_url":"https://api.github.com/users/matheusfacure/orgs","repos_url":"https://api.github.com/users/matheusfacure/repos","events_url":"https://api.github.com/users/matheusfacure/events{/privacy}","received_events_url":"https://api.github.com/users/matheusfacure/received_events","type":"User","site_admin":false},"labels":[{"id":1251232928,"node_id":"MDU6TGFiZWwxMjUxMjMyOTI4","url":"https://api.github.com/repos/nubank/fklearn/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-11-17T13:45:24Z","updated_at":"2021-11-17T18:18:13Z","closed_at":"2021-11-17T18:18:13Z","author_association":"MEMBER","active_lock_reason":null,"body":"### Code sample\r\nA common pattern in fklearn is to partially define a training function to create a `fit_fn` that will later be reused. For example, let's say we want to do feature selection. We can create a `fit_fn` passing all the parameters to a learner but the `feature_columns`\r\n\r\n```python\r\nfit_fn = non_parametric_double_ml_learner(\r\n    df=train_set_eng.head(10000),\r\n    treatment_column = treatment,\r\n    outcome_column = outcome,\r\n    debias_model = LGBMRegressor(),\r\n    denoise_model = LGBMRegressor(),\r\n    final_model = LGBMRegressor(),\r\n    prediction_column= \"dml_elast_prediction\",\r\n)\r\n```\r\nThen, we can try estimating the above model with different feature sets. For example, we can fit a model with only 3  (`m1`) features and another one with 6 features (`m2`). \r\n\r\n```python\r\nf1 = features[:3]\r\nf2 = features[:6]\r\n\r\nm1 = fit_fn(feature_columns=f1)[0]\r\nm2 = fit_fn(feature_columns=f2)[0]\r\n````\r\n\r\nHowever, once we try to make predictions with the first model, we get the following error\r\n\r\n```python\r\nm1(train_set_eng[f1].head())[\"dml_elast_prediction\"]\r\n```\r\n```\r\nValueError: Number of features of the model must match the input. Model n_features_ is 6 and input n_features is 3 \r\n```\r\n\r\nSo, `m1` is requiring 6 features? But we only trained it with 3? What is happening?\r\n\r\n### Problem description\r\nThe problem is that fklearn is reusing the same instance of the model parameters in the learner function\r\n\r\n```python\r\ndebias_model = LGBMRegressor(),\r\ndenoise_model = LGBMRegressor(),\r\nfinal_model = LGBMRegressor(),\r\n```\r\n\r\nThat way, since we train `m2` after `m1` and we reuse instance across both models, `m1` ends up having the model instance from `m2`, which requires 6 features. \r\n\r\n### Possible solutions\r\nOne easy solution is to use `from sklearn.base import clone` in the learner [here](https://github.com/nubank/fklearn/blob/ca1d8bd5b0667a5b9076fe02cc840f31e52b4ae1/src/fklearn/causal/cate_learning/double_machine_learning.py#L117)\r\n\r\n```python\r\ndebias_model = GradientBoostingRegressor() if not debias_model else clone(debias_model)\r\ndenoise_model = GradientBoostingRegressor() if not denoise_model else clone(denoise_model)\r\nfinal_model = GradientBoostingRegressor() if not final_model else clone(final_model)\r\n```\r\n\r\nThat ensures we are always creating a new instance when calling this learner function. \r\n\r\nThis is probably happening here too \r\nhttps://github.com/nubank/fklearn/blob/ca1d8bd5b0667a5b9076fe02cc840f31e52b4ae1/src/fklearn/causal/cate_learning/double_machine_learning.py#L29","closed_by":{"login":"matheusfacure","id":18542597,"node_id":"MDQ6VXNlcjE4NTQyNTk3","avatar_url":"https://avatars.githubusercontent.com/u/18542597?v=4","gravatar_id":"","url":"https://api.github.com/users/matheusfacure","html_url":"https://github.com/matheusfacure","followers_url":"https://api.github.com/users/matheusfacure/followers","following_url":"https://api.github.com/users/matheusfacure/following{/other_user}","gists_url":"https://api.github.com/users/matheusfacure/gists{/gist_id}","starred_url":"https://api.github.com/users/matheusfacure/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/matheusfacure/subscriptions","organizations_url":"https://api.github.com/users/matheusfacure/orgs","repos_url":"https://api.github.com/users/matheusfacure/repos","events_url":"https://api.github.com/users/matheusfacure/events{/privacy}","received_events_url":"https://api.github.com/users/matheusfacure/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/nubank/fklearn/issues/175/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/nubank/fklearn/issues/175/timeline","performed_via_github_app":null,"state_reason":"completed"}