{"url":"https://api.github.com/repos/nubank/fklearn/issues/70","repository_url":"https://api.github.com/repos/nubank/fklearn","labels_url":"https://api.github.com/repos/nubank/fklearn/issues/70/labels{/name}","comments_url":"https://api.github.com/repos/nubank/fklearn/issues/70/comments","events_url":"https://api.github.com/repos/nubank/fklearn/issues/70/events","html_url":"https://github.com/nubank/fklearn/issues/70","id":448502645,"node_id":"MDU6SXNzdWU0NDg1MDI2NDU=","number":70,"title":"Functional that adds a custom model to the pipeline","user":{"login":"vultor33","id":16596383,"node_id":"MDQ6VXNlcjE2NTk2Mzgz","avatar_url":"https://avatars.githubusercontent.com/u/16596383?v=4","gravatar_id":"","url":"https://api.github.com/users/vultor33","html_url":"https://github.com/vultor33","followers_url":"https://api.github.com/users/vultor33/followers","following_url":"https://api.github.com/users/vultor33/following{/other_user}","gists_url":"https://api.github.com/users/vultor33/gists{/gist_id}","starred_url":"https://api.github.com/users/vultor33/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vultor33/subscriptions","organizations_url":"https://api.github.com/users/vultor33/orgs","repos_url":"https://api.github.com/users/vultor33/repos","events_url":"https://api.github.com/users/vultor33/events{/privacy}","received_events_url":"https://api.github.com/users/vultor33/received_events","type":"User","site_admin":false},"labels":[{"id":1251232930,"node_id":"MDU6TGFiZWwxMjUxMjMyOTMw","url":"https://api.github.com/repos/nubank/fklearn/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1251232935,"node_id":"MDU6TGFiZWwxMjUxMjMyOTM1","url":"https://api.github.com/repos/nubank/fklearn/labels/good%20first%20issue","name":"good first issue","color":"7057ff","default":true,"description":"Good for newcomers"}],"state":"closed","locked":false,"assignee":{"login":"vultor33","id":16596383,"node_id":"MDQ6VXNlcjE2NTk2Mzgz","avatar_url":"https://avatars.githubusercontent.com/u/16596383?v=4","gravatar_id":"","url":"https://api.github.com/users/vultor33","html_url":"https://github.com/vultor33","followers_url":"https://api.github.com/users/vultor33/followers","following_url":"https://api.github.com/users/vultor33/following{/other_user}","gists_url":"https://api.github.com/users/vultor33/gists{/gist_id}","starred_url":"https://api.github.com/users/vultor33/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vultor33/subscriptions","organizations_url":"https://api.github.com/users/vultor33/orgs","repos_url":"https://api.github.com/users/vultor33/repos","events_url":"https://api.github.com/users/vultor33/events{/privacy}","received_events_url":"https://api.github.com/users/vultor33/received_events","type":"User","site_admin":false},"assignees":[{"login":"vultor33","id":16596383,"node_id":"MDQ6VXNlcjE2NTk2Mzgz","avatar_url":"https://avatars.githubusercontent.com/u/16596383?v=4","gravatar_id":"","url":"https://api.github.com/users/vultor33","html_url":"https://github.com/vultor33","followers_url":"https://api.github.com/users/vultor33/followers","following_url":"https://api.github.com/users/vultor33/following{/other_user}","gists_url":"https://api.github.com/users/vultor33/gists{/gist_id}","starred_url":"https://api.github.com/users/vultor33/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vultor33/subscriptions","organizations_url":"https://api.github.com/users/vultor33/orgs","repos_url":"https://api.github.com/users/vultor33/repos","events_url":"https://api.github.com/users/vultor33/events{/privacy}","received_events_url":"https://api.github.com/users/vultor33/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2019-05-25T21:06:29Z","updated_at":"2019-07-25T18:33:58Z","closed_at":"2019-07-25T18:33:58Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Instructions\r\n\r\nI believe people should be free to use any model they want.\r\nSo, I guess should be some custom model functional that let people add any model they want to the pipeline.\r\nI had done something for me here, maybe could be of some use.\r\n\r\n### Describe the feature and the current state.\r\n\r\nFor supervised machine learning there are a limited amount of avaible models.\r\nI couldn't find a simple way to add a new model, like a GaussianProcessRegressor, to the pipeline.\r\n\r\n### Proposed solution\r\nHere is what I had done. Maybe could be useful as an inspiration.\r\n\r\n(You could just copy and paste this code on a jupyter notebook with fklearn installed that it should work)\r\n\r\nFUNCTIONAL DEFINITION\r\n\r\n```\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom typing import List, Any, Dict\r\nfrom toolz import curry, merge, assoc\r\n\r\nfrom fklearn.types import LearnerReturnType, LogType\r\nfrom fklearn.common_docstrings import learner_return_docstring, learner_pred_fn_docstring\r\nfrom fklearn.training.utils import log_learner_time\r\n\r\n\r\n@curry\r\n@log_learner_time(learner_name='custom_supervised_model_learner')\r\ndef custom_supervised_model_learner(df: pd.DataFrame,\r\n                         features: List[str],\r\n                         target: str,\r\n                         model: Any,\r\n                         log: Dict[str,Dict],\r\n                         prediction_column: str = \"prediction\") -> LearnerReturnType:\r\n    \"\"\"\r\n    Fits a custom model to the dataset. \r\n    Return the predict function, the predictions for the input dataset and a log describing the model.\r\n\r\n    Parameters\r\n    ----------\r\n\r\n    df : pandas.DataFrame\r\n        A Pandas' DataFrame with features and target columns.\r\n        The model will be trained to predict the target column\r\n        from features.\r\n\r\n    features : list of str\r\n        A list os column names that are used as features for the model. All this names\r\n        should be in `df`.\r\n\r\n    target : str\r\n        The name of the column in `df` that should be used as target for the model.\r\n\r\n    model: Object\r\n        model must have \".fit\" attribute that trains the data.\r\n        For classification problems it also need \".predict_proba\" attribute\r\n        For regression problems it also need \".predict\" attribute\r\n\r\n    log : Dict[str,Dict]\r\n        Log with additional information of the custom model used.\r\n        It must start with just one element with the model name.\r\n        On the second layer, it must define the supervised type.\r\n        Example:\r\n        log = {'GaussianProcessRegressor': {\r\n            'type' : 'regression',  # mandatory (could be classification too)\r\n            'features_used': FEATURES,  # optional\r\n            'parameters_used': 'Default parameters', #optional\r\n            ... # additional optional info\r\n            \r\n    prediction_column : str\r\n        The name of the column with the predictions from the model.\r\n        For classification problems, all probabilities wiill be added: for i in range(0,n_classes).\r\n        For regression just prediction_column will be added.\r\n    \"\"\"\r\n    \r\n    model.fit(df[features].values, df[target].values)\r\n    modelName = list(log.keys())[0]\r\n    \r\n    def p(new_df: pd.DataFrame) -> pd.DataFrame:\r\n        if log[modelName]['type'] == 'classification':\r\n            pred = model.predict_proba(new_df[features].values)\r\n            col_dict = {}\r\n            for (key, value) in enumerate(pred.T):\r\n                col_dict.update({prediction_column + \"_\" + str(key): value})\r\n\r\n        elif log[modelName]['type'] == 'regression':\r\n            col_dict = {prediction_column: model.predict(new_df[features].values)}\r\n        \r\n        return new_df.assign(**col_dict)\r\n\r\n    p.__doc__ = learner_pred_fn_docstring(\"custom_supervised_model_learner\")\r\n\r\n    return p, p(df), log\r\n\r\ncustom_supervised_model_learner.__doc__ += learner_return_docstring(\"Custom Supervised Model Learner\")\r\n```\r\n\r\n### TESTING THE FUNCTIONAL\r\n\r\nDEFINING THE TEST DATA\r\n\r\n```\r\nimport random\r\nimport pandas as pd\r\ncolumn1 = [random.random() for x in range(100)] # dummy feature\r\ncolumn2 = [random.random() for x in range(100)]\r\ntarget =  [5 * x + 0.1*random.random() for x in column2]  # there is some noise\r\n\r\ndata = pd.DataFrame({'feat_1' : column1, \r\n                     'feat_2' : column2,\r\n                     'target' : target})\r\nFEATURES = data.columns.tolist()\r\nTARGET = ['target']\r\nFEATURES.remove(TARGET[0])\r\n```\r\n\r\nTESTING\r\n\r\n```\r\nfrom sklearn.gaussian_process import GaussianProcessRegressor\r\nfrom fklearn.training.pipeline import build_pipeline\r\nmodel = GaussianProcessRegressor()\r\nlog = {'GaussianProcessRegressor': {\r\n            'type' : 'regression',  # it must have log[modelName]['type'] = 'classification' or 'regression'\r\n            'features_used': FEATURES,\r\n            'parameters_used': 'Default parameters',\r\n            'why_GaussianProcessRegressor_was_chosen' : 'I just had chosen it randomly'}\r\n      }\r\nmy_model = custom_supervised_model_learner(features = FEATURES, target = TARGET[0], model = model, log = log)\r\nmy_learner = build_pipeline(my_model)\r\n(prediction_function, data_trained, logs) = my_learner(data)\r\nprint(data_trained.head(5))  # good enough\r\n```\r\n\r\n","closed_by":{"login":"caique-lima","id":8700954,"node_id":"MDQ6VXNlcjg3MDA5NTQ=","avatar_url":"https://avatars.githubusercontent.com/u/8700954?v=4","gravatar_id":"","url":"https://api.github.com/users/caique-lima","html_url":"https://github.com/caique-lima","followers_url":"https://api.github.com/users/caique-lima/followers","following_url":"https://api.github.com/users/caique-lima/following{/other_user}","gists_url":"https://api.github.com/users/caique-lima/gists{/gist_id}","starred_url":"https://api.github.com/users/caique-lima/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/caique-lima/subscriptions","organizations_url":"https://api.github.com/users/caique-lima/orgs","repos_url":"https://api.github.com/users/caique-lima/repos","events_url":"https://api.github.com/users/caique-lima/events{/privacy}","received_events_url":"https://api.github.com/users/caique-lima/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/nubank/fklearn/issues/70/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/nubank/fklearn/issues/70/timeline","performed_via_github_app":null,"state_reason":"completed"}