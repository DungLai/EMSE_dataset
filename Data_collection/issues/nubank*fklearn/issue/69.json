{"url":"https://api.github.com/repos/nubank/fklearn/issues/69","repository_url":"https://api.github.com/repos/nubank/fklearn","labels_url":"https://api.github.com/repos/nubank/fklearn/issues/69/labels{/name}","comments_url":"https://api.github.com/repos/nubank/fklearn/issues/69/comments","events_url":"https://api.github.com/repos/nubank/fklearn/issues/69/events","html_url":"https://github.com/nubank/fklearn/issues/69","id":448289708,"node_id":"MDU6SXNzdWU0NDgyODk3MDg=","number":69,"title":"A functional that takes a custom function and applies it to Data","user":{"login":"vultor33","id":16596383,"node_id":"MDQ6VXNlcjE2NTk2Mzgz","avatar_url":"https://avatars.githubusercontent.com/u/16596383?v=4","gravatar_id":"","url":"https://api.github.com/users/vultor33","html_url":"https://github.com/vultor33","followers_url":"https://api.github.com/users/vultor33/followers","following_url":"https://api.github.com/users/vultor33/following{/other_user}","gists_url":"https://api.github.com/users/vultor33/gists{/gist_id}","starred_url":"https://api.github.com/users/vultor33/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/vultor33/subscriptions","organizations_url":"https://api.github.com/users/vultor33/orgs","repos_url":"https://api.github.com/users/vultor33/repos","events_url":"https://api.github.com/users/vultor33/events{/privacy}","received_events_url":"https://api.github.com/users/vultor33/received_events","type":"User","site_admin":false},"labels":[{"id":1251232930,"node_id":"MDU6TGFiZWwxMjUxMjMyOTMw","url":"https://api.github.com/repos/nubank/fklearn/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1251701734,"node_id":"MDU6TGFiZWwxMjUxNzAxNzM0","url":"https://api.github.com/repos/nubank/fklearn/labels/documentation","name":"documentation","color":"b342f4","default":true,"description":"Missing documentation or improvements in the existing one"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-05-24T18:00:11Z","updated_at":"2019-06-10T22:34:48Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I am afraid I am being a little annoying, but I am just trying to apply fklearn to my problem. I guess with a couple more issues I will be done.\r\n\r\n### Instructions\r\n\r\nI need a functional that takes a custom function and applies it to my data. For example, create a new column adding other two.\r\n\r\n### Describe the feature and the current state.\r\n\r\nThe functional \"custom_transformer\"  receives a function and applies it to a column. I need a functional that can create and delete columns just like onehot_categorizer do. \r\nKeeping track of feature names could be a nuissance #58. I had done something about that for myself too #68.\r\n\r\n### Will this change a current behavior? How?\r\n\r\nNo, just add a functionality.\r\n\r\n### Proposed solution\r\n\r\nHere is what I had done. Maybe could be useful as an inspiration.\r\n\r\n(You could just copy and paste this code on a jupyter notebook with fklearn installed that it should work)\r\n\r\nGenerating data\r\n```\r\nimport random\r\nimport pandas as pd\r\ncolumn1 = [random.choice(['a','b','c']) for x in range(100)]\r\ncolumn2 = [random.random() for x in range(100)]\r\ncolumn3 = [random.random() for x in range(100)]\r\ntraining_data = pd.DataFrame({'cat_feature' : column1, \r\n                              'num_feature_1' : column2,\r\n                              'num_feature_2' : column3})\r\nFEATURES = training_data.columns.tolist()\r\n```\r\n\r\nDEFINING THE CUSTOM FUNCTION THAT ADDS TWO SPECIFIC COLUMNS:\r\n-  'num_feature_1' + 'num_feature_2'\r\n-  This function has two addicional atributes:\r\n    - log : information that will be added to the pipeline log\r\n    - update_features : function that keep track of feature names after the application of sum_two_features\r\n\r\n```\r\nimport pandas as pd\r\nfrom typing import Dict, List\r\n\r\ndef sum_two_features(df: pd.DataFrame) -> pd.DataFrame:\r\n    assert ('num_feature_1' in df.columns) & ('num_feature_2' in df.columns)\r\n    new_df = df.copy()\r\n    new_df['num_sum'] = new_df.loc[:,'num_feature_1'] + new_df.loc[:,'num_feature_2']\r\n    new_df = new_df.drop(['num_feature_1','num_feature_2'], axis=1)\r\n    return new_df\r\n\r\ndef sum_two_features_log() -> Dict[str,Dict]:\r\n    return {'sum_two_features': {\r\n        'removed_columns': ['num_feature_1','num_feature_2'],\r\n        'added_columns': ['num_sum'],\r\n        'more_info': 'num_sum column is num_feature_1 plus num_feature_1'}}\r\n\r\ndef sum_two_features_update_features(features: List[str]) -> List[str]:\r\n    new_features = list(features)\r\n    if 'num_feature_1' in new_features:\r\n        new_features.remove('num_feature_1')\r\n    if 'num_feature_2' in new_features:\r\n        new_features.remove('num_feature_2')\r\n    new_features += ['sum_two_features']\r\n    return new_features\r\n\r\nsetattr(sum_two_features,'log', sum_two_features_log)\r\nsetattr(sum_two_features,'update_features', sum_two_features_update_features)\r\n```\r\n\r\nDEFNING THE FUNCTIONAL TO BE ADDED AT \"transformation.py\"\r\n\r\n```\r\nfrom toolz import curry\r\nimport pandas as pd\r\nfrom typing import Callable\r\nfrom fklearn.training.utils import log_learner_time\r\nfrom fklearn.types import LearnerReturnType\r\nfrom fklearn.common_docstrings import learner_return_docstring, learner_pred_fn_docstring\r\n\r\n@curry\r\n@log_learner_time(learner_name='custom_data_transformer')\r\ndef custom_data_transformer(df: pd.DataFrame,\r\n                       transformation_function: Callable[[pd.DataFrame],pd.DataFrame]) -> LearnerReturnType:\r\n    \"\"\"\r\n    Applies a custom function to the dataset.\r\n\r\n    Parameters\r\n    ----------\r\n    df : pandas.DataFrame\r\n        A Pandas' DataFrame\r\n\r\n    transformation_function : function(pandas.DataFrame) -> pandas.DataFrame\r\n        A function that receives a DataFrame as input, performs a transformation\r\n        and returns another DataFrame.\r\n        \r\n    Additional info\r\n    ----------\r\n    transformation_function must have log attribute generated by:\r\n        \r\n        setattr(transformation_function ,'log', transformation_function_log_function)\r\n\r\n    This log will be saved in the pipeline logs\r\n    \r\n    Also, transformation_function should have its own way to update the feature names.\r\n    \"\"\"\r\n\r\n    def p(new_data_set: pd.DataFrame) -> pd.DataFrame:\r\n        new_data_set = transformation_function(new_data_set)\r\n\r\n        return new_data_set\r\n\r\n    p.__doc__ = learner_pred_fn_docstring(\"custom_data_transformer\")\r\n\r\n    log = transformation_function.log()\r\n\r\n    return p, p(df), log\r\n\r\ncustom_data_transformer.__doc__ += learner_return_docstring(\"Custom Data Transformer\")\r\n```\r\n\r\nTESTING THE FUNCTIONAL\r\n\r\n```\r\nmy_feature_adder = custom_data_transformer(transformation_function = sum_two_features)\r\n(function_out, data_applied, log) = my_feature_adder(training_data)\r\nprint(data_applied.head(3),'\\n')\r\nprint(log)\r\n\r\n```\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/nubank/fklearn/issues/69/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/nubank/fklearn/issues/69/timeline","performed_via_github_app":null,"state_reason":null}