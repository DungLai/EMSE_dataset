{"url":"https://api.github.com/repos/microsoft/graspologic/issues/568","repository_url":"https://api.github.com/repos/microsoft/graspologic","labels_url":"https://api.github.com/repos/microsoft/graspologic/issues/568/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/graspologic/issues/568/comments","events_url":"https://api.github.com/repos/microsoft/graspologic/issues/568/events","html_url":"https://github.com/microsoft/graspologic/issues/568","id":730791388,"node_id":"MDU6SXNzdWU3MzA3OTEzODg=","number":568,"title":"`import_graph` questions","user":{"login":"daxpryce","id":899411,"node_id":"MDQ6VXNlcjg5OTQxMQ==","avatar_url":"https://avatars.githubusercontent.com/u/899411?v=4","gravatar_id":"","url":"https://api.github.com/users/daxpryce","html_url":"https://github.com/daxpryce","followers_url":"https://api.github.com/users/daxpryce/followers","following_url":"https://api.github.com/users/daxpryce/following{/other_user}","gists_url":"https://api.github.com/users/daxpryce/gists{/gist_id}","starred_url":"https://api.github.com/users/daxpryce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/daxpryce/subscriptions","organizations_url":"https://api.github.com/users/daxpryce/orgs","repos_url":"https://api.github.com/users/daxpryce/repos","events_url":"https://api.github.com/users/daxpryce/events{/privacy}","received_events_url":"https://api.github.com/users/daxpryce/received_events","type":"User","site_admin":false},"labels":[{"id":1048646807,"node_id":"MDU6TGFiZWwxMDQ4NjQ2ODA3","url":"https://api.github.com/repos/microsoft/graspologic/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-10-27T20:29:55Z","updated_at":"2020-10-27T20:29:55Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The current `utils.import_graph` function is super useful, but there are some questions we should try to answer:\r\n- What do we do with multigraphs?  Currently we support them, and by default (the only way we do it) networkx uses them by summing the edge weights between two nodes (which is a perfectly valid choice, but not the only one). It looks like networkx has the ability to use other functions like `min` and `max`, and one could presume `last` but I'm not entirely sure that the iterator we get is list based or set based.  If we could have all of the above AND make it a possible choice in the function call, it would be useful, but it also adds more optional args to every method or function definition and I don't want to that either.\r\n\r\nSince it's not immediately apparent how to handle multigraphs, should we instead balk - either via warnings and the default or raising an error and doing nothing, and tell the user that the onus is on them to call `nx.to_numpy_array` with the right parameters or fabricate their own `scipy.sparse.csr_matrix` (note: should we update networkx' `to_scipy_sparse_matrix` to support the same sorts of edge \"multigraph_weight\" function operators that to_numpy_array has?)\r\n\r\nSo all told, we have the following questions to answer:\r\n- Warnings or raised Errors, which should we consistently prefer\r\n- Should we always create a csr matrix? I think yes, but only because we have a hard time with numpy arrays with the scale of data we use sometimes ( #523 shows some work in this space already )\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/microsoft/graspologic/issues/568/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/graspologic/issues/568/timeline","performed_via_github_app":null,"state_reason":null}