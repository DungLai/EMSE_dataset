{"url":"https://api.github.com/repos/microsoft/graspologic/issues/815","repository_url":"https://api.github.com/repos/microsoft/graspologic","labels_url":"https://api.github.com/repos/microsoft/graspologic/issues/815/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/graspologic/issues/815/comments","events_url":"https://api.github.com/repos/microsoft/graspologic/issues/815/events","html_url":"https://github.com/microsoft/graspologic/issues/815","id":958522678,"node_id":"MDU6SXNzdWU5NTg1MjI2Nzg=","number":815,"title":"Unit tests fail when setting svd_seed","user":{"login":"daxpryce","id":899411,"node_id":"MDQ6VXNlcjg5OTQxMQ==","avatar_url":"https://avatars.githubusercontent.com/u/899411?v=4","gravatar_id":"","url":"https://api.github.com/users/daxpryce","html_url":"https://github.com/daxpryce","followers_url":"https://api.github.com/users/daxpryce/followers","following_url":"https://api.github.com/users/daxpryce/following{/other_user}","gists_url":"https://api.github.com/users/daxpryce/gists{/gist_id}","starred_url":"https://api.github.com/users/daxpryce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/daxpryce/subscriptions","organizations_url":"https://api.github.com/users/daxpryce/orgs","repos_url":"https://api.github.com/users/daxpryce/repos","events_url":"https://api.github.com/users/daxpryce/events{/privacy}","received_events_url":"https://api.github.com/users/daxpryce/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-08-02T21:28:25Z","updated_at":"2021-08-02T21:28:25Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"When adding the ability to set an svd seed to use when picking the randomized svd solver in `select_svd`, I ran across a number of unit tests that failed if we passed `None` into the randomized SVD.\r\n\r\nBy default, in sklearn, the randomized svd sets random_state=0 (vs. None).  When I passed in `None` as a value, tests broke in the following places (actually, tests broke *everywhere*, and most I was able to fix, but a few require a closer look by an SME who isn't going to break more things than they fix by trying to fix it).\r\n\r\nThe proper thing to do is fix all of our unit tests so that they properly test things and don't rely on random_state=0 as the specified seed, but it's not clear exactly how we should fix it in the following cases.\r\n\r\nResults of commenting out line 303 in `svd.py` `svd_seed = svd_seed if svd_seed is not None else 0`:\r\n\r\n```\r\n============================================================================= FAILURES ==============================================================================\r\n_________________________________________________________________________ TestGMP.test_sim __________________________________________________________________________\r\n\r\nself = <tests.test_match.TestGMP object at 0x1448ff640>\r\n\r\n    def test_sim(self):\r\n        n = 150\r\n        rho = 0.9\r\n        n_per_block = int(n / 3)\r\n        n_blocks = 3\r\n        block_members = np.array(n_blocks * [n_per_block])\r\n        block_probs = np.array(\r\n            [[0.2, 0.01, 0.01], [0.01, 0.1, 0.01], [0.01, 0.01, 0.2]]\r\n        )\r\n        directed = False\r\n        loops = False\r\n        A1, A2 = sbm_corr(\r\n            block_members, block_probs, rho, directed=directed, loops=loops\r\n        )\r\n        ase = AdjacencySpectralEmbed(n_components=3, algorithm=\"truncated\")\r\n        x1 = ase.fit_transform(A1)\r\n        x2 = ase.fit_transform(A2)\r\n        xh1 = SignFlips().fit_transform(x1, x2)\r\n        S = xh1 @ x2.T\r\n        res = self.barygm.fit(A1, A2, S=S)\r\n\r\n>       assert 0.7 <= (sum(res.perm_inds_ == np.arange(n)) / n)\r\nE       assert 0.7 <= (78 / 150)\r\nE        +  where 78 = sum(array([ 86,  ...47, 148, 149]) == array([  0,  ...47, 148, 149])\r\nE           Use -v to get the full diff)\r\n\r\ntests/test_match.py:251: AssertionError\r\n___________________________________________________________________ TestDCSBM.test_DCSBM_nparams ____________________________________________________________________\r\n\r\nself = <tests.test_models.TestDCSBM object at 0x131e2c6d0>\r\n\r\n    def test_DCSBM_nparams(self):\r\n        n_verts = 3000\r\n        n_class = 4\r\n        graph = self.g\r\n        labels = self.labels\r\n        e = DCSBMEstimator(directed=True)\r\n        e.fit(graph)\r\n>       assert e._n_parameters() == (n_verts + n_class - 1 + n_class ** 2)\r\nE       assert 3071 == (((3000 + 4) - 1) + (4 ** 2))\r\nE        +  where 3071 = <bound method DCSBMEstimator._n_parameters of DCSBMEstimator()>()\r\nE        +    where <bound method DCSBMEstimator._n_parameters of DCSBMEstimator()> = DCSBMEstimator()._n_parameters\r\n\r\ntests/test_models.py:422: AssertionError\r\n\r\n__________________________________________________ TestAdjacencySpectralEmbed.test_transform_closeto_fit_transform __________________________________________________\r\n\r\nself = <tests.test_spectral_embed.TestAdjacencySpectralEmbed testMethod=test_transform_closeto_fit_transform>\r\n\r\n    def test_transform_closeto_fit_transform(self):\r\n        atol = 0.15\r\n        for diag_aug in [True, False]:\r\n            for g, A in self.testgraphs.items():\r\n                ase = AdjacencySpectralEmbed(\r\n                    n_components=2, diag_aug=diag_aug, svd_seed=9001\r\n                )\r\n                ase.fit(A)\r\n                Y = ase.fit_transform(A)\r\n                if isinstance(Y, np.ndarray):\r\n                    X = ase.transform(A)\r\n                    np.testing.assert_allclose(X, Y, atol=atol)\r\n                elif isinstance(Y, tuple):\r\n                    with self.assertRaises(TypeError):\r\n                        X = ase.transform(A)\r\n                    X = ase.transform((A.T, A))\r\n                    np.testing.assert_allclose(X[0], Y[0], atol=atol)\r\n>                   np.testing.assert_allclose(X[1], Y[1], atol=atol)\r\nE                   AssertionError:\r\nE                   Not equal to tolerance rtol=1e-07, atol=0.15\r\nE\r\nE                   Mismatched elements: 1 / 40 (2.5%)\r\nE                   Max absolute difference: 0.18669627\r\nE                   Max relative difference: 5.41864066\r\nE                    x: array([[ 1.523434, -0.9013  ],\r\nE                          [ 1.624558, -0.937225],\r\nE                          [ 0.753984, -0.933442],...\r\nE                    y: array([[ 1.586404, -0.957384],\r\nE                          [ 1.711405, -0.99416 ],\r\nE                          [ 0.791389, -0.990951],...\r\n\r\ntests/test_spectral_embed.py:178: AssertionError\r\n=======================================================================\r\n```\r\n\r\n_Originally posted by @daxpryce in https://github.com/microsoft/graspologic/pull/814#discussion_r679533656_","closed_by":null,"reactions":{"url":"https://api.github.com/repos/microsoft/graspologic/issues/815/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/graspologic/issues/815/timeline","performed_via_github_app":null,"state_reason":null}