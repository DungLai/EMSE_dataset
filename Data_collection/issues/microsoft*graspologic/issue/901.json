{"url":"https://api.github.com/repos/microsoft/graspologic/issues/901","repository_url":"https://api.github.com/repos/microsoft/graspologic","labels_url":"https://api.github.com/repos/microsoft/graspologic/issues/901/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/graspologic/issues/901/comments","events_url":"https://api.github.com/repos/microsoft/graspologic/issues/901/events","html_url":"https://github.com/microsoft/graspologic/issues/901","id":1082710895,"node_id":"I_kwDOCM7Erc5AiNtv","number":901,"title":"[BUG] Leiden on integer node ids and starting_communities","user":{"login":"daxpryce","id":899411,"node_id":"MDQ6VXNlcjg5OTQxMQ==","avatar_url":"https://avatars.githubusercontent.com/u/899411?v=4","gravatar_id":"","url":"https://api.github.com/users/daxpryce","html_url":"https://github.com/daxpryce","followers_url":"https://api.github.com/users/daxpryce/followers","following_url":"https://api.github.com/users/daxpryce/following{/other_user}","gists_url":"https://api.github.com/users/daxpryce/gists{/gist_id}","starred_url":"https://api.github.com/users/daxpryce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/daxpryce/subscriptions","organizations_url":"https://api.github.com/users/daxpryce/orgs","repos_url":"https://api.github.com/users/daxpryce/repos","events_url":"https://api.github.com/users/daxpryce/events{/privacy}","received_events_url":"https://api.github.com/users/daxpryce/received_events","type":"User","site_admin":false},"labels":[{"id":1048646805,"node_id":"MDU6TGFiZWwxMDQ4NjQ2ODA1","url":"https://api.github.com/repos/microsoft/graspologic/labels/bug","name":"bug","color":"cded2d","default":true,"description":"Something isn't working"}],"state":"closed","locked":false,"assignee":{"login":"daxpryce","id":899411,"node_id":"MDQ6VXNlcjg5OTQxMQ==","avatar_url":"https://avatars.githubusercontent.com/u/899411?v=4","gravatar_id":"","url":"https://api.github.com/users/daxpryce","html_url":"https://github.com/daxpryce","followers_url":"https://api.github.com/users/daxpryce/followers","following_url":"https://api.github.com/users/daxpryce/following{/other_user}","gists_url":"https://api.github.com/users/daxpryce/gists{/gist_id}","starred_url":"https://api.github.com/users/daxpryce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/daxpryce/subscriptions","organizations_url":"https://api.github.com/users/daxpryce/orgs","repos_url":"https://api.github.com/users/daxpryce/repos","events_url":"https://api.github.com/users/daxpryce/events{/privacy}","received_events_url":"https://api.github.com/users/daxpryce/received_events","type":"User","site_admin":false},"assignees":[{"login":"daxpryce","id":899411,"node_id":"MDQ6VXNlcjg5OTQxMQ==","avatar_url":"https://avatars.githubusercontent.com/u/899411?v=4","gravatar_id":"","url":"https://api.github.com/users/daxpryce","html_url":"https://github.com/daxpryce","followers_url":"https://api.github.com/users/daxpryce/followers","following_url":"https://api.github.com/users/daxpryce/following{/other_user}","gists_url":"https://api.github.com/users/daxpryce/gists{/gist_id}","starred_url":"https://api.github.com/users/daxpryce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/daxpryce/subscriptions","organizations_url":"https://api.github.com/users/daxpryce/orgs","repos_url":"https://api.github.com/users/daxpryce/repos","events_url":"https://api.github.com/users/daxpryce/events{/privacy}","received_events_url":"https://api.github.com/users/daxpryce/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2021-12-16T22:54:03Z","updated_at":"2021-12-21T19:08:00Z","closed_at":"2021-12-21T19:08:00Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"If I have a graph where the node ids are of type `int`, the resulting partition map should also be of type `int->int`. If I use this partition map when I call leiden with `starting_communities`, it fails because the node id in the partition map is not of type `str`.\r\n\r\n\r\n## Example Code\r\n\r\n```python\r\nimport unittest\r\nclass Example(unittest.TestCase):\r\n    def test_hashable_nonstr_with_starting_communities(self):\r\n        seed = 1234\r\n        first_graph = nx.erdos_renyi_graph(20, 0.4, seed=seed)\r\n        second_graph = nx.erdos_renyi_graph(21, 0.4, seed=seed)\r\n        third_graph = nx.erdos_renyi_graph(19, 0.4, seed=seed)\r\n\r\n        first_partitions = leiden(first_graph)\r\n        second_partitions = leiden(second_graph, starting_communities=first_partitions)\r\n        third_partitions = leiden(third_graph, starting_communities=second_partitions)\r\n```\r\n\r\n## Full Traceback\r\n```pytb\r\nself = <test_leiden.TestLeiden testMethod=test_hashable_nonstr_with_starting_communities>\r\n\r\n    def test_hashable_nonstr_with_starting_communities(self):\r\n        seed = 1234\r\n        first_graph = nx.erdos_renyi_graph(20, 0.4, seed=seed)\r\n        second_graph = nx.erdos_renyi_graph(21, 0.4, seed=seed)\r\n        third_graph = nx.erdos_renyi_graph(19, 0.4, seed=seed)\r\n\r\n        first_partitions = leiden(first_graph)\r\n>       second_partitions = leiden(second_graph, starting_communities=first_partitions)\r\n\r\ntests/partition/test_leiden.py:213:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\ngraph = <networkx.classes.graph.Graph object at 0x124667c40>, starting_communities = {0: 1, 1: 2, 2: 0, 3: 1, ...}, extra_forced_iterations = 0\r\nresolution = 1.0, randomness = 0.001, use_modularity = True, random_seed = None, weight_attribute = 'weight', is_weighted = None\r\nweight_default = 1.0, check_directed = True, trials = 1\r\n\r\n    def leiden(\r\n        graph: Union[\r\n            List[Tuple[Any, Any, Union[int, float]]],\r\n            nx.Graph,\r\n            np.ndarray,\r\n            scipy.sparse.csr.csr_matrix,\r\n        ],\r\n        starting_communities: Optional[Dict[str, int]] = None,\r\n        extra_forced_iterations: int = 0,\r\n        resolution: float = 1.0,\r\n        randomness: float = 0.001,\r\n        use_modularity: bool = True,\r\n        random_seed: Optional[int] = None,\r\n        weight_attribute: str = \"weight\",\r\n        is_weighted: Optional[bool] = None,\r\n        weight_default: float = 1.0,\r\n        check_directed: bool = True,\r\n        trials: int = 1,\r\n    ) -> Dict[str, int]:\r\n... PYDOC OMITTED FOR SOME SEMBLANCE OF BREVITY ...\r\n        _validate_common_arguments(\r\n            starting_communities,\r\n            extra_forced_iterations,\r\n            resolution,\r\n            randomness,\r\n            use_modularity,\r\n            random_seed,\r\n            is_weighted,\r\n            weight_default,\r\n            check_directed,\r\n        )\r\n        if not isinstance(trials, int):\r\n            raise TypeError(\"trials must be a positive integer\")\r\n        if trials < 1:\r\n            raise ValueError(\"trials must be a positive integer\")\r\n        node_id_mapping, edges = _validate_and_build_edge_list(\r\n            graph, is_weighted, weight_attribute, check_directed, weight_default\r\n        )\r\n\r\n>       _modularity, partitions = gn.leiden(\r\n            edges=edges,\r\n            starting_communities=starting_communities,\r\n            resolution=resolution,\r\n            randomness=randomness,\r\n            iterations=extra_forced_iterations + 1,\r\n            use_modularity=use_modularity,\r\n            seed=random_seed,\r\n            trials=trials,\r\n        )\r\nE       TypeError: argument 'starting_communities': 'int' object cannot be converted to 'PyString'\r\n\r\ngraspologic/partition/leiden.py:340: TypeError\r\n```\r\n\r\n## Additional Details\r\nWe map the node ids for the graph into string versions prior to calling the native code, then re-reference the original node ids on the way back out for both the graph and the return partitions, but we don't ever do the same for starting_communities.\r\n\r\nA proper fix is to refactor the mapping into a separate object that we can use for the provided graph, the return partitions, as well as the starting communities partition map.","closed_by":{"login":"daxpryce","id":899411,"node_id":"MDQ6VXNlcjg5OTQxMQ==","avatar_url":"https://avatars.githubusercontent.com/u/899411?v=4","gravatar_id":"","url":"https://api.github.com/users/daxpryce","html_url":"https://github.com/daxpryce","followers_url":"https://api.github.com/users/daxpryce/followers","following_url":"https://api.github.com/users/daxpryce/following{/other_user}","gists_url":"https://api.github.com/users/daxpryce/gists{/gist_id}","starred_url":"https://api.github.com/users/daxpryce/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/daxpryce/subscriptions","organizations_url":"https://api.github.com/users/daxpryce/orgs","repos_url":"https://api.github.com/users/daxpryce/repos","events_url":"https://api.github.com/users/daxpryce/events{/privacy}","received_events_url":"https://api.github.com/users/daxpryce/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/microsoft/graspologic/issues/901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/graspologic/issues/901/timeline","performed_via_github_app":null,"state_reason":"completed"}