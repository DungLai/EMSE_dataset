{"url":"https://api.github.com/repos/microsoft/graspologic/issues/736","repository_url":"https://api.github.com/repos/microsoft/graspologic","labels_url":"https://api.github.com/repos/microsoft/graspologic/issues/736/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/graspologic/issues/736/comments","events_url":"https://api.github.com/repos/microsoft/graspologic/issues/736/events","html_url":"https://github.com/microsoft/graspologic/issues/736","id":836273863,"node_id":"MDU6SXNzdWU4MzYyNzM4NjM=","number":736,"title":"Layouts meta-issue","user":{"login":"bdpedigo","id":25714207,"node_id":"MDQ6VXNlcjI1NzE0MjA3","avatar_url":"https://avatars.githubusercontent.com/u/25714207?v=4","gravatar_id":"","url":"https://api.github.com/users/bdpedigo","html_url":"https://github.com/bdpedigo","followers_url":"https://api.github.com/users/bdpedigo/followers","following_url":"https://api.github.com/users/bdpedigo/following{/other_user}","gists_url":"https://api.github.com/users/bdpedigo/gists{/gist_id}","starred_url":"https://api.github.com/users/bdpedigo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bdpedigo/subscriptions","organizations_url":"https://api.github.com/users/bdpedigo/orgs","repos_url":"https://api.github.com/users/bdpedigo/repos","events_url":"https://api.github.com/users/bdpedigo/events{/privacy}","received_events_url":"https://api.github.com/users/bdpedigo/received_events","type":"User","site_admin":false},"labels":[{"id":1048646807,"node_id":"MDU6TGFiZWwxMDQ4NjQ2ODA3","url":"https://api.github.com/repos/microsoft/graspologic/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2256387913,"node_id":"MDU6TGFiZWwyMjU2Mzg3OTEz","url":"https://api.github.com/repos/microsoft/graspologic/labels/ndd","name":"ndd","color":"dda966","default":false,"description":"tasks that may be appropriate for Neuro Data Design course"},{"id":2449973732,"node_id":"MDU6TGFiZWwyNDQ5OTczNzMy","url":"https://api.github.com/repos/microsoft/graspologic/labels/discussion","name":"discussion","color":"4267b7","default":false,"description":"graspologic team discussion"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":32,"created_at":"2021-03-19T18:52:45Z","updated_at":"2022-02-01T21:08:00Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"This issue is to organize some thoughts on changes I'd like to see for our layout code. Happy to have feedback.\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n- [x] Layouts should run on directed networks (see #655). If the user wants to color by automatically detected community, then I'd suggest that we just symmetrize the graph internally (only for the community detection step) and proceed. I don't think this is overstepping our bounds as to what the user wanted, personally, because this is typically the notion of community for directed graphs. \r\n- [ ] Automatic layouts should also be possible using ASE/LSE. I have had a lot of success generating layouts that I like using ASE as opposed to n2v so I think \"algorithm\" could just be a parameter.\r\n- [ ] Allow passing dictionaries of arguments to stage 1 (n2v/ASE/LSE) and stage 2 (umap/tsne) (see #612)\r\n- [x] Should have an interface to the layouts code that feels like what we have in `.plot` and seaborn. I think we could refactor the code such that we can still have all-in-one functions that eat graphs and spit out plots like `layouts.save_graph`, but there's no reason we can't also let people interact with some of these functions in a way that's more like matplotlib/seaborn.\r\n- [x] NoOverlap should be an option the user can turn on or off.\r\n   - Addressed in #758   \r\n- [ ] Layouts should run on adjacency matrices also\r\n\r\n## Provide references (if applicable)\r\nI have some code [here](https://github.com/bdpedigo/giskard/blob/main/giskard/plot/graph_layout.py) which is closer to the flavor of what I'd want to see for graph plotting code that works with seaborn/matplotlib. Just a reference, not necessarily how we should do anything here. One thing I never figured out for that code which would be nice is automatic scaling of edge/node widths/sizes etc. based on the size of the graph, so that an initial shot at an embedding at least looks reasonable.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/microsoft/graspologic/issues/736/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/graspologic/issues/736/timeline","performed_via_github_app":null,"state_reason":null}