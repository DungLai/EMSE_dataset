{"url":"https://api.github.com/repos/masyagin1998/robin/issues/5","repository_url":"https://api.github.com/repos/masyagin1998/robin","labels_url":"https://api.github.com/repos/masyagin1998/robin/issues/5/labels{/name}","comments_url":"https://api.github.com/repos/masyagin1998/robin/issues/5/comments","events_url":"https://api.github.com/repos/masyagin1998/robin/issues/5/events","html_url":"https://github.com/masyagin1998/robin/issues/5","id":464873898,"node_id":"MDU6SXNzdWU0NjQ4NzM4OTg=","number":5,"title":"Achieving Speed and Accuracy ","user":{"login":"ghost","id":10137,"node_id":"MDQ6VXNlcjEwMTM3","avatar_url":"https://avatars.githubusercontent.com/u/10137?v=4","gravatar_id":"","url":"https://api.github.com/users/ghost","html_url":"https://github.com/ghost","followers_url":"https://api.github.com/users/ghost/followers","following_url":"https://api.github.com/users/ghost/following{/other_user}","gists_url":"https://api.github.com/users/ghost/gists{/gist_id}","starred_url":"https://api.github.com/users/ghost/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ghost/subscriptions","organizations_url":"https://api.github.com/users/ghost/orgs","repos_url":"https://api.github.com/users/ghost/repos","events_url":"https://api.github.com/users/ghost/events{/privacy}","received_events_url":"https://api.github.com/users/ghost/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-07-06T17:22:13Z","updated_at":"2019-07-16T12:13:47Z","closed_at":"2019-07-16T12:13:47Z","author_association":"NONE","active_lock_reason":null,"body":"@masyagin1998 hi,\r\n\r\nRobin seem to be very interesting and fast, I am currently working on a semantic segmentation code, and I want to achieve the highest prediction `fps` frames per second and accuracy along with memory efficiency, so what do you recommend?\r\n\r\n- Should I use patches in training & prediction, or do you recommend something else?\r\n- Does training fully rely on the cropped patches of images, or does it further have some tricks like (resizing, downscaling, upscaling, etc...)?","closed_by":null,"reactions":{"url":"https://api.github.com/repos/masyagin1998/robin/issues/5/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/masyagin1998/robin/issues/5/timeline","performed_via_github_app":null,"state_reason":"completed"}