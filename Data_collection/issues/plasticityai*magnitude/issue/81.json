{"url":"https://api.github.com/repos/plasticityai/magnitude/issues/81","repository_url":"https://api.github.com/repos/plasticityai/magnitude","labels_url":"https://api.github.com/repos/plasticityai/magnitude/issues/81/labels{/name}","comments_url":"https://api.github.com/repos/plasticityai/magnitude/issues/81/comments","events_url":"https://api.github.com/repos/plasticityai/magnitude/issues/81/events","html_url":"https://github.com/plasticityai/magnitude/issues/81","id":756151547,"node_id":"MDU6SXNzdWU3NTYxNTE1NDc=","number":81,"title":"Multithreading for embeddings extraction","user":{"login":"AFAgarap","id":11130276,"node_id":"MDQ6VXNlcjExMTMwMjc2","avatar_url":"https://avatars.githubusercontent.com/u/11130276?v=4","gravatar_id":"","url":"https://api.github.com/users/AFAgarap","html_url":"https://github.com/AFAgarap","followers_url":"https://api.github.com/users/AFAgarap/followers","following_url":"https://api.github.com/users/AFAgarap/following{/other_user}","gists_url":"https://api.github.com/users/AFAgarap/gists{/gist_id}","starred_url":"https://api.github.com/users/AFAgarap/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AFAgarap/subscriptions","organizations_url":"https://api.github.com/users/AFAgarap/orgs","repos_url":"https://api.github.com/users/AFAgarap/repos","events_url":"https://api.github.com/users/AFAgarap/events{/privacy}","received_events_url":"https://api.github.com/users/AFAgarap/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-12-03T12:26:47Z","updated_at":"2020-12-03T12:26:47Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello. May I ask if there is a way to extract word embeddings using multiple cores?\r\nRight now, I'm getting the word embeddings representation for the 20 newsgroups dataset, and it still takes a while to complete the whole dataset. Thank you.\r\n\r\nFor reference, this is my current function,\r\n\r\n```python\r\ndef extract_sentence_embeddings(\r\n    texts: str or List, batch_size: int = 2048\r\n) -> np.ndarray:\r\n    \"\"\"\r\n    Returns the sentence embeddings for the input texts.\r\n\r\n    Parameter\r\n    ---------\r\n    texts: str or List\r\n        The input text to vectorize.\r\n    batch_size: int\r\n        The mini-batch size to use for computation.\r\n\r\n    Returns\r\n    -------\r\n    vectors: np.ndarray\r\n        The sentence embeddings representation for the input texts.\r\n    \"\"\"\r\n    vectorizer = pymagnitude.Magnitude(\"data/glove.840B.300d.magnitude\")\r\n    if isinstance(texts, str):\r\n        vectors = vectorizer.query(texts.split())\r\n        vectors = np.mean(vectors, axis=0)\r\n        return vectors\r\n    elif isinstance(texts, list):\r\n        vectors = []\r\n        for index in range(len(texts) // batch_size):\r\n            offset = (index * batch_size) % len(texts)\r\n            vector = vectorizer.query(\r\n                list(\r\n                    map(\r\n                        lambda text: [\"\", \"\"]\r\n                        if len(text.split()) == 0\r\n                        else text.split(),\r\n                        texts[offset : offset + batch_size],\r\n                    )\r\n                )\r\n            )\r\n            vector = np.mean(vector, axis=1)\r\n            vectors.append(vector)\r\n        return vectors\r\n```\r\n\r\nSince I'm using 300D vectors, the memory can easily be exhausted, that's why I opt for batching the text data.\r\n\r\nLooking forward to your response! Thank you!","closed_by":null,"reactions":{"url":"https://api.github.com/repos/plasticityai/magnitude/issues/81/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/plasticityai/magnitude/issues/81/timeline","performed_via_github_app":null,"state_reason":null}