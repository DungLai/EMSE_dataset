{"url":"https://api.github.com/repos/lufficc/SSD/issues/193","repository_url":"https://api.github.com/repos/lufficc/SSD","labels_url":"https://api.github.com/repos/lufficc/SSD/issues/193/labels{/name}","comments_url":"https://api.github.com/repos/lufficc/SSD/issues/193/comments","events_url":"https://api.github.com/repos/lufficc/SSD/issues/193/events","html_url":"https://github.com/lufficc/SSD/issues/193","id":807717841,"node_id":"MDU6SXNzdWU4MDc3MTc4NDE=","number":193,"title":"How can I add new backbone network for SSD and DSSD","user":{"login":"sd59202","id":5001809,"node_id":"MDQ6VXNlcjUwMDE4MDk=","avatar_url":"https://avatars.githubusercontent.com/u/5001809?v=4","gravatar_id":"","url":"https://api.github.com/users/sd59202","html_url":"https://github.com/sd59202","followers_url":"https://api.github.com/users/sd59202/followers","following_url":"https://api.github.com/users/sd59202/following{/other_user}","gists_url":"https://api.github.com/users/sd59202/gists{/gist_id}","starred_url":"https://api.github.com/users/sd59202/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sd59202/subscriptions","organizations_url":"https://api.github.com/users/sd59202/orgs","repos_url":"https://api.github.com/users/sd59202/repos","events_url":"https://api.github.com/users/sd59202/events{/privacy}","received_events_url":"https://api.github.com/users/sd59202/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-02-13T09:58:01Z","updated_at":"2021-12-13T15:44:16Z","closed_at":"2021-12-13T15:44:16Z","author_association":"NONE","active_lock_reason":null,"body":"I try to add darknet53 for backbone and modify the network but not work.\r\nPlease help to check how can I add this SSD & ZQPei/DSSD network.\r\n\r\n``\r\nimport torch\r\nfrom torch import nn\r\nimport math\r\n\r\nfrom dssd.utils.model_zoo import load_state_dict_from_url\r\nfrom collections import OrderedDict\r\nfrom torchsummary import summary\r\n\r\n__all__ = ['darknet53']\r\nmodel_urls = {\r\n  'darknet53':\"https://github.com/Jintao-Huang/Darknet53_PyTorch/releases/download/1.0/darknet53-26b80406.pth\"\r\n}\r\n\r\n\r\ndef load_pretrained(model, state_dict):\r\n    model.load_state_dict(state_dict, strict=False)\r\n\r\n\r\ndef _darknet(arch, layers, pretrained, progress, **kwargs):\r\n    model = DarkNet(layers)\r\n    if pretrained:\r\n        state_dict = load_state_dict_from_url(model_urls[arch])\r\n        load_pretrained(model, state_dict)\r\n    return model\r\n\r\n\r\nclass BasicBlock(nn.Module):\r\n    def __init__(self, inplanes, planes):\r\n        super(BasicBlock, self).__init__()\r\n        self.conv1 = nn.Conv2d(inplanes, planes[0], kernel_size=1,\r\n                               stride=1, padding=0, bias=False)\r\n        self.bn1 = nn.BatchNorm2d(planes[0])\r\n        self.relu1 = nn.LeakyReLU(0.1)\r\n        self.conv2 = nn.Conv2d(planes[0], planes[1], kernel_size=3,\r\n                               stride=1, padding=1, bias=False)\r\n        self.bn2 = nn.BatchNorm2d(planes[1])\r\n        self.relu2 = nn.LeakyReLU(0.1)\r\n\r\n\r\n    def forward(self, x):\r\n        residual = x\r\n\r\n        out = self.conv1(x)\r\n        out = self.bn1(out)\r\n        out = self.relu1(out)\r\n\r\n        out = self.conv2(out)\r\n        out = self.bn2(out)\r\n        out = self.relu2(out)\r\n\r\n        out += residual\r\n        return out\r\n\r\n\r\nclass DarkNet(nn.Module):\r\n    def __init__(self, layers):\r\n        super(DarkNet, self).__init__()\r\n        self.inplanes = 32\r\n        self.conv1 = nn.Conv2d(3, self.inplanes, kernel_size=3, stride=1, padding=1, bias=False)\r\n        self.bn1 = nn.BatchNorm2d(self.inplanes)\r\n        self.relu1 = nn.LeakyReLU(0.1)\r\n\r\n        self.layer1 = self._make_layer([32, 64], layers[0])\r\n        self.layer2 = self._make_layer([64, 128], layers[1])\r\n        self.layer3 = self._make_layer([128, 256], layers[2])\r\n        self.layer4 = self._make_layer([256, 512], layers[3])\r\n        self.layer5 = self._make_layer([512, 1024], layers[4])\r\n        self.layer6 = self._make_extra_layer([1024, 1024])\r\n        self.layer7 = self._make_extra_layer([1024, 1024])\r\n        self.layer8 = self._make_extra_layer([1024, 1024])\r\n        self.layer9 = self._make_extra_layer([1024, 1024])\r\n\r\n\r\n        self.layers_out_filters = [64, 128, 256, 512, 1024]\r\n        self.init_params()\r\n\r\n    # initialize the parameters in convolution and batch normalization layers\r\n    def init_params(self):\r\n        for m in self.modules():\r\n            if isinstance(m, nn.Conv2d):\r\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\r\n                m.weight.data.normal_(0, math.sqrt(2. / n))\r\n            elif isinstance(m, nn.BatchNorm2d):\r\n                m.weight.data.fill_(1)\r\n                m.bias.data.zero_()\r\n\r\n    def _make_layer(self, planes, blocks):\r\n        layers = []\r\n        #  downsample\r\n        layers.append((\"ds_conv\", nn.Conv2d(self.inplanes, planes[1], kernel_size=3,\r\n                                stride=2, padding=1, bias=False)))\r\n        layers.append((\"ds_bn\", nn.BatchNorm2d(planes[1])))\r\n        layers.append((\"ds_relu\", nn.LeakyReLU(0.1)))\r\n        #  blocks\r\n        self.inplanes = planes[1]\r\n        for i in range(0, blocks):\r\n            layers.append((\"residual_{}\".format(i), BasicBlock(self.inplanes, planes)))\r\n        return nn.Sequential(OrderedDict(layers))\r\n\r\n\r\n    def _make_extra_layer(self, planes):\r\n        layers = []\r\n        #  downsample\r\n        layers.append((\"ds_conv\", nn.Conv2d(self.inplanes, planes[1], kernel_size=3,\r\n                                stride=2, padding=1, bias=False)))\r\n        layers.append((\"ds_bn\", nn.BatchNorm2d(planes[1])))\r\n        layers.append((\"ds_relu\", nn.LeakyReLU(0.1)))\r\n        #  blocks\r\n        self.inplanes = planes[1]\r\n        for i in range(0, 1):\r\n            layers.append((\"residual_{}\".format(i), BasicBlock(self.inplanes, planes)))\r\n        return nn.Sequential(OrderedDict(layers))\r\n\r\n \r\n    def forward(self, x):\r\n        x = self.conv1(x)\r\n        x = self.bn1(x)\r\n        x = self.relu1(x)\r\n\r\n\r\n        out1 = self.layer1(x)\r\n        out2 = self.layer2(out1)\r\n        out3 = self.layer3(out2)\r\n        out4 = self.layer4(out3)\r\n        out5 = self.layer5(out4)\r\n        out6 = self.layer6(out5)\r\n        out7 = self.layer7(out6)\r\n        out8 = self.layer8(out7)\r\n        out9 = self.layer9(out8)\r\n\r\n        return out3, out4, out5, out6, out7, out8, out9       \r\n\r\ndef darknet21(pretrained, **kwargs):\r\n    \"\"\"Constructs a darknet-21 model.\r\n    \"\"\"\r\n    model = DarkNet([1, 1, 2, 2, 1])\r\n    if pretrained:\r\n        if isinstance(pretrained, str):\r\n            model.load_state_dict(torch.load(pretrained))\r\n        else:\r\n            raise Exception(\"darknet request a pretrained path. got [{}]\".format(pretrained))\r\n    return model\r\n\r\n\r\ndef darknet53(pretrained=False, progress=True, **kwargs):\r\n    \"\"\"Constructs a darknet-53 model.\r\n    \"\"\"\r\n    #model = DarkNet([1, 2, 8, 8, 4])\r\n    #if pretrained:\r\n    #    if isinstance(pretrained, str):\r\n    #        model.load_state_dict(torch.load(pretrained))\r\n    #    else:\r\n    #        raise Exception(\"darknet request a pretrained path. got [{}]\".format(pretrained))\r\n    #return model\r\n    return _darknet('darknet53', [1, 2, 8, 8, 4], pretrained, progress, **kwargs)\r\n\r\nif __name__ == '__main__':\r\n    darknet = DarkNet([1,2,8,8,4]).cuda()\r\n    summary(darknet, (3,320,320))\r\n``","closed_by":{"login":"sd59202","id":5001809,"node_id":"MDQ6VXNlcjUwMDE4MDk=","avatar_url":"https://avatars.githubusercontent.com/u/5001809?v=4","gravatar_id":"","url":"https://api.github.com/users/sd59202","html_url":"https://github.com/sd59202","followers_url":"https://api.github.com/users/sd59202/followers","following_url":"https://api.github.com/users/sd59202/following{/other_user}","gists_url":"https://api.github.com/users/sd59202/gists{/gist_id}","starred_url":"https://api.github.com/users/sd59202/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sd59202/subscriptions","organizations_url":"https://api.github.com/users/sd59202/orgs","repos_url":"https://api.github.com/users/sd59202/repos","events_url":"https://api.github.com/users/sd59202/events{/privacy}","received_events_url":"https://api.github.com/users/sd59202/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/lufficc/SSD/issues/193/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lufficc/SSD/issues/193/timeline","performed_via_github_app":null,"state_reason":"completed"}