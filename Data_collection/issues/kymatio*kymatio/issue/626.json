{"url":"https://api.github.com/repos/kymatio/kymatio/issues/626","repository_url":"https://api.github.com/repos/kymatio/kymatio","labels_url":"https://api.github.com/repos/kymatio/kymatio/issues/626/labels{/name}","comments_url":"https://api.github.com/repos/kymatio/kymatio/issues/626/comments","events_url":"https://api.github.com/repos/kymatio/kymatio/issues/626/events","html_url":"https://github.com/kymatio/kymatio/issues/626","id":648868945,"node_id":"MDU6SXNzdWU2NDg4Njg5NDU=","number":626,"title":"Automated style checking/linting","user":{"login":"janden","id":3976052,"node_id":"MDQ6VXNlcjM5NzYwNTI=","avatar_url":"https://avatars.githubusercontent.com/u/3976052?v=4","gravatar_id":"","url":"https://api.github.com/users/janden","html_url":"https://github.com/janden","followers_url":"https://api.github.com/users/janden/followers","following_url":"https://api.github.com/users/janden/following{/other_user}","gists_url":"https://api.github.com/users/janden/gists{/gist_id}","starred_url":"https://api.github.com/users/janden/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/janden/subscriptions","organizations_url":"https://api.github.com/users/janden/orgs","repos_url":"https://api.github.com/users/janden/repos","events_url":"https://api.github.com/users/janden/events{/privacy}","received_events_url":"https://api.github.com/users/janden/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2020-07-01T10:28:44Z","updated_at":"2021-03-18T09:57:56Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"To speed up PRs, it would be good to have a check in the CI that verifies the code style. From what I understand, there are two basic tools that can help here, `pycodestyle` and `autopep8`. The former checks whether the code follows the PEP 8 standard, while the latter can help reformat the code to be compliant. Ideally, we'd have `pycodestyle` run in one of the CIs (which?) and if it fails, instruct the author to run `autopep8`.\r\n\r\nThe crux here is that these tools don't quite work out of the box. For one, we may want to follow certain parts of PEP 8 while not others (line break before or after binary operator? maximum line length?). We can start with something loose, then make it stricter later on if needed. Another issue is that `autopep8` won't fix all the errors. You can make it fix more by specifying `--aggressive`, but that sounds a little risky. Part of the issue, I think, is that it's not clear that all errors can be fixed automatically and may require human judgment.\r\n\r\nIf I run `autopep8` on the current dev (942d8b0159bf538372f5a48aa0d8d8176af6416b) and then `pycodestyle kymatio --ignore=W504,E501` (ignore line break after binary operator and long lines), I get the output\r\n```\r\nkymatio/scattering2d/filter_bank.py:42:42: E226 missing whitespace around arithmetic operator\r\nkymatio/scattering2d/filter_bank.py:42:44: E226 missing whitespace around arithmetic operator\r\nkymatio/scattering2d/filter_bank.py:42:46: E226 missing whitespace around arithmetic operator\r\nkymatio/scattering2d/filter_bank.py:42:49: E226 missing whitespace around arithmetic operator\r\nkymatio/scattering2d/filter_bank.py:43:65: E226 missing whitespace around arithmetic operator\r\nkymatio/scattering2d/filter_bank.py:54:44: E226 missing whitespace around arithmetic operator\r\nkymatio/scattering2d/filter_bank.py:96:13: E741 ambiguous variable name 'l'\r\nkymatio/scattering2d/frontend/base_frontend.py:27:92: E226 missing whitespace around arithmetic operator\r\nkymatio/scattering2d/frontend/numpy_frontend.py:34:12: E713 test for membership should be 'not in'\r\nkymatio/scattering2d/frontend/tensorflow_frontend.py:37:16: E713 test for membership should be 'not in'\r\nkymatio/scattering2d/frontend/torch_frontend.py:97:12: E713 test for membership should be 'not in'\r\nkymatio/scattering3d/filter_bank.py:13:38: E741 ambiguous variable name 'O'\r\nkymatio/scattering3d/filter_bank.py:39:9: E741 ambiguous variable name 'l'\r\nkymatio/scattering3d/filter_bank.py:41:25: E226 missing whitespace around arithmetic operator\r\nkymatio/scattering3d/filter_bank.py:49:32: E741 ambiguous variable name 'O'\r\nkymatio/scattering3d/filter_bank.py:78:23: E741 ambiguous variable name 'O'\r\nkymatio/scattering3d/filter_bank.py:117:29: E741 ambiguous variable name 'O'\r\nkymatio/scattering3d/filter_bank.py:117:39: E741 ambiguous variable name 'l'\r\nkymatio/scattering3d/filter_bank.py:144:29: E226 missing whitespace around arithmetic operator\r\nkymatio/scattering3d/filter_bank.py:144:31: E226 missing whitespace around arithmetic operator\r\nkymatio/scattering3d/filter_bank.py:162:8: E741 ambiguous variable name 'l'\r\nkymatio/scattering3d/utils.py:29:14: E741 ambiguous variable name 'O'\r\nkymatio/scattering3d/core/scattering3d.py:30:9: E741 ambiguous variable name 'l'\r\nkymatio/scattering3d/frontend/base_frontend.py:23:30: E741 ambiguous variable name 'O'\r\nkymatio/scattering3d/frontend/numpy_frontend.py:32:17: W503 line break before binary operator\r\nkymatio/scattering3d/frontend/tensorflow_frontend.py:48:16: E713 test for membership should be 'not in'\r\nkymatio/scattering3d/frontend/torch_frontend.py:55:17: W503 line break before binary operator\r\nkymatio/scattering3d/frontend/torch_frontend.py:72:12: E713 test for membership should be 'not in'\r\nkymatio/scattering1d/frontend/numpy_frontend.py:30:12: E713 test for membership should be 'not in'\r\nkymatio/scattering1d/frontend/tensorflow_frontend.py:31:12: E713 test for membership should be 'not in'\r\nkymatio/scattering1d/frontend/torch_frontend.py:84:12: E713 test for membership should be 'not in'\r\nkymatio/scattering1d/backend/torch_skcuda_backend.py:197:35: E226 missing whitespace around arithmetic operator\r\n```\r\nThese are definitely fixable by hand. Alternatively, we can ignore them for now (like E741, although it's probably a good idea to fix) and add them in later.\r\n\r\nThis doesn't look at other potential problems, like import ordering, unused variables, and so on. For that, we could run `pylint` and `isort`, but I haven't looked at those yet.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/kymatio/kymatio/issues/626/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/kymatio/kymatio/issues/626/timeline","performed_via_github_app":null,"state_reason":null}