{"url":"https://api.github.com/repos/kymatio/kymatio/issues/797","repository_url":"https://api.github.com/repos/kymatio/kymatio","labels_url":"https://api.github.com/repos/kymatio/kymatio/issues/797/labels{/name}","comments_url":"https://api.github.com/repos/kymatio/kymatio/issues/797/comments","events_url":"https://api.github.com/repos/kymatio/kymatio/issues/797/events","html_url":"https://github.com/kymatio/kymatio/issues/797","id":1158368424,"node_id":"I_kwDOCQLq_c5FC0yo","number":797,"title":"Aliasing everywhere","user":{"login":"OverLordGoldDragon","id":16495490,"node_id":"MDQ6VXNlcjE2NDk1NDkw","avatar_url":"https://avatars.githubusercontent.com/u/16495490?v=4","gravatar_id":"","url":"https://api.github.com/users/OverLordGoldDragon","html_url":"https://github.com/OverLordGoldDragon","followers_url":"https://api.github.com/users/OverLordGoldDragon/followers","following_url":"https://api.github.com/users/OverLordGoldDragon/following{/other_user}","gists_url":"https://api.github.com/users/OverLordGoldDragon/gists{/gist_id}","starred_url":"https://api.github.com/users/OverLordGoldDragon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/OverLordGoldDragon/subscriptions","organizations_url":"https://api.github.com/users/OverLordGoldDragon/orgs","repos_url":"https://api.github.com/users/OverLordGoldDragon/repos","events_url":"https://api.github.com/users/OverLordGoldDragon/events{/privacy}","received_events_url":"https://api.github.com/users/OverLordGoldDragon/received_events","type":"User","site_admin":false},"labels":[{"id":1076176418,"node_id":"MDU6TGFiZWwxMDc2MTc2NDE4","url":"https://api.github.com/repos/kymatio/kymatio/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":1076176424,"node_id":"MDU6TGFiZWwxMDc2MTc2NDI0","url":"https://api.github.com/repos/kymatio/kymatio/labels/question","name":"question","color":"d876e3","default":true,"description":"Further information is requested"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-03-03T12:47:02Z","updated_at":"2022-03-05T17:07:37Z","closed_at":"2022-03-04T09:57:00Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"`x_complex[::stride]` can be lossless while `abs(x_complex)[::stride]` isn't; modulus expands the spectrum. Stride and modulus commute, hence we lose information. \r\n\r\nThis yielded max 25% relative absolute difference on a simple example I tried, in second order:\r\n\r\n```python\r\nsc.oversampling = 0\r\no0 = sc(x)\r\nsc.oversampling = 999\r\no1 = sc(x)[:, ::sc.T]\r\nadiff = np.abs(o0 - o1) / (np.abs(o0) + 1e7)\r\n```\r\nHowever, I noticed 1) difference in first order was `<.01%`, as expected; 2) second-order coeffs matched within a scalar multiple of `1.27`.\r\n\r\nThis is tricky to interpret. Lossless subsampling preserves all information, yet a nonlinearity (`abs`) on this \"identical\" data produces a different result. From point of view of `abs`, we _do_ lose information - obvious if we take `abs` first and then subsample. Yet, we can fully invert the complex subsampling and then take `abs` to produce the exact same `abs`. \r\n\r\nHowever, consider if the nonlinearity instead mapped the first FFT bin to Nyquist, for any input length - e.g. `(-1)**floor(x / factor)`. Then, no matter how much we FFT upsample, there's always content at Nyquist. Hence I think the correct answer is, the perspective that matters is that of the intended operators; if our transform relied on the original 1Hz becoming Nyquist, this'll be impossible post-subsampling. Similarly, scattering relies on modulus, and modulus isn't same post-subsampling: the continuous-time math is distorted.\r\n\r\nThus, `allclose(o0, o1)` must pass - namely, o0 must agree with o1. This suggests potential need for a normalizing factor dependent upon `k`'s. Outstanding:\r\n\r\n - [x] Is there exact math for this?\r\n - [x] Is the difference always a constant scaling?\r\n\r\n<details><summary><b>code</b></summary>\r\n\r\n```python\r\nimport numpy as np\r\nfrom scipy.fft import fft, ifft\r\nfrom kymatio.numpy import Scattering1D\r\nfrom kymatio.visuals import plot\r\n\r\nsc = Scattering1D(8, 2048, Q=8, T=256, max_pad_factor=None)\r\nx = np.random.randn(sc.N)\r\n\r\n#%%\r\ndef adiff(x0, x1):\r\n    return np.abs(x0 - x1) / (np.abs(x0) + 1e-7)\r\n    \r\ndef padiff(x0, x1):\r\n    d = adiff(x0, x1)\r\n    print(d.min(), d.max(), d.mean(), [n[0] for n in np.where(d == d.max())])\r\n\r\n#%%\r\nsc.oversampling = 0\r\no0 = sc(x)\r\nsc.oversampling = 999\r\no1 = sc(x)[:, ::sc.T]\r\n\r\nord1_idxs, ord2_idxs = (sc.meta()['order'] == 1), (sc.meta()['order'] == 2)\r\no0_1, o1_1 = o0[ord1_idxs], o1[ord1_idxs]\r\no0_2, o1_2 = o0[ord2_idxs], o1[ord2_idxs]\r\n\r\npadiff(o0_1, o1_1)\r\npadiff(o0_2, o1_2)\r\n\r\n#%% compute for one specific coefficient\r\nn1 = 42\r\nn2 = -1\r\npf1 = sc.psi1_f[n1][0]\r\nj1 = sc.psi1_f[n1]['j']\r\nj2 = sc.psi1_f[n2]['j']\r\npf20 = sc.psi2_f[n2][j1]\r\npf21 = sc.psi2_f[n2][0]\r\n\r\nnp.random.seed(0)\r\nxp = np.pad(x, (len(pf1) - len(x))//2, mode='reflect')\r\nxf = fft(xp)\r\n\r\no0, o1 = {}, {}\r\n\r\no0['0']  = xf * pf1\r\no0['1']  = o0['0'].reshape(2**j1, -1).mean(axis=0)\r\no0['2']  = ifft(o0['1'])\r\no0['3']  = np.abs(o0['2'])\r\n\r\no0['4']  = fft(o0['3'])\r\no0['5']  = o0['4'] * pf20\r\no0['6']  = o0['5'].reshape(2**int(j2 - j1), -1).mean(axis=0)\r\no0['7']  = ifft(o0['6'])\r\no0['8']  = np.abs(o0['7'])\r\n\r\no0['9']  = fft(o0['8'])\r\no0['10'] = o0['9'] * sc.phi_f[j2]\r\no0['11'] = o0['10'].reshape(sc.T//2**j2, -1).mean(axis=0)\r\no0['12'] = ifft(o0['11']).real\r\n\r\n\r\no1['0']  = xf * pf1\r\no1['2']  = ifft(o1['0'])\r\no1['3']  = np.abs(o1['2'])\r\n\r\no1['4']  = fft(o1['3'])\r\no1['5']  = o1['4'] * pf21\r\no1['7']  = ifft(o1['5'])\r\no1['8']  = np.abs(o1['7'])\r\n\r\no1['9']  = fft(o1['8'])\r\no1['10'] = o1['9'] * sc.phi_f[0]\r\no1['11'] = o1['10'].reshape(sc.T, -1).mean(axis=0)\r\no1['12'] = ifft(o1['11']).real\r\n\r\nO0, O1 = o0['12'], o1['12']\r\ns, e = sc.ind_start[sc.log2_T], sc.ind_end[sc.log2_T]\r\nO0u, O1u = O0[s:e], O1[s:e]\r\npadiff(O0, O1)\r\npadiff(O0u, O1u)\r\nprint()\r\n\r\n#%%\r\nfor i in (0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12):\r\n    if i in (3, 8):\r\n        print()\r\n    i = str(i)\r\n    c0, c1 = o0[i], o1[i]\r\n    c0 = c0[1:len(c0)//2]\r\n    c1 = c1[1:len(c1)//2]\r\n    # c0 = c0 / np.abs(c0).max()\r\n    # c1 = c1 / np.abs(c1).max()\r\n       \r\n    mx = max(np.abs(c0).max(), np.abs(c1).max()) * 1.05\r\n    pkw = dict(abs=1, show=1, ylims=(0, mx))\r\n    \r\n    plot(c0, title=f\"o0-{i}\", **pkw)\r\n    plot(c1, title=f\"o1-{i}\", **pkw)\r\n ```\r\n</details>","closed_by":{"login":"OverLordGoldDragon","id":16495490,"node_id":"MDQ6VXNlcjE2NDk1NDkw","avatar_url":"https://avatars.githubusercontent.com/u/16495490?v=4","gravatar_id":"","url":"https://api.github.com/users/OverLordGoldDragon","html_url":"https://github.com/OverLordGoldDragon","followers_url":"https://api.github.com/users/OverLordGoldDragon/followers","following_url":"https://api.github.com/users/OverLordGoldDragon/following{/other_user}","gists_url":"https://api.github.com/users/OverLordGoldDragon/gists{/gist_id}","starred_url":"https://api.github.com/users/OverLordGoldDragon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/OverLordGoldDragon/subscriptions","organizations_url":"https://api.github.com/users/OverLordGoldDragon/orgs","repos_url":"https://api.github.com/users/OverLordGoldDragon/repos","events_url":"https://api.github.com/users/OverLordGoldDragon/events{/privacy}","received_events_url":"https://api.github.com/users/OverLordGoldDragon/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/kymatio/kymatio/issues/797/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/kymatio/kymatio/issues/797/timeline","performed_via_github_app":null,"state_reason":"completed"}