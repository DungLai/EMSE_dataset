{"url":"https://api.github.com/repos/kymatio/kymatio/issues/735","repository_url":"https://api.github.com/repos/kymatio/kymatio","labels_url":"https://api.github.com/repos/kymatio/kymatio/issues/735/labels{/name}","comments_url":"https://api.github.com/repos/kymatio/kymatio/issues/735/comments","events_url":"https://api.github.com/repos/kymatio/kymatio/issues/735/events","html_url":"https://github.com/kymatio/kymatio/issues/735","id":869338602,"node_id":"MDU6SXNzdWU4NjkzMzg2MDI=","number":735,"title":"Towards modularizing the codebase in a semantically meaningful way","user":{"login":"eickenberg","id":1306635,"node_id":"MDQ6VXNlcjEzMDY2MzU=","avatar_url":"https://avatars.githubusercontent.com/u/1306635?v=4","gravatar_id":"","url":"https://api.github.com/users/eickenberg","html_url":"https://github.com/eickenberg","followers_url":"https://api.github.com/users/eickenberg/followers","following_url":"https://api.github.com/users/eickenberg/following{/other_user}","gists_url":"https://api.github.com/users/eickenberg/gists{/gist_id}","starred_url":"https://api.github.com/users/eickenberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eickenberg/subscriptions","organizations_url":"https://api.github.com/users/eickenberg/orgs","repos_url":"https://api.github.com/users/eickenberg/repos","events_url":"https://api.github.com/users/eickenberg/events{/privacy}","received_events_url":"https://api.github.com/users/eickenberg/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-04-27T23:14:18Z","updated_at":"2021-04-27T23:14:18Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"Hi everybody,\r\n\r\nIt's been about a year now that I have been simmering thoughts about how to organize the kymatio code base away from the current hard-baked design choices and towards a modular architecture that maintains the same outputs and interfaces in the default settings, but that allows researchers to import parts of the code base instead of requiring to rewrite parts when they want to do anything new.\r\nIn addition, we are actually hiding away several types of wavelet transforms and fourier convolutions whose results we cannot access other than by their smoothed moduli. It should be possible for users to access these intermediate states in an easy way.\r\n\r\nAny modifications to the code base must respect some guiding principles.\r\n1. They should implement new functionality for all backends\r\n2. They should maintain or improve computation speeds\r\n3. They should maintain or improve memory requirements\r\n4. They should at least tend towards unifying the codebase across dimensionalities of signal (though this is always hard and case-dependent. There is a reason we set up the codebase such that the different dimensionalities of signal can be treated with different code)\r\n\r\nOne important thing to maintain through any modifications is the possibility of depth-first traversal of the scattering tree. It is at the leaves of this tree that the outputs live and the outputs have lower memory requirements than the intermediate states. Storing all intermediate states due to breadth-first search may become prohibitive in certain settings, especially for 3D signals at high resolution. This depth-first-requirement makes it less simple to specify wavelets and scattering layers as a stack of feed-forward modules in the spirit of `torch.nn.Sequential`.\r\n\r\nOne way of addressing this issue would be to create modules with hooks/callbacks in which you hook a second-order scattering layer into a wavelet transform object.\r\n\r\nFortunately, python comes to our rescue with a more elegant solution: iterator/generator pipelines\r\n\r\nModularizing Kymatio with generator pipelines\r\n-------------------------------------------------------------\r\n\r\nI see the following semantic split of kymatio functionalities:\r\n1. (Convolutions)\r\n2. Wavelet Transforms\r\n3. Scattering Transforms\r\n\r\nScattering uses wavelets and we have implemented several types of them. Making a wavelet object can expose them to the user. Wavelet transforms are implemented as convolutions with very specific filters. Sometimes it is useful to use a generic Fourier convolution to implement a wavelet transform, but sometimes there are other ways of computing wavelet transforms more efficiently.\r\n\r\nThe three levels above reflect this setting. Based on that, I wrote a code base, currently in Pytorch only, to implement this idea, and to stress-test it on large 3D scattering settings. So far it has held up. I have put the relevant bits in the a repo at https://github.com/eickenberg/scattering_iterators for people to check out. Large chunks of it are well documented. Most functions are tested. They should work across all dimensionalities at least for the basic scattering transform (though I haven't tested 1D).\r\n\r\nIn order to integrate these ideas into kymatio I propose the following procedure:\r\n\r\nTODO\r\n--------\r\n\r\n- [ ] Integrate the convolution iterator https://github.com/eickenberg/scattering_iterators/blob/main/convolution_iterator.py into the codebase. This entails writing it for the other backends, and then replacing the loops over filters in the scattering functions with loops over these iterators\r\n- [ ] Integrate the wavelet transform iterator into the codebase by first extending it to all backends, then replacing the loop over convolution iterator with a loop over the wavelet transform iterator\r\n- [ ] Integrate the scattering iterator as above\r\n\r\n\r\nAt the second juncture it will be useful to add in several different procedures for wavelet transforms (such as Haar wavelets as a test case for wavelets computed by differences and subsampling) to see how the system handles them.\r\n\r\nI will eventually get to implementing these ideas, but I am also happy to guide anybody who wants to take a stab at it and review any PRs.\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/kymatio/kymatio/issues/735/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":2,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/kymatio/kymatio/issues/735/timeline","performed_via_github_app":null,"state_reason":null}