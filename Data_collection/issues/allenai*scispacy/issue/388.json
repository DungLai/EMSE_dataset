{"url":"https://api.github.com/repos/allenai/scispacy/issues/388","repository_url":"https://api.github.com/repos/allenai/scispacy","labels_url":"https://api.github.com/repos/allenai/scispacy/issues/388/labels{/name}","comments_url":"https://api.github.com/repos/allenai/scispacy/issues/388/comments","events_url":"https://api.github.com/repos/allenai/scispacy/issues/388/events","html_url":"https://github.com/allenai/scispacy/issues/388","id":962049923,"node_id":"MDU6SXNzdWU5NjIwNDk5MjM=","number":388,"title":"Combining Entities Recognized by Different Models & by the AbbreviationDetector","user":{"login":"Salamander230","id":87550781,"node_id":"MDQ6VXNlcjg3NTUwNzgx","avatar_url":"https://avatars.githubusercontent.com/u/87550781?v=4","gravatar_id":"","url":"https://api.github.com/users/Salamander230","html_url":"https://github.com/Salamander230","followers_url":"https://api.github.com/users/Salamander230/followers","following_url":"https://api.github.com/users/Salamander230/following{/other_user}","gists_url":"https://api.github.com/users/Salamander230/gists{/gist_id}","starred_url":"https://api.github.com/users/Salamander230/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Salamander230/subscriptions","organizations_url":"https://api.github.com/users/Salamander230/orgs","repos_url":"https://api.github.com/users/Salamander230/repos","events_url":"https://api.github.com/users/Salamander230/events{/privacy}","received_events_url":"https://api.github.com/users/Salamander230/received_events","type":"User","site_admin":false},"labels":[{"id":1068015161,"node_id":"MDU6TGFiZWwxMDY4MDE1MTYx","url":"https://api.github.com/repos/allenai/scispacy/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1068015162,"node_id":"MDU6TGFiZWwxMDY4MDE1MTYy","url":"https://api.github.com/repos/allenai/scispacy/labels/help%20wanted","name":"help wanted","color":"008672","default":true,"description":"Extra attention is needed"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-08-05T17:33:07Z","updated_at":"2021-08-05T21:06:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I recently encountered both spaCy and ScispaCy and so far I think ScispaCy is an awesome tool to be able to identify and link biomedical entities found in text with concepts from UMLS and other knowledge bases.\r\n\r\nI was thinking it would be even more powerful if the entities identified by different models and by the AbbreviationDetector can be combined. This would allow the shortcomings of one model to be compensated by another model. It would also allow a model's shortcomings to be compensated by the long forms of any detected abbreviations.\r\n\r\nFor example, the identified entities in \"Spinal and bulbar muscular atrophy (SBMA)\" using the `en_core_sci_lg` model in the [ScispaCy Demo](url) are: \r\n- \"Spinal\"\r\n- \"bulbar muscular atrophy\"\r\n- \"SBMA\"\r\n\r\nHowever, after adding the AbbreviationDetector as a pipe, we would recognize \"SBMA\" as an abbreviation for \"Spinal and bulbar muscular atrophy\", so really, the entities should be the following, but they are not corrected as such:\r\n- \"Spinal and bulbar muscular atrophy\"\r\n- \"SBMA\"\r\n\r\nSimilarly, some models may identify fragments of a phrase as separate entities while another model may recognize a whole phrase as one entity. Or, some models may recognize certain entities while other models may completely ignore them. If there is some way of consolidating entities found by different models, then a more accurate and complete list of entities will be obtained than just using any given model individually.\r\n\r\nThere are also times when a longer phrased entity is not always better, because it may yield poor matching results that are below the desired mention threshold for a given knowledge base. For example, in the [ScispaCy Demo](https://scispacy.apps.allenai.org/), the `en_core_sci_md` model identifies \"inherited motor neuron disease\" as an entity but gives no results satisfying the mention threshold of 0.85. On the other hand, the `en_core_sci_sm` model identifies \"inherited\" and \"motor neuron disease\" as separate entities, each of which have matches above the 0.85 mention threshold. Therefore, it may generally be helpful to also keep track of any related original, unconsolidated entities from each model and pick the next longest phrased entities that have matching results above the desired mention threshold.\r\n\r\nOverall, a function with the following components would be roughly what I'm looking for:\r\n- Parameters to take in:\r\n   - The text string from which entities will be identified.\r\n   - A boolean for whether or not to identify the long forms of abbreviations as entities. (e.g., True)\r\n   - A list of the desired models to use (e.g., [\"en_core_sci_sm\", \"en_core_sci_scibert\", \"en_ner_bc5cdr_md\"]).\r\n   - A dictionary with any desired configurations of the scispacy linker, including the linker name (e.g., {\"resolve_abbreviations\": True, \"filter_for_definitions\": False, \"no_definition_threshold\": 0.85, \"linker_name\": \"umls\"})\r\n  \r\n- Output: A tuple with the following two items:\r\n   - The nlp object that can be used to make the linker to the utilized knowledge base.\r\n   - A Doc object with the longest length entities that also have matches above the user's desired mention threshold.\r\n\r\nHere is how use of the proposed function, which I call `consolidated_entities_tuple` might look like (This is NOT functioning code, just an example of how I imagine the functionality to be):\r\n```\r\nimport spacy\r\nimport scispacy\r\n\r\nfrom scispacy.linking import EntityLinker\r\nfrom scispacy.abbreviation import AbbreviationDetector\r\n\r\ndef consolidated_entities_tuple(text: str, long_form_abbrev_ents: bool, model_list: list, scispacy_linker_config: dict):\r\n     # place code for function here, likely to utilize the imported modules above\r\n     return (nlp, doc)\r\n\r\ntext = \"Spinal and bulbar muscular atrophy (SBMA) is an \\\r\ninherited motor neuron disease caused by the expansion \\\r\nof a polyglutamine tract within the androgen receptor (AR). \\\r\nSBMA can be caused by this easily.\"\r\n\r\ntup = consolidated_entities_tuple(text, True, [\"en_core_sci_sm\", \"en_core_sci_scibert\", \"en_ner_bc5cdr_md\"], \r\n                                  {\"resolve_abbreviations\": True, \"filter_for_definitions\": False, \r\n                                   \"no_definition_threshold\": 0.85, \"linker_name\": \"umls\"})\r\n\r\nnlp = tup[0]\r\ndoc = tup[1]\r\n\r\n# Let's look at the first entity\r\nentity = doc.ents[0]\r\n\r\nprint(\"Name: \", entity)\r\n>>> Name: Spinal and bulbar muscular atrophy\r\n\r\n# Each entity is linked to UMLS with a score\r\n# (currently just char-3gram matching).\r\nlinker = nlp.get_pipe(\"scispacy_linker\")\r\nfor umls_ent in entity._.kb_ents:\r\n\tprint(linker.kb.cui_to_entity[umls_ent[0]])\r\n\r\n>>> CUI: C1839259, Name: Bulbo-Spinal Atrophy, X-Linked\r\n>>> Definition: An X-linked recessive form of spinal muscular atrophy. It is due to a mutation of the\r\n  \t\t\t\tgene encoding the ANDROGEN RECEPTOR.\r\n>>> TUI(s): T047\r\n>>> Aliases (abbreviated, total: 50):\r\n         Bulbo-Spinal Atrophy, X-Linked, Bulbo-Spinal Atrophy, X-Linked, ....\r\n\r\n>>> CUI: C0752353, Name: Atrophy, Muscular, Spinobulbar\r\n>>> Definition: .....\r\n>>> TUI(s): T047\r\n>>> Aliases: (total: ?):\r\n         ... , ... , ... , ...\r\n\r\n>>> .....\r\n\r\n# Now let's look at the abbreviations in the text\r\nprint(\"Abbreviation\", \"\\t\", \"Definition\")\r\nfor abrv in doc._.abbreviations:\r\n\tprint(f\"{abrv} \\t ({abrv.start}, {abrv.end}) {abrv._.long_form}\")\r\n\r\n>>> Abbreviation\t Span\t    Definition\r\n>>> SBMA \t\t (33, 34)   Spinal and bulbar muscular atrophy\r\n>>> SBMA \t   \t (6, 7)     Spinal and bulbar muscular atrophy\r\n>>> AR   \t\t (29, 30)   androgen receptor\r\n```\r\n\r\nThank you for taking the time to read this. If this sort of function already exists in ScispaCy, please let me know. Otherwise, if this sort of function or some other code that accomplishes the same thing can be added to ScispaCy, that would be awesome. I believe it can be a powerful addition to the library. Let me know your thoughts.\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/allenai/scispacy/issues/388/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/allenai/scispacy/issues/388/timeline","performed_via_github_app":null,"state_reason":null}