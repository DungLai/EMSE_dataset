{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/192","repository_url":"https://api.github.com/repos/ultralytics/yolov3","labels_url":"https://api.github.com/repos/ultralytics/yolov3/issues/192/labels{/name}","comments_url":"https://api.github.com/repos/ultralytics/yolov3/issues/192/comments","events_url":"https://api.github.com/repos/ultralytics/yolov3/issues/192/events","html_url":"https://github.com/ultralytics/yolov3/issues/192","id":430028867,"node_id":"MDU6SXNzdWU0MzAwMjg4Njc=","number":192,"title":"CUSTOM TRAINING EXAMPLE (OLD)","user":{"login":"glenn-jocher","id":26833433,"node_id":"MDQ6VXNlcjI2ODMzNDMz","avatar_url":"https://avatars.githubusercontent.com/u/26833433?v=4","gravatar_id":"","url":"https://api.github.com/users/glenn-jocher","html_url":"https://github.com/glenn-jocher","followers_url":"https://api.github.com/users/glenn-jocher/followers","following_url":"https://api.github.com/users/glenn-jocher/following{/other_user}","gists_url":"https://api.github.com/users/glenn-jocher/gists{/gist_id}","starred_url":"https://api.github.com/users/glenn-jocher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glenn-jocher/subscriptions","organizations_url":"https://api.github.com/users/glenn-jocher/orgs","repos_url":"https://api.github.com/users/glenn-jocher/repos","events_url":"https://api.github.com/users/glenn-jocher/events{/privacy}","received_events_url":"https://api.github.com/users/glenn-jocher/received_events","type":"User","site_admin":false},"labels":[{"id":1295180840,"node_id":"MDU6TGFiZWwxMjk1MTgwODQw","url":"https://api.github.com/repos/ultralytics/yolov3/labels/tutorial","name":"tutorial","color":"3cba0b","default":false,"description":"Tutorial or example"},{"id":1890885613,"node_id":"MDU6TGFiZWwxODkwODg1NjEz","url":"https://api.github.com/repos/ultralytics/yolov3/labels/Stale","name":"Stale","color":"ededed","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"glenn-jocher","id":26833433,"node_id":"MDQ6VXNlcjI2ODMzNDMz","avatar_url":"https://avatars.githubusercontent.com/u/26833433?v=4","gravatar_id":"","url":"https://api.github.com/users/glenn-jocher","html_url":"https://github.com/glenn-jocher","followers_url":"https://api.github.com/users/glenn-jocher/followers","following_url":"https://api.github.com/users/glenn-jocher/following{/other_user}","gists_url":"https://api.github.com/users/glenn-jocher/gists{/gist_id}","starred_url":"https://api.github.com/users/glenn-jocher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glenn-jocher/subscriptions","organizations_url":"https://api.github.com/users/glenn-jocher/orgs","repos_url":"https://api.github.com/users/glenn-jocher/repos","events_url":"https://api.github.com/users/glenn-jocher/events{/privacy}","received_events_url":"https://api.github.com/users/glenn-jocher/received_events","type":"User","site_admin":false},"assignees":[{"login":"glenn-jocher","id":26833433,"node_id":"MDQ6VXNlcjI2ODMzNDMz","avatar_url":"https://avatars.githubusercontent.com/u/26833433?v=4","gravatar_id":"","url":"https://api.github.com/users/glenn-jocher","html_url":"https://github.com/glenn-jocher","followers_url":"https://api.github.com/users/glenn-jocher/followers","following_url":"https://api.github.com/users/glenn-jocher/following{/other_user}","gists_url":"https://api.github.com/users/glenn-jocher/gists{/gist_id}","starred_url":"https://api.github.com/users/glenn-jocher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glenn-jocher/subscriptions","organizations_url":"https://api.github.com/users/glenn-jocher/orgs","repos_url":"https://api.github.com/users/glenn-jocher/repos","events_url":"https://api.github.com/users/glenn-jocher/events{/privacy}","received_events_url":"https://api.github.com/users/glenn-jocher/received_events","type":"User","site_admin":false}],"milestone":null,"comments":169,"created_at":"2019-04-06T12:26:19Z","updated_at":"2021-06-21T22:47:11Z","closed_at":"2020-11-14T00:25:11Z","author_association":"MEMBER","active_lock_reason":null,"body":"This guide explains how to train your own **custom dataset** with YOLOv3.\r\n\r\n## Before You Start\r\n\r\nClone this repo, download [COCO](http://cocodataset.org/#home) dataset, and install [requirements.txt](https://github.com/ultralytics/yolov3/blob/master/requirements.txt) dependencies, including **Python>=3.7** and **PyTorch>=1.4**.\r\n\r\n```bash\r\ngit clone https://github.com/ultralytics/yolov3\r\nbash yolov3/data/get_coco2017.sh  # 19GB\r\ncd yolov3\r\npip install -U -r requirements.txt\r\n```\r\n\r\n## Train On Custom Data\r\n\r\n**1. Label your data in Darknet format.** After using a tool like [Labelbox](https://labelbox.com/) to label your images, you'll need to export your data to darknet format. Your data should follow the example created by `get_coco2017.sh`, with images and labels in separate parallel folders, and one label file per image (if no objects in image, no label file is required). The label file specifications are:\r\n- One row per object\r\n- Each row is `class x_center y_center width height` format.\r\n- Box coordinates must be in **normalized xywh** format (from 0 - 1). If your boxes are in pixels, divide `x_center` and `width` by image width, and `y_center` and `height` by image height.\r\n- Class numbers are zero-indexed (start from 0).\r\n\r\nEach image's label file must be locatable by simply replacing `/images/*.jpg` with `/labels/*.txt` in its pathname. An example image and label pair would be:\r\n```bash\r\n../coco/images/train2017/000000109622.jpg  # image\r\n../coco/labels/train2017/000000109622.txt  # label\r\n```\r\nAn example label file with 5 persons (all class `0`):  \r\n<img width=\"459\" alt=\"Screen Shot 2020-04-01 at 11 44 26 AM\" src=\"https://user-images.githubusercontent.com/26833433/78174482-307bb800-740e-11ea-8b09-840693671042.png\">\r\n\r\n**2. Create train and test `*.txt` files.** Here we create `data/coco16.txt`, which contains the first 16 images of the COCO2017 dataset. We will use this small dataset for both training and testing. Each row contains a path to an image, and remember one label must also exist in a corresponding `/labels` folder for each image containing objects.  \r\n<img width=\"555\" alt=\"Screen Shot 2020-04-01 at 11 47 28 AM\" src=\"https://user-images.githubusercontent.com/26833433/78174735-95cfa900-740e-11ea-8e50-bfa7e934e768.png\">\r\n\r\n**3. Create new `*.names` file** listing the class names in our dataset. Here we use the existing `data/coco.names` file. Classes are **zero indexed**, so `person` is class `0`, `bicycle` is class `1`, etc.  \r\n<img width=\"355\" alt=\"Screenshot 2019-04-06 at 14 06 34\" src=\"https://user-images.githubusercontent.com/26833433/55669238-3b405300-5875-11e9-9b93-7363c86def6a.png\">\r\n\r\n**4. Create new `*.data` file** with your class count (COCO has 80 classes), paths to train and validation datasets (we use the same images twice here, but in practice you'll want to validate your results on a separate set of images), and with the path to your `*.names` file. Save as `data/coco16.data`.\r\n<img width=\"567\" alt=\"Screen Shot 2020-04-01 at 11 48 41 AM\" src=\"https://user-images.githubusercontent.com/26833433/78174844-c6174780-740e-11ea-847d-4fa94d556825.png\">\r\n\r\n**5. Update `yolov3-spp.cfg`** (optional). By default each YOLO layer has 255 outputs: 85 values per anchor [4 box coordinates + 1 object confidence + 80 class confidences], times 3 anchors. Update the settings to `filters=[5 + n] * 3` and `classes=n`, where `n` is your class count. This modification should be made in **all 3 YOLO layers**.\r\n<img width=\"722\" alt=\"Screen Shot 2020-04-02 at 12 37 31 PM\" src=\"https://user-images.githubusercontent.com/26833433/78294286-faf2cf80-74de-11ea-9b4e-95afed628ca8.png\">\r\n\r\n**6. (OPTIONAL) Update hyperparameters** such as LR, LR scheduler, optimizer, augmentation settings, multi_scale settings, etc in `train.py` for your particular task. If in doubt about these settings, **we recommend you start with all-default settings** before changing anything.\r\n\r\n**7. Train.** Run `python3 train.py --cfg yolov3-spp.cfg --data data/coco16.data --nosave` to train using your custom *.data and *.cfg. By default pretrained `--weights yolov3-spp-ultralytics.pt` is used to initialize your model. You can instead train from scratch with `--weights ''`, or from any other weights or backbone of your choice, as long as it corresponds to your *.cfg.\r\n\r\n## Visualize Results\r\n\r\nRun `from utils import utils; utils.plot_results()` to see your training losses and performance metrics vs epoch. If you don't see acceptable performance, try [hyperparameter tuning](https://github.com/ultralytics/yolov3/issues/392) and re-training. Multiple `results.txt` files are overlaid automatically to compare performance. \r\n\r\nHere we see training results from `data/coco64.data` starting from scratch, a darknet53 backbone, and our `yolov3-spp-ultralytics.pt` pretrained [weights](https://github.com/ultralytics/yolov3#pretrained-weights).\r\n\r\n![download](https://user-images.githubusercontent.com/26833433/78175826-599d4800-7410-11ea-87d4-f629071838f6.png)\r\n\r\nRun inference with your trained model by copying an image to `data/samples` folder and running   \r\n`python3 detect.py --weights weights/last.pt`\r\n![coco_val2014_000000001464](https://user-images.githubusercontent.com/26833433/53104219-42aed580-352f-11e9-9be5-60f84ab05dc1.jpg)\r\n\r\n## Reproduce Our Results\r\n\r\nTo reproduce this tutorial, simply run the following code. This trains all the various [tutorials](https://github.com/ultralytics/yolov3/wiki), saves each results*.txt file separately, and plots them together as `results.png`. It all takes less than 30 minutes on a 2080Ti. \r\n\r\n```bash\r\ngit clone https://github.com/ultralytics/yolov3\r\npython3 -c \"from yolov3.utils.google_utils import gdrive_download; gdrive_download('1h0Id-7GUyuAmyc9Pwo2c3IZ17uExPvOA','coco2017demos.zip')\"  # datasets (20 Mb)\r\ncd yolov3\r\npython3 train.py --data coco64.data --batch 16 --epochs 300 --nosave --cache --weights '' --name from_scratch\r\npython3 train.py --data coco64.data --batch 16 --epochs 300 --nosave --cache --weights yolov3-spp-ultralytics.pt --name from_yolov3-spp-ultralytics\r\npython3 train.py --data coco64.data --batch 16 --epochs 300 --nosave --cache --weights darknet53.conv.74 --name from_darknet53.conv.74\r\npython3 train.py --data coco1.data --batch 1 --epochs 300 --nosave --cache --weights darknet53.conv.74 --name 1img\r\npython3 train.py --data coco1cls.data --batch 16 --epochs 300 --nosave --cache --weights darknet53.conv.74 --cfg yolov3-spp-1cls.cfg --name 1cls\r\n```\r\n\r\n## Reproduce Our Environment\r\n\r\nTo access an up-to-date working environment (with all dependencies including CUDA/CUDNN, Python and PyTorch preinstalled), consider a:\r\n\r\n- **GCP** Deep Learning VM with $300 free credit offer: See our [GCP Quickstart Guide](https://github.com/ultralytics/yolov3/wiki/GCP-Quickstart) \r\n- **Google Colab Notebook** with 12 hours of free GPU time: [Google Colab Notebook](https://github.com/ultralytics/yolov3/blob/master/tutorial.ipynb)\r\n- **Docker Image** from https://hub.docker.com/r/ultralytics/yolov3. See [Docker Quickstart Guide](https://github.com/ultralytics/yolov3/wiki/Docker-Quickstart) ","closed_by":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"reactions":{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/192/reactions","total_count":28,"+1":13,"-1":0,"laugh":2,"hooray":3,"confused":0,"heart":6,"rocket":3,"eyes":1},"timeline_url":"https://api.github.com/repos/ultralytics/yolov3/issues/192/timeline","performed_via_github_app":null,"state_reason":"completed"}