{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/102","repository_url":"https://api.github.com/repos/ultralytics/yolov3","labels_url":"https://api.github.com/repos/ultralytics/yolov3/issues/102/labels{/name}","comments_url":"https://api.github.com/repos/ultralytics/yolov3/issues/102/comments","events_url":"https://api.github.com/repos/ultralytics/yolov3/issues/102/events","html_url":"https://github.com/ultralytics/yolov3/issues/102","id":412507794,"node_id":"MDU6SXNzdWU0MTI1MDc3OTQ=","number":102,"title":"SINGLE-CLASS TRAINING EXAMPLE","user":{"login":"glenn-jocher","id":26833433,"node_id":"MDQ6VXNlcjI2ODMzNDMz","avatar_url":"https://avatars.githubusercontent.com/u/26833433?v=4","gravatar_id":"","url":"https://api.github.com/users/glenn-jocher","html_url":"https://github.com/glenn-jocher","followers_url":"https://api.github.com/users/glenn-jocher/followers","following_url":"https://api.github.com/users/glenn-jocher/following{/other_user}","gists_url":"https://api.github.com/users/glenn-jocher/gists{/gist_id}","starred_url":"https://api.github.com/users/glenn-jocher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glenn-jocher/subscriptions","organizations_url":"https://api.github.com/users/glenn-jocher/orgs","repos_url":"https://api.github.com/users/glenn-jocher/repos","events_url":"https://api.github.com/users/glenn-jocher/events{/privacy}","received_events_url":"https://api.github.com/users/glenn-jocher/received_events","type":"User","site_admin":false},"labels":[{"id":1295180840,"node_id":"MDU6TGFiZWwxMjk1MTgwODQw","url":"https://api.github.com/repos/ultralytics/yolov3/labels/tutorial","name":"tutorial","color":"3cba0b","default":false,"description":"Tutorial or example"},{"id":1890885613,"node_id":"MDU6TGFiZWwxODkwODg1NjEz","url":"https://api.github.com/repos/ultralytics/yolov3/labels/Stale","name":"Stale","color":"ededed","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"glenn-jocher","id":26833433,"node_id":"MDQ6VXNlcjI2ODMzNDMz","avatar_url":"https://avatars.githubusercontent.com/u/26833433?v=4","gravatar_id":"","url":"https://api.github.com/users/glenn-jocher","html_url":"https://github.com/glenn-jocher","followers_url":"https://api.github.com/users/glenn-jocher/followers","following_url":"https://api.github.com/users/glenn-jocher/following{/other_user}","gists_url":"https://api.github.com/users/glenn-jocher/gists{/gist_id}","starred_url":"https://api.github.com/users/glenn-jocher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glenn-jocher/subscriptions","organizations_url":"https://api.github.com/users/glenn-jocher/orgs","repos_url":"https://api.github.com/users/glenn-jocher/repos","events_url":"https://api.github.com/users/glenn-jocher/events{/privacy}","received_events_url":"https://api.github.com/users/glenn-jocher/received_events","type":"User","site_admin":false},"assignees":[{"login":"glenn-jocher","id":26833433,"node_id":"MDQ6VXNlcjI2ODMzNDMz","avatar_url":"https://avatars.githubusercontent.com/u/26833433?v=4","gravatar_id":"","url":"https://api.github.com/users/glenn-jocher","html_url":"https://github.com/glenn-jocher","followers_url":"https://api.github.com/users/glenn-jocher/followers","following_url":"https://api.github.com/users/glenn-jocher/following{/other_user}","gists_url":"https://api.github.com/users/glenn-jocher/gists{/gist_id}","starred_url":"https://api.github.com/users/glenn-jocher/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/glenn-jocher/subscriptions","organizations_url":"https://api.github.com/users/glenn-jocher/orgs","repos_url":"https://api.github.com/users/glenn-jocher/repos","events_url":"https://api.github.com/users/glenn-jocher/events{/privacy}","received_events_url":"https://api.github.com/users/glenn-jocher/received_events","type":"User","site_admin":false}],"milestone":null,"comments":72,"created_at":"2019-02-20T16:13:25Z","updated_at":"2022-04-08T14:23:02Z","closed_at":"2020-11-12T00:24:24Z","author_association":"MEMBER","active_lock_reason":null,"body":"This guide explains how to train your own **single-class dataset** with YOLOv3.\r\n\r\n## Before You Start\r\n\r\n1. Update (Python >= 3.7, PyTorch >= 1.3, etc.) and install [requirements.txt](https://github.com/ultralytics/yolov3/blob/master/requirements.txt) dependencies.\r\n2. Clone repo: `git clone https://github.com/ultralytics/yolov3`\r\n3. Download [COCO](http://cocodataset.org/#home): `bash yolov3/data/get_coco2017.sh`\r\n\r\n## Train On Custom Data\r\n\r\n**1. Label your data in Darknet format.** After using a tool like [Labelbox](https://labelbox.com/) to label your images, you'll need to export your data to darknet format. Your data should follow the example created by `get_coco2017.sh`, with images and labels in separate parallel folders, and one label file per image (if no objects in image, no label file is required). The label file specifications are:\r\n- One row per object\r\n- Each row is `class x_center y_center width height` format.\r\n- Box coordinates must be in **normalized xywh** format (from 0 - 1). If your boxes are in pixels, divide `x_center` and `width` by image width, and `y_center` and `height` by image height.\r\n- Class numbers are zero-indexed (start from 0).\r\n\r\nEach image's label file must be locatable by simply replacing `/images/*.jpg` with `/labels/*.txt` in its pathname. An example image and label pair would be:\r\n```bash\r\n../coco/images/train2017/000000109622.jpg  # image\r\n../coco/labels/train2017/000000109622.txt  # label\r\n```\r\nAn example label file with 4 persons (all class `0`):  \r\n<img width=\"474\" alt=\"screenshot 2019-02-20 at 17 05 23\" src=\"https://user-images.githubusercontent.com/26833433/53105599-ba7dff80-3531-11e9-8860-10a48872b043.png\">\r\n\r\n**2. Create train and test `*.txt` files.** Here we create `data/coco_1cls.txt`, which contains 5 images with only persons from the coco 2014 trainval dataset. We will use this small dataset for both training and testing. Each row contains a path to an image, and remember one label must also exist in a corresponding `/labels` folder for each image that has targets.  \r\n<img width=\"535\" alt=\"Screenshot 2019-04-07 at 13 50 06\" src=\"https://user-images.githubusercontent.com/26833433/55683093-1e228780-593c-11e9-8751-308cdc2c3cdc.png\">\r\n\r\n**3. Create new `*.names file`** listing all of the names for the classes in our dataset. Here we use the existing `data/coco.names` file. Classes are **zero indexed**, so `person` is class `0`.\r\n<img width=\"519\" alt=\"screenshot 2019-02-20 at 16 50 30\" src=\"https://user-images.githubusercontent.com/26833433/53104447-a9cc8a00-352f-11e9-9c2b-d5b2cc494f96.png\">\r\n\r\n**4. Update `data/coco.data`** lines 2 and 3 to point to our new text file for training and validation (in your own data you would likely want to use separate train and test sets). Also update line 1 to our new class count, if not 80, and lastly update line 4 to point to our new `*.names` file, if you created one.  Save the modified file as `data/coco_1cls.data`.  \r\n<img width=\"444\" alt=\"Screenshot 2019-04-07 at 13 48 48\" src=\"https://user-images.githubusercontent.com/26833433/55683084-f9c6ab00-593b-11e9-877d-9003afa44aa1.png\">\r\n\r\n**5. Update `*.cfg` file** (optional). Each YOLO layer has 255 outputs: 85 outputs per anchor [4 box coordinates + 1 object confidence + 80 class confidences], times 3 anchors. If you use fewer classes, reduce filters to `filters=[4 + 1 + n] * 3`, where `n` is your class count. This modification should be made to the layer preceding each of the 3 YOLO layers. Also modify `classes=80` to `classes=n` in each YOLO layer, where `n` is your class count (for single class training, `n=1`).\r\n<img width=\"723\" alt=\"screenshot 2019-02-21 at 19 40 01\" src=\"https://user-images.githubusercontent.com/26833433/66830924-e03f9500-ef56-11e9-9d09-97f9921cab39.png\">\r\n\r\n**6. (OPTIONAL) Update hyperparameters** such as LR, LR scheduler, optimizer, augmentation settings, multi_scale settings, etc in `train.py` for your particular task. We recommend you start with all-default settings first updating anything.\r\n\r\n**7. Train.** Run `python3 train.py --data data/coco_1cls.data` to train using your custom data. If you created a custom `*.cfg` file as well, specify it using `--cfg cfg/my_new_file.cfg`.\r\n\r\n## Visualize Results\r\n\r\nRun `from utils import utils; utils.plot_results()` to see your training losses and performance metrics vs epoch. If you don't see acceptable performance, try hyperparameter tuning and re-training. Multiple `results.txt` files are overlaid automatically to compare performance. \r\n\r\nHere we see results from training on `coco_1cls.data` using the default `yolov3-spp.cfg` and also a single-class `yolov3-spp-1cls.cfg`, available in the `data/` and `cfg/` folders.\r\n\r\n![results (2)](https://user-images.githubusercontent.com/26833433/68169987-f1127380-ff22-11e9-9cfa-24bf878d8850.png)\r\n\r\nEvaluate your trained model: copy `COCO_val2014_000000001464.jpg` to `data/samples` folder and run `python3 detect.py --weights weights/last.pt`\r\n![coco_val2014_000000001464](https://user-images.githubusercontent.com/26833433/53104219-42aed580-352f-11e9-9be5-60f84ab05dc1.jpg)\r\n\r\n## Reproduce Our Results\r\n\r\nTo reproduce this tutorial, simply run the following code. This trains all the various [tutorials](https://github.com/ultralytics/yolov3/wiki), saves each results*.txt file separately, and plots them together as `results.png`. It all takes less than 30 minutes on a 2080Ti. \r\n\r\n```bash\r\ngit clone https://github.com/ultralytics/yolov3\r\npython3 -c \"from yolov3.utils.google_utils import gdrive_download; gdrive_download('1h0Id-7GUyuAmyc9Pwo2c3IZ17uExPvOA','coco2017demos.zip')\"  # datasets (20 Mb)\r\ncd yolov3\r\npython3 train.py --data coco64.data --batch 16 --accum 1 --epochs 300 --nosave --cache --weights '' --name from_scratch\r\npython3 train.py --data coco64.data --batch 16 --accum 1 --epochs 300 --nosave --cache --weights yolov3-spp-ultralytics.pt --name from_yolov3-spp-ultralytics\r\npython3 train.py --data coco64.data --batch 16 --accum 1 --epochs 300 --nosave --cache --weights darknet53.conv.74 --name from_darknet53.conv.74\r\npython3 train.py --data coco1.data --batch 1 --accum 1 --epochs 300 --nosave --cache --weights darknet53.conv.74 --name 1img\r\npython3 train.py --data coco1cls.data --batch 16 --accum 1 --epochs 300 --nosave --cache --weights darknet53.conv.74 --cfg yolov3-spp-1cls.cfg --name 1cls\r\n```\r\n\r\n## Reproduce Our Environment\r\n\r\nTo access an up-to-date working environment (with all dependencies including CUDA/CUDNN, Python and PyTorch preinstalled), consider a:\r\n\r\n- **GCP** Deep Learning VM with $300 free credit offer: See our [GCP Quickstart Guide](https://github.com/ultralytics/yolov3/wiki/GCP-Quickstart) \r\n- **Google Colab Notebook** with 12 hours of free GPU time: [Google Colab Notebook](https://colab.research.google.com/drive/1G8T-VFxQkjDe4idzN8F-hbIBqkkkQnxw)\r\n- **Docker Image** from https://hub.docker.com/r/ultralytics/yolov3. See [Docker Quickstart Guide](https://github.com/ultralytics/yolov3/wiki/Docker-Quickstart) ","closed_by":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"reactions":{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/102/reactions","total_count":16,"+1":11,"-1":0,"laugh":1,"hooray":1,"confused":0,"heart":2,"rocket":1,"eyes":0},"timeline_url":"https://api.github.com/repos/ultralytics/yolov3/issues/102/timeline","performed_via_github_app":null,"state_reason":"completed"}