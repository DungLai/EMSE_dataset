{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1237","repository_url":"https://api.github.com/repos/ultralytics/yolov3","labels_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1237/labels{/name}","comments_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1237/comments","events_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1237/events","html_url":"https://github.com/ultralytics/yolov3/issues/1237","id":624616695,"node_id":"MDU6SXNzdWU2MjQ2MTY2OTU=","number":1237,"title":"How to save CNN features before [yolo] layer?","user":{"login":"aniloc111","id":5946900,"node_id":"MDQ6VXNlcjU5NDY5MDA=","avatar_url":"https://avatars.githubusercontent.com/u/5946900?v=4","gravatar_id":"","url":"https://api.github.com/users/aniloc111","html_url":"https://github.com/aniloc111","followers_url":"https://api.github.com/users/aniloc111/followers","following_url":"https://api.github.com/users/aniloc111/following{/other_user}","gists_url":"https://api.github.com/users/aniloc111/gists{/gist_id}","starred_url":"https://api.github.com/users/aniloc111/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aniloc111/subscriptions","organizations_url":"https://api.github.com/users/aniloc111/orgs","repos_url":"https://api.github.com/users/aniloc111/repos","events_url":"https://api.github.com/users/aniloc111/events{/privacy}","received_events_url":"https://api.github.com/users/aniloc111/received_events","type":"User","site_admin":false},"labels":[{"id":1890885613,"node_id":"MDU6TGFiZWwxODkwODg1NjEz","url":"https://api.github.com/repos/ultralytics/yolov3/labels/Stale","name":"Stale","color":"ededed","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2020-05-26T05:47:50Z","updated_at":"2020-07-01T00:20:55Z","closed_at":"2020-07-01T00:20:55Z","author_association":"NONE","active_lock_reason":null,"body":"I followed the tutorial in [https://github.com/ultralytics/yolov3/wiki/Train-Custom-Data](url) and used my own data set. I was able to follow the steps and also able to train, test and get results.\r\n\r\nRight now, I want to save the features before it is passed to the **yolo** layer.\r\n\r\nI tried commenting all (3) the **[yolo]** layer\r\n\r\n![image](https://user-images.githubusercontent.com/5946900/82864100-49a86d00-9f56-11ea-900e-af00ac1cb380.png)\r\n\r\nIt is expected that errors will be encountered because the weights are trained with the **yolo** layer.\r\n\r\n`Exception has occurred: RuntimeError\r\nError(s) in loading state_dict for Darknet:\r\n\tMissing key(s) in state_dict: \"module_list.83.Conv2d.weight\", \"module_list.83.BatchNorm2d.weight\", \"module_list.83.BatchNorm2d.bias\", \"module_list.83.BatchNorm2d.running_mean\", \"module_list.83.BatchNorm2d.running_var\", \"module_list.86.Conv2d.weight\", \"module_list.86.BatchNorm2d.weight\", \"module_list.86.BatchNorm2d.bias\", \"module_list.86.BatchNorm2d.running_mean\", \"module_list.86.BatchNorm2d.running_var\", \"module_list.92.Conv2d.bias\", \"module_list.94.Conv2d.weight\", \"module_list.94.BatchNorm2d.weight\", \"module_list.94.BatchNorm2d.bias\", \"module_list.94.BatchNorm2d.running_mean\", \"module_list.94.BatchNorm2d.running_var\", \"module_list.97.Conv2d.weight\", \"module_list.97.BatchNorm2d.weight\", \"module_list.97.BatchNorm2d.bias\", \"module_list.97.BatchNorm2d.running_mean\", \"module_list.97.BatchNorm2d.running_var\", \"module_list.98.Conv2d.weight\", \"module_list.98.BatchNorm2d.weight\", \"module_list.98.BatchNorm2d.bias\", \"module_list.98.BatchNorm2d.running_mean\", \"module_list.98.BatchNorm2d.running_var\", \"module_list.103.Conv2d.bias\". \r\n\tUnexpected key(s) in state_dict: \"module_list.104.Conv2d.weight\", \"module_list.104.BatchNorm2d.weight\", \"module_list.104.BatchNorm2d.bias\", \"module_list.104.BatchNorm2d.running_mean\", \"module_list.104.BatchNorm2d.running_var\", \"module_list.104.BatchNorm2d.num_batches_tracked\", \"module_list.105.Conv2d.weight\", \"module_list.105.Conv2d.bias\", \"module_list.84.Conv2d.weight\", \"module_list.84.BatchNorm2d.weight\", \"module_list.84.BatchNorm2d.bias\", \"module_list.84.BatchNorm2d.running_mean\", \"module_list.84.BatchNorm2d.running_var\", \"module_list.84.BatchNorm2d.num_batches_tracked\", \"module_list.92.BatchNorm2d.weight\", \"module_list.92.BatchNorm2d.bias\", \"module_list.92.BatchNorm2d.running_mean\", \"module_list.92.BatchNorm2d.running_var\", \"module_list.92.BatchNorm2d.num_batches_tracked\", \"module_list.93.Conv2d.weight\", \"module_list.93.Conv2d.bias\", \"module_list.96.Conv2d.weight\", \"module_list.96.BatchNorm2d.weight\", \"module_list.96.BatchNorm2d.bias\", \"module_list.96.BatchNorm2d.running_mean\", \"module_list.96.BatchNorm2d.running_var\", \"module_list.96.BatchNorm2d.num_batches_tracked\", \"module_list.103.BatchNorm2d.weight\", \"module_list.103.BatchNorm2d.bias\", \"module_list.103.BatchNorm2d.running_mean\", \"module_list.103.BatchNorm2d.running_var\", \"module_list.103.BatchNorm2d.num_batches_tracked\". \r\n\tsize mismatch for module_list.87.Conv2d.weight: copying a param with shape torch.Size([256, 768, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 256, 3, 3]).\r\n\tsize mismatch for module_list.87.BatchNorm2d.weight: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.87.BatchNorm2d.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.87.BatchNorm2d.running_mean: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.87.BatchNorm2d.running_var: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.88.Conv2d.weight: copying a param with shape torch.Size([512, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).\r\n\tsize mismatch for module_list.88.BatchNorm2d.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for module_list.88.BatchNorm2d.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for module_list.88.BatchNorm2d.running_mean: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for module_list.88.BatchNorm2d.running_var: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for module_list.89.Conv2d.weight: copying a param with shape torch.Size([256, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 256, 3, 3]).\r\n\tsize mismatch for module_list.89.BatchNorm2d.weight: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.89.BatchNorm2d.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.89.BatchNorm2d.running_mean: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.89.BatchNorm2d.running_var: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.90.Conv2d.weight: copying a param with shape torch.Size([512, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).\r\n\tsize mismatch for module_list.90.BatchNorm2d.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for module_list.90.BatchNorm2d.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for module_list.90.BatchNorm2d.running_mean: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for module_list.90.BatchNorm2d.running_var: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for module_list.91.Conv2d.weight: copying a param with shape torch.Size([256, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 256, 3, 3]).\r\n\tsize mismatch for module_list.91.BatchNorm2d.weight: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.91.BatchNorm2d.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.91.BatchNorm2d.running_mean: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.91.BatchNorm2d.running_var: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for module_list.92.Conv2d.weight: copying a param with shape torch.Size([512, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([57, 512, 1, 1]).\r\n\tsize mismatch for module_list.99.Conv2d.weight: copying a param with shape torch.Size([128, 384, 1, 1]) from checkpoint, the shape in current model is torch.Size([128, 256, 1, 1]).\r\n\tsize mismatch for module_list.103.Conv2d.weight: copying a param with shape torch.Size([128, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([57, 256, 1, 1]).`\r\n\r\nRight now, I have thought of not commenting the **yolo** layer in **cfg** to avoid those errors.\r\n **What is the best way to save the features of the input image before passing to the yolo layers?**\r\n\r\nThanks!","closed_by":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"reactions":{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1237/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1237/timeline","performed_via_github_app":null,"state_reason":"completed"}