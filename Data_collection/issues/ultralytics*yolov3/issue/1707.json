{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1707","repository_url":"https://api.github.com/repos/ultralytics/yolov3","labels_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1707/labels{/name}","comments_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1707/comments","events_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1707/events","html_url":"https://github.com/ultralytics/yolov3/issues/1707","id":823658530,"node_id":"MDU6SXNzdWU4MjM2NTg1MzA=","number":1707,"title":"printing time will result in cuda out of memory issue","user":{"login":"ardeal","id":6227348,"node_id":"MDQ6VXNlcjYyMjczNDg=","avatar_url":"https://avatars.githubusercontent.com/u/6227348?v=4","gravatar_id":"","url":"https://api.github.com/users/ardeal","html_url":"https://github.com/ardeal","followers_url":"https://api.github.com/users/ardeal/followers","following_url":"https://api.github.com/users/ardeal/following{/other_user}","gists_url":"https://api.github.com/users/ardeal/gists{/gist_id}","starred_url":"https://api.github.com/users/ardeal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ardeal/subscriptions","organizations_url":"https://api.github.com/users/ardeal/orgs","repos_url":"https://api.github.com/users/ardeal/repos","events_url":"https://api.github.com/users/ardeal/events{/privacy}","received_events_url":"https://api.github.com/users/ardeal/received_events","type":"User","site_admin":false},"labels":[{"id":1035696376,"node_id":"MDU6TGFiZWwxMDM1Njk2Mzc2","url":"https://api.github.com/repos/ultralytics/yolov3/labels/question","name":"question","color":"d876e3","default":true,"description":"Further information is requested"},{"id":1890885613,"node_id":"MDU6TGFiZWwxODkwODg1NjEz","url":"https://api.github.com/repos/ultralytics/yolov3/labels/Stale","name":"Stale","color":"ededed","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-03-06T14:09:06Z","updated_at":"2021-04-11T00:14:31Z","closed_at":"2021-04-11T00:14:31Z","author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\n\r\nIn the following code, I am trying to add printing code to print the time needed by GPU to run forward and backward. \r\n\r\nIf I don't add the following printing code, there is no issue and the code could be correctly trained.\r\nIf I added the following printing code, I experienced the following issue.\r\n\r\n\r\n```python\r\n        t_acc = 0\r\n        counter = 0\r\n        for i, (imgs, targets, paths, _) in pbar:  # batch -------------------------------------------------------------\r\n            ni = i + nb * epoch  # number integrated batches (since train start)\r\n            imgs = imgs.to(device, non_blocking=True).float() / 255.0  # uint8 to float32, 0-255 to 0.0-1.0\r\n\r\n            t0 = cv2.getTickCount()\r\n            ......\r\n```\r\n\r\n```Python\r\n            ......\r\n            # Print\r\n            if rank in [-1, 0]:\r\n                mloss = (mloss * i + loss_items) / (i + 1)  # update mean losses\r\n                mem = '%.3gG' % (torch.cuda.memory_reserved() / 1E9 if torch.cuda.is_available() else 0)  # (GB)\r\n                s = ('%10s' * 2 + '%10.4g' * 6) % (\r\n                    '%g/%g' % (epoch, epochs - 1), mem, *mloss, targets.shape[0], imgs.shape[-1])\r\n                pbar.set_description(s)\r\n\r\n                # Plot\r\n                if plots and ni < 3:\r\n                    f = save_dir / f'train_batch{ni}.jpg'  # filename\r\n                    Thread(target=plot_images, args=(imgs, targets, paths, f), daemon=True).start()\r\n                    # if tb_writer:\r\n                    #     tb_writer.add_image(f, result, dataformats='HWC', global_step=epoch)\r\n                    #     tb_writer.add_graph(model, imgs)  # add model to tensorboard\r\n                elif plots and ni == 3 and wandb:\r\n                    wandb.log({\"Mosaics\": [wandb.Image(str(x), caption=x.name) for x in save_dir.glob('train*.jpg')]})\r\n\r\n            GPUtime = 1000 * (cv2.getTickCount() - t0) / cv2.getTickFrequency()\r\n            t_acc += GPUtime\r\n            counter += 1\r\n            print('avarage time == {:.3f}, t_acc == {:.3f}, counter == {}'.format(t_acc/counter, t_acc, counter))\r\n\r\n```\r\n\r\n```python\r\n      0/79     16.5G   0.04698   0.01783         0   0.06482        91       640:  99%|█████████▊| 269/273 [04:23<00:02,  1.60it/s]avarage time == 807.573, t_acc == 217237.037, counter == 269\r\n      0/79     16.5G   0.04695   0.01781         0   0.06477       133       640:  99%|█████████▉| 270/273 [04:23<00:01,  1.58it/s]avarage time == 806.961, t_acc == 217879.502, counter == 270\r\n      0/79     16.5G    0.0469   0.01778         0   0.06468       108       640:  99%|█████████▉| 271/273 [04:24<00:01,  1.57it/s]avarage time == 806.384, t_acc == 218530.005, counter == 271\r\n      0/79     16.5G   0.04685   0.01775         0   0.06459        94       640:  99%|█████████▉| 271/273 [04:25<00:01,  1.57it/s]avarage time == 805.780, t_acc == 219172.181, counter == 272\r\n      0/79     16.5G   0.04685   0.01775         0   0.06459        94       640: 100%|█████████▉| 272/273 [05:13<00:01,  1.15s/it]\r\nTraceback (most recent call last):\r\n  File \"D:/code_python/har_hailiang/har_odisk/odisk_algo/train.py\", line 294, in train\r\n    pred = model(imgs)  # forward\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 889, in _call_impl\r\n    result = self.forward(*input, **kwargs)\r\n  File \"D:\\code_python\\har_hailiang\\har_odisk\\odisk_algo\\models\\yolo.py\", line 122, in forward\r\n    return self.forward_once(x, profile)  # single-scale inference, train\r\n  File \"D:\\code_python\\har_hailiang\\har_odisk\\odisk_algo\\models\\yolo.py\", line 138, in forward_once\r\n    x = m(x)  # run\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 889, in _call_impl\r\n    result = self.forward(*input, **kwargs)\r\n  File \"D:\\code_python\\har_hailiang\\har_odisk\\odisk_algo\\models\\common.py\", line 51, in forward\r\n    return x + self.cv2(self.cv1(x)) if self.add else self.cv2(self.cv1(x))\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 889, in _call_impl\r\n    result = self.forward(*input, **kwargs)\r\n  File \"D:\\code_python\\har_hailiang\\har_odisk\\odisk_algo\\models\\common.py\", line 35, in forward\r\n    return self.act(self.bn(self.conv(x)))\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\module.py\", line 889, in _call_impl\r\n    result = self.forward(*input, **kwargs)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\conv.py\", line 399, in forward\r\n    return self._conv_forward(input, self.weight, self.bias)\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\torch\\nn\\modules\\conv.py\", line 395, in _conv_forward\r\n    return F.conv2d(input, weight, bias, self.stride,\r\nRuntimeError: CUDA out of memory. Tried to allocate 6.36 GiB (GPU 0; 24.00 GiB total capacity; 3.63 GiB already allocated; 6.40 GiB free; 15.33 GiB reserved in total by PyTorch)\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","closed_by":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"reactions":{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1707/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1707/timeline","performed_via_github_app":null,"state_reason":"completed"}