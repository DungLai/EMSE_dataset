{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1207","repository_url":"https://api.github.com/repos/ultralytics/yolov3","labels_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1207/labels{/name}","comments_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1207/comments","events_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1207/events","html_url":"https://github.com/ultralytics/yolov3/issues/1207","id":622202491,"node_id":"MDU6SXNzdWU2MjIyMDI0OTE=","number":1207,"title":"the bounding boxes in train_batch0.png and test_batch0.png are not correct","user":{"login":"lunasdejavu","id":7753153,"node_id":"MDQ6VXNlcjc3NTMxNTM=","avatar_url":"https://avatars.githubusercontent.com/u/7753153?v=4","gravatar_id":"","url":"https://api.github.com/users/lunasdejavu","html_url":"https://github.com/lunasdejavu","followers_url":"https://api.github.com/users/lunasdejavu/followers","following_url":"https://api.github.com/users/lunasdejavu/following{/other_user}","gists_url":"https://api.github.com/users/lunasdejavu/gists{/gist_id}","starred_url":"https://api.github.com/users/lunasdejavu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lunasdejavu/subscriptions","organizations_url":"https://api.github.com/users/lunasdejavu/orgs","repos_url":"https://api.github.com/users/lunasdejavu/repos","events_url":"https://api.github.com/users/lunasdejavu/events{/privacy}","received_events_url":"https://api.github.com/users/lunasdejavu/received_events","type":"User","site_admin":false},"labels":[{"id":1890885613,"node_id":"MDU6TGFiZWwxODkwODg1NjEz","url":"https://api.github.com/repos/ultralytics/yolov3/labels/Stale","name":"Stale","color":"ededed","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2020-05-21T02:32:26Z","updated_at":"2020-06-26T00:16:34Z","closed_at":"2020-06-26T00:16:34Z","author_association":"NONE","active_lock_reason":null,"body":"I tried to read labelme json file directly and transfer to yolo format\r\nthe code in utils/dataset.py\r\n```\r\nclass LoadImagesAndLabels(Dataset):  # for training/testing\r\n    def __init__(self, path, img_size=416, batch_size=16, augment=False, hyp=None, rect=False, image_weights=False,\r\n                 cache_labels=True, cache_images=False, single_cls=False,datatype= \"labelme\"):\r\n        path = str(Path(path))  # os-agnostic\r\n        # print(path)\r\n        root_path = Path(path).parent\r\n        assert os.path.isfile(path), 'File not found %s. See %s' % (path, help_url)\r\n        if datatype == 'coco':\r\n            # print(datatype)\r\n            with open(path, 'r') as f:\r\n                img_lable_list = [x.replace('/', os.sep).split(' ') for x in f.read().splitlines()]\r\n            self.img_files = [ root_path.joinpath(x[0]) for x in img_lable_list]\r\n            self.label_files = [root_path.joinpath(x[1]) for x in img_lable_list]\r\n        elif datatype == \"labelme\":\r\n            self.img_files = []\r\n            self.label_files = []\r\n            with open(path, 'r') as f:\r\n                label_list = [x.replace('/', os.sep) for x in f.read().splitlines()]\r\n            self.label_files = label_list\r\n            self.img_files = [x.replace('.json', '.jpg') for x in label_list]\r\n            # print(\"self.label_files\", self.label_files)\r\n            # print(\"self.img_files\", self.img_files)\r\n                        # self.label_files.append(os.path.join(dirPath, fileName))\r\n                        # self.img_files.append(os.path.join(dirPath, fileName.replace('.json', '.jpg')))\r\n        n = len(self.img_files)\r\n        assert n > 0, 'No images found in %s. See %s' % (path, help_url)\r\n        bi = np.floor(np.arange(n) / batch_size).astype(np.int)  # batch index\r\n        nb = bi[-1] + 1  # number of batches\r\n\r\n        self.n = n\r\n        self.batch = bi  # batch index of image\r\n        self.img_size = img_size\r\n        self.augment = augment\r\n        self.hyp = hyp\r\n        self.image_weights = image_weights\r\n        self.rect = False if image_weights else rect\r\n        self.mosaic = self.augment and not self.rect  # load 4 images at a time into a mosaic (only during training)\r\n        self.mosaic = False\r\n        # Rectangular Training  https://github.com/ultralytics/yolov3/issues/232\r\n        if self.rect:\r\n            # Read image shapes (wh)\r\n            sp = path.replace('.txt', '.shapes')  # shapefile path\r\n            try:\r\n                with open(sp, 'r') as f:  # read existing shapefile\r\n                    s = [x.split() for x in f.read().splitlines()]\r\n                    assert len(s) == n, 'Shapefile out of sync'\r\n            except:\r\n                s = [exif_size(Image.open(f)) for f in tqdm(self.img_files, desc='Reading image shapes')]\r\n                np.savetxt(sp, s, fmt='%g')  # overwrites existing (if any)\r\n\r\n            # Sort by aspect ratio\r\n            s = np.array(s, dtype=np.float64)\r\n            ar = s[:, 1] / s[:, 0]  # aspect ratio\r\n            i = ar.argsort()\r\n            self.img_files = [self.img_files[i] for i in i]\r\n            self.label_files = [self.label_files[i] for i in i]\r\n            self.shapes = s[i]  # wh\r\n            ar = ar[i]\r\n\r\n            # Set training image shapes\r\n            shapes = [[1, 1]] * nb\r\n            for i in range(nb):\r\n                ari = ar[bi == i]\r\n                mini, maxi = ari.min(), ari.max()\r\n                if maxi < 1:\r\n                    shapes[i] = [maxi, 1]\r\n                elif mini > 1:\r\n                    shapes[i] = [1, 1 / mini]\r\n\r\n            self.batch_shapes = np.ceil(np.array(shapes) * img_size / 64.).astype(np.int) * 64\r\n\r\n        # Preload labels (required for weighted CE training)\r\n        self.imgs = [None] * n\r\n        self.labels = [None] * n\r\n        if cache_labels or image_weights:  # cache labels for faster training\r\n            self.labels = [np.zeros((0, 5))] * n\r\n            extract_bounding_boxes = False\r\n            create_datasubset = False\r\n            pbar = tqdm(self.label_files, desc='Caching labels')\r\n            nm, nf, ne, ns, nd = 0, 0, 0, 0, 0  # number missing, found, empty, datasubset, duplicate\r\n            for i, file in enumerate(pbar):\r\n                # file = '/data/datasets/fisheye/restraunts/img_3849.json'\r\n                try:\r\n                    with open(file, 'r') as f:\r\n                        label_data = json.load(f)\r\n                    print(file)\r\n                    if datatype == 'coco':\r\n                        bbxs = [(x['category_id'], x['bbox']) for x in label_data['annotation']]\r\n                        im_h = label_data['image']['height']\r\n                        im_w = label_data['image']['width']\r\n                    if datatype == \"labelme\":\r\n                        # \r\n                        shapes = label_data['shapes'] \r\n                        polys = []\r\n                        for shape in shapes:#all objects\r\n                            pts = shape['points']\r\n\r\n                            # pt_poly =[]\r\n                    \r\n                            polys.append(pts)\r\n                            # polys.append(ia.Polygon(pt_poly))\r\n                        image = cv2.imread(file.replace('.json', '.jpg'))\r\n                        # polys_oi = PolygonsOnImage(polys, shape=image.shape) \r\n                        # seq= iaa.Affine(rotate= (-360,360),order= 3,fit_output=True)\r\n                        # image_aug, polys_aug = seq(image=image, polygonss=polys_oi)\r\n                        image_aug, polys_aug = image, polys\r\n                        im_h,im_w,c = image_aug.shape\r\n                        # print(\"im_h,im_w,c\",im_h,im_w,c)\r\n                        # print(\"QQ0.5\")\r\n                        l =np.array( [[1, 1, 1, 1, 1]])\r\n                        # print(polys_aug)\r\n                        # print(\"len poly\",len(polys_aug))\r\n                        for i,pts_poly in enumerate(polys_aug):\r\n                            # print(\"QQ\",pts_poly)\r\n                            (xmax, ymax)=np.amax(pts_poly,axis=0)\r\n                            (xmin, ymin)=np.amin(pts_poly,axis=0)\r\n                            l_t = np.array([[0, (xmax+xmin)/im_w/2, (ymax+ymin)/im_h/2, (xmax-xmin)/im_w, (ymax-ymin)/im_h]])\r\n                            print([[0, (xmax+xmin)/2, (ymax+ymin)/2, (xmax-xmin), (ymax-ymin)]])\r\n                            l = np.concatenate((l,l_t),axis=0)\r\n                        l = np.delete(l,0, axis = 0)\r\n```\r\nI check the l by painter in windows the coordinates are correct\r\nbut the bounding boxes in train_batch0.png and test_batch0.png are wrong even for the numbers of bounding boxes\r\ncan someone tell me what did I miss?\r\n                        ","closed_by":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"reactions":{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1207/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1207/timeline","performed_via_github_app":null,"state_reason":"completed"}