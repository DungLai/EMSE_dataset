{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1649","repository_url":"https://api.github.com/repos/ultralytics/yolov3","labels_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1649/labels{/name}","comments_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1649/comments","events_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1649/events","html_url":"https://github.com/ultralytics/yolov3/issues/1649","id":781892100,"node_id":"MDU6SXNzdWU3ODE4OTIxMDA=","number":1649,"title":"convert pt file to onnx format","user":{"login":"ardeal","id":6227348,"node_id":"MDQ6VXNlcjYyMjczNDg=","avatar_url":"https://avatars.githubusercontent.com/u/6227348?v=4","gravatar_id":"","url":"https://api.github.com/users/ardeal","html_url":"https://github.com/ardeal","followers_url":"https://api.github.com/users/ardeal/followers","following_url":"https://api.github.com/users/ardeal/following{/other_user}","gists_url":"https://api.github.com/users/ardeal/gists{/gist_id}","starred_url":"https://api.github.com/users/ardeal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ardeal/subscriptions","organizations_url":"https://api.github.com/users/ardeal/orgs","repos_url":"https://api.github.com/users/ardeal/repos","events_url":"https://api.github.com/users/ardeal/events{/privacy}","received_events_url":"https://api.github.com/users/ardeal/received_events","type":"User","site_admin":false},"labels":[{"id":1035696376,"node_id":"MDU6TGFiZWwxMDM1Njk2Mzc2","url":"https://api.github.com/repos/ultralytics/yolov3/labels/question","name":"question","color":"d876e3","default":true,"description":"Further information is requested"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-01-08T06:47:23Z","updated_at":"2021-02-03T00:48:09Z","closed_at":"2021-02-03T00:48:09Z","author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\n\r\nThe following code is based on master branch of this repository.\r\nI am trying to convert pt file of yolov3 to onnx format.\r\n\r\nThe following line could be correctly executed:\r\n<code>p = torch_model(x) </code>\r\n\r\n**however**, <code> torch.onnx.export()  </code>  function encountered the following issue:\r\n\r\n```Python\r\nTraceback (most recent call last):\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\torch\\onnx\\utils.py\", line 632, in _export\r\n    _model_to_graph(model, args, verbose, input_names,\r\n  File \"C:\\ProgramData\\Anaconda3\\lib\\site-packages\\torch\\onnx\\utils.py\", line 449, in _model_to_graph\r\n    params_dict = torch._C._jit_pass_onnx_constant_fold(graph, params_dict,\r\nRuntimeError: Input, output and indices must be on the current device\r\n```\r\n\r\n\r\n\r\n\r\n\r\n```Python\r\nfrom __future__ import print_function\r\nimport os\r\nimport datetime\r\nimport numpy as np\r\n\r\nfrom models.yolo import *\r\nimport torch\r\n# import torch.nn as nn\r\n# from models.common import Conv, DWConv\r\nfrom utils.google_utils import attempt_download\r\n\r\nclass Ensemble(nn.ModuleList):\r\n    # Ensemble of models\r\n    def __init__(self):\r\n        super(Ensemble, self).__init__()\r\n\r\n    def forward(self, x, augment=False):\r\n        y = []\r\n        for module in self:\r\n            y.append(module(x, augment)[0])\r\n        # y = torch.stack(y).max(0)[0]  # max ensemble\r\n        # y = torch.cat(y, 1)  # nms ensemble\r\n        y = torch.stack(y).mean(0)  # mean ensemble\r\n        return y, None  # inference, train output\r\n\r\ndef attempt_load(weights, map_location=None):\r\n    # Loads an ensemble of models weights=[a,b,c] or a single model weights=[a] or weights=a\r\n    model = Ensemble()\r\n    for w in weights if isinstance(weights, list) else [weights]:\r\n        attempt_download(w)\r\n        model.append(torch.load(w, map_location=map_location)['model'].float().fuse().eval())  # load FP32 model\r\n\r\n    # Compatibility updates\r\n    for m in model.modules():\r\n        if type(m) in [nn.Hardswish, nn.LeakyReLU, nn.ReLU, nn.ReLU6]:\r\n            m.inplace = True  # pytorch 1.7.0 compatibility\r\n        elif type(m) is Conv:\r\n            m._non_persistent_buffers_set = set()  # pytorch 1.6.0 compatibility\r\n\r\n    if len(model) == 1:\r\n        return model[-1]  # return model\r\n    else:\r\n        print('Ensemble created with %s\\n' % weights)\r\n        for k in ['names', 'stride']:\r\n            setattr(model, k, getattr(model[-1], k))\r\n        return model  # return ensemble\r\n\r\n\r\ndef convert_model(input_pth, output_onnx):\r\n\r\n    print('cuda is available == {}'.format(torch.cuda.is_available()))\r\n    device = select_device('')\r\n    nc = 4\r\n    torch_model = attempt_load(input_pth, map_location=device).half()\r\n    # torch_model = torch_model.to(device)\r\n    # torch_model = torch_model.cpu()\r\n    torch_model.eval()\r\n\r\n    half = True\r\n    imgsz = 640\r\n    batch_size = 2  # just a random number\r\n    # x = torch.rand(batch_size, 3, 640, 640, device=device).half()\r\n    x = torch.zeros((1, 3, imgsz, imgsz), device=device)  # init img\r\n    x = x.half()\r\n    p = torch_model(x)\r\n\r\n    # p = torch_model(x.half() if half else x) if device.type != 'cpu' else None\r\n\r\n    torch.onnx.export(torch_model,  # model being run\r\n                      x, #.to(device),  # model input (or a tuple for multiple inputs)\r\n                      output_onnx,  # where to save the model (can be a file or file-like object)\r\n                      opset_version=11,  # the ONNX version to export the model to\r\n                      input_names=['input'],  # the model's input names\r\n                      output_names=['output'],  # the model's output names\r\n                      verbose=True\r\n                  )\r\n\r\n    return\r\n\r\n```\r\n","closed_by":{"login":"ardeal","id":6227348,"node_id":"MDQ6VXNlcjYyMjczNDg=","avatar_url":"https://avatars.githubusercontent.com/u/6227348?v=4","gravatar_id":"","url":"https://api.github.com/users/ardeal","html_url":"https://github.com/ardeal","followers_url":"https://api.github.com/users/ardeal/followers","following_url":"https://api.github.com/users/ardeal/following{/other_user}","gists_url":"https://api.github.com/users/ardeal/gists{/gist_id}","starred_url":"https://api.github.com/users/ardeal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ardeal/subscriptions","organizations_url":"https://api.github.com/users/ardeal/orgs","repos_url":"https://api.github.com/users/ardeal/repos","events_url":"https://api.github.com/users/ardeal/events{/privacy}","received_events_url":"https://api.github.com/users/ardeal/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1649/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1649/timeline","performed_via_github_app":null,"state_reason":"completed"}