{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1494","repository_url":"https://api.github.com/repos/ultralytics/yolov3","labels_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1494/labels{/name}","comments_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1494/comments","events_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1494/events","html_url":"https://github.com/ultralytics/yolov3/issues/1494","id":704047058,"node_id":"MDU6SXNzdWU3MDQwNDcwNTg=","number":1494,"title":"How to modify the pretained model","user":{"login":"sakurasakura1996","id":33887740,"node_id":"MDQ6VXNlcjMzODg3NzQw","avatar_url":"https://avatars.githubusercontent.com/u/33887740?v=4","gravatar_id":"","url":"https://api.github.com/users/sakurasakura1996","html_url":"https://github.com/sakurasakura1996","followers_url":"https://api.github.com/users/sakurasakura1996/followers","following_url":"https://api.github.com/users/sakurasakura1996/following{/other_user}","gists_url":"https://api.github.com/users/sakurasakura1996/gists{/gist_id}","starred_url":"https://api.github.com/users/sakurasakura1996/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sakurasakura1996/subscriptions","organizations_url":"https://api.github.com/users/sakurasakura1996/orgs","repos_url":"https://api.github.com/users/sakurasakura1996/repos","events_url":"https://api.github.com/users/sakurasakura1996/events{/privacy}","received_events_url":"https://api.github.com/users/sakurasakura1996/received_events","type":"User","site_admin":false},"labels":[{"id":1035696376,"node_id":"MDU6TGFiZWwxMDM1Njk2Mzc2","url":"https://api.github.com/repos/ultralytics/yolov3/labels/question","name":"question","color":"d876e3","default":true,"description":"Further information is requested"},{"id":1890885613,"node_id":"MDU6TGFiZWwxODkwODg1NjEz","url":"https://api.github.com/repos/ultralytics/yolov3/labels/Stale","name":"Stale","color":"ededed","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-09-18T03:16:35Z","updated_at":"2020-10-24T00:38:29Z","closed_at":"2020-10-24T00:38:29Z","author_association":"NONE","active_lock_reason":null,"body":"## ❔Question\r\nThank you for your contribution.Now, I want to add SE module into the yolov3-tiny.cfg and it successed,I add SE module after the end of backbone. but I don't know how to load pretrained weights file (yolov3-tiny.pt) to my new model. I know how to modify  the pretrained resnet model.\r\n\r\ncoding=UTF-8\r\nimport torchvision.models as models\r\nimport torch\r\nimport torch.nn as nn\r\nimport math\r\nimport torch.utils.model_zoo as model_zoo\r\n \r\nclass CNN(nn.Module):\r\n \r\n    def __init__(self, block, layers, num_classes=9):\r\n        self.inplanes = 64\r\n        super(ResNet, self).__init__()\r\n        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3,\r\n                               bias=False)\r\n        self.bn1 = nn.BatchNorm2d(64)\r\n        self.relu = nn.ReLU(inplace=True)\r\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\r\n        self.layer1 = self._make_layer(block, 64, layers[0])\r\n        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)\r\n        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)\r\n        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)\r\n        self.avgpool = nn.AvgPool2d(7, stride=1)\r\n        #1494 new add \r\n        self.convtranspose1 = nn.ConvTranspose2d(2048, 2048, kernel_size=3, stride=1, padding=1, output_padding=0, groups=1, bias=False, dilation=1)\r\n        #1494 new add\r\n        self.maxpool2 = nn.MaxPool2d(kernel_size=3, stride=1, padding=1)\r\n        #remove fc, add fc\r\n        self.fclass = nn.Linear(2048, num_classes)\r\n \r\n        for m in self.modules():\r\n            if isinstance(m, nn.Conv2d):\r\n                n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels\r\n                m.weight.data.normal_(0, math.sqrt(2. / n))\r\n            elif isinstance(m, nn.BatchNorm2d):\r\n                m.weight.data.fill_(1)\r\n                m.bias.data.zero_()\r\n \r\n    def _make_layer(self, block, planes, blocks, stride=1):\r\n        downsample = None\r\n        if stride != 1 or self.inplanes != planes * block.expansion:\r\n            downsample = nn.Sequential(\r\n                nn.Conv2d(self.inplanes, planes * block.expansion,\r\n                          kernel_size=1, stride=stride, bias=False),\r\n                nn.BatchNorm2d(planes * block.expansion),\r\n            )\r\n \r\n        layers = []\r\n        layers.append(block(self.inplanes, planes, stride, downsample))\r\n        self.inplanes = planes * block.expansion\r\n        for i in range(1, blocks):\r\n            layers.append(block(self.inplanes, planes))\r\n \r\n        return nn.Sequential(*layers)\r\n \r\n    def forward(self, x):\r\n        x = self.conv1(x)\r\n        x = self.bn1(x)\r\n        x = self.relu(x)\r\n        x = self.maxpool(x)\r\n \r\n        x = self.layer1(x)\r\n        x = self.layer2(x)\r\n        x = self.layer3(x)\r\n        x = self.layer4(x)\r\n \r\n        x = self.avgpool(x)\r\n        #1494 new forward\r\n        x = x.view(x.size(0), -1)\r\n        x = self.convtranspose1(x)\r\n        x = self.maxpool2(x)\r\n        x = x.view(x.size(0), -1)\r\n        x = self.fclass(x)\r\n \r\n        return x\r\n \r\n#pretrained model\r\nresnet50 = models.resnet50(pretrained=True)\r\ncnn = CNN(Bottleneck, [3, 4, 6, 3])\r\npretrained_dict = resnet50.state_dict()\r\nmodel_dict = cnn.state_dict()\r\n#将pretrained_dict里不属于model_dict的键剔除掉\r\npretrained_dict =  {k: v for k, v in pretrained_dict.items() if k in model_dict}\r\n#update\r\nmodel_dict.update(pretrained_dict)\r\ncnn.load_state_dict(model_dict)\r\n#print(resnet50)\r\nprint(cnn)`\r\n\r\n##Additional context\r\nthe difference of yolov3-tiny and my new model is :\r\n (13): Sequential(\r\n      (se_module): SELayer(\r\n        (avg_pool): AdaptiveAvgPool2d(output_size=1)\r\n        (fc): Sequential(\r\n          (0): Linear(in_features=1024, out_features=64, bias=False)\r\n          (1): ReLU(inplace=True)\r\n          (2): Linear(in_features=64, out_features=1024, bias=False)\r\n          (3): Sigmoid()\r\n        )\r\n      )\r\n    )\r\n\r\n","closed_by":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"reactions":{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1494/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1494/timeline","performed_via_github_app":null,"state_reason":"completed"}