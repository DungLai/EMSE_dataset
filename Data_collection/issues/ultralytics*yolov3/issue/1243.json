{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1243","repository_url":"https://api.github.com/repos/ultralytics/yolov3","labels_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1243/labels{/name}","comments_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1243/comments","events_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1243/events","html_url":"https://github.com/ultralytics/yolov3/issues/1243","id":625321933,"node_id":"MDU6SXNzdWU2MjUzMjE5MzM=","number":1243,"title":"The method to generate a random model for resuming training","user":{"login":"ardeal","id":6227348,"node_id":"MDQ6VXNlcjYyMjczNDg=","avatar_url":"https://avatars.githubusercontent.com/u/6227348?v=4","gravatar_id":"","url":"https://api.github.com/users/ardeal","html_url":"https://github.com/ardeal","followers_url":"https://api.github.com/users/ardeal/followers","following_url":"https://api.github.com/users/ardeal/following{/other_user}","gists_url":"https://api.github.com/users/ardeal/gists{/gist_id}","starred_url":"https://api.github.com/users/ardeal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ardeal/subscriptions","organizations_url":"https://api.github.com/users/ardeal/orgs","repos_url":"https://api.github.com/users/ardeal/repos","events_url":"https://api.github.com/users/ardeal/events{/privacy}","received_events_url":"https://api.github.com/users/ardeal/received_events","type":"User","site_admin":false},"labels":[{"id":1890885613,"node_id":"MDU6TGFiZWwxODkwODg1NjEz","url":"https://api.github.com/repos/ultralytics/yolov3/labels/Stale","name":"Stale","color":"ededed","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-05-27T02:14:36Z","updated_at":"2020-07-02T00:20:07Z","closed_at":"2020-07-02T00:20:07Z","author_association":"NONE","active_lock_reason":null,"body":"Here I would like to share the method how I generate the random model for your reference:  \r\n  \r\n+ about this topic\r\n  - in line 116 of train.py file, attempt_download(weights). this function will download the pretrained model or the last.pt file for resuming training.\r\n  - if you would like to resume the training(training from epoch 0), you need to download the function attempt_download(weights) will download last.pt file.\r\n  - however, it couldn't be download for some unknown reason.\r\n  \r\n+ the following is the method how I generate the last.pt file\r\n>>1.  add the following code after line 112 of train.py file:\r\n>>```Python\r\n>>    \"\"\"---------------------start saving randod model -------------------\"\"\"\r\n>>     save = True\r\n>>     if save:\r\n>>         ema = torch_utils.ModelEMA(model)\r\n>>         epoch = 0\r\n>>         best_fitness = 0\r\n>>         with open(results_file, 'r') as f:  # create checkpoint\r\n>>             chkpt = {'epoch': epoch,\r\n>>                      'best_fitness': best_fitness,\r\n>>                      'training_results': f.read(),\r\n>>                      'model': ema.ema.module.state_dict() if hasattr(model, 'module') else ema.ema.state_dict(),\r\n>>                      'optimizer': optimizer.state_dict()}\r\n>>         torch.save(chkpt, last)\r\n>>    \"\"\"---------------------finalize saving randod model -------------------\"\"\"\r\n>>```\r\n>> 2.  comment out line 87 and 88 of train.py file\r\n>> 3. add the following code after line 233 of models.py file\r\n>>```Python\r\n>>        for m in self.modules():\r\n>>            if isinstance(m, nn.Conv2d):\r\n>>                m.weight = nn.init.xavier_normal_(m.weight, gain=0.02)\r\n>>            elif isinstance(m, nn.BatchNorm2d):\r\n>>                nn.init.normal_(m.weight.data, 1.0, 0.02)\r\n>>                m.bias.data.zero_()\r\n>>```\r\n>> 4.  create results.txt file in the code folder. results.txt file contains 1 line:\r\n>>```Python\r\n>>0/299     7.17G      73.28      72.15     70.816      216.25         5       576     0.00001     0.000001     0.0000001     0.00000001      73.06\r\n>>```\r\n\r\n","closed_by":{"login":"github-actions[bot]","id":41898282,"node_id":"MDM6Qm90NDE4OTgyODI=","avatar_url":"https://avatars.githubusercontent.com/in/15368?v=4","gravatar_id":"","url":"https://api.github.com/users/github-actions%5Bbot%5D","html_url":"https://github.com/apps/github-actions","followers_url":"https://api.github.com/users/github-actions%5Bbot%5D/followers","following_url":"https://api.github.com/users/github-actions%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/github-actions%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/github-actions%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/github-actions%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/github-actions%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/github-actions%5Bbot%5D/repos","events_url":"https://api.github.com/users/github-actions%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/github-actions%5Bbot%5D/received_events","type":"Bot","site_admin":false},"reactions":{"url":"https://api.github.com/repos/ultralytics/yolov3/issues/1243/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ultralytics/yolov3/issues/1243/timeline","performed_via_github_app":null,"state_reason":"completed"}