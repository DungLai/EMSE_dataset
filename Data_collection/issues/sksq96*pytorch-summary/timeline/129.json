[{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/comments/619203923","html_url":"https://github.com/sksq96/pytorch-summary/issues/129#issuecomment-619203923","issue_url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/129","id":619203923,"node_id":"MDEyOklzc3VlQ29tbWVudDYxOTIwMzkyMw==","user":{"login":"TylerYep","id":18021435,"node_id":"MDQ6VXNlcjE4MDIxNDM1","avatar_url":"https://avatars.githubusercontent.com/u/18021435?v=4","gravatar_id":"","url":"https://api.github.com/users/TylerYep","html_url":"https://github.com/TylerYep","followers_url":"https://api.github.com/users/TylerYep/followers","following_url":"https://api.github.com/users/TylerYep/following{/other_user}","gists_url":"https://api.github.com/users/TylerYep/gists{/gist_id}","starred_url":"https://api.github.com/users/TylerYep/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TylerYep/subscriptions","organizations_url":"https://api.github.com/users/TylerYep/orgs","repos_url":"https://api.github.com/users/TylerYep/repos","events_url":"https://api.github.com/users/TylerYep/events{/privacy}","received_events_url":"https://api.github.com/users/TylerYep/received_events","type":"User","site_admin":false},"created_at":"2020-04-24T19:37:01Z","updated_at":"2020-04-24T19:37:01Z","author_association":"NONE","body":"Can you post your generator_B2A class? This is either an issue with your input shape or an issue with how you are structuring your forward() pass.","reactions":{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/comments/619203923/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"TylerYep","id":18021435,"node_id":"MDQ6VXNlcjE4MDIxNDM1","avatar_url":"https://avatars.githubusercontent.com/u/18021435?v=4","gravatar_id":"","url":"https://api.github.com/users/TylerYep","html_url":"https://github.com/TylerYep","followers_url":"https://api.github.com/users/TylerYep/followers","following_url":"https://api.github.com/users/TylerYep/following{/other_user}","gists_url":"https://api.github.com/users/TylerYep/gists{/gist_id}","starred_url":"https://api.github.com/users/TylerYep/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TylerYep/subscriptions","organizations_url":"https://api.github.com/users/TylerYep/orgs","repos_url":"https://api.github.com/users/TylerYep/repos","events_url":"https://api.github.com/users/TylerYep/events{/privacy}","received_events_url":"https://api.github.com/users/TylerYep/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/comments/619341038","html_url":"https://github.com/sksq96/pytorch-summary/issues/129#issuecomment-619341038","issue_url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/129","id":619341038,"node_id":"MDEyOklzc3VlQ29tbWVudDYxOTM0MTAzOA==","user":{"login":"drawingsnow","id":26598418,"node_id":"MDQ6VXNlcjI2NTk4NDE4","avatar_url":"https://avatars.githubusercontent.com/u/26598418?v=4","gravatar_id":"","url":"https://api.github.com/users/drawingsnow","html_url":"https://github.com/drawingsnow","followers_url":"https://api.github.com/users/drawingsnow/followers","following_url":"https://api.github.com/users/drawingsnow/following{/other_user}","gists_url":"https://api.github.com/users/drawingsnow/gists{/gist_id}","starred_url":"https://api.github.com/users/drawingsnow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drawingsnow/subscriptions","organizations_url":"https://api.github.com/users/drawingsnow/orgs","repos_url":"https://api.github.com/users/drawingsnow/repos","events_url":"https://api.github.com/users/drawingsnow/events{/privacy}","received_events_url":"https://api.github.com/users/drawingsnow/received_events","type":"User","site_admin":false},"created_at":"2020-04-25T08:18:22Z","updated_at":"2020-04-25T08:18:22Z","author_association":"NONE","body":"thanks,here is my code:\r\n\r\nimport torch.nn as nn\r\nimport torch.nn.functional as F\r\nimport torch\r\nimport numpy as np\r\nimport pdb\r\n\r\n\r\nclass up_2Dsample(nn.Module):\r\n    def __init__(self, upscale_factor=2):\r\n        super(up_2Dsample, self).__init__()\r\n        self.scale_factor = upscale_factor\r\n\r\n    def forward(self, input):\r\n        h = input.shape[2]\r\n        w = input.shape[3]\r\n        new_size = [h * self.scale_factor, w * self.scale_factor]\r\n        return F.interpolate(input,new_size)\r\n       \r\n\r\nclass PixelShuffle(nn.Module):\r\n    def __init__(self, upscale_factor=2):\r\n        super(PixelShuffle, self).__init__()\r\n        # Custom Implementation because PyTorch PixelShuffle requires,\r\n        # 4D input. Whereas, in this case we have have 3D array\r\n        self.upscale_factor = upscale_factor\r\n\r\n    def forward(self, input):\r\n        n = input.shape[0]\r\n        c_out = input.shape[1] // self.upscale_factor\r\n        w_new = input.shape[2] * self.upscale_factor\r\n        return input.view(n, c_out, w_new)\r\n\r\n\r\nclass ResidualLayer(nn.Module):\r\n    def __init__(self, in_channels, out_channels, kernel_size, stride, padding):\r\n        super(ResidualLayer, self).__init__()\r\n\r\n\r\n\r\n        self.conv1d_layer = nn.Sequential(nn.Conv1d(in_channels=in_channels,\r\n                                                    out_channels=out_channels,\r\n                                                    kernel_size=kernel_size,\r\n                                                    stride=1,\r\n                                                    padding=padding),\r\n                                          nn.InstanceNorm1d(num_features=out_channels,\r\n                                                            affine=True))\r\n\r\n        self.conv_layer_gates = nn.Sequential(nn.Conv1d(in_channels=in_channels,\r\n                                                        out_channels=out_channels,\r\n                                                        kernel_size=kernel_size,\r\n                                                        stride=1,\r\n                                                        padding=padding),\r\n                                              nn.InstanceNorm1d(num_features=out_channels,\r\n                                                                affine=True))\r\n\r\n        self.conv1d_out_layer = nn.Sequential(nn.Conv1d(in_channels=out_channels,\r\n                                                        out_channels=in_channels,\r\n                                                        kernel_size=kernel_size,\r\n                                                        stride=1,\r\n                                                        padding=padding),\r\n                                              nn.InstanceNorm1d(num_features=in_channels,\r\n                                                                affine=True))\r\n\r\n    def forward(self, input):\r\n        h1_norm = self.conv1d_layer(input)\r\n        h1_gates_norm = self.conv_layer_gates(input)\r\n\r\n        # GLU\r\n        h1_glu = h1_norm * torch.sigmoid(h1_gates_norm)\r\n\r\n        h2_norm = self.conv1d_out_layer(h1_glu)\r\n        return input + h2_norm\r\n\r\n\r\nclass downSample_Generator(nn.Module):\r\n    def __init__(self, in_channels, out_channels, kernel_size, stride, padding):\r\n        super(downSample_Generator, self).__init__()\r\n\r\n        self.convLayer = nn.Sequential(nn.Conv2d(in_channels=in_channels,\r\n                                                 out_channels=out_channels,\r\n                                                 kernel_size=kernel_size,\r\n                                                 stride=stride,\r\n                                                 padding=padding),\r\n                                       nn.InstanceNorm2d(num_features=out_channels,\r\n                                                         affine=True))\r\n        self.convLayer_gates = nn.Sequential(nn.Conv2d(in_channels=in_channels,\r\n                                                       out_channels=out_channels,\r\n                                                       kernel_size=kernel_size,\r\n                                                       stride=stride,\r\n                                                       padding=padding),\r\n                                             nn.InstanceNorm2d(num_features=out_channels,\r\n                                                               affine=True))\r\n\r\n    def forward(self, input):\r\n        a = self.convLayer(input)\r\n        b = self.convLayer_gates(input)\r\n        return self.convLayer(input) * torch.sigmoid(self.convLayer_gates(input))\r\n\r\n    '''  '''\r\nclass upSample_Generator(nn.Module):\r\n    def __init__(self, in_channels, out_channels, kernel_size, stride, padding):\r\n        super(upSample_Generator, self).__init__()\r\n\r\n        self.convLayer = nn.Sequential(nn.Conv2d(in_channels=in_channels,\r\n                                                 out_channels=out_channels,\r\n                                                 kernel_size=kernel_size,\r\n                                                 stride=stride,\r\n                                                 padding=padding),\r\n                                       #PixelShuffle(upscale_factor=2),\r\n                                       up_2Dsample(upscale_factor=2),\r\n                                       nn.InstanceNorm2d(num_features=out_channels,\r\n                                                         affine=True))\r\n        self.convLayer_gates = nn.Sequential(nn.Conv2d(in_channels=in_channels,\r\n                                                       out_channels=out_channels,\r\n                                                       kernel_size=kernel_size,\r\n                                                       stride=stride,\r\n                                                       padding=padding),\r\n                                             #PixelShuffle(upscale_factor=2),\r\n                                             up_2Dsample(upscale_factor=2),\r\n                                             nn.InstanceNorm2d(num_features=out_channels,\r\n                                                               affine=True))\r\n\r\n   \r\n\r\n    def forward(self, input):        \r\n        return self.convLayer(input) * torch.sigmoid(self.convLayer_gates(input))\r\n\r\n\r\nclass Generator(nn.Module):\r\n    def __init__(self):\r\n        super(Generator, self).__init__()\r\n\r\n        self.conv1 = nn.Conv2d(in_channels=1,\r\n                               out_channels=128,\r\n                               kernel_size=[5,15],\r\n                               stride=1,\r\n                               padding=[2,7])\r\n\r\n        self.conv1_gates = nn.Conv2d(in_channels=1,\r\n                               out_channels=128,\r\n                               kernel_size=[5,15],\r\n                               stride=1,\r\n                               padding=[2,7])\r\n\r\n        # Downsample Layer\r\n        self.downSample1 = downSample_Generator(in_channels=128,\r\n                                                out_channels=256,\r\n                                                kernel_size=5,\r\n                                                stride=2,\r\n                                                padding=2)\r\n\r\n        self.downSample2 = downSample_Generator(in_channels=256,\r\n                                                out_channels=512,\r\n                                                kernel_size=5,\r\n                                                stride=2,\r\n                                                padding=2)\r\n        #reshape\r\n        self.conv2 = nn.Conv1d(in_channels=16384,\r\n                               out_channels=512,\r\n                               kernel_size=1,\r\n                               stride=1)\r\n\r\n        # Residual Blocks\r\n        self.residualLayer1 = ResidualLayer(in_channels=512,\r\n                                            out_channels=1024,\r\n                                            kernel_size=3,\r\n                                            stride=1,\r\n                                            padding=1)\r\n        self.residualLayer2 = ResidualLayer(in_channels=512,\r\n                                            out_channels=1024,\r\n                                            kernel_size=3,\r\n                                            stride=1,\r\n                                            padding=1)\r\n        self.residualLayer3 = ResidualLayer(in_channels=512,\r\n                                            out_channels=1024,\r\n                                            kernel_size=3,\r\n                                            stride=1,\r\n                                            padding=1)\r\n        self.residualLayer4 = ResidualLayer(in_channels=512,\r\n                                            out_channels=1024,\r\n                                            kernel_size=3,\r\n                                            stride=1,\r\n                                            padding=1)\r\n        self.residualLayer5 = ResidualLayer(in_channels=512,\r\n                                            out_channels=1024,\r\n                                            kernel_size=3,\r\n                                            stride=1,\r\n                                            padding=1)\r\n        self.residualLayer6 = ResidualLayer(in_channels=512,\r\n                                            out_channels=1024,\r\n                                            kernel_size=3,\r\n                                            stride=1,\r\n                                            padding=1)\r\n        #reshape\r\n        self.conv3 = nn.Conv1d(in_channels=512,\r\n                               out_channels=16384,\r\n                               kernel_size=1,\r\n                               stride=1)\r\n\r\n\r\n        # UpSample Layer\r\n        self.upSample1 = upSample_Generator(in_channels=512,\r\n                                            out_channels=1024,\r\n                                            kernel_size=5,\r\n                                            stride=1,\r\n                                            padding=2)\r\n        \r\n        self.upSample2 = upSample_Generator(in_channels=1024,\r\n                                            out_channels=512,\r\n                                            kernel_size=5,\r\n                                            stride=1,\r\n                                            padding=2)\r\n\r\n        self.lastConvLayer = nn.Conv2d(in_channels=512,\r\n                                       out_channels=1,\r\n                                       kernel_size=[5,15],\r\n                                       stride=1,\r\n                                       padding=[2,7])\r\n\r\n    def forward(self, input):\r\n        # GLU\r\n        input = input.unsqueeze(1)\r\n\r\n        conv1 = self.conv1(input) * torch.sigmoid(self.conv1_gates(input))\r\n\r\n        downsample1 = self.downSample1(conv1)\r\n        \r\n        downsample2 = self.downSample2(downsample1)\r\n        \r\n        downsample3 = downsample2.view([downsample2.shape[0],-1,downsample2.shape[3]])\r\n        \r\n        downsample3 = self.conv2(downsample3)\r\n        \r\n        residual_layer_1 = self.residualLayer1(downsample3)\r\n        \r\n        residual_layer_2 = self.residualLayer2(residual_layer_1)\r\n        \r\n        residual_layer_3 = self.residualLayer3(residual_layer_2)\r\n        \r\n        residual_layer_4 = self.residualLayer4(residual_layer_3)\r\n        \r\n        residual_layer_5 = self.residualLayer5(residual_layer_4)\r\n        \r\n        residual_layer_6 = self.residualLayer6(residual_layer_5)\r\n        \r\n        residual_layer_6 = self.conv3(residual_layer_6)\r\n        \r\n        residual_layer_6 = residual_layer_6.view([downsample2.shape[0],downsample2.shape[1],downsample2.shape[2],downsample2.shape[3]])\r\n        \r\n        upSample_layer_1 = self.upSample1(residual_layer_6)\r\n        \r\n        upSample_layer_2 = self.upSample2(upSample_layer_1)\r\n        \r\n        output = self.lastConvLayer(upSample_layer_2)\r\n        \r\n        output = output.view([output.shape[0],-1,output.shape[3]])\r\n        return output\r\n\r\n","reactions":{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/comments/619341038/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"drawingsnow","id":26598418,"node_id":"MDQ6VXNlcjI2NTk4NDE4","avatar_url":"https://avatars.githubusercontent.com/u/26598418?v=4","gravatar_id":"","url":"https://api.github.com/users/drawingsnow","html_url":"https://github.com/drawingsnow","followers_url":"https://api.github.com/users/drawingsnow/followers","following_url":"https://api.github.com/users/drawingsnow/following{/other_user}","gists_url":"https://api.github.com/users/drawingsnow/gists{/gist_id}","starred_url":"https://api.github.com/users/drawingsnow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drawingsnow/subscriptions","organizations_url":"https://api.github.com/users/drawingsnow/orgs","repos_url":"https://api.github.com/users/drawingsnow/repos","events_url":"https://api.github.com/users/drawingsnow/events{/privacy}","received_events_url":"https://api.github.com/users/drawingsnow/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/comments/619436608","html_url":"https://github.com/sksq96/pytorch-summary/issues/129#issuecomment-619436608","issue_url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/129","id":619436608,"node_id":"MDEyOklzc3VlQ29tbWVudDYxOTQzNjYwOA==","user":{"login":"TylerYep","id":18021435,"node_id":"MDQ6VXNlcjE4MDIxNDM1","avatar_url":"https://avatars.githubusercontent.com/u/18021435?v=4","gravatar_id":"","url":"https://api.github.com/users/TylerYep","html_url":"https://github.com/TylerYep","followers_url":"https://api.github.com/users/TylerYep/followers","following_url":"https://api.github.com/users/TylerYep/following{/other_user}","gists_url":"https://api.github.com/users/TylerYep/gists{/gist_id}","starred_url":"https://api.github.com/users/TylerYep/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TylerYep/subscriptions","organizations_url":"https://api.github.com/users/TylerYep/orgs","repos_url":"https://api.github.com/users/TylerYep/repos","events_url":"https://api.github.com/users/TylerYep/events{/privacy}","received_events_url":"https://api.github.com/users/TylerYep/received_events","type":"User","site_admin":false},"created_at":"2020-04-25T20:30:39Z","updated_at":"2020-04-25T20:30:39Z","author_association":"NONE","body":"Your code works fine for me if you change it to shape (128, 50) instead.\r\nIf that doesn't work, try it on my fork: #124 .","reactions":{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/comments/619436608/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"TylerYep","id":18021435,"node_id":"MDQ6VXNlcjE4MDIxNDM1","avatar_url":"https://avatars.githubusercontent.com/u/18021435?v=4","gravatar_id":"","url":"https://api.github.com/users/TylerYep","html_url":"https://github.com/TylerYep","followers_url":"https://api.github.com/users/TylerYep/followers","following_url":"https://api.github.com/users/TylerYep/following{/other_user}","gists_url":"https://api.github.com/users/TylerYep/gists{/gist_id}","starred_url":"https://api.github.com/users/TylerYep/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TylerYep/subscriptions","organizations_url":"https://api.github.com/users/TylerYep/orgs","repos_url":"https://api.github.com/users/TylerYep/repos","events_url":"https://api.github.com/users/TylerYep/events{/privacy}","received_events_url":"https://api.github.com/users/TylerYep/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/comments/619467207","html_url":"https://github.com/sksq96/pytorch-summary/issues/129#issuecomment-619467207","issue_url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/129","id":619467207,"node_id":"MDEyOklzc3VlQ29tbWVudDYxOTQ2NzIwNw==","user":{"login":"drawingsnow","id":26598418,"node_id":"MDQ6VXNlcjI2NTk4NDE4","avatar_url":"https://avatars.githubusercontent.com/u/26598418?v=4","gravatar_id":"","url":"https://api.github.com/users/drawingsnow","html_url":"https://github.com/drawingsnow","followers_url":"https://api.github.com/users/drawingsnow/followers","following_url":"https://api.github.com/users/drawingsnow/following{/other_user}","gists_url":"https://api.github.com/users/drawingsnow/gists{/gist_id}","starred_url":"https://api.github.com/users/drawingsnow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drawingsnow/subscriptions","organizations_url":"https://api.github.com/users/drawingsnow/orgs","repos_url":"https://api.github.com/users/drawingsnow/repos","events_url":"https://api.github.com/users/drawingsnow/events{/privacy}","received_events_url":"https://api.github.com/users/drawingsnow/received_events","type":"User","site_admin":false},"created_at":"2020-04-26T02:00:38Z","updated_at":"2020-04-26T02:00:38Z","author_association":"NONE","body":"thanks for your help ,but why should i change it to shape(128,50)? My input is (1,128,50) ,when i test my model i use (1,128,50)too","reactions":{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/comments/619467207/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"drawingsnow","id":26598418,"node_id":"MDQ6VXNlcjI2NTk4NDE4","avatar_url":"https://avatars.githubusercontent.com/u/26598418?v=4","gravatar_id":"","url":"https://api.github.com/users/drawingsnow","html_url":"https://github.com/drawingsnow","followers_url":"https://api.github.com/users/drawingsnow/followers","following_url":"https://api.github.com/users/drawingsnow/following{/other_user}","gists_url":"https://api.github.com/users/drawingsnow/gists{/gist_id}","starred_url":"https://api.github.com/users/drawingsnow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/drawingsnow/subscriptions","organizations_url":"https://api.github.com/users/drawingsnow/orgs","repos_url":"https://api.github.com/users/drawingsnow/repos","events_url":"https://api.github.com/users/drawingsnow/events{/privacy}","received_events_url":"https://api.github.com/users/drawingsnow/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/comments/619505688","html_url":"https://github.com/sksq96/pytorch-summary/issues/129#issuecomment-619505688","issue_url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/129","id":619505688,"node_id":"MDEyOklzc3VlQ29tbWVudDYxOTUwNTY4OA==","user":{"login":"TylerYep","id":18021435,"node_id":"MDQ6VXNlcjE4MDIxNDM1","avatar_url":"https://avatars.githubusercontent.com/u/18021435?v=4","gravatar_id":"","url":"https://api.github.com/users/TylerYep","html_url":"https://github.com/TylerYep","followers_url":"https://api.github.com/users/TylerYep/followers","following_url":"https://api.github.com/users/TylerYep/following{/other_user}","gists_url":"https://api.github.com/users/TylerYep/gists{/gist_id}","starred_url":"https://api.github.com/users/TylerYep/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TylerYep/subscriptions","organizations_url":"https://api.github.com/users/TylerYep/orgs","repos_url":"https://api.github.com/users/TylerYep/repos","events_url":"https://api.github.com/users/TylerYep/events{/privacy}","received_events_url":"https://api.github.com/users/TylerYep/received_events","type":"User","site_admin":false},"created_at":"2020-04-26T08:03:58Z","updated_at":"2020-04-26T08:03:58Z","author_association":"NONE","body":"I have no idea. Torchsummary works by taking the input_size you pass in and appending an extra batch dimension. So the input_size you give should NOT include the batch dimension.","reactions":{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/comments/619505688/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"TylerYep","id":18021435,"node_id":"MDQ6VXNlcjE4MDIxNDM1","avatar_url":"https://avatars.githubusercontent.com/u/18021435?v=4","gravatar_id":"","url":"https://api.github.com/users/TylerYep","html_url":"https://github.com/TylerYep","followers_url":"https://api.github.com/users/TylerYep/followers","following_url":"https://api.github.com/users/TylerYep/following{/other_user}","gists_url":"https://api.github.com/users/TylerYep/gists{/gist_id}","starred_url":"https://api.github.com/users/TylerYep/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TylerYep/subscriptions","organizations_url":"https://api.github.com/users/TylerYep/orgs","repos_url":"https://api.github.com/users/TylerYep/repos","events_url":"https://api.github.com/users/TylerYep/events{/privacy}","received_events_url":"https://api.github.com/users/TylerYep/received_events","type":"User","site_admin":false}}]