{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/95","repository_url":"https://api.github.com/repos/sksq96/pytorch-summary","labels_url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/95/labels{/name}","comments_url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/95/comments","events_url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/95/events","html_url":"https://github.com/sksq96/pytorch-summary/issues/95","id":508405938,"node_id":"MDU6SXNzdWU1MDg0MDU5Mzg=","number":95,"title":"Unable to handle custom weight ","user":{"login":"kim-sunghoon","id":40001125,"node_id":"MDQ6VXNlcjQwMDAxMTI1","avatar_url":"https://avatars.githubusercontent.com/u/40001125?v=4","gravatar_id":"","url":"https://api.github.com/users/kim-sunghoon","html_url":"https://github.com/kim-sunghoon","followers_url":"https://api.github.com/users/kim-sunghoon/followers","following_url":"https://api.github.com/users/kim-sunghoon/following{/other_user}","gists_url":"https://api.github.com/users/kim-sunghoon/gists{/gist_id}","starred_url":"https://api.github.com/users/kim-sunghoon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kim-sunghoon/subscriptions","organizations_url":"https://api.github.com/users/kim-sunghoon/orgs","repos_url":"https://api.github.com/users/kim-sunghoon/repos","events_url":"https://api.github.com/users/kim-sunghoon/events{/privacy}","received_events_url":"https://api.github.com/users/kim-sunghoon/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-10-17T11:16:26Z","updated_at":"2019-10-17T11:16:26Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello, Thanks for the awesome tool!\r\nHowever, customized weights are not reported by torchsummary.\r\n    [the weight1 and weight2 in the following code] \r\n\r\nFor example, I made a following model just using 1x1x3x3 convolution then get \r\ninput featuremap size = C x H x W  --> \r\noutput featuremap size = C x H x W\r\n\r\n```python\r\n  1 import torch                                                                                                                                                                                                                                             \r\n  2 import torch.nn as nn                                                                                                                                                                                                                                    \r\n  3 import torch.nn.functional as F                                                                                                                                                                                                                          \r\n  4 import torchsummary                                                                                                                                                                                                                                      \r\n  5 import numpy                                                                                                                                                                                                                                             \r\n  6 import sys                                                                                                                                                                                                                                               \r\n  7                                                                                                                                                                                                                                                          \r\n  8 class test(nn.Module):                                                                                                                                                                                                                                   \r\n  9     def __init__(self, planes):                                                                                                                                                                                                                          \r\n 10     ¦   super(test, self).__init__()                                                                                                                                                                                                                     \r\n 11                                                                                                                                                                                                                                                          \r\n 12     ¦   self.planes = planes                                                                                                                                                                                                                             \r\n 13     ¦   self.weight1 = torch.randn((1,1,3,3), requires_grad = True).to(\"cuda\")                                                                                                                                                                           \r\n 14     ¦   self.weight2 = torch.randn((1,1,3,3), requires_grad = True).to(\"cuda\")                                                                                                                                                                           \r\n 15     ¦   print(self.weight1)                                                                                                                                                                                                                              \r\n 16     ¦   print(self.weight2)                                                                                                                                                                                                                              \r\n 17     ¦   self.bn1 = nn.BatchNorm2d(planes)                                                                                                                                                                                                                \r\n 18     ¦   self.bn2 = nn.BatchNorm2d(planes)                                                                                                                                                                                                                \r\n 19                                                                                                                                                                                                                                                          \r\n 20     def forward(self, x):                                                                                                                                                                                                                                \r\n 21     ¦   out = None                                                                                                                                                                                                                                       \r\n 22     ¦   for i in range (self.planes):                                                                                                                                                                                                                    \r\n 23     ¦   ¦   if i == 0:                                                                                                                                                                                                                                   \r\n 24     ¦   ¦   ¦   out = F.conv2d(x[:,i,:,:].unsqueeze(1), self.weight1, stride=1, padding=1)                                                                                                                                                               \r\n 25     ¦   ¦   else:                                                                                                                                                                                                                                        \r\n 26     ¦   ¦   ¦   temp_out = F.conv2d(x[:,i,:,:].unsqueeze(1), self.weight1, stride=1, padding=1)                                                                                                                                                          \r\n 27     ¦   ¦   ¦   out = torch.cat(([out, temp_out]), dim=1)                                                                                                                                                                                                \r\n 28     ¦   out = self.bn1(out)                                                                                                                                                                                                                              \r\n 29     ¦   for i in range (self.planes):                                                                                                                                                                                                                    \r\n 30     ¦   ¦   if i == 0:                                                                                                                                                                                                                                   \r\n 31     ¦   ¦   ¦   out = F.conv2d(x[:,i,:,:].unsqueeze(1), self.weight2, stride=1, padding=1)                                                                                                                                                               \r\n 32     ¦   ¦   else:                                                                                                                                                                                                                                        \r\n 33     ¦   ¦   ¦   temp_out = F.conv2d(x[:,i,:,:].unsqueeze(1), self.weight2, stride=1, padding=1)                                                                                                                                                          \r\n 34     ¦   ¦   ¦   out = torch.cat(([out, temp_out]), dim=1)                                                                                                                                                                                                \r\n 35     ¦   out = self.bn2(out)                                                                                                                                                                                                                              \r\n 36                                                                                                                                                                                                                                                          \r\n 37     ¦   return out                                                                                                                                                                                                                                       \r\n 38                                                                                                                                                                                                                                                          \r\n 39                                                                                                                                                                                                                                                          \r\n 40                                                                                                                                                                                                                                                          \r\n 41                                                                                                                                                                                                                                                          \r\n 42                                                                                                                                                                                                                                                          \r\n 43 if __name__ == \"__main__\":                                                                                                                                                                                                                               \r\n 44     device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")                                                                                                                                                                              \r\n 45                                                                                                                                                                                                                                                          \r\n 46     input1 = torch.ones(1,5,10,10).to(device)                                                                                                                                                                                                            \r\n 47     print(input1)                                                                                                                                                                                                                                        \r\n 48     #  print(input1)                                                                                                                                                                                                                                     \r\n 49     planes = input1.shape[1]                                                                                                                                                                                                                             \r\n 50     #  print(input1[:,0,:,:])                                                                                                                                                                                                                            \r\n 51     model = test(planes)                                                                                                                                                                                                                                 \r\n 52     model = model.to(device)                                                                                                                                                                                                                             \r\n 53     torchsummary.summary(model, (5,10,10))                                                                                                                                                                                                              \r\n 54     output = model(input1)                                                                                                                                                                                                                               \r\n 55     print(\"Total Output \")                                                                                                                                                                                                                               \r\n 56     print(output)                                                                                                                                                                                                                                        \r\n 57     print(output.size())                                                                                                                                                                                                                                 \r\n ```\r\n\r\nLine 53 generated the only batchnorm params as follows:\r\n```\r\n----------------------------------------------------------------                                                                                                                                                                                             \r\n    ¦   Layer (type)               Output Shape         Param #                                                                                                                                                                                              \r\n================================================================                                                                                                                                                                                             \r\n    ¦  BatchNorm2d-1            [-1, 5, 10, 10]              10                                                                                                                                                                                              \r\n    ¦  BatchNorm2d-2            [-1, 5, 10, 10]              10                                                                                                                                                                                              \r\n================================================================                                                                                                                                                                                             \r\nTotal params: 20                                                                                                                                                                                                                                             \r\nTrainable params: 20                                                                                                                                                                                                                                         \r\nNon-trainable params: 0                                                                                                                                                                                                                                      \r\n----------------------------------------------------------------                                                                                                                                                                                             \r\nInput size (MB): 0.00                                                                                                                                                                                                                                        \r\nForward/backward pass size (MB): 0.01                                                                                                                                                                                                                        \r\nParams size (MB): 0.00                                                                                                                                                                                                                                       \r\nEstimated Total Size (MB): 0.01                                                                                                                                                                                                                              \r\n----------------------------------------------------------------    \r\n```\r\n\r\nIs there any way to monitor customized weights? \r\n\r\nThank you! \r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/95/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sksq96/pytorch-summary/issues/95/timeline","performed_via_github_app":null,"state_reason":null}