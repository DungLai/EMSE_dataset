{"url":"https://api.github.com/repos/aiqm/torchani/issues/444","repository_url":"https://api.github.com/repos/aiqm/torchani","labels_url":"https://api.github.com/repos/aiqm/torchani/issues/444/labels{/name}","comments_url":"https://api.github.com/repos/aiqm/torchani/issues/444/comments","events_url":"https://api.github.com/repos/aiqm/torchani/issues/444/events","html_url":"https://github.com/aiqm/torchani/issues/444","id":596809308,"node_id":"MDU6SXNzdWU1OTY4MDkzMDg=","number":444,"title":"KeyError: 'species' when loading newest ani-2x dataset","user":{"login":"muammar","id":954209,"node_id":"MDQ6VXNlcjk1NDIwOQ==","avatar_url":"https://avatars.githubusercontent.com/u/954209?v=4","gravatar_id":"","url":"https://api.github.com/users/muammar","html_url":"https://github.com/muammar","followers_url":"https://api.github.com/users/muammar/followers","following_url":"https://api.github.com/users/muammar/following{/other_user}","gists_url":"https://api.github.com/users/muammar/gists{/gist_id}","starred_url":"https://api.github.com/users/muammar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/muammar/subscriptions","organizations_url":"https://api.github.com/users/muammar/orgs","repos_url":"https://api.github.com/users/muammar/repos","events_url":"https://api.github.com/users/muammar/events{/privacy}","received_events_url":"https://api.github.com/users/muammar/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-04-08T19:32:29Z","updated_at":"2020-04-09T00:17:42Z","closed_at":"2020-04-08T23:18:57Z","author_association":"NONE","active_lock_reason":null,"body":"I am working with the ani-2x dataset that was kindly shared to me, and the hdf5 dataset has no \"species\" values.\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-4-16bbb8e93f56> in <module>\r\n      2     dspath, species_to_tensor, batch_size, rm_outlier=True,\r\n      3     device=device, atomic_properties=['forces'],\r\n----> 4     transform=[energy_shifter.subtract_from_dataset], split=[0.8, None])\r\n      5 \r\n      6 print('Self atomic energies: ', energy_shifter.self_energies)\r\n\r\n~/git/torchani/torchani/data/__init__.py in load_ani_dataset(path, species_tensor_converter, batch_size, shuffle, rm_outlier, properties, atomic_properties, transform, dtype, device, split)\r\n    283     \"\"\"\r\n    284     atomic_properties_, properties_ = load_and_pad_whole_dataset(\r\n--> 285         path, species_tensor_converter, shuffle, properties, atomic_properties)\r\n    286 \r\n    287     molecules = atomic_properties_['species'].shape[0]\r\n\r\n~/git/torchani/torchani/data/__init__.py in load_and_pad_whole_dataset(path, species_tensor_converter, shuffle, properties, atomic_properties)\r\n    104         for m in anidataloader(f):\r\n    105             atomic_properties_.append(dict(\r\n--> 106                 species=species_tensor_converter(m['species']).unsqueeze(0),\r\n    107                 **{\r\n    108                     k: torch.from_numpy(m[k]).to(torch.double)\r\n\r\nKeyError: 'species'\r\n```\r\n\r\nI proceeded to load the example dataset you provide in the examples and `species` is just a list of chemical symbols. I changed the `data/__init__.py` file as shown in the diff file below:\r\n\r\n\r\n```\r\ndiff --git a/torchani/data/__init__.py b/torchani/data/__init__.py\r\nindex bc90fed..0f97dc3 100644\r\n--- a/torchani/data/__init__.py\r\n+++ b/torchani/data/__init__.py\r\n@@ -8,6 +8,7 @@ from ._pyanitools import anidataloader\r\n import torch\r\n from .. import utils\r\n from .new import CachedDataset, ShuffledDataset, find_threshold\r\n+from ase.data import chemical_symbols\r\n \r\n default_device = 'cuda' if torch.cuda.is_available() else 'cpu'\r\n \r\n@@ -102,13 +103,26 @@ def load_and_pad_whole_dataset(path, species_tensor_converter, shuffle=True,\r\n     properties = {k: [] for k in properties}\r\n     for f in files:\r\n         for m in anidataloader(f):\r\n-            atomic_properties_.append(dict(\r\n-                species=species_tensor_converter(m['species']).unsqueeze(0),\r\n-                **{\r\n-                    k: torch.from_numpy(m[k]).to(torch.double)\r\n-                    for k in ['coordinates'] + list(atomic_properties)\r\n-                }\r\n-            ))\r\n+            try:\r\n+                atomic_properties_.append(dict(\r\n+                    species=species_tensor_converter(m['species']).unsqueeze(0),\r\n+                    **{\r\n+                        k: torch.from_numpy(m[k]).to(torch.double)\r\n+                        for k in ['coordinates'] + list(atomic_properties)\r\n+                    }\r\n+                ))\r\n+                print(m['species'])\r\n+                print(type(m['species']))\r\n+            except KeyError:\r\n+                species_ = [chemical_symbols[number] for number in list(m['numbers'])]\r\n+                atomic_properties_.append(dict(\r\n+                    species=species_tensor_converter(species_).unsqueeze(0),\r\n+                    **{\r\n+                        k: torch.from_numpy(m[k]).to(torch.double)\r\n+                        for k in ['coordinates'] + list(atomic_properties)\r\n+                    }\r\n+                ))\r\n+\r\n             for i in properties:\r\n                 p = torch.from_numpy(m[i]).to(torch.double)\r\n                 properties[i].append(p)\r\n```\r\n\r\nThis effectively produces the expected list e.g. \r\n\r\n```\r\n['C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'F', 'Cl']\r\n```\r\n\r\n but makes the code fail with \r\n\r\n```\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n~/git/torchani/torchani/data/__init__.py in load_and_pad_whole_dataset(path, species_tensor_converter, shuffle, properties, atomic_properties)\r\n    107                 atomic_properties_.append(dict(\r\n--> 108                     species=species_tensor_converter(m['species']).unsqueeze(0),\r\n    109                     **{\r\n\r\nKeyError: 'species'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-4-16bbb8e93f56> in <module>\r\n      2     dspath, species_to_tensor, batch_size, rm_outlier=True,\r\n      3     device=device, atomic_properties=['forces'],\r\n----> 4     transform=[energy_shifter.subtract_from_dataset], split=[0.8, None])\r\n      5 \r\n      6 print('Self atomic energies: ', energy_shifter.self_energies)\r\n\r\n~/git/torchani/torchani/data/__init__.py in load_ani_dataset(path, species_tensor_converter, batch_size, shuffle, rm_outlier, properties, atomic_properties, transform, dtype, device, split)\r\n    298     \"\"\"\r\n    299     atomic_properties_, properties_ = load_and_pad_whole_dataset(\r\n--> 300         path, species_tensor_converter, shuffle, properties, atomic_properties)\r\n    301 \r\n    302     molecules = atomic_properties_['species'].shape[0]\r\n\r\n~/git/torchani/torchani/data/__init__.py in load_and_pad_whole_dataset(path, species_tensor_converter, shuffle, properties, atomic_properties)\r\n    118                 print(species_)\r\n    119                 atomic_properties_.append(dict(\r\n--> 120                     species=species_tensor_converter(species_).unsqueeze(0),\r\n    121                     **{\r\n    122                         k: torch.from_numpy(m[k]).to(torch.double)\r\n\r\n~/git/torchani/torchani/utils.py in __call__(self, species)\r\n    238     def __call__(self, species):\r\n    239         r\"\"\"Convert species from sequence of strings to 1D tensor\"\"\"\r\n--> 240         rev = [self.rev_species[s] for s in species]\r\n    241         return torch.tensor(rev, dtype=torch.long)\r\n    242 \r\n\r\n~/git/torchani/torchani/utils.py in <listcomp>(.0)\r\n    238     def __call__(self, species):\r\n    239         r\"\"\"Convert species from sequence of strings to 1D tensor\"\"\"\r\n--> 240         rev = [self.rev_species[s] for s in species]\r\n    241         return torch.tensor(rev, dtype=torch.long)\r\n    242 \r\n\r\nKeyError: 'Cl'\r\n```\r\n\r\nNote that `Cl` is registered here: \r\n\r\n```\r\nspecies_to_tensor = torchani.utils.ChemicalSymbolsToInts('HCNOFCl')\r\n```\r\n\r\nDo you have any suggestions on how to work around this? Just as additional information, these are the available keys in the HDF5 file I am working with: \r\n\r\n```\r\n<KeysViewHDF5 ['_id', 'charge', 'coord', 'mult', 'numbers', 'wb97x_dz.energy', 'wb97x_dz.forces']>\r\n```","closed_by":{"login":"muammar","id":954209,"node_id":"MDQ6VXNlcjk1NDIwOQ==","avatar_url":"https://avatars.githubusercontent.com/u/954209?v=4","gravatar_id":"","url":"https://api.github.com/users/muammar","html_url":"https://github.com/muammar","followers_url":"https://api.github.com/users/muammar/followers","following_url":"https://api.github.com/users/muammar/following{/other_user}","gists_url":"https://api.github.com/users/muammar/gists{/gist_id}","starred_url":"https://api.github.com/users/muammar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/muammar/subscriptions","organizations_url":"https://api.github.com/users/muammar/orgs","repos_url":"https://api.github.com/users/muammar/repos","events_url":"https://api.github.com/users/muammar/events{/privacy}","received_events_url":"https://api.github.com/users/muammar/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/aiqm/torchani/issues/444/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/aiqm/torchani/issues/444/timeline","performed_via_github_app":null,"state_reason":"completed"}