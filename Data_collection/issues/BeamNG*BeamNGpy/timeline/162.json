[{"url":"https://api.github.com/repos/BeamNG/BeamNGpy/issues/comments/1054162414","html_url":"https://github.com/BeamNG/BeamNGpy/issues/162#issuecomment-1054162414","issue_url":"https://api.github.com/repos/BeamNG/BeamNGpy/issues/162","id":1054162414,"node_id":"IC_kwDOCEke6s4-1T3u","user":{"login":"dstark481","id":94687751,"node_id":"U_kgDOBaTSBw","avatar_url":"https://avatars.githubusercontent.com/u/94687751?v=4","gravatar_id":"","url":"https://api.github.com/users/dstark481","html_url":"https://github.com/dstark481","followers_url":"https://api.github.com/users/dstark481/followers","following_url":"https://api.github.com/users/dstark481/following{/other_user}","gists_url":"https://api.github.com/users/dstark481/gists{/gist_id}","starred_url":"https://api.github.com/users/dstark481/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstark481/subscriptions","organizations_url":"https://api.github.com/users/dstark481/orgs","repos_url":"https://api.github.com/users/dstark481/repos","events_url":"https://api.github.com/users/dstark481/events{/privacy}","received_events_url":"https://api.github.com/users/dstark481/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T11:29:55Z","updated_at":"2022-02-28T11:36:14Z","author_association":"COLLABORATOR","body":"Hi Asionville,\r\n\r\nThanks for the question.\r\n\r\nThe LIDAR sensor returns a collection of 3D points, which represent all the world-space positions of obstacles which it can \"see\" in all directions within its range.  It returns an array which is formatted as a linear sequence of coordinate triplets in the form of [x0, y0, z0, x1, y1, z1, ..., xn, yn, zn],  so the reason you see negative values is because they is actually one of the world-space dimension values of the point, rather than an actual distance.  To convert these values to distances from the LIDAR sensor itself, one would need to compute the distance between each point in this array and the position of the sensor, eg using the 3D distance formula Sqrt((x - x0)^2 + (y - y0)^2  + (z - z0)^2 ). \r\nTo compute the closest point, you could then find the shortest distance from this and get the associated point, of if you only care about the closest point, just use squared distances for computational speed etc.\r\n\r\nI hope this helps.  Let me know how you get on, and if there are still problems we can take a look.\r\n\r\nDave Stark,\r\nSenior Research Software Engineer,\r\nBeamNG","reactions":{"url":"https://api.github.com/repos/BeamNG/BeamNGpy/issues/comments/1054162414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dstark481","id":94687751,"node_id":"U_kgDOBaTSBw","avatar_url":"https://avatars.githubusercontent.com/u/94687751?v=4","gravatar_id":"","url":"https://api.github.com/users/dstark481","html_url":"https://github.com/dstark481","followers_url":"https://api.github.com/users/dstark481/followers","following_url":"https://api.github.com/users/dstark481/following{/other_user}","gists_url":"https://api.github.com/users/dstark481/gists{/gist_id}","starred_url":"https://api.github.com/users/dstark481/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dstark481/subscriptions","organizations_url":"https://api.github.com/users/dstark481/orgs","repos_url":"https://api.github.com/users/dstark481/repos","events_url":"https://api.github.com/users/dstark481/events{/privacy}","received_events_url":"https://api.github.com/users/dstark481/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/BeamNG/BeamNGpy/issues/comments/1054692630","html_url":"https://github.com/BeamNG/BeamNGpy/issues/162#issuecomment-1054692630","issue_url":"https://api.github.com/repos/BeamNG/BeamNGpy/issues/162","id":1054692630,"node_id":"IC_kwDOCEke6s4-3VUW","user":{"login":"ASionville","id":57773476,"node_id":"MDQ6VXNlcjU3NzczNDc2","avatar_url":"https://avatars.githubusercontent.com/u/57773476?v=4","gravatar_id":"","url":"https://api.github.com/users/ASionville","html_url":"https://github.com/ASionville","followers_url":"https://api.github.com/users/ASionville/followers","following_url":"https://api.github.com/users/ASionville/following{/other_user}","gists_url":"https://api.github.com/users/ASionville/gists{/gist_id}","starred_url":"https://api.github.com/users/ASionville/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ASionville/subscriptions","organizations_url":"https://api.github.com/users/ASionville/orgs","repos_url":"https://api.github.com/users/ASionville/repos","events_url":"https://api.github.com/users/ASionville/events{/privacy}","received_events_url":"https://api.github.com/users/ASionville/received_events","type":"User","site_admin":false},"created_at":"2022-02-28T21:42:16Z","updated_at":"2022-02-28T21:42:16Z","author_association":"NONE","body":"Hi !\r\nThanks for the information, helped me a lot to figure out what's going on.\r\n\r\nI did those functions if it can help anyone out there :\r\n```python\r\ndef compute_spherical_coordinates(pointA:tuple, pointB:tuple):\r\n    \"\"\"\r\n    Compute the spherical coordinates of a point from its cartesian coordinates.\r\n    \"\"\"\r\n    # Get the cartesian coordinates of the point\r\n    x = pointB[0] - pointA[0]\r\n    y = pointB[1] - pointA[1]\r\n    z = pointB[2] - pointA[2]\r\n    # Compute the spherical coordinates\r\n    r = (x**2 + y**2 + z**2)**0.5\r\n    theta = math.acos(z/r)\r\n    phi = math.atan2(y, x)\r\n    return r, theta, phi\r\n\r\ndef compute_cartesian_coordinates(r:float, theta:float, phi:float, origin:tuple):\r\n    \"\"\"\r\n    Compute the cartesian coordinates of a point from its spherical coordinates.\r\n    \"\"\"\r\n    x = r*math.sin(theta)*math.cos(phi) + origin[0]\r\n    y = r*math.sin(theta)*math.sin(phi) + origin[1]\r\n    z = r*math.cos(theta) + origin[2]\r\n    return x, y, z\r\n\r\ndef get_closest_point(lidar_points:list, origin:tuple):\r\n    \"\"\"\r\n    Get theta and phi angle corresponding to the closest point to the origin in the list of lidar points.\r\n    Args:\r\n        lidar_points (list): List of points in the lidar.\r\n        origin (tuple): Origin of the lidar.\r\n    Returns:\r\n        min_distance (float): Minimum distance between the origin and the closest point.\r\n        theta (float): Theta angle of the closest point.\r\n        phi (float): Phi angle of the closest point.\r\n    \"\"\"\r\n    spherical_coords = [compute_spherical_coordinates(origin, point) for point in lidar_points]\r\n    min_distance, theta, phi = min(spherical_coords, key=lambda x: x[0])\r\n    return min_distance, theta, phi\r\n\r\ndef list_of_coordinates_to_points(coordinates:list):\r\n    \"\"\"\r\n    Convert a list of coordinates to a list of points.\r\n    Args:\r\n        coordinates (list): List of coordinates [x1, y1, z1, x2, y2, z2, ...].\r\n    Returns:\r\n        points (list): List of points.\r\n    \"\"\"\r\n    points = []\r\n    for i in range(0, len(coordinates), 3):\r\n        points.append((coordinates[i], coordinates[i+1], coordinates[i+2]))\r\n    return points\r\n\r\ndef lidar_to_closest_point(lidar_points_coords:list, origin:tuple):\r\n    \"\"\"\r\n    Convert a list of lidar point coordinates to the closest point to the origin.\r\n    Args:\r\n        lidar_points_coords (list): List of coordinates of the lidar points [x1, y1, z1, x2, y2, z2, ...].\r\n    Returns:\r\n        point (tuple): Distance, theta and phi angles of the closest point.\r\n    \"\"\"\r\n    return get_closest_point(list_of_coordinates_to_points(lidar_points_coords), origin)\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/BeamNG/BeamNGpy/issues/comments/1054692630/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"ASionville","id":57773476,"node_id":"MDQ6VXNlcjU3NzczNDc2","avatar_url":"https://avatars.githubusercontent.com/u/57773476?v=4","gravatar_id":"","url":"https://api.github.com/users/ASionville","html_url":"https://github.com/ASionville","followers_url":"https://api.github.com/users/ASionville/followers","following_url":"https://api.github.com/users/ASionville/following{/other_user}","gists_url":"https://api.github.com/users/ASionville/gists{/gist_id}","starred_url":"https://api.github.com/users/ASionville/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ASionville/subscriptions","organizations_url":"https://api.github.com/users/ASionville/orgs","repos_url":"https://api.github.com/users/ASionville/repos","events_url":"https://api.github.com/users/ASionville/events{/privacy}","received_events_url":"https://api.github.com/users/ASionville/received_events","type":"User","site_admin":false}},{"id":6157701456,"node_id":"CE_lADOCEke6s5Er13AzwAAAAFvBxFQ","url":"https://api.github.com/repos/BeamNG/BeamNGpy/issues/events/6157701456","actor":{"login":"ASionville","id":57773476,"node_id":"MDQ6VXNlcjU3NzczNDc2","avatar_url":"https://avatars.githubusercontent.com/u/57773476?v=4","gravatar_id":"","url":"https://api.github.com/users/ASionville","html_url":"https://github.com/ASionville","followers_url":"https://api.github.com/users/ASionville/followers","following_url":"https://api.github.com/users/ASionville/following{/other_user}","gists_url":"https://api.github.com/users/ASionville/gists{/gist_id}","starred_url":"https://api.github.com/users/ASionville/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ASionville/subscriptions","organizations_url":"https://api.github.com/users/ASionville/orgs","repos_url":"https://api.github.com/users/ASionville/repos","events_url":"https://api.github.com/users/ASionville/events{/privacy}","received_events_url":"https://api.github.com/users/ASionville/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2022-02-28T21:42:16Z","state_reason":null,"performed_via_github_app":null}]