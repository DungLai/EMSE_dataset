[{"id":3959729866,"node_id":"MDEyOkxhYmVsZWRFdmVudDM5NTk3Mjk4NjY=","url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/events/3959729866","actor":{"login":"sxjscience","id":5178350,"node_id":"MDQ6VXNlcjUxNzgzNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5178350?v=4","gravatar_id":"","url":"https://api.github.com/users/sxjscience","html_url":"https://github.com/sxjscience","followers_url":"https://api.github.com/users/sxjscience/followers","following_url":"https://api.github.com/users/sxjscience/following{/other_user}","gists_url":"https://api.github.com/users/sxjscience/gists{/gist_id}","starred_url":"https://api.github.com/users/sxjscience/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sxjscience/subscriptions","organizations_url":"https://api.github.com/users/sxjscience/orgs","repos_url":"https://api.github.com/users/sxjscience/repos","events_url":"https://api.github.com/users/sxjscience/events{/privacy}","received_events_url":"https://api.github.com/users/sxjscience/received_events","type":"User","site_admin":false},"event":"labeled","commit_id":null,"commit_url":null,"created_at":"2020-11-04T22:27:44Z","label":{"name":"bug","color":"d73a4a"},"performed_via_github_app":null},{"url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/comments/729937335","html_url":"https://github.com/dmlc/gluon-nlp/issues/1425#issuecomment-729937335","issue_url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/1425","id":729937335,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTkzNzMzNQ==","user":{"login":"Zha0q1","id":16669457,"node_id":"MDQ6VXNlcjE2NjY5NDU3","avatar_url":"https://avatars.githubusercontent.com/u/16669457?v=4","gravatar_id":"","url":"https://api.github.com/users/Zha0q1","html_url":"https://github.com/Zha0q1","followers_url":"https://api.github.com/users/Zha0q1/followers","following_url":"https://api.github.com/users/Zha0q1/following{/other_user}","gists_url":"https://api.github.com/users/Zha0q1/gists{/gist_id}","starred_url":"https://api.github.com/users/Zha0q1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Zha0q1/subscriptions","organizations_url":"https://api.github.com/users/Zha0q1/orgs","repos_url":"https://api.github.com/users/Zha0q1/repos","events_url":"https://api.github.com/users/Zha0q1/events{/privacy}","received_events_url":"https://api.github.com/users/Zha0q1/received_events","type":"User","site_admin":false},"created_at":"2020-11-18T20:33:23Z","updated_at":"2020-11-18T20:33:23Z","author_association":"NONE","body":"On my EC2 instance I commented out 'google_albert_base_v2' and the rest of the models seemed to work fine.\r\n\r\ncreated this pr to re-enable the tests https://github.com/dmlc/gluon-nlp/pull/1437","reactions":{"url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/comments/729937335/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"Zha0q1","id":16669457,"node_id":"MDQ6VXNlcjE2NjY5NDU3","avatar_url":"https://avatars.githubusercontent.com/u/16669457?v=4","gravatar_id":"","url":"https://api.github.com/users/Zha0q1","html_url":"https://github.com/Zha0q1","followers_url":"https://api.github.com/users/Zha0q1/followers","following_url":"https://api.github.com/users/Zha0q1/following{/other_user}","gists_url":"https://api.github.com/users/Zha0q1/gists{/gist_id}","starred_url":"https://api.github.com/users/Zha0q1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Zha0q1/subscriptions","organizations_url":"https://api.github.com/users/Zha0q1/orgs","repos_url":"https://api.github.com/users/Zha0q1/repos","events_url":"https://api.github.com/users/Zha0q1/events{/privacy}","received_events_url":"https://api.github.com/users/Zha0q1/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/comments/729938228","html_url":"https://github.com/dmlc/gluon-nlp/issues/1425#issuecomment-729938228","issue_url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/1425","id":729938228,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTkzODIyOA==","user":{"login":"Zha0q1","id":16669457,"node_id":"MDQ6VXNlcjE2NjY5NDU3","avatar_url":"https://avatars.githubusercontent.com/u/16669457?v=4","gravatar_id":"","url":"https://api.github.com/users/Zha0q1","html_url":"https://github.com/Zha0q1","followers_url":"https://api.github.com/users/Zha0q1/followers","following_url":"https://api.github.com/users/Zha0q1/following{/other_user}","gists_url":"https://api.github.com/users/Zha0q1/gists{/gist_id}","starred_url":"https://api.github.com/users/Zha0q1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Zha0q1/subscriptions","organizations_url":"https://api.github.com/users/Zha0q1/orgs","repos_url":"https://api.github.com/users/Zha0q1/repos","events_url":"https://api.github.com/users/Zha0q1/events{/privacy}","received_events_url":"https://api.github.com/users/Zha0q1/received_events","type":"User","site_admin":false},"created_at":"2020-11-18T20:35:10Z","updated_at":"2020-11-18T20:35:10Z","author_association":"NONE","body":"The error I got:\r\n```\r\n==================================================== FAILURES ====================================================\r\n____________________________ test_tvm_integration[ctx0-TN-1-4-google_albert_base_v2] _____________________________\r\nmodel_name = 'google_albert_base_v2', batch_size = 1, seq_length = 4, layout = 'TN', ctx = cpu(0)\r\n    @pytest.mark.serial\r\n    @pytest.mark.seed(123)\r\n    @pytest.mark.parametrize('model_name',\r\n                             ['google_albert_base_v2'])\r\n    @pytest.mark.parametrize('batch_size,seq_length', [(1, 4)])\r\n    @pytest.mark.parametrize('layout', ['TN'])\r\n    # @pytest.mark.skipif(not tvm_enabled(),\r\n    #                    reason='TVM is not supported. So this test is skipped.')\r\n    # @pytest.mark.skip('TVM issue https://github.com/dmlc/gluon-nlp/issues/1425.')\r\n    def test_tvm_integration(model_name, batch_size, seq_length, layout, ctx):\r\n        tvm = try_import_tvm()\r\n        from tvm import relay\r\n        from tvm.contrib import graph_runtime\r\n        tvm_recommended_flags = get_ec2_tvm_flags()\r\n        if ctx.device_type == 'gpu':\r\n            flags = tvm_recommended_flags['g4']\r\n        elif ctx.device_type == 'cpu':\r\n            flags = tvm_recommended_flags['c4']\r\n            if model_name != 'google_albert_base_v2':\r\n                # Skip all other tests\r\n                return\r\n        else:\r\n            raise NotImplementedError\r\n        with tempfile.TemporaryDirectory() as root, ctx:\r\n            model_cls, cfg, tokenizer, backbone_param_path, _ = get_backbone(model_name, root=root)\r\n            cfg.defrost()\r\n            cfg.MODEL.layout = layout\r\n            cfg.freeze()\r\n            model = model_cls.from_cfg(cfg)\r\n            model.load_parameters(backbone_param_path)\r\n            model.hybridize()\r\n            if layout == 'NT':\r\n                token_ids = mx.np.random.randint(0, cfg.MODEL.vocab_size, (batch_size, seq_length),\r\n                                                 dtype=np.int32)\r\n                token_types = mx.np.random.randint(0, 2, (batch_size, seq_length), dtype=np.int32)\r\n                valid_length = mx.np.random.randint(seq_length // 2, seq_length, (batch_size,),\r\n                                                    dtype=np.int32)\r\n            else:\r\n                token_ids = mx.np.random.randint(0, cfg.MODEL.vocab_size, (seq_length, batch_size),\r\n                                                 dtype=np.int32)\r\n                token_types = mx.np.random.randint(0, 2, (seq_length, batch_size), dtype=np.int32)\r\n                valid_length = mx.np.random.randint(seq_length // 2, seq_length, (batch_size,),\r\n                                                    dtype=np.int32)\r\n            if 'bart' in model_name:\r\n                mx_out = model(token_ids, valid_length, token_ids, valid_length)\r\n                shape_dict = {\r\n                    'data0': token_ids.shape,\r\n                    'data1': valid_length.shape,\r\n                    'data2': token_ids.shape,\r\n                    'data3': valid_length.shape,\r\n                }\r\n                dtype_dict = {\r\n                    'data0': token_ids.dtype.name,\r\n                    'data1': valid_length.dtype.name,\r\n                    'data2': token_ids.dtype.name,\r\n                    'data3': valid_length.dtype.name,\r\n                }\r\n            elif 'roberta' in model_name or 'xlmr' in model_name:\r\n                mx_out = model(token_ids, valid_length)\r\n                shape_dict = {\r\n                    'data0': token_ids.shape,\r\n                    'data1': valid_length.shape,\r\n                }\r\n                dtype_dict = {\r\n                    'data0': token_ids.dtype.name,\r\n                    'data1': valid_length.dtype.name,\r\n                }\r\n            else:\r\n                mx_out = model(token_ids, token_types, valid_length)\r\n                shape_dict = {\r\n                    'data0': token_ids.shape,\r\n                    'data1': token_types.shape,\r\n                    'data2': valid_length.shape\r\n                }\r\n                dtype_dict = {\r\n                    'data0': token_ids.dtype.name,\r\n                    'data1': token_types.dtype.name,\r\n                    'data2': valid_length.dtype.name\r\n                }\r\n            sym = model._cached_graph[1]\r\n            params = {}\r\n            for k, v in model.collect_params().items():\r\n                params[v._var_name] = tvm.nd.array(v.data().asnumpy())\r\n>           mod, params = relay.frontend.from_mxnet(sym, shape=shape_dict, dtype=dtype_dict, arg_params=params)\r\ntests/test_models.py:143: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n../tvm/python/tvm/relay/frontend/mxnet.py:2869: in from_mxnet\r\n    func = _from_mxnet_impl(symbol, shape, dtype, params, mod)\r\n../tvm/python/tvm/relay/frontend/mxnet.py:2792: in _from_mxnet_impl\r\n    res = _convert_map[op_name](*op_params)\r\n../tvm/python/tvm/relay/frontend/mxnet.py:793: in _mx_batch_dot\r\n    a_shape = _infer_type(a).checked_type.shape\r\n../tvm/python/tvm/relay/frontend/common.py:482: in infer_type\r\n    new_mod = _transform.InferType()(new_mod)\r\n../tvm/python/tvm/ir/transform.py:127: in __call__\r\n    return _ffi_transform_api.RunPass(self, mod)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\nself = <tvm.runtime.packed_func.PackedFunc object at 0x7fc8404d4be0>\r\nargs = (Run Module pass: InferType at the optimization level 0, #[version = \"0.0.5\"]\r\ndef @main(%data2: Tensor[(1), int32], %v...=\", \r\n    \"P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAAAAAAAgAQAEAAAAAAAAAAEAAAA=\"\r\n  ], \r\n  \"attrs\": {\"tvm_version\": \"0.8.dev0\"}\r\n})\r\ntemp_args = [], values = <tvm._ffi._ctypes.packed_func.TVMValue_Array_2 object at 0x7fc834ee1680>\r\ntcodes = <mxnet._ffi._ctypes.function.c_int_Array_2 object at 0x7fc834ee1830>\r\n    def __call__(self, *args):\r\n        \"\"\"Call the function with positional arguments\r\n        args : list\r\n           The positional arguments to the function call.\r\n        \"\"\"\r\n        temp_args = []\r\n        values, tcodes, num_args = _make_tvm_args(args, temp_args)\r\n        ret_val = TVMValue()\r\n        ret_tcode = ctypes.c_int()\r\n        if (\r\n            _LIB.TVMFuncCall(\r\n                self.handle,\r\n                values,\r\n                tcodes,\r\n                ctypes.c_int(num_args),\r\n                ctypes.byref(ret_val),\r\n                ctypes.byref(ret_tcode),\r\n            )\r\n            != 0\r\n        ):\r\n>           raise get_last_ffi_error()\r\nE           tvm._ffi.base.TVMError: Traceback (most recent call last):\r\nE             [bt] (7) /home/ubuntu/tvm/build/libtvm.so(TVMFuncCall+0x65) [0x7fc842ca3595]\r\nE             [bt] (6) /home/ubuntu/tvm/build/libtvm.so(+0x7007c2) [0x7fc84225f7c2]\r\nE             [bt] (5) /home/ubuntu/tvm/build/libtvm.so(tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const+0x1b7) [0x7fc84225f077]\r\nE             [bt] (4) /home/ubuntu/tvm/build/libtvm.so(+0xfcee2f) [0x7fc842b2de2f]\r\nE             [bt] (3) /home/ubuntu/tvm/build/libtvm.so(+0xfce085) [0x7fc842b2d085]\r\nE             [bt] (2) /home/ubuntu/tvm/build/libtvm.so(tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)+0x67) [0x7fc842b2c637]\r\nE             [bt] (1) /home/ubuntu/tvm/build/libtvm.so(tvm::relay::TypeSolver::Solve()+0xd39) [0x7fc8429b3269]\r\nE             [bt] (0) /home/ubuntu/tvm/build/libtvm.so(+0xe50402) [0x7fc8429af402]\r\nE             [bt] (8) /home/ubuntu/tvm/build/libtvm.so(+0x7007c2) [0x7fc84225f7c2]\r\nE             [bt] (7) /home/ubuntu/tvm/build/libtvm.so(tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const+0x1b7) [0x7fc84225f077]\r\nE             [bt] (6) /home/ubuntu/tvm/build/libtvm.so(+0xfcee2f) [0x7fc842b2de2f]\r\nE             [bt] (5) /home/ubuntu/tvm/build/libtvm.so(+0xfce085) [0x7fc842b2d085]\r\nE             [bt] (4) /home/ubuntu/tvm/build/libtvm.so(tvm::relay::TypeInferencer::Infer(tvm::GlobalVar, tvm::relay::Function)+0x67) [0x7fc842b2c637]\r\nE             [bt] (3) /home/ubuntu/tvm/build/libtvm.so(tvm::relay::TypeSolver::Solve()+0x36d) [0x7fc8429b289d]\r\nE             [bt] (2) /home/ubuntu/tvm/build/libtvm.so(std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<bool (tvm::runtime::Array<tvm::Type, void> const&, int, tvm::Attrs const&, tvm::TypeReporter const&)>::AssignTypedLambda<bool (*)(tvm::runtime::Array<tvm::Type, void> const&, int, tvm::Attrs const&, tvm::TypeReporter const&)>(bool (*)(tvm::runtime::Array<tvm::Type, void> const&, int, tvm::Attrs const&, tvm::TypeReporter const&))::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)+0x7d7) [0x7fc8422b5f97]\r\nE             [bt] (1) /home/ubuntu/tvm/build/libtvm.so(tvm::relay::BroadcastRel(tvm::runtime::Array<tvm::Type, void> const&, int, tvm::Attrs const&, tvm::TypeReporter const&)+0x404) [0x7fc842937014]\r\nE             [bt] (0) /home/ubuntu/tvm/build/libtvm.so(dmlc::LogMessageFatal::~LogMessageFatal()+0x82) [0x7fc84211beb2]\r\nE             File \"/home/ubuntu/tvm/src/relay/analysis/type_solver.cc\", line 621\r\nE           TVMError: \r\nE           ---------------------------------------------------------------\r\nE           An internal invariant was violated during the execution of TVM.\r\nE           Please read TVM's error reporting guidelines.\r\nE           More details can be found here: https://discuss.tvm.ai/t/error-reporting/7793.\r\nE           ---------------------------------------------------------------\r\nE             Check failed: false == false: [20:17:50] /home/ubuntu/tvm/src/relay/op/type_relations.cc:107: \r\nE           ---------------------------------------------------------------\r\nE           An internal invariant was violated during the execution of TVM.\r\nE           Please read TVM's error reporting guidelines.\r\nE           More details can be found here: https://discuss.tvm.ai/t/error-reporting/7793.\r\nE           ---------------------------------------------------------------\r\nE           \r\nE             Check failed: t0->dtype == t1->dtype (float32 vs. int32) :\r\n../tvm/python/tvm/_ffi/_ctypes/packed_func.py:237: TVMError\r\n---------------------------------------------- Captured stdout call ----------------------------------------------\r\nDownloading /tmp/tmpgmgdq8n2/google_albert_base_v2/spm-65999e5d.model from https://gluonnlp-numpy-data.s3-accelerate.amazonaws.com/models/google_albert_base_v2/spm-65999e5d.model...\r\nDownloading /tmp/tmpgmgdq8n2/google_albert_base_v2/vocab-2ee53ae7.json from https://gluonnlp-numpy-data.s3-accelerate.amazonaws.com/models/google_albert_base_v2/vocab-2ee53ae7.json...\r\nDownloading /tmp/tmpgmgdq8n2/google_albert_base_v2/model-125be477.params from https://gluonnlp-numpy-data.s3-accelerate.amazonaws.com/models/google_albert_base_v2/model-125be477.params...\r\n---------------------------------------------- Captured stderr call ----------------------------------------------\r\n100%|██████████| 760k/760k [00:00<00:00, 8.96MiB/s]\r\n100%|██████████| 373k/373k [00:00<00:00, 9.29MiB/s]\r\n100%|██████████| 46.7M/46.7M [00:01<00:00, 46.6MiB/s]\r\n[20:17:50] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU\r\n============================================ short test summary info =============================================\r\nFAILED tests/test_models.py::test_tvm_integration[ctx0-TN-1-4-google_albert_base_v2] - tvm._ffi.base.TVMError: ...\r\n=============================================== 1 failed in 2.99s ================================================\r\n```","reactions":{"url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/comments/729938228/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"Zha0q1","id":16669457,"node_id":"MDQ6VXNlcjE2NjY5NDU3","avatar_url":"https://avatars.githubusercontent.com/u/16669457?v=4","gravatar_id":"","url":"https://api.github.com/users/Zha0q1","html_url":"https://github.com/Zha0q1","followers_url":"https://api.github.com/users/Zha0q1/followers","following_url":"https://api.github.com/users/Zha0q1/following{/other_user}","gists_url":"https://api.github.com/users/Zha0q1/gists{/gist_id}","starred_url":"https://api.github.com/users/Zha0q1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Zha0q1/subscriptions","organizations_url":"https://api.github.com/users/Zha0q1/orgs","repos_url":"https://api.github.com/users/Zha0q1/repos","events_url":"https://api.github.com/users/Zha0q1/events{/privacy}","received_events_url":"https://api.github.com/users/Zha0q1/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/comments/729939446","html_url":"https://github.com/dmlc/gluon-nlp/issues/1425#issuecomment-729939446","issue_url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/1425","id":729939446,"node_id":"MDEyOklzc3VlQ29tbWVudDcyOTkzOTQ0Ng==","user":{"login":"sxjscience","id":5178350,"node_id":"MDQ6VXNlcjUxNzgzNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5178350?v=4","gravatar_id":"","url":"https://api.github.com/users/sxjscience","html_url":"https://github.com/sxjscience","followers_url":"https://api.github.com/users/sxjscience/followers","following_url":"https://api.github.com/users/sxjscience/following{/other_user}","gists_url":"https://api.github.com/users/sxjscience/gists{/gist_id}","starred_url":"https://api.github.com/users/sxjscience/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sxjscience/subscriptions","organizations_url":"https://api.github.com/users/sxjscience/orgs","repos_url":"https://api.github.com/users/sxjscience/repos","events_url":"https://api.github.com/users/sxjscience/events{/privacy}","received_events_url":"https://api.github.com/users/sxjscience/received_events","type":"User","site_admin":false},"created_at":"2020-11-18T20:37:43Z","updated_at":"2020-11-18T20:37:43Z","author_association":"MEMBER","body":"For me, I think one potential cause is that the TVM does not allow mixed data types in the where operartor, e.g., https://github.com/apache/incubator-tvm/blob/7649075fbb71ecab0a41c6fe4d41a86724e42e7a/python/tvm/relay/frontend/mxnet.py#L2419-L2434. Thus, we may print the dtypes of the `cond`, `lhs` and `rhs` to see if it's the root cause.","reactions":{"url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/comments/729939446/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"sxjscience","id":5178350,"node_id":"MDQ6VXNlcjUxNzgzNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5178350?v=4","gravatar_id":"","url":"https://api.github.com/users/sxjscience","html_url":"https://github.com/sxjscience","followers_url":"https://api.github.com/users/sxjscience/followers","following_url":"https://api.github.com/users/sxjscience/following{/other_user}","gists_url":"https://api.github.com/users/sxjscience/gists{/gist_id}","starred_url":"https://api.github.com/users/sxjscience/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sxjscience/subscriptions","organizations_url":"https://api.github.com/users/sxjscience/orgs","repos_url":"https://api.github.com/users/sxjscience/repos","events_url":"https://api.github.com/users/sxjscience/events{/privacy}","received_events_url":"https://api.github.com/users/sxjscience/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/comments/730004781","html_url":"https://github.com/dmlc/gluon-nlp/issues/1425#issuecomment-730004781","issue_url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/1425","id":730004781,"node_id":"MDEyOklzc3VlQ29tbWVudDczMDAwNDc4MQ==","user":{"login":"Zha0q1","id":16669457,"node_id":"MDQ6VXNlcjE2NjY5NDU3","avatar_url":"https://avatars.githubusercontent.com/u/16669457?v=4","gravatar_id":"","url":"https://api.github.com/users/Zha0q1","html_url":"https://github.com/Zha0q1","followers_url":"https://api.github.com/users/Zha0q1/followers","following_url":"https://api.github.com/users/Zha0q1/following{/other_user}","gists_url":"https://api.github.com/users/Zha0q1/gists{/gist_id}","starred_url":"https://api.github.com/users/Zha0q1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Zha0q1/subscriptions","organizations_url":"https://api.github.com/users/Zha0q1/orgs","repos_url":"https://api.github.com/users/Zha0q1/repos","events_url":"https://api.github.com/users/Zha0q1/events{/privacy}","received_events_url":"https://api.github.com/users/Zha0q1/received_events","type":"User","site_admin":false},"created_at":"2020-11-18T22:44:57Z","updated_at":"2020-11-18T22:44:57Z","author_association":"NONE","body":"#1437 passed CPU CI but on GPU the remaining three models still all failed\r\n\r\n'google_en_cased_bert_base',\r\n'google_electra_small',\r\n'fairseq_bart_base'","reactions":{"url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/comments/730004781/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"Zha0q1","id":16669457,"node_id":"MDQ6VXNlcjE2NjY5NDU3","avatar_url":"https://avatars.githubusercontent.com/u/16669457?v=4","gravatar_id":"","url":"https://api.github.com/users/Zha0q1","html_url":"https://github.com/Zha0q1","followers_url":"https://api.github.com/users/Zha0q1/followers","following_url":"https://api.github.com/users/Zha0q1/following{/other_user}","gists_url":"https://api.github.com/users/Zha0q1/gists{/gist_id}","starred_url":"https://api.github.com/users/Zha0q1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Zha0q1/subscriptions","organizations_url":"https://api.github.com/users/Zha0q1/orgs","repos_url":"https://api.github.com/users/Zha0q1/repos","events_url":"https://api.github.com/users/Zha0q1/events{/privacy}","received_events_url":"https://api.github.com/users/Zha0q1/received_events","type":"User","site_admin":false}},{"id":4267217025,"node_id":"MDExOkNsb3NlZEV2ZW50NDI2NzIxNzAyNQ==","url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/events/4267217025","actor":{"login":"sxjscience","id":5178350,"node_id":"MDQ6VXNlcjUxNzgzNTA=","avatar_url":"https://avatars.githubusercontent.com/u/5178350?v=4","gravatar_id":"","url":"https://api.github.com/users/sxjscience","html_url":"https://github.com/sxjscience","followers_url":"https://api.github.com/users/sxjscience/followers","following_url":"https://api.github.com/users/sxjscience/following{/other_user}","gists_url":"https://api.github.com/users/sxjscience/gists{/gist_id}","starred_url":"https://api.github.com/users/sxjscience/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sxjscience/subscriptions","organizations_url":"https://api.github.com/users/sxjscience/orgs","repos_url":"https://api.github.com/users/sxjscience/repos","events_url":"https://api.github.com/users/sxjscience/events{/privacy}","received_events_url":"https://api.github.com/users/sxjscience/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2021-01-29T17:21:14Z","state_reason":null,"performed_via_github_app":null}]