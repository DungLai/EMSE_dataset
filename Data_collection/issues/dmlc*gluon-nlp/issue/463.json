{"url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/463","repository_url":"https://api.github.com/repos/dmlc/gluon-nlp","labels_url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/463/labels{/name}","comments_url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/463/comments","events_url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/463/events","html_url":"https://github.com/dmlc/gluon-nlp/issues/463","id":390072723,"node_id":"MDU6SXNzdWUzOTAwNzI3MjM=","number":463,"title":"Flaky test_weight_drop","user":{"login":"leezu","id":946903,"node_id":"MDQ6VXNlcjk0NjkwMw==","avatar_url":"https://avatars.githubusercontent.com/u/946903?v=4","gravatar_id":"","url":"https://api.github.com/users/leezu","html_url":"https://github.com/leezu","followers_url":"https://api.github.com/users/leezu/followers","following_url":"https://api.github.com/users/leezu/following{/other_user}","gists_url":"https://api.github.com/users/leezu/gists{/gist_id}","starred_url":"https://api.github.com/users/leezu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/leezu/subscriptions","organizations_url":"https://api.github.com/users/leezu/orgs","repos_url":"https://api.github.com/users/leezu/repos","events_url":"https://api.github.com/users/leezu/events{/privacy}","received_events_url":"https://api.github.com/users/leezu/received_events","type":"User","site_admin":false},"labels":[{"id":890393501,"node_id":"MDU6TGFiZWw4OTAzOTM1MDE=","url":"https://api.github.com/repos/dmlc/gluon-nlp/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"}],"state":"closed","locked":false,"assignee":{"login":"szha","id":2626883,"node_id":"MDQ6VXNlcjI2MjY4ODM=","avatar_url":"https://avatars.githubusercontent.com/u/2626883?v=4","gravatar_id":"","url":"https://api.github.com/users/szha","html_url":"https://github.com/szha","followers_url":"https://api.github.com/users/szha/followers","following_url":"https://api.github.com/users/szha/following{/other_user}","gists_url":"https://api.github.com/users/szha/gists{/gist_id}","starred_url":"https://api.github.com/users/szha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/szha/subscriptions","organizations_url":"https://api.github.com/users/szha/orgs","repos_url":"https://api.github.com/users/szha/repos","events_url":"https://api.github.com/users/szha/events{/privacy}","received_events_url":"https://api.github.com/users/szha/received_events","type":"User","site_admin":false},"assignees":[{"login":"szha","id":2626883,"node_id":"MDQ6VXNlcjI2MjY4ODM=","avatar_url":"https://avatars.githubusercontent.com/u/2626883?v=4","gravatar_id":"","url":"https://api.github.com/users/szha","html_url":"https://github.com/szha","followers_url":"https://api.github.com/users/szha/followers","following_url":"https://api.github.com/users/szha/following{/other_user}","gists_url":"https://api.github.com/users/szha/gists{/gist_id}","starred_url":"https://api.github.com/users/szha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/szha/subscriptions","organizations_url":"https://api.github.com/users/szha/orgs","repos_url":"https://api.github.com/users/szha/repos","events_url":"https://api.github.com/users/szha/events{/privacy}","received_events_url":"https://api.github.com/users/szha/received_events","type":"User","site_admin":false}],"milestone":null,"comments":1,"created_at":"2018-12-12T05:39:47Z","updated_at":"2019-01-12T03:37:41Z","closed_at":"2019-01-12T03:37:41Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"```\r\n=================================== FAILURES ===================================\r\n_______________________________ test_weight_drop _______________________________\r\n[gw2] linux -- Python 3.6.7 /var/lib/jenkins/workspace/gluon-nlp-py3/conda/py3/bin/python\r\n\r\n    def test_weight_drop():\r\n        class RefBiLSTM(gluon.Block):\r\n            def __init__(self, size, **kwargs):\r\n                super(RefBiLSTM, self).__init__(**kwargs)\r\n                with self.name_scope():\r\n                    self._lstm_fwd = gluon.rnn.LSTM(size, bidirectional=False, prefix='l0')\r\n                    self._lstm_bwd = gluon.rnn.LSTM(size, bidirectional=False, prefix='r0')\r\n    \r\n            def forward(self, inpt):\r\n                fwd = self._lstm_fwd(inpt)\r\n                bwd_inpt = mx.nd.flip(inpt, 0)\r\n                bwd = self._lstm_bwd(bwd_inpt)\r\n                bwd = mx.nd.flip(bwd, 0)\r\n                return mx.nd.concat(fwd, bwd, dim=2)\r\n        net1 = RefBiLSTM(10)\r\n        shared_net1 = RefBiLSTM(10, params=net1.collect_params())\r\n    \r\n        net2 = gluon.rnn.LSTM(10)\r\n        shared_net2 = gluon.rnn.LSTM(10, params=net2.collect_params())\r\n    \r\n        net3 = gluon.nn.HybridSequential()\r\n        net3.add(gluon.rnn.LSTM(10))\r\n        shared_net3 = gluon.nn.HybridSequential(params=net3.collect_params())\r\n        shared_net3.add(gluon.rnn.LSTM(10, params=net3[0].collect_params()))\r\n    \r\n        x = mx.nd.ones((3, 4, 5))\r\n        nets = [(net1, shared_net1),\r\n                (net2, shared_net2),\r\n                (net3, shared_net3)]\r\n        for net, shared_net in nets:\r\n            net.initialize('ones')\r\n            mx.test_utils.assert_almost_equal(net(x).asnumpy(),\r\n                                              shared_net(x).asnumpy())\r\n            with mx.autograd.train_mode():\r\n                mx.test_utils.assert_almost_equal(net(x).asnumpy(),\r\n                                                  shared_net(x).asnumpy())\r\n    \r\n            grads = {}\r\n            with mx.autograd.record():\r\n                y = net(x)\r\n            y.backward()\r\n            for name, param in net.collect_params().items():\r\n                grads[name] = param.grad().copy()\r\n            with mx.autograd.record():\r\n                y = shared_net(x)\r\n            y.backward()\r\n            for name, param in shared_net.collect_params().items():\r\n                mx.test_utils.assert_almost_equal(grads[name].asnumpy(), param.grad().asnumpy())\r\n    \r\n            drop_rate = 0.5\r\n            nlp.model.utils.apply_weight_drop(net, '.*h2h_weight', drop_rate)\r\n            net.initialize('ones')\r\n    \r\n            mx.test_utils.assert_almost_equal(net(x).asnumpy(),\r\n                                              shared_net(x).asnumpy())\r\n            with mx.autograd.train_mode():\r\n>               assert not mx.test_utils.almost_equal(net(x).asnumpy(),\r\n                                                      shared_net(x).asnumpy())\r\nE               AssertionError: assert not True\r\nE                +  where True = <function almost_equal at 0x7ff5eb456268>(array([[[0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 ,\\n         0.7536527 , 0.7536527 , 0.7536527 , 0.75...3, 0.99498713, 0.9949861 ,\\n         0.9949871 , 0.9949858 , 0.99498725, 0.9949858 , 0.9949871 ]]],\\n      dtype=float32), array([[[0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 ,\\n         0.7536527 , 0.7536527 , 0.7536527 , 0.75... , 0.9949869 , 0.9949869 ,\\n         0.9949869 , 0.9949869 , 0.9949869 , 0.9949869 , 0.9949869 ]]],\\n      dtype=float32))\r\nE                +    where <function almost_equal at 0x7ff5eb456268> = <module 'mxnet.test_utils' from '/var/lib/jenkins/workspace/gluon-nlp-py3/conda/py3/lib/python3.6/site-packages/mxnet/test_utils.py'>.almost_equal\r\nE                +      where <module 'mxnet.test_utils' from '/var/lib/jenkins/workspace/gluon-nlp-py3/conda/py3/lib/python3.6/site-packages/mxnet/test_utils.py'> = mx.test_utils\r\nE                +    and   array([[[0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 ,\\n         0.7536527 , 0.7536527 , 0.7536527 , 0.75...3, 0.99498713, 0.9949861 ,\\n         0.9949871 , 0.9949858 , 0.99498725, 0.9949858 , 0.9949871 ]]],\\n      dtype=float32) = <bound method NDArray.asnumpy of \\n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\\n   0.7536527  0.... 0.99498713 0.99498713 0.9949861  0.9949871\\n   0.9949858  0.99498725 0.9949858  0.9949871 ]]]\\n<NDArray 3x4x10 @cpu(0)>>()\r\nE                +      where <bound method NDArray.asnumpy of \\n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\\n   0.7536527  0.... 0.99498713 0.99498713 0.9949861  0.9949871\\n   0.9949858  0.99498725 0.9949858  0.9949871 ]]]\\n<NDArray 3x4x10 @cpu(0)>> = \\n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\\n   0.7536527  0.7536527  0.7536527  0.7536527 ]\\n ...  0.99498713 0.99498713 0.9949861  0.9949871\\n   0.9949858  0.99498725 0.9949858  0.9949871 ]]]\\n<NDArray 3x4x10 @cpu(0)>.asnumpy\r\nE                +        where \\n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\\n   0.7536527  0.7536527  0.7536527  0.7536527 ]\\n ...  0.99498713 0.99498713 0.9949861  0.9949871\\n   0.9949858  0.99498725 0.9949858  0.9949871 ]]]\\n<NDArray 3x4x10 @cpu(0)> = HybridSequential(\\n  (0): LSTM(5 -> 10, TNC)\\n)(\\n[[[1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]]\\n\\n [[1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]\\n ...1. 1. 1. 1. 1.]]\\n\\n [[1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]]]\\n<NDArray 3x4x5 @cpu(0)>)\r\nE                +    and   array([[[0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 ,\\n         0.7536527 , 0.7536527 , 0.7536527 , 0.75... , 0.9949869 , 0.9949869 ,\\n         0.9949869 , 0.9949869 , 0.9949869 , 0.9949869 , 0.9949869 ]]],\\n      dtype=float32) = <bound method NDArray.asnumpy of \\n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\\n   0.7536527  0.... 0.9949869  0.9949869  0.9949869  0.9949869\\n   0.9949869  0.9949869  0.9949869  0.9949869 ]]]\\n<NDArray 3x4x10 @cpu(0)>>()\r\nE                +      where <bound method NDArray.asnumpy of \\n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\\n   0.7536527  0.... 0.9949869  0.9949869  0.9949869  0.9949869\\n   0.9949869  0.9949869  0.9949869  0.9949869 ]]]\\n<NDArray 3x4x10 @cpu(0)>> = \\n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\\n   0.7536527  0.7536527  0.7536527  0.7536527 ]\\n ...  0.9949869  0.9949869  0.9949869  0.9949869\\n   0.9949869  0.9949869  0.9949869  0.9949869 ]]]\\n<NDArray 3x4x10 @cpu(0)>.asnumpy\r\nE                +        where \\n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\\n   0.7536527  0.7536527  0.7536527  0.7536527 ]\\n ...  0.9949869  0.9949869  0.9949869  0.9949869\\n   0.9949869  0.9949869  0.9949869  0.9949869 ]]]\\n<NDArray 3x4x10 @cpu(0)> = HybridSequential(\\n  (0): LSTM(5 -> 10, TNC)\\n)(\\n[[[1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]]\\n\\n [[1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]\\n ...1. 1. 1. 1. 1.]]\\n\\n [[1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]\\n  [1. 1. 1. 1. 1.]]]\\n<NDArray 3x4x5 @cpu(0)>)\r\n\r\ntests/unittest/test_models.py:408: AssertionError\r\n```\r\n\r\nhttp://ci.mxnet.io/blue/rest/organizations/jenkins/pipelines/gluon-nlp/branches/PR-462/runs/3/nodes/23/steps/46/log/?start=0","closed_by":{"login":"szha","id":2626883,"node_id":"MDQ6VXNlcjI2MjY4ODM=","avatar_url":"https://avatars.githubusercontent.com/u/2626883?v=4","gravatar_id":"","url":"https://api.github.com/users/szha","html_url":"https://github.com/szha","followers_url":"https://api.github.com/users/szha/followers","following_url":"https://api.github.com/users/szha/following{/other_user}","gists_url":"https://api.github.com/users/szha/gists{/gist_id}","starred_url":"https://api.github.com/users/szha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/szha/subscriptions","organizations_url":"https://api.github.com/users/szha/orgs","repos_url":"https://api.github.com/users/szha/repos","events_url":"https://api.github.com/users/szha/events{/privacy}","received_events_url":"https://api.github.com/users/szha/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/463/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/dmlc/gluon-nlp/issues/463/timeline","performed_via_github_app":null,"state_reason":"completed"}