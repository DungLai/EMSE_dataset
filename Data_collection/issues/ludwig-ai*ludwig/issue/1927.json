{"url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1927","repository_url":"https://api.github.com/repos/ludwig-ai/ludwig","labels_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1927/labels{/name}","comments_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1927/comments","events_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1927/events","html_url":"https://github.com/ludwig-ai/ludwig/issues/1927","id":1203894808,"node_id":"I_kwDOCbx2hs5HwfoY","number":1927,"title":"Modularize monolithic Ludwig workflows","user":{"login":"dantreiman","id":687280,"node_id":"MDQ6VXNlcjY4NzI4MA==","avatar_url":"https://avatars.githubusercontent.com/u/687280?v=4","gravatar_id":"","url":"https://api.github.com/users/dantreiman","html_url":"https://github.com/dantreiman","followers_url":"https://api.github.com/users/dantreiman/followers","following_url":"https://api.github.com/users/dantreiman/following{/other_user}","gists_url":"https://api.github.com/users/dantreiman/gists{/gist_id}","starred_url":"https://api.github.com/users/dantreiman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dantreiman/subscriptions","organizations_url":"https://api.github.com/users/dantreiman/orgs","repos_url":"https://api.github.com/users/dantreiman/repos","events_url":"https://api.github.com/users/dantreiman/events{/privacy}","received_events_url":"https://api.github.com/users/dantreiman/received_events","type":"User","site_admin":false},"labels":[{"id":4032822844,"node_id":"LA_kwDOCbx2hs7wX_48","url":"https://api.github.com/repos/ludwig-ai/ludwig/labels/productivity%20and%20code%20quality","name":"productivity and code quality","color":"bfd4f2","default":false,"description":"Engineer productivity, maintainability, consistency, readability"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-04-13T23:59:52Z","updated_at":"2022-04-14T00:03:06Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"Model training in Ludwig is controlled by a long monolithic `train` method which has many nested conditions (inside api.train and trainer.train).\r\n\r\nThis makes the flow to understand, difficult to add new stages (i.e contrastive pretraining, post-training calibration), and fragile sinc subtasks must be ordered correctly in code.\r\n\r\nOne idea to improve this is to encapsulate each separable phase of the workflow, untangle the coupling between them and make each phase able to independently serialize its state to disk or resume itself if interrupted.  This also has the side benefit of making each phase easier to test in isolation.\r\n\r\nNext, each workflow (train, experiment, evaluate, etc...) is a dispatch method that declares the phases the be executed and their dependencies.  This will often be linear, as in:\r\n```\r\npreprocess -> tune batch size -> tune LR -> train -> evaluate -> post-process\r\n```\r\nbut may also represent a more complex 'state machine' for future autoML or transfer learning tasks.\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1927/timeline","performed_via_github_app":null,"state_reason":null}