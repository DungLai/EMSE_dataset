{"url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1044","repository_url":"https://api.github.com/repos/ludwig-ai/ludwig","labels_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1044/labels{/name}","comments_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1044/comments","events_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1044/events","html_url":"https://github.com/ludwig-ai/ludwig/issues/1044","id":757899054,"node_id":"MDU6SXNzdWU3NTc4OTkwNTQ=","number":1044,"title":"decay_rate behaves differently based on batch_size","user":{"login":"carlogrisetti","id":4464640,"node_id":"MDQ6VXNlcjQ0NjQ2NDA=","avatar_url":"https://avatars.githubusercontent.com/u/4464640?v=4","gravatar_id":"","url":"https://api.github.com/users/carlogrisetti","html_url":"https://github.com/carlogrisetti","followers_url":"https://api.github.com/users/carlogrisetti/followers","following_url":"https://api.github.com/users/carlogrisetti/following{/other_user}","gists_url":"https://api.github.com/users/carlogrisetti/gists{/gist_id}","starred_url":"https://api.github.com/users/carlogrisetti/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/carlogrisetti/subscriptions","organizations_url":"https://api.github.com/users/carlogrisetti/orgs","repos_url":"https://api.github.com/users/carlogrisetti/repos","events_url":"https://api.github.com/users/carlogrisetti/events{/privacy}","received_events_url":"https://api.github.com/users/carlogrisetti/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-12-06T10:59:34Z","updated_at":"2020-12-06T11:06:26Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Seems to me, purely based on an empyrical observation (I did not check within the code), that `decay` (and more specifically `decay_rate`) is computer at a per-step (or per-batch) time, and not over the epoch.\r\n\r\nI don't know if this is the intended behavior (decreasing the learning rate within the same epoch, having the first steps\\batches using a higher learning rate than the last ones), but it could be, since it's the same logic that governs the `learning_rate_warmup_epochs` but even if this is by-design there is a tricky thing that happens:\r\n\r\nIf I have a smaller `batch_size` (thus a higher number of batches\\steps in an epoch, hence more learning rate decay applied) I will get a higher rate of decay as opposed to the same training using a larger `batch_size` (thus a lower number of batches\\steps in an epoch, hence less learning rate decay applied).\r\n\r\nDoes anything above make sense to you?\r\nIf so, this could be fixed in 2 ways:\r\n1) compute the `decay_rate` effect at the epoch level, making it batch size independent\r\n2) compute the `decay_rate` effect at the batch\\step level (as it is now), but making its effect proportional to the number of steps in an epoch (the same thing that happens in the `learning_rate_warmup_epochs`)\r\n\r\nOne more thing: I think that the `decay` behavior should come into effect after the `learning_rate_warmup` has completed stepping up, otherwise we get a \"curved\" ramp up to the initial `learning_rate` value (that never gets achieved, since it's already decaying the value from the start).","closed_by":null,"reactions":{"url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1044/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1044/timeline","performed_via_github_app":null,"state_reason":null}