{"url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1922","repository_url":"https://api.github.com/repos/ludwig-ai/ludwig","labels_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1922/labels{/name}","comments_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1922/comments","events_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1922/events","html_url":"https://github.com/ludwig-ai/ludwig/issues/1922","id":1203870086,"node_id":"I_kwDOCbx2hs5HwZmG","number":1922,"title":"Decide on common docstring style","user":{"login":"dantreiman","id":687280,"node_id":"MDQ6VXNlcjY4NzI4MA==","avatar_url":"https://avatars.githubusercontent.com/u/687280?v=4","gravatar_id":"","url":"https://api.github.com/users/dantreiman","html_url":"https://github.com/dantreiman","followers_url":"https://api.github.com/users/dantreiman/followers","following_url":"https://api.github.com/users/dantreiman/following{/other_user}","gists_url":"https://api.github.com/users/dantreiman/gists{/gist_id}","starred_url":"https://api.github.com/users/dantreiman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dantreiman/subscriptions","organizations_url":"https://api.github.com/users/dantreiman/orgs","repos_url":"https://api.github.com/users/dantreiman/repos","events_url":"https://api.github.com/users/dantreiman/events{/privacy}","received_events_url":"https://api.github.com/users/dantreiman/received_events","type":"User","site_admin":false},"labels":[{"id":4032822844,"node_id":"LA_kwDOCbx2hs7wX_48","url":"https://api.github.com/repos/ludwig-ai/ludwig/labels/productivity%20and%20code%20quality","name":"productivity and code quality","color":"bfd4f2","default":false,"description":"Engineer productivity, maintainability, consistency, readability"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-04-13T23:08:25Z","updated_at":"2022-04-13T23:08:25Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"There are a few different docstring styles used in Ludwig.  Lets choose a single docstring style and update all doc strings to use it.\r\n\r\nI'm a fan of using the Google Python Style Guide as a starting point:\r\nhttps://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings\r\n\r\nI like that it is easy to read in-code, and light on formatting and use of punctuation characters.\r\n\r\nExample:\r\n```python\r\ndef fetch_smalltable_rows(table_handle: smalltable.Table,\r\n                          keys: Sequence[Union[bytes, str]],\r\n                          require_all_keys: bool = False,\r\n) -> Mapping[bytes, tuple[str, ...]]:\r\n    \"\"\"Fetches rows from a Smalltable.\r\n\r\n    Retrieves rows pertaining to the given keys from the Table instance\r\n    represented by table_handle.  String keys will be UTF-8 encoded.\r\n\r\n    Args:\r\n        table_handle: An open smalltable.Table instance.\r\n        keys: A sequence of strings representing the key of each table\r\n          row to fetch.  String keys will be UTF-8 encoded.\r\n        require_all_keys: If True only rows with values set for all keys will be\r\n          returned.\r\n\r\n    Returns:\r\n        A dict mapping keys to the corresponding table row data\r\n        fetched. Each row is represented as a tuple of strings. For\r\n        example:\r\n\r\n        {b'Serak': ('Rigel VII', 'Preparer'),\r\n         b'Zim': ('Irk', 'Invader'),\r\n         b'Lrrr': ('Omicron Persei 8', 'Emperor')}\r\n\r\n        Returned keys are always bytes.  If a key from the keys argument is\r\n        missing from the dictionary, then that row was not found in the\r\n        table (and require_all_keys must have been False).\r\n\r\n    Raises:\r\n        IOError: An error occurred accessing the smalltable.\r\n    \"\"\"\r\n    ...\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1922/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1922/timeline","performed_via_github_app":null,"state_reason":null}