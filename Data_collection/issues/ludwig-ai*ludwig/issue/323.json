{"url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/323","repository_url":"https://api.github.com/repos/ludwig-ai/ludwig","labels_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/323/labels{/name}","comments_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/323/comments","events_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/323/events","html_url":"https://github.com/ludwig-ai/ludwig/issues/323","id":440115612,"node_id":"MDU6SXNzdWU0NDAxMTU2MTI=","number":323,"title":"Binary input/output not properly processed","user":{"login":"Guufii","id":49252109,"node_id":"MDQ6VXNlcjQ5MjUyMTA5","avatar_url":"https://avatars.githubusercontent.com/u/49252109?v=4","gravatar_id":"","url":"https://api.github.com/users/Guufii","html_url":"https://github.com/Guufii","followers_url":"https://api.github.com/users/Guufii/followers","following_url":"https://api.github.com/users/Guufii/following{/other_user}","gists_url":"https://api.github.com/users/Guufii/gists{/gist_id}","starred_url":"https://api.github.com/users/Guufii/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Guufii/subscriptions","organizations_url":"https://api.github.com/users/Guufii/orgs","repos_url":"https://api.github.com/users/Guufii/repos","events_url":"https://api.github.com/users/Guufii/events{/privacy}","received_events_url":"https://api.github.com/users/Guufii/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2019-05-03T16:07:00Z","updated_at":"2019-05-29T00:52:50Z","closed_at":"2019-05-04T21:00:39Z","author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\nwhen I specify a binary input/output and inspect the processed dictionary in Ludwig, I recognize that only features which explicitly use False/True (or FALSE/TRUE) are properly processed as binary inputs/outputs. If I use different notation e.g. 1/0, or big/small or yes/no they are not properly processed, although they are clearly binary. In this case I would have to manually map all binary values to False/True. \r\n\r\nHere is my example input csv:\r\n\r\nBinary_1,Binary_2,Binary_3,Binary_4,Binary_5\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n0,FALSE,yes,big,false\r\n1,TRUE,no,small,true\r\n\r\nModel_dict is:\r\n\r\n```\r\nmodel_definition: {   'combiner': {'fc_layers': None, 'type': 'concat'},\r\n    'input_features': [   {   'name': 'Binary_1',\r\n                              'tied_weights': None,\r\n                              'type': 'binary'},\r\n                          {   'name': 'Binary_2',\r\n                              'tied_weights': None,\r\n                              'type': 'binary'},\r\n                          {   'name': 'Binary_3',\r\n                              'tied_weights': None,\r\n                              'type': 'binary'},\r\n                          {   'name': 'Binary_4',\r\n                              'tied_weights': None,\r\n                              'type': 'binary'}],\r\n    'output_features': [   {   'dependencies': [],\r\n                               'loss': {   'confidence_penalty': 0,\r\n                                           'robust_lambda': 0,\r\n                                           'threshold': 0.5,\r\n                                           'weight': 1},\r\n                               'name': 'Binary_5',\r\n                               'reduce_dependencies': 'sum',\r\n                               'reduce_input': 'sum',\r\n                               'threshold': 0.5,\r\n                               'type': 'binary',\r\n                               'weight': 1}],\r\n    'preprocessing': {   'bag': {   'fill_value': '',\r\n                                    'format': 'space',\r\n                                    'lowercase': 10000,\r\n                                    'missing_value_strategy': 'fill_with_const',\r\n                                    'most_common': False},\r\n                         'binary': {   'fill_value': 0,\r\n                                       'missing_value_strategy': 'fill_with_const'},\r\n                         'category': {   'fill_value': '<UNK>',\r\n                                         'lowercase': False,\r\n                                         'missing_value_strategy': 'fill_with_const',\r\n                                         'most_common': 10000},\r\n                         'force_split': False,\r\n                         'image': {   'in_memory': True,\r\n                                      'missing_value_strategy': 'backfill',\r\n                                      'resize_method': 'crop_or_pad'},\r\n                         'numerical': {   'fill_value': 0,\r\n                                          'missing_value_strategy': 'fill_with_const'},\r\n                         'sequence': {   'fill_value': '',\r\n                                         'format': 'space',\r\n                                         'lowercase': False,\r\n                                         'missing_value_strategy': 'fill_with_const',\r\n                                         'most_common': 20000,\r\n                                         'padding': 'right',\r\n                                         'padding_symbol': '<PAD>',\r\n                                         'sequence_length_limit': 256,\r\n                                         'unknown_symbol': '<UNK>'},\r\n                         'set': {   'fill_value': '',\r\n                                    'format': 'space',\r\n                                    'lowercase': False,\r\n                                    'missing_value_strategy': 'fill_with_const',\r\n                                    'most_common': 10000},\r\n                         'split_probabilities': (0.7, 0.1, 0.2),\r\n                         'stratify': None,\r\n                         'text': {   'char_format': 'characters',\r\n                                     'char_most_common': 70,\r\n                                     'char_sequence_length_limit': 1024,\r\n                                     'fill_value': '',\r\n                                     'lowercase': True,\r\n                                     'missing_value_strategy': 'fill_with_const',\r\n                                     'padding': 'right',\r\n                                     'padding_symbol': '<PAD>',\r\n                                     'unknown_symbol': '<UNK>',\r\n                                     'word_format': 'space_punct',\r\n                                     'word_most_common': 20000,\r\n                                     'word_sequence_length_limit': 256},\r\n                         'timeseries': { 'fill_value': '',\r\n                                           'format': 'space',\r\n                                           'missing_value_strategy': 'fill_with_const',\r\n                                           'padding': 'right',\r\n                                           'padding_value': 0,\r\n                                           'timeseries_length_limit': 256}},\r\n    'training': {   'batch_size': 128,\r\n                    'bucketing_field': None,\r\n                    'decay': False,\r\n                    'decay_rate': 0.95,\r\n                    'decay_steps': 10000,\r\n                    'dropout_rate': 0.05,\r\n                    'early_stop': 7,\r\n                    'epochs': 10,\r\n                    'eval_batch_size': 0,\r\n                    'gradient_clipping': None,\r\n                    'increase_batch_size_on_plateau': 0,\r\n                    'increase_batch_size_on_plateau_max': 512,\r\n                    'increase_batch_size_on_plateau_patience': 5,\r\n                    'increase_batch_size_on_plateau_rate': 2,\r\n                    'learning_rate': 0.001,\r\n                    'learning_rate_warmup_epochs': 5,\r\n                    'optimizer': {   'beta1': 0.9,\r\n                                     'beta2': 0.999,\r\n                                     'epsilon': 1e-08,\r\n                                     'type': 'adam'},\r\n                    'reduce_learning_rate_on_plateau': 0,\r\n                    'reduce_learning_rate_on_plateau_patience': 5,\r\n                    'reduce_learning_rate_on_plateau_rate': 0.5,\r\n                    'regularization_lambda': 0,\r\n                    'regularizer': 'l2',\r\n                    'staircase': False,\r\n                    'validation_field': 'combined',\r\n                    'validation_measure': 'loss'}}\r\n```\r\n\r\nThe output should be alternating binary values. However, if I inspect dict of the preprocessed data set in '_predict' line 681, this is only the case feature Binary_2 and Binary_5. \r\n\r\nHope you are able to reproduce the bug. \r\n\r\nBTW. Thanks for this very useful piece of software!\r\n\r\nBest\r\nG\r\n\r\n\r\n\r\n ","closed_by":{"login":"w4nderlust","id":349256,"node_id":"MDQ6VXNlcjM0OTI1Ng==","avatar_url":"https://avatars.githubusercontent.com/u/349256?v=4","gravatar_id":"","url":"https://api.github.com/users/w4nderlust","html_url":"https://github.com/w4nderlust","followers_url":"https://api.github.com/users/w4nderlust/followers","following_url":"https://api.github.com/users/w4nderlust/following{/other_user}","gists_url":"https://api.github.com/users/w4nderlust/gists{/gist_id}","starred_url":"https://api.github.com/users/w4nderlust/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/w4nderlust/subscriptions","organizations_url":"https://api.github.com/users/w4nderlust/orgs","repos_url":"https://api.github.com/users/w4nderlust/repos","events_url":"https://api.github.com/users/w4nderlust/events{/privacy}","received_events_url":"https://api.github.com/users/w4nderlust/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/323/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/323/timeline","performed_via_github_app":null,"state_reason":"completed"}