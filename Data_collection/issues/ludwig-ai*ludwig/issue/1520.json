{"url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1520","repository_url":"https://api.github.com/repos/ludwig-ai/ludwig","labels_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1520/labels{/name}","comments_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1520/comments","events_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1520/events","html_url":"https://github.com/ludwig-ai/ludwig/issues/1520","id":1064178833,"node_id":"I_kwDOCbx2hs4_bhSR","number":1520,"title":"Categorical and numerical transformers - sklearn format","user":{"login":"PeterPirog","id":56269734,"node_id":"MDQ6VXNlcjU2MjY5NzM0","avatar_url":"https://avatars.githubusercontent.com/u/56269734?v=4","gravatar_id":"","url":"https://api.github.com/users/PeterPirog","html_url":"https://github.com/PeterPirog","followers_url":"https://api.github.com/users/PeterPirog/followers","following_url":"https://api.github.com/users/PeterPirog/following{/other_user}","gists_url":"https://api.github.com/users/PeterPirog/gists{/gist_id}","starred_url":"https://api.github.com/users/PeterPirog/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PeterPirog/subscriptions","organizations_url":"https://api.github.com/users/PeterPirog/orgs","repos_url":"https://api.github.com/users/PeterPirog/repos","events_url":"https://api.github.com/users/PeterPirog/events{/privacy}","received_events_url":"https://api.github.com/users/PeterPirog/received_events","type":"User","site_admin":false},"labels":[{"id":1174068771,"node_id":"MDU6TGFiZWwxMTc0MDY4Nzcx","url":"https://api.github.com/repos/ludwig-ai/ludwig/labels/feature","name":"feature","color":"0377d6","default":false,"description":"New feature or request"},{"id":3602609750,"node_id":"LA_kwDOCbx2hs7Wu3ZW","url":"https://api.github.com/repos/ludwig-ai/ludwig/labels/release-0.6","name":"release-0.6","color":"d4c5f9","default":false,"description":"Feature to be implemented in v0.6"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-11-26T07:33:42Z","updated_at":"2022-01-20T18:15:38Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"@w4nderlust @tgaddair I noticed that ludwig is focused mainly on text preprocessing, but there is some weaknes in numerical and categorical encoding.\r\nFor example I can't see  possibility to declare by user:\r\n\r\n- one-hot encoding, for categorical data with low cardinality datasets (small number of features)\r\n- rare labels encoder, for reducing number of categories for high cardinality datasets\r\n- quantile encoding, for reduce outliers in numerical datasets\r\n- ordinal encoding, for ordered categorical features like features [very small, small, normal, big, very big] =>[0,1,2,3,4]\r\n\r\nIn my work often I use very good encoders from pages or write own:\r\n[https://feature-engine.readthedocs.io/en/latest/encoding/index.html](https://feature-engine.readthedocs.io/en/latest/encoding/index.html)\r\n[https://contrib.scikit-learn.org/category_encoders/](https://contrib.scikit-learn.org/category_encoders/)\r\n[https://scikit-learn.org/stable/modules/classes.html#module-sklearn.preprocessing](https://scikit-learn.org/stable/modules/classes.html#module-sklearn.preprocessing)\r\n\r\nIs there any possibility to  add easily to the project transformers in typical sklearn format, because it will expand ludwig functionality:\r\n\r\n```\r\n# These allow us the class to inherit Scikit-learn methods\r\n# such as fit and transform\r\nfrom sklearn.base import BaseEstimator, TransformerMixin# This function just makes sure that the object is fitted\r\nfrom sklearn.utils.validation import check_is_fitted\r\n\r\nclass SubtractMin(BaseEstimator, TransformerMixin):\r\n    def __init__(self, cols_to_operate):\r\n         self.columns = cols_to_operate     \r\n    def fit(self, X, y = None):\r\n         self.min_val_ = X[self.columns].min()\r\n         return self\r\n \r\n    def transform(self, X):\r\n         # make sure that it was fitted\r\n         check_is_fitted(self, ‘min_val_’)\r\n \r\n         X = X.copy() # This is so we do not make changes to the            \r\n                        original dataframe\r\n         X[self.columns] = X[self.columns] — self.min_val_\r\n         return X\r\n```\r\nSome improvement can be done by using multivariate imputation (missing values in dataset are predicted with using all features not only single feature)\r\n\r\n\r\n```\r\nimport numpy as np\r\nfrom sklearn.experimental import enable_iterative_imputer\r\nfrom sklearn.impute import IterativeImputer\r\nimp_mean = IterativeImputer(random_state=0)\r\nimp_mean.fit([[7, 2, 3], [4, np.nan, 6], [10, 5, 9]])\r\n\r\nX = [[np.nan, 2, 3], [4, np.nan, 6], [10, np.nan, 9]]\r\nimp_mean.transform(X)\r\n```\r\n\r\nNow I do preprocessing outside the ludwig to prepare csv file but maybe it can be placed inside ludwig in one pipeline.\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1520/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ludwig-ai/ludwig/issues/1520/timeline","performed_via_github_app":null,"state_reason":null}