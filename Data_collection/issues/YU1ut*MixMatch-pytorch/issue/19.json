{"url":"https://api.github.com/repos/YU1ut/MixMatch-pytorch/issues/19","repository_url":"https://api.github.com/repos/YU1ut/MixMatch-pytorch","labels_url":"https://api.github.com/repos/YU1ut/MixMatch-pytorch/issues/19/labels{/name}","comments_url":"https://api.github.com/repos/YU1ut/MixMatch-pytorch/issues/19/comments","events_url":"https://api.github.com/repos/YU1ut/MixMatch-pytorch/issues/19/events","html_url":"https://github.com/YU1ut/MixMatch-pytorch/issues/19","id":493880442,"node_id":"MDU6SXNzdWU0OTM4ODA0NDI=","number":19,"title":"Performance declining by replacing data augmentation with pyotrch function.","user":{"login":"yichuan9527","id":17669470,"node_id":"MDQ6VXNlcjE3NjY5NDcw","avatar_url":"https://avatars.githubusercontent.com/u/17669470?v=4","gravatar_id":"","url":"https://api.github.com/users/yichuan9527","html_url":"https://github.com/yichuan9527","followers_url":"https://api.github.com/users/yichuan9527/followers","following_url":"https://api.github.com/users/yichuan9527/following{/other_user}","gists_url":"https://api.github.com/users/yichuan9527/gists{/gist_id}","starred_url":"https://api.github.com/users/yichuan9527/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yichuan9527/subscriptions","organizations_url":"https://api.github.com/users/yichuan9527/orgs","repos_url":"https://api.github.com/users/yichuan9527/repos","events_url":"https://api.github.com/users/yichuan9527/events{/privacy}","received_events_url":"https://api.github.com/users/yichuan9527/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-09-16T07:05:14Z","updated_at":"2021-09-02T18:52:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello, I replace your data augmentation function (`RandomPadandCrop`,  `RandomFlip`) with pytorch augmenation function (`RandomCrop`, `RandomHorizontalFlip`). But the performance declines from 94% to 66%. My data augmantion code is as follow:     \r\n\r\n`transform_train = transforms.Compose([\r\n       transforms.RandomCrop(32, padding=4),\r\n        transforms.RandomHorizontalFlip(),\r\n        transforms.ToTensor(),\r\n        transforms.Normalize((0.4914, 0.4822, 0.4465),\r\n                             (0.2471, 0.2435, 0.2616))\r\n    ])`\r\n\r\n`transform_val = transforms.Compose([\r\n        transforms.ToTensor(),\r\n        transforms.Normalize((0.4914, 0.4822, 0.4465),\r\n                             (0.2471, 0.2435, 0.2616))\r\n    ])`\r\n\r\nTo run the code, I modify the code of `CIFAR10_labeled` as follow:\r\n`class CIFAR10_labeled(torchvision.datasets.CIFAR10):\r\n\r\n    def __init__(self, root, indexs=None, train=True,\r\n                 transform=None, target_transform=None,\r\n                 download=False):\r\n        super(CIFAR10_labeled, self).__init__(root, train=train,\r\n                 transform=transform, target_transform=target_transform,\r\n                 download=download)\r\n        if indexs is not None:\r\n            self.data = self.data[indexs]\r\n            self.targets = np.array(self.targets)[indexs]\r\n\r\n        # self.data = transpose(normalise(self.data))\r\n        self.data = np.vstack(self.data).reshape(-1, 3, 32, 32)\r\n        # pdb.set_trace()\r\n\r\n        self.data = self.data.transpose((0, 2, 3, 1))  # convert to HWC\r\n        # pdb.set_trace()\r\n\r\n    def __getitem__(self, index):\r\n        \"\"\"\r\n        Args:\r\n            index (int): Index\r\n\r\n        Returns:\r\n            tuple: (image, target) where target is index of the target class.\r\n        \"\"\"\r\n        img, target = self.data[index], self.targets[index]\r\n        # pdb.set_trace()\r\n        img = Image.fromarray(img)\r\n\r\n        if self.transform is not None:\r\n            img = self.transform(img)\r\n\r\n        if self.target_transform is not None:\r\n            target = self.target_transform(target)\r\n\r\n        return img, target`\r\n\r\nIt is very strange ! In theory, the implments (your function and pytorch aug fuinction) of the augmentation are the same. But a substantial performance gap becomes apparent.\r\n\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/YU1ut/MixMatch-pytorch/issues/19/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/YU1ut/MixMatch-pytorch/issues/19/timeline","performed_via_github_app":null,"state_reason":null}