{"url":"https://api.github.com/repos/logictensornetworks/logictensornetworks/issues/30","repository_url":"https://api.github.com/repos/logictensornetworks/logictensornetworks","labels_url":"https://api.github.com/repos/logictensornetworks/logictensornetworks/issues/30/labels{/name}","comments_url":"https://api.github.com/repos/logictensornetworks/logictensornetworks/issues/30/comments","events_url":"https://api.github.com/repos/logictensornetworks/logictensornetworks/issues/30/events","html_url":"https://github.com/logictensornetworks/logictensornetworks/issues/30","id":1322020878,"node_id":"I_kwDOCFoAF85OzHAO","number":30,"title":"Weighted connective operators","user":{"login":"maelle101","id":25430324,"node_id":"MDQ6VXNlcjI1NDMwMzI0","avatar_url":"https://avatars.githubusercontent.com/u/25430324?v=4","gravatar_id":"","url":"https://api.github.com/users/maelle101","html_url":"https://github.com/maelle101","followers_url":"https://api.github.com/users/maelle101/followers","following_url":"https://api.github.com/users/maelle101/following{/other_user}","gists_url":"https://api.github.com/users/maelle101/gists{/gist_id}","starred_url":"https://api.github.com/users/maelle101/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/maelle101/subscriptions","organizations_url":"https://api.github.com/users/maelle101/orgs","repos_url":"https://api.github.com/users/maelle101/repos","events_url":"https://api.github.com/users/maelle101/events{/privacy}","received_events_url":"https://api.github.com/users/maelle101/received_events","type":"User","site_admin":false},"labels":[{"id":986963946,"node_id":"MDU6TGFiZWw5ODY5NjM5NDY=","url":"https://api.github.com/repos/logictensornetworks/logictensornetworks/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-07-29T09:58:27Z","updated_at":"2022-08-24T07:08:30Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\n\r\nIn my project, I needed to use connective fuzzy logic operator.,\r\nSo, I implemented a class that enables to add weights to classic fuzzy operators, based on this paper :\r\nhttps://www.researchgate.net/publication/2610015_The_Weighting_Issue_in_Fuzzy_Logic\r\n\r\nI think it may be useful for other people or even to add it to ltn operators, so here is my code : \r\n```python\r\nclass WeightedConnective:\r\n    \"\"\"Class to compute a weighted connective fuzzy operator.\"\"\"\r\n\r\n    def __init__(self, single_connective: Callable = ltn.fuzzy_ops.And_Prod()):\r\n        \"\"\"Initialize WeightedConnective.\r\n\r\n        Parameters\r\n        ----------\r\n        single_connective : Callable\r\n            Function to compute the binary operation\r\n        \"\"\"\r\n        self.single_connective = single_connective\r\n\r\n    def __call__(self, *args: float, weights: list[float] | None = None) -> float:\r\n        \"\"\"Call function of WeightedConnective.\r\n\r\n        Parameters\r\n        ----------\r\n        *args : float\r\n            Truth values whose operation should be computed\r\n        weights : list[float] | None\r\n            List of weights for the predicates, None if all predicates should be weighted\r\n            equally, default: None\r\n\r\n        Returns\r\n        -------\r\n        float:\r\n            Truth value of weighted connective operation between predicates\r\n\r\n        Raises\r\n        ------\r\n        ValueError\r\n            If no predicate was provided\r\n        ValueError\r\n            If the number of predicates and the number of weights are different\r\n        \"\"\"\r\n        n = len(args)\r\n        if n == 0:\r\n            raise ValueError(\"No predicate was found\")\r\n        if n == 1:\r\n            return args[0]\r\n        if weights is None:\r\n            weights = [1. / n for _ in range(n)]\r\n        if len(weights) != n:\r\n            raise ValueError(\r\n                f\"Numbers of predicates and weights should be equal : {n} predicates and \"\r\n                f\"{len(weights)} weights were found\")\r\n\r\n        s = sum(weights)\r\n        if s != 0:\r\n            weights = [elt / s for elt in weights]\r\n\r\n        w = max(weights)\r\n        res = (weights[0] / w) * args[0]\r\n        for i, x in enumerate(args):\r\n            if i != 0:\r\n                res = self.single_connective(res, (weights[i] / w) * args[i])\r\n        return res\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/logictensornetworks/logictensornetworks/issues/30/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":1,"eyes":0},"timeline_url":"https://api.github.com/repos/logictensornetworks/logictensornetworks/issues/30/timeline","performed_via_github_app":null,"state_reason":null}