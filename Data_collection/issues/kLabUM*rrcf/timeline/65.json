[{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/544958320","html_url":"https://github.com/kLabUM/rrcf/issues/65#issuecomment-544958320","issue_url":"https://api.github.com/repos/kLabUM/rrcf/issues/65","id":544958320,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NDk1ODMyMA==","user":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false},"created_at":"2019-10-22T13:20:23Z","updated_at":"2019-10-22T13:20:23Z","author_association":"NONE","body":"and another question: why the rrcf model is so slow to create a tree?\r\nI use feature is [5000, 3] to run 100 times.\r\neach created-tree spend 0.82 second.","reactions":{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/544958320/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545254421","html_url":"https://github.com/kLabUM/rrcf/issues/65#issuecomment-545254421","issue_url":"https://api.github.com/repos/kLabUM/rrcf/issues/65","id":545254421,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTI1NDQyMQ==","user":{"login":"mdbartos","id":8175317,"node_id":"MDQ6VXNlcjgxNzUzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/8175317?v=4","gravatar_id":"","url":"https://api.github.com/users/mdbartos","html_url":"https://github.com/mdbartos","followers_url":"https://api.github.com/users/mdbartos/followers","following_url":"https://api.github.com/users/mdbartos/following{/other_user}","gists_url":"https://api.github.com/users/mdbartos/gists{/gist_id}","starred_url":"https://api.github.com/users/mdbartos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdbartos/subscriptions","organizations_url":"https://api.github.com/users/mdbartos/orgs","repos_url":"https://api.github.com/users/mdbartos/repos","events_url":"https://api.github.com/users/mdbartos/events{/privacy}","received_events_url":"https://api.github.com/users/mdbartos/received_events","type":"User","site_admin":false},"created_at":"2019-10-23T03:56:10Z","updated_at":"2019-10-23T03:56:10Z","author_association":"MEMBER","body":"Greetings,\r\n\r\nWith regards to your second question, I'd recommend keeping the tree size small. As the size of the tree increases, it becomes more inefficient to insert points, especially when the paths become deep. Notice how in the *batch anomaly detection* example, we are using trees containing 256 points each to sample a dataset of 2010 points. In other words, you don't need to have all the points in every tree.","reactions":{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545254421/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"mdbartos","id":8175317,"node_id":"MDQ6VXNlcjgxNzUzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/8175317?v=4","gravatar_id":"","url":"https://api.github.com/users/mdbartos","html_url":"https://github.com/mdbartos","followers_url":"https://api.github.com/users/mdbartos/followers","following_url":"https://api.github.com/users/mdbartos/following{/other_user}","gists_url":"https://api.github.com/users/mdbartos/gists{/gist_id}","starred_url":"https://api.github.com/users/mdbartos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdbartos/subscriptions","organizations_url":"https://api.github.com/users/mdbartos/orgs","repos_url":"https://api.github.com/users/mdbartos/repos","events_url":"https://api.github.com/users/mdbartos/events{/privacy}","received_events_url":"https://api.github.com/users/mdbartos/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545258696","html_url":"https://github.com/kLabUM/rrcf/issues/65#issuecomment-545258696","issue_url":"https://api.github.com/repos/kLabUM/rrcf/issues/65","id":545258696,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTI1ODY5Ng==","user":{"login":"mdbartos","id":8175317,"node_id":"MDQ6VXNlcjgxNzUzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/8175317?v=4","gravatar_id":"","url":"https://api.github.com/users/mdbartos","html_url":"https://github.com/mdbartos","followers_url":"https://api.github.com/users/mdbartos/followers","following_url":"https://api.github.com/users/mdbartos/following{/other_user}","gists_url":"https://api.github.com/users/mdbartos/gists{/gist_id}","starred_url":"https://api.github.com/users/mdbartos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdbartos/subscriptions","organizations_url":"https://api.github.com/users/mdbartos/orgs","repos_url":"https://api.github.com/users/mdbartos/repos","events_url":"https://api.github.com/users/mdbartos/events{/privacy}","received_events_url":"https://api.github.com/users/mdbartos/received_events","type":"User","site_admin":false},"created_at":"2019-10-23T04:18:50Z","updated_at":"2019-10-23T04:18:50Z","author_association":"MEMBER","body":"With regards to your first question, consider serializing with a well-known and human-readable format like json. Here's an example. If this is useful, I can add these methods to `RCTree`.\r\n\r\n# Create example tree\r\n```python\r\n# Load modules\r\nimport numpy as np\r\nimport pandas as pd\r\nimport json\r\nimport rrcf\r\n\r\n# Set parameters\r\nnp.random.seed(0)\r\nn = 4\r\nd = 3\r\n\r\n# Generate data\r\nX = np.random.randn(n, d)\r\n\r\n# Construct tree\r\ntree = rrcf.RCTree(X)\r\n```\r\n```python\r\nprint(tree)\r\n>>>\r\n─+\r\n ├───+\r\n │   ├──(3)\r\n │   └───+\r\n │       ├──(2)\r\n │       └──(0)\r\n └──(1)\r\n```\r\n\r\n# Serialize to json\r\n\r\n```python\r\ndef serialize(node, obj):\r\n    if isinstance(node, rrcf.Branch):\r\n        obj['type'] = 'Branch'\r\n        obj['q'] = int(node.q)\r\n        obj['p'] = float(node.p)\r\n        obj['n'] = int(node.n)\r\n        obj['b'] = node.b.tolist()\r\n        obj['l'] = {}\r\n        obj['r'] = {}\r\n        if node.l:\r\n            serialize(node.l, obj['l'])\r\n        if node.r:\r\n            serialize(node.r, obj['r'])\r\n    elif isinstance(node, rrcf.Leaf):\r\n        obj['type'] = 'Leaf'\r\n        obj['i'] = node.i\r\n        obj['x'] = node.x.tolist()\r\n        obj['d'] = int(node.d)\r\n        obj['n'] = int(node.n)\r\n    else:\r\n        raise TypeError('`node` must be Branch or Leaf instance')\r\n```\r\n```python\r\n# Create empty dict\r\nobj = {}\r\n\r\n# Serialize tree to dict\r\nserialize(tree.root, obj)\r\n\r\n# Dump to json file\r\nwith open('tree.json', 'w') as outfile:\r\n    json.dump(obj, outfile)\r\n    \r\n# Read json file\r\nwith open('tree.json', 'r') as infile:\r\n    obj = json.load(infile)\r\n```\r\n```python    \r\nprint(obj)\r\n>>>\r\n{'b': [[0.410598502, -0.151357208, -0.97727788],\r\n  [2.240893199, 1.86755799, 1.454273507]],\r\n 'l': {'b': [[0.410598502, -0.151357208, -0.103218852],\r\n   [1.764052346, 0.400157208, 1.454273507]],\r\n  'l': {'d': 2,\r\n   'i': 3,\r\n   'n': 1,\r\n   'type': 'Leaf',\r\n   'x': [0.410598502, 0.144043571, 1.454273507]},\r\n  'n': 3,\r\n  'p': 0.5285239876060783,\r\n  'q': 0,\r\n  'r': {'b': [[0.950088418, -0.151357208, -0.103218852],\r\n    [1.764052346, 0.400157208, 0.978737984]],\r\n   'l': {'d': 3,\r\n    'i': 2,\r\n    'n': 1,\r\n    'type': 'Leaf',\r\n    'x': [0.950088418, -0.151357208, -0.103218852]},\r\n   'n': 2,\r\n   'p': 1.6278109380129528,\r\n   'q': 0,\r\n   'r': {'d': 3,\r\n    'i': 0,\r\n    'n': 1,\r\n    'type': 'Leaf',\r\n    'x': [1.764052346, 0.400157208, 0.978737984]},\r\n   'type': 'Branch'},\r\n  'type': 'Branch'},\r\n 'n': 4,\r\n 'p': 1.7173439122667618,\r\n 'q': 1,\r\n 'r': {'d': 1,\r\n  'i': 1,\r\n  'n': 1,\r\n  'type': 'Leaf',\r\n  'x': [2.240893199, 1.86755799, -0.97727788]},\r\n 'type': 'Branch'}\r\n```\r\n\r\n# Deserialize and load into empty tree\r\n\r\n```python\r\ndef deserialize(obj, node, side='l'):\r\n    if obj['type'] == 'Branch':\r\n        q = obj['q']\r\n        p = obj['p']\r\n        n = np.int64(obj['n'])\r\n        b = np.asarray(obj['b'])\r\n        branch = rrcf.Branch(q=q, p=p, n=n, b=b, u=node)\r\n        setattr(node, side, branch)\r\n        if 'l' in obj:\r\n            deserialize(obj['l'], branch, side='l')\r\n        if 'r' in obj:\r\n            deserialize(obj['r'], branch, side='r')\r\n    elif obj['type'] == 'Leaf':\r\n        i = obj['i']\r\n        x = np.asarray(obj['x'])\r\n        d = obj['d']\r\n        n = np.int64(obj['n'])\r\n        leaf = rrcf.Leaf(i=i, x=x, d=d, n=n, u=node)\r\n        setattr(node, side, leaf)\r\n    else:\r\n        raise TypeError('`type` must be Branch or Leaf')\r\n```\r\n\r\n```python\r\n# Create anchor node\r\nanchor = rrcf.Branch(q=None, p=None)\r\n\r\n# Deserialize json object\r\ndeserialize(obj, anchor)\r\n\r\n# Get root node\r\nroot = anchor.l\r\nroot.u = None\r\n\r\n# Create tree and assign root node\r\ntree = rrcf.RCTree()\r\ntree.root = root\r\n\r\n# Fill in leaves dict\r\ntree.map_leaves(tree.root, op=(lambda x, leaves: leaves.update({x.i : x})),\r\n                leaves=tree.leaves)\r\n# Set number of dimensions based on first leaf\r\ntree.ndim = len(next(iter(tree.leaves.values())).x)\r\n```\r\n```python\r\nprint(tree)\r\n>>>\r\n─+\r\n ├───+\r\n │   ├──(3)\r\n │   └───+\r\n │       ├──(2)\r\n │       └──(0)\r\n └──(1)\r\n```","reactions":{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545258696/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"mdbartos","id":8175317,"node_id":"MDQ6VXNlcjgxNzUzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/8175317?v=4","gravatar_id":"","url":"https://api.github.com/users/mdbartos","html_url":"https://github.com/mdbartos","followers_url":"https://api.github.com/users/mdbartos/followers","following_url":"https://api.github.com/users/mdbartos/following{/other_user}","gists_url":"https://api.github.com/users/mdbartos/gists{/gist_id}","starred_url":"https://api.github.com/users/mdbartos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdbartos/subscriptions","organizations_url":"https://api.github.com/users/mdbartos/orgs","repos_url":"https://api.github.com/users/mdbartos/repos","events_url":"https://api.github.com/users/mdbartos/events{/privacy}","received_events_url":"https://api.github.com/users/mdbartos/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545259671","html_url":"https://github.com/kLabUM/rrcf/issues/65#issuecomment-545259671","issue_url":"https://api.github.com/repos/kLabUM/rrcf/issues/65","id":545259671,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTI1OTY3MQ==","user":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false},"created_at":"2019-10-23T04:24:06Z","updated_at":"2019-10-23T04:24:06Z","author_association":"NONE","body":"> Greetings,\r\n> \r\n> With regards to your second question, I'd recommend keeping the tree size small. As the size of the tree increases, it becomes more inefficient to insert points, especially when the paths become deep. Notice how in the _batch anomaly detection_ example, we are using trees containing 256 points each to sample a dataset of 2010 points. In other words, you don't need to have all the points in every tree.\r\n\r\nRight, I use the max_depth to limit the each tree depth, it much more faster.\r\nthank you for your reply.","reactions":{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545259671/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545260430","html_url":"https://github.com/kLabUM/rrcf/issues/65#issuecomment-545260430","issue_url":"https://api.github.com/repos/kLabUM/rrcf/issues/65","id":545260430,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTI2MDQzMA==","user":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false},"created_at":"2019-10-23T04:27:50Z","updated_at":"2019-10-23T04:27:50Z","author_association":"NONE","body":"> With regards to your first question, consider serializing with a well-known and human-readable format like json. Here's an example. If this is useful, I can add these methods to `RCTree`.\r\n> \r\n> # Create example tree\r\n> ```python\r\n> # Load modules\r\n> import numpy as np\r\n> import pandas as pd\r\n> import json\r\n> import rrcf\r\n> \r\n> # Set parameters\r\n> np.random.seed(0)\r\n> n = 4\r\n> d = 3\r\n> \r\n> # Generate data\r\n> X = np.random.randn(n, d)\r\n> \r\n> # Construct tree\r\n> tree = rrcf.RCTree(X)\r\n> ```\r\n> \r\n> ```python\r\n> print(tree)\r\n> >>>\r\n> ─+\r\n>  ├───+\r\n>  │   ├──(3)\r\n>  │   └───+\r\n>  │       ├──(2)\r\n>  │       └──(0)\r\n>  └──(1)\r\n> ```\r\n> \r\n> # Serialize to json\r\n> ```python\r\n> def serialize(node, obj):\r\n>     if isinstance(node, rrcf.Branch):\r\n>         obj['type'] = 'Branch'\r\n>         obj['q'] = int(node.q)\r\n>         obj['p'] = float(node.p)\r\n>         obj['n'] = int(node.n)\r\n>         obj['b'] = node.b.tolist()\r\n>         obj['l'] = {}\r\n>         obj['r'] = {}\r\n>         if node.l:\r\n>             serialize(node.l, obj['l'])\r\n>         if node.r:\r\n>             serialize(node.r, obj['r'])\r\n>     elif isinstance(node, rrcf.Leaf):\r\n>         obj['type'] = 'Leaf'\r\n>         obj['i'] = node.i\r\n>         obj['x'] = node.x.tolist()\r\n>         obj['d'] = int(node.d)\r\n>         obj['n'] = int(node.n)\r\n>     else:\r\n>         raise TypeError('`node` must be Branch or Leaf instance')\r\n> ```\r\n> \r\n> ```python\r\n> # Create empty dict\r\n> obj = {}\r\n> \r\n> # Serialize tree to dict\r\n> serialize(tree.root, obj)\r\n> \r\n> # Dump to json file\r\n> with open('tree.json', 'w') as outfile:\r\n>     json.dump(obj, outfile)\r\n>     \r\n> # Read json file\r\n> with open('tree.json', 'r') as infile:\r\n>     obj = json.load(infile)\r\n> ```\r\n> \r\n> ```python\r\n> print(obj)\r\n> >>>\r\n> {'b': [[0.410598502, -0.151357208, -0.97727788],\r\n>   [2.240893199, 1.86755799, 1.454273507]],\r\n>  'l': {'b': [[0.410598502, -0.151357208, -0.103218852],\r\n>    [1.764052346, 0.400157208, 1.454273507]],\r\n>   'l': {'d': 2,\r\n>    'i': 3,\r\n>    'n': 1,\r\n>    'type': 'Leaf',\r\n>    'x': [0.410598502, 0.144043571, 1.454273507]},\r\n>   'n': 3,\r\n>   'p': 0.5285239876060783,\r\n>   'q': 0,\r\n>   'r': {'b': [[0.950088418, -0.151357208, -0.103218852],\r\n>     [1.764052346, 0.400157208, 0.978737984]],\r\n>    'l': {'d': 3,\r\n>     'i': 2,\r\n>     'n': 1,\r\n>     'type': 'Leaf',\r\n>     'x': [0.950088418, -0.151357208, -0.103218852]},\r\n>    'n': 2,\r\n>    'p': 1.6278109380129528,\r\n>    'q': 0,\r\n>    'r': {'d': 3,\r\n>     'i': 0,\r\n>     'n': 1,\r\n>     'type': 'Leaf',\r\n>     'x': [1.764052346, 0.400157208, 0.978737984]},\r\n>    'type': 'Branch'},\r\n>   'type': 'Branch'},\r\n>  'n': 4,\r\n>  'p': 1.7173439122667618,\r\n>  'q': 1,\r\n>  'r': {'d': 1,\r\n>   'i': 1,\r\n>   'n': 1,\r\n>   'type': 'Leaf',\r\n>   'x': [2.240893199, 1.86755799, -0.97727788]},\r\n>  'type': 'Branch'}\r\n> ```\r\n> \r\n> # Deserialize and load into empty tree\r\n> ```python\r\n> def deserialize(obj, node, side='l'):\r\n>     if obj['type'] == 'Branch':\r\n>         q = obj['q']\r\n>         p = obj['p']\r\n>         n = np.int64(obj['n'])\r\n>         b = np.asarray(obj['b'])\r\n>         branch = rrcf.Branch(q=q, p=p, n=n, b=b, u=node)\r\n>         setattr(node, side, branch)\r\n>         if 'l' in obj:\r\n>             deserialize(obj['l'], branch, side='l')\r\n>         if 'r' in obj:\r\n>             deserialize(obj['r'], branch, side='r')\r\n>     elif obj['type'] == 'Leaf':\r\n>         i = obj['i']\r\n>         x = np.asarray(obj['x'])\r\n>         d = obj['d']\r\n>         n = np.int64(obj['n'])\r\n>         leaf = rrcf.Leaf(i=i, x=x, d=d, n=n, u=node)\r\n>         setattr(node, side, leaf)\r\n>     else:\r\n>         raise TypeError('`type` must be Branch or Leaf')\r\n> ```\r\n> \r\n> ```python\r\n> # Create anchor node\r\n> anchor = rrcf.Branch(q=None, p=None)\r\n> \r\n> # Deserialize json object\r\n> deserialize(obj, anchor)\r\n> \r\n> # Get root node\r\n> root = anchor.l\r\n> root.u = None\r\n> \r\n> # Create tree and assign root node\r\n> tree = rrcf.RCTree()\r\n> tree.root = root\r\n> \r\n> # Fill in leaves dict\r\n> tree.map_leaves(tree.root, op=(lambda x, leaves: leaves.update({x.i : x})),\r\n>                 leaves=tree.leaves)\r\n> # Set number of dimensions based on first leaf\r\n> tree.ndim = len(next(iter(tree.leaves.values())).x)\r\n> ```\r\n> \r\n> ```python\r\n> print(tree)\r\n> >>>\r\n> ─+\r\n>  ├───+\r\n>  │   ├──(3)\r\n>  │   └───+\r\n>  │       ├──(2)\r\n>  │       └──(0)\r\n>  └──(1)\r\n> ```\r\n\r\nthank you for your json Serialize/Deserialize method, I will create large forest to benchmark the serialize efficient. \r\n> Dill, Pickle, Json","reactions":{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545260430/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545261385","html_url":"https://github.com/kLabUM/rrcf/issues/65#issuecomment-545261385","issue_url":"https://api.github.com/repos/kLabUM/rrcf/issues/65","id":545261385,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTI2MTM4NQ==","user":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false},"created_at":"2019-10-23T04:32:36Z","updated_at":"2019-10-23T04:32:36Z","author_association":"NONE","body":"I want to know about the reason why the pickle dumps method not working.\r\nWhen I use **from multiprocessing import Pool, Manager**, the Thread Manager use Pickle to send bytes. But it's always failing send the dumps objects.","reactions":{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545261385/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545273758","html_url":"https://github.com/kLabUM/rrcf/issues/65#issuecomment-545273758","issue_url":"https://api.github.com/repos/kLabUM/rrcf/issues/65","id":545273758,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTI3Mzc1OA==","user":{"login":"mdbartos","id":8175317,"node_id":"MDQ6VXNlcjgxNzUzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/8175317?v=4","gravatar_id":"","url":"https://api.github.com/users/mdbartos","html_url":"https://github.com/mdbartos","followers_url":"https://api.github.com/users/mdbartos/followers","following_url":"https://api.github.com/users/mdbartos/following{/other_user}","gists_url":"https://api.github.com/users/mdbartos/gists{/gist_id}","starred_url":"https://api.github.com/users/mdbartos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdbartos/subscriptions","organizations_url":"https://api.github.com/users/mdbartos/orgs","repos_url":"https://api.github.com/users/mdbartos/repos","events_url":"https://api.github.com/users/mdbartos/events{/privacy}","received_events_url":"https://api.github.com/users/mdbartos/received_events","type":"User","site_admin":false},"created_at":"2019-10-23T05:30:53Z","updated_at":"2019-10-23T05:30:53Z","author_association":"MEMBER","body":"Try running `pickle.dumps(tree.root)` instead of `pickle.dumps(tree)`.\r\n\r\nNote that when you load the pickle, you will need to add the root of the loaded object to an empty tree. So, similar to the above code:\r\n\r\n```python\r\n# Load pickle file\r\nwith open('tree.p', 'rb') as p:\r\n    root = pickle.load(p)\r\n\r\n# Create tree and assign root node\r\ntree = rrcf.RCTree()\r\ntree.root = root\r\n\r\n# Fill in leaves dict\r\ntree.map_leaves(tree.root, op=(lambda x, leaves: leaves.update({x.i : x})),\r\n                leaves=tree.leaves)\r\n# Set number of dimensions based on first leaf\r\ntree.ndim = len(next(iter(tree.leaves.values())).x)\r\n```","reactions":{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545273758/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"mdbartos","id":8175317,"node_id":"MDQ6VXNlcjgxNzUzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/8175317?v=4","gravatar_id":"","url":"https://api.github.com/users/mdbartos","html_url":"https://github.com/mdbartos","followers_url":"https://api.github.com/users/mdbartos/followers","following_url":"https://api.github.com/users/mdbartos/following{/other_user}","gists_url":"https://api.github.com/users/mdbartos/gists{/gist_id}","starred_url":"https://api.github.com/users/mdbartos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdbartos/subscriptions","organizations_url":"https://api.github.com/users/mdbartos/orgs","repos_url":"https://api.github.com/users/mdbartos/repos","events_url":"https://api.github.com/users/mdbartos/events{/privacy}","received_events_url":"https://api.github.com/users/mdbartos/received_events","type":"User","site_admin":false}},{"id":2736668359,"node_id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjczNjY2ODM1OQ==","url":"https://api.github.com/repos/kLabUM/rrcf/issues/events/2736668359","actor":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false},"event":"renamed","commit_id":null,"commit_url":null,"created_at":"2019-10-23T11:24:25Z","rename":{"from":"how to use pickle to dump the tree model ?","to":"Some Question about how to use rrcf ?"},"performed_via_github_app":null},{"id":2736668740,"node_id":"MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjczNjY2ODc0MA==","url":"https://api.github.com/repos/kLabUM/rrcf/issues/events/2736668740","actor":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false},"event":"renamed","commit_id":null,"commit_url":null,"created_at":"2019-10-23T11:24:35Z","rename":{"from":"Some Question about how to use rrcf ?","to":"Some Questions about how to use rrcf ?"},"performed_via_github_app":null},{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545398359","html_url":"https://github.com/kLabUM/rrcf/issues/65#issuecomment-545398359","issue_url":"https://api.github.com/repos/kLabUM/rrcf/issues/65","id":545398359,"node_id":"MDEyOklzc3VlQ29tbWVudDU0NTM5ODM1OQ==","user":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false},"created_at":"2019-10-23T11:27:04Z","updated_at":"2019-10-23T11:27:04Z","author_association":"NONE","body":"Hi,\r\nIn isolate forest, there is a parameter named max_depth, which to control the depth about the isolate tree (also, It can speed up the tree created).\r\nWhy not provide that parameter ?\r\n","reactions":{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments/545398359/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false}},{"id":2739476957,"node_id":"MDExOkNsb3NlZEV2ZW50MjczOTQ3Njk1Nw==","url":"https://api.github.com/repos/kLabUM/rrcf/issues/events/2739476957","actor":{"login":"liuguiyangnwpu","id":5275638,"node_id":"MDQ6VXNlcjUyNzU2Mzg=","avatar_url":"https://avatars.githubusercontent.com/u/5275638?v=4","gravatar_id":"","url":"https://api.github.com/users/liuguiyangnwpu","html_url":"https://github.com/liuguiyangnwpu","followers_url":"https://api.github.com/users/liuguiyangnwpu/followers","following_url":"https://api.github.com/users/liuguiyangnwpu/following{/other_user}","gists_url":"https://api.github.com/users/liuguiyangnwpu/gists{/gist_id}","starred_url":"https://api.github.com/users/liuguiyangnwpu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/liuguiyangnwpu/subscriptions","organizations_url":"https://api.github.com/users/liuguiyangnwpu/orgs","repos_url":"https://api.github.com/users/liuguiyangnwpu/repos","events_url":"https://api.github.com/users/liuguiyangnwpu/events{/privacy}","received_events_url":"https://api.github.com/users/liuguiyangnwpu/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2019-10-24T06:17:55Z","state_reason":null,"performed_via_github_app":null},{"actor":{"login":"mdbartos","id":8175317,"node_id":"MDQ6VXNlcjgxNzUzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/8175317?v=4","gravatar_id":"","url":"https://api.github.com/users/mdbartos","html_url":"https://github.com/mdbartos","followers_url":"https://api.github.com/users/mdbartos/followers","following_url":"https://api.github.com/users/mdbartos/following{/other_user}","gists_url":"https://api.github.com/users/mdbartos/gists{/gist_id}","starred_url":"https://api.github.com/users/mdbartos/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdbartos/subscriptions","organizations_url":"https://api.github.com/users/mdbartos/orgs","repos_url":"https://api.github.com/users/mdbartos/repos","events_url":"https://api.github.com/users/mdbartos/events{/privacy}","received_events_url":"https://api.github.com/users/mdbartos/received_events","type":"User","site_admin":false},"created_at":"2019-12-11T06:00:04Z","updated_at":"2019-12-11T06:00:04Z","source":{"type":"issue","issue":{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/69","repository_url":"https://api.github.com/repos/kLabUM/rrcf","labels_url":"https://api.github.com/repos/kLabUM/rrcf/issues/69/labels{/name}","comments_url":"https://api.github.com/repos/kLabUM/rrcf/issues/69/comments","events_url":"https://api.github.com/repos/kLabUM/rrcf/issues/69/events","html_url":"https://github.com/kLabUM/rrcf/issues/69","id":535885978,"node_id":"MDU6SXNzdWU1MzU4ODU5Nzg=","number":69,"title":"Unable to copy/save model using pickle","user":{"login":"colinkyle","id":25017831,"node_id":"MDQ6VXNlcjI1MDE3ODMx","avatar_url":"https://avatars.githubusercontent.com/u/25017831?v=4","gravatar_id":"","url":"https://api.github.com/users/colinkyle","html_url":"https://github.com/colinkyle","followers_url":"https://api.github.com/users/colinkyle/followers","following_url":"https://api.github.com/users/colinkyle/following{/other_user}","gists_url":"https://api.github.com/users/colinkyle/gists{/gist_id}","starred_url":"https://api.github.com/users/colinkyle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/colinkyle/subscriptions","organizations_url":"https://api.github.com/users/colinkyle/orgs","repos_url":"https://api.github.com/users/colinkyle/repos","events_url":"https://api.github.com/users/colinkyle/events{/privacy}","received_events_url":"https://api.github.com/users/colinkyle/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-12-10T17:46:09Z","updated_at":"2019-12-12T22:01:36Z","closed_at":"2019-12-10T20:10:06Z","author_association":"NONE","active_lock_reason":null,"repository":{"id":153873481,"node_id":"MDEwOlJlcG9zaXRvcnkxNTM4NzM0ODE=","name":"rrcf","full_name":"kLabUM/rrcf","private":false,"owner":{"login":"kLabUM","id":4870591,"node_id":"MDEyOk9yZ2FuaXphdGlvbjQ4NzA1OTE=","avatar_url":"https://avatars.githubusercontent.com/u/4870591?v=4","gravatar_id":"","url":"https://api.github.com/users/kLabUM","html_url":"https://github.com/kLabUM","followers_url":"https://api.github.com/users/kLabUM/followers","following_url":"https://api.github.com/users/kLabUM/following{/other_user}","gists_url":"https://api.github.com/users/kLabUM/gists{/gist_id}","starred_url":"https://api.github.com/users/kLabUM/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kLabUM/subscriptions","organizations_url":"https://api.github.com/users/kLabUM/orgs","repos_url":"https://api.github.com/users/kLabUM/repos","events_url":"https://api.github.com/users/kLabUM/events{/privacy}","received_events_url":"https://api.github.com/users/kLabUM/received_events","type":"Organization","site_admin":false},"html_url":"https://github.com/kLabUM/rrcf","description":"🌲 Implementation of the Robust Random Cut Forest algorithm for anomaly detection on streams","fork":false,"url":"https://api.github.com/repos/kLabUM/rrcf","forks_url":"https://api.github.com/repos/kLabUM/rrcf/forks","keys_url":"https://api.github.com/repos/kLabUM/rrcf/keys{/key_id}","collaborators_url":"https://api.github.com/repos/kLabUM/rrcf/collaborators{/collaborator}","teams_url":"https://api.github.com/repos/kLabUM/rrcf/teams","hooks_url":"https://api.github.com/repos/kLabUM/rrcf/hooks","issue_events_url":"https://api.github.com/repos/kLabUM/rrcf/issues/events{/number}","events_url":"https://api.github.com/repos/kLabUM/rrcf/events","assignees_url":"https://api.github.com/repos/kLabUM/rrcf/assignees{/user}","branches_url":"https://api.github.com/repos/kLabUM/rrcf/branches{/branch}","tags_url":"https://api.github.com/repos/kLabUM/rrcf/tags","blobs_url":"https://api.github.com/repos/kLabUM/rrcf/git/blobs{/sha}","git_tags_url":"https://api.github.com/repos/kLabUM/rrcf/git/tags{/sha}","git_refs_url":"https://api.github.com/repos/kLabUM/rrcf/git/refs{/sha}","trees_url":"https://api.github.com/repos/kLabUM/rrcf/git/trees{/sha}","statuses_url":"https://api.github.com/repos/kLabUM/rrcf/statuses/{sha}","languages_url":"https://api.github.com/repos/kLabUM/rrcf/languages","stargazers_url":"https://api.github.com/repos/kLabUM/rrcf/stargazers","contributors_url":"https://api.github.com/repos/kLabUM/rrcf/contributors","subscribers_url":"https://api.github.com/repos/kLabUM/rrcf/subscribers","subscription_url":"https://api.github.com/repos/kLabUM/rrcf/subscription","commits_url":"https://api.github.com/repos/kLabUM/rrcf/commits{/sha}","git_commits_url":"https://api.github.com/repos/kLabUM/rrcf/git/commits{/sha}","comments_url":"https://api.github.com/repos/kLabUM/rrcf/comments{/number}","issue_comment_url":"https://api.github.com/repos/kLabUM/rrcf/issues/comments{/number}","contents_url":"https://api.github.com/repos/kLabUM/rrcf/contents/{+path}","compare_url":"https://api.github.com/repos/kLabUM/rrcf/compare/{base}...{head}","merges_url":"https://api.github.com/repos/kLabUM/rrcf/merges","archive_url":"https://api.github.com/repos/kLabUM/rrcf/{archive_format}{/ref}","downloads_url":"https://api.github.com/repos/kLabUM/rrcf/downloads","issues_url":"https://api.github.com/repos/kLabUM/rrcf/issues{/number}","pulls_url":"https://api.github.com/repos/kLabUM/rrcf/pulls{/number}","milestones_url":"https://api.github.com/repos/kLabUM/rrcf/milestones{/number}","notifications_url":"https://api.github.com/repos/kLabUM/rrcf/notifications{?since,all,participating}","labels_url":"https://api.github.com/repos/kLabUM/rrcf/labels{/name}","releases_url":"https://api.github.com/repos/kLabUM/rrcf/releases{/id}","deployments_url":"https://api.github.com/repos/kLabUM/rrcf/deployments","created_at":"2018-10-20T05:39:05Z","updated_at":"2023-01-09T14:01:38Z","pushed_at":"2021-01-13T23:05:23Z","git_url":"git://github.com/kLabUM/rrcf.git","ssh_url":"git@github.com:kLabUM/rrcf.git","clone_url":"https://github.com/kLabUM/rrcf.git","svn_url":"https://github.com/kLabUM/rrcf","homepage":"https://klabum.github.io/rrcf/","size":4663,"stargazers_count":417,"watchers_count":417,"language":"Python","has_issues":true,"has_projects":true,"has_downloads":true,"has_wiki":true,"has_pages":true,"has_discussions":false,"forks_count":94,"mirror_url":null,"archived":false,"disabled":false,"open_issues_count":26,"license":{"key":"mit","name":"MIT License","spdx_id":"MIT","url":"https://api.github.com/licenses/mit","node_id":"MDc6TGljZW5zZTEz"},"allow_forking":true,"is_template":false,"web_commit_signoff_required":false,"topics":["anomaly-detection","detect-outliers","machine-learning","outliers","python","random-forest","robust-random-cut-forest","streaming-data","tree"],"visibility":"public","forks":94,"open_issues":26,"watchers":417,"default_branch":"master","permissions":{"admin":false,"maintain":false,"push":false,"triage":false,"pull":true}},"body":"I'm using the model in a streaming anomaly detection scenario where I want to generate the trees up to a certain point in time, then repeatedly advance the models from that starting point on various predicted time-series.\r\n\r\nHowever, the method I came up with was to \"train\" then save or copy the model, then run the copied version on the new time-series.\r\n\r\nHowever, it looks like the trees can't be pickled which is causing copy and save issues:\r\n\r\n    X = np.random.randn(100, 2)\r\n    tree = rrcf.RCTree(X)\r\n    copy.deepcopy(tree)\r\n\r\n    TypeError: can't pickle module objects\r\n\r\nThis would seem to indicate that somewhere in the RCTree class, the instances are referencing a module rather than an instance of a module.  Is there anyway to address this?  Either by using instances rather than modules or perhaps just an alternative way to copy/save the tree classes?\r\n","reactions":{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/69/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/kLabUM/rrcf/issues/69/timeline","performed_via_github_app":null,"state_reason":"completed"}},"event":"cross-referenced"}]