{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/91","repository_url":"https://api.github.com/repos/kLabUM/rrcf","labels_url":"https://api.github.com/repos/kLabUM/rrcf/issues/91/labels{/name}","comments_url":"https://api.github.com/repos/kLabUM/rrcf/issues/91/comments","events_url":"https://api.github.com/repos/kLabUM/rrcf/issues/91/events","html_url":"https://github.com/kLabUM/rrcf/issues/91","id":922246572,"node_id":"MDU6SXNzdWU5MjIyNDY1NzI=","number":91,"title":"QUESTION: Simulating sampling of points in streaming detection","user":{"login":"stianvale","id":11663193,"node_id":"MDQ6VXNlcjExNjYzMTkz","avatar_url":"https://avatars.githubusercontent.com/u/11663193?v=4","gravatar_id":"","url":"https://api.github.com/users/stianvale","html_url":"https://github.com/stianvale","followers_url":"https://api.github.com/users/stianvale/followers","following_url":"https://api.github.com/users/stianvale/following{/other_user}","gists_url":"https://api.github.com/users/stianvale/gists{/gist_id}","starred_url":"https://api.github.com/users/stianvale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stianvale/subscriptions","organizations_url":"https://api.github.com/users/stianvale/orgs","repos_url":"https://api.github.com/users/stianvale/repos","events_url":"https://api.github.com/users/stianvale/events{/privacy}","received_events_url":"https://api.github.com/users/stianvale/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-06-16T07:56:46Z","updated_at":"2021-06-21T09:22:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi! \r\nI've tested both your implementation of 'streaming detection' and 'batch detection'. So far, I'm getting the best results with the 'batch detection'. However, I want to use the streaming approach to dynamically update the model according to a continuous stream of data. \r\n\r\nMy current understanding is that 'batch detection' performs better because of the random sampling of points. With 'streaming detection', all trees contain the same points. Therefore, I tested an approach where some points are randomly deleted from trees after calculating the codisp. That way, the trees will contain different points, which in way simulates random sampling of points. My current results tells me that this works well. \r\n\r\nDoes this sound like a valid alternative to the standard 'streaming detection', or are there some traps I'm missing here? \r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/kLabUM/rrcf/issues/91/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/kLabUM/rrcf/issues/91/timeline","performed_via_github_app":null,"state_reason":null}