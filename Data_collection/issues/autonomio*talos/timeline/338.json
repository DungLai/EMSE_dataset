[{"url":"https://api.github.com/repos/autonomio/talos/issues/comments/507565380","html_url":"https://github.com/autonomio/talos/issues/338#issuecomment-507565380","issue_url":"https://api.github.com/repos/autonomio/talos/issues/338","id":507565380,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNzU2NTM4MA==","user":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false},"created_at":"2019-07-02T07:57:03Z","updated_at":"2019-07-02T07:57:03Z","author_association":"CONTRIBUTOR","body":"Please share your parameter dictionary for reference. And do make sure to check out the [corresponding section](https://autonomio.github.io/docs_talos/#input-formats) regarding accepted input formats in the docs.","reactions":{"url":"https://api.github.com/repos/autonomio/talos/issues/comments/507565380/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false}},{"id":2453449835,"node_id":"MDEzOkFzc2lnbmVkRXZlbnQyNDUzNDQ5ODM1","url":"https://api.github.com/repos/autonomio/talos/issues/events/2453449835","actor":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false},"event":"assigned","commit_id":null,"commit_url":null,"created_at":"2019-07-02T07:57:07Z","assignee":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false},"performed_via_github_app":null},{"id":2453449974,"node_id":"MDEyOkxhYmVsZWRFdmVudDI0NTM0NDk5NzQ=","url":"https://api.github.com/repos/autonomio/talos/issues/events/2453449974","actor":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false},"event":"labeled","commit_id":null,"commit_url":null,"created_at":"2019-07-02T07:57:10Z","label":{"name":"investigation","color":"c5def5"},"performed_via_github_app":null},{"url":"https://api.github.com/repos/autonomio/talos/issues/comments/507599265","html_url":"https://github.com/autonomio/talos/issues/338#issuecomment-507599265","issue_url":"https://api.github.com/repos/autonomio/talos/issues/338","id":507599265,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNzU5OTI2NQ==","user":{"login":"dangalea","id":45002049,"node_id":"MDQ6VXNlcjQ1MDAyMDQ5","avatar_url":"https://avatars.githubusercontent.com/u/45002049?v=4","gravatar_id":"","url":"https://api.github.com/users/dangalea","html_url":"https://github.com/dangalea","followers_url":"https://api.github.com/users/dangalea/followers","following_url":"https://api.github.com/users/dangalea/following{/other_user}","gists_url":"https://api.github.com/users/dangalea/gists{/gist_id}","starred_url":"https://api.github.com/users/dangalea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dangalea/subscriptions","organizations_url":"https://api.github.com/users/dangalea/orgs","repos_url":"https://api.github.com/users/dangalea/repos","events_url":"https://api.github.com/users/dangalea/events{/privacy}","received_events_url":"https://api.github.com/users/dangalea/received_events","type":"User","site_admin":false},"created_at":"2019-07-02T09:32:58Z","updated_at":"2019-07-02T09:32:58Z","author_association":"NONE","body":"My parameter dictionary is as follows:\r\n\r\n```\r\np = {\r\n    \"data_aug\" : [True, False],\r\n    \"conv_layers\" : [1, 2, 3],\r\n    \"batch_norm_pos\" : [\"none\", \"before\", \"after\"],\r\n    \"first_layer_filters\" : (1, 100, 1),\r\n    \"second_layer_filters\" : (1, 100, 1),\r\n    \"third_layer_filters\" : (1, 100, 1),\r\n    \"first_layer_window\" : (1, 5, 1),\r\n    \"second_layer_window\" : (1, 5, 1),\r\n    \"third_layer_window\" : (1, 5, 1),\r\n    \"first_conv_layer_reg_norm\" : [True, False],\r\n    \"second_conv_layer_reg_norm\" : [True, False],\r\n    \"third_conv_layer_reg_norm\" : [True, False],\r\n    \"first_conv_layer_reg_value\" : (0, 0.1, 0.0001),\r\n    \"second_conv_layer_reg_value\" : (0, 0.1, 0.0001),\r\n    \"third_conv_layer_reg_value\" : (0, 0.1, 0.0001),\r\n    \"first_dense_layer_reg_norm\" : [True, False],\r\n    \"second_dense_layer_reg_norm\" : [True, False],\r\n    \"third_dense_layer_reg_norm\" : [True, False],\r\n    \"first_dense_layer_reg_value\" : (0, 1, 0.001),\r\n    \"second_dense_layer_reg_value\" : (0, 1, 0.001),\r\n    \"third_dense_layer_reg_value\" : (0, 1, 0.001),\r\n    \"dense_layers\" : [1, 2, 3],\r\n    \"first_layer_neurons\" : (1, 100, 1),\r\n    \"second_layer_neurons\" : (1, 100, 1),\r\n    \"third_layer_neurons\" : (1, 100, 1),\r\n    \"dropout\" : [True, False],\r\n    \"dropout_rate\" : (0, 1, 0.01),\r\n    \"activation\" : [\"relu\", \"elu\"],\r\n    \"optimizer\" : [\"rmsprop\", \"adam\", \"nadam\", \"sgd\"], \r\n    \"learning_rate\" : (0, 5, 0.01), \r\n    \"decay\" : (0, 5, 0.1) , \r\n    \"batch_size\" : [32, 64, 100, 200, 500]\r\n}\r\n\r\n```\r\nwhile  my model function is:\r\n\r\n```\r\ndef` dl_model(x, y, params=p, data_val=data_val, labels_val=labels_val, aug_data=aug_data, aug_labels=aug_labels):\r\n\r\n    if params['data_aug'] == True:\r\n        training_data = aug_data\r\n        training_labels = aug_labels\r\n    else:\r\n        training_data = data_train\r\n        training_labels = labels_train\r\n    \r\n    model = models.Sequential()\r\n    \r\n    if params[\"second_conv_layer_reg_norm\"] == True:\r\n        model.add(layers.Conv2D(params[\"first_layer_filters\"], (params[\"first_layer_window\"], params[\"first_layer_window\"]), input_shape=training_data.shape[1:], kernel_regularizer=regularizers.l2(params[\"first_conv_layer_reg_value\"])))\r\n    else:\r\n        model.add(layers.Conv2D(params[\"first_layer_filters\"], (params[\"first_layer_window\"], params[\"first_layer_window\"]), input_shape=training_data.shape[1:]))\r\n    model.add(layers.Activation(params[\"activation\"]))\r\n    model.add(layers.MaxPooling2D(2, 2))\r\n\r\n    if params[\"conv_layers\"] > 2:\r\n        if params[\"batch_norm_pos\" == \"before\"]:\r\n            model.add(layers.BatchNormalization())\r\n        if params[\"second_conv_layer_reg_norm\"] == True:\r\n            model.add(layers.Conv2D(params[\"second_layer_filters\"], (params[\"second_layer_window\"], params[\"second_layer_window\"]), kernel_regularizer=regularizers.l2(params[\"second_conv_layer_reg_value\"])))\r\n        else:\r\n            model.add(layers.Conv2D(params[\"second_layer_filters\"], (params[\"second_layer_window\"], params[\"second_layer_window\"])))\r\n        \r\n        if params[\"batch_norm_pos\" == \"after\"]:\r\n            model.add(layers.BatchNormalization())\r\n        model.add(layers.Activation(params[\"activation\"]))\r\n        model.add(layers.MaxPooling2D(2, 2))\r\n\r\n    if params[\"conv_layers\"] == 3:\r\n        if params[\"batch_norm_pos\" == \"before\"]:\r\n            model.add(layers.BatchNormalization())\r\n        if params[\"third_conv_layer_reg_norm\"] == True:\r\n            model.add(layers.Conv2D(params[\"third_layer_filters\"], (params[\"third_layer_window\"], params[\"third_layer_window\"]), kernel_regularizer=regularizers.l2(params[\"third_conv_layer_reg_value\"])))\r\n        else:\r\n            model.add(layers.Conv2D(params[\"third_layer_filters\"], (params[\"third_layer_window\"], params[\"third_layer_window\"])))\r\n        if params[\"batch_norm_pos\" == \"after\"]:\r\n            model.add(layers.BatchNormalization())\r\n        model.add(layers.Activation(params[\"activation\"]))\r\n        model.add(layers.MaxPooling2D(2, 2))\r\n\r\n    model.add(layers.Flatten())\r\n\r\n    if params[\"batch_norm_pos\" == \"before\"]:\r\n        model.add(layers.BatchNormalization())\r\n    if params[\"first_dense_layer_reg_norm\"] == True:\r\n        model.add(layers.Dense(params[\"first_layer_neurons\"], kernel_regularizer=regularizers.l2(params[\"first_dense_layer_reg_value\"])))\r\n    else:\r\n        model.add(layers.Dense(params[\"first_layer_neurons\"]))\r\n    if params[\"batch_norm_pos\" == \"after\"]:\r\n        model.add(layers.BatchNormalization())\r\n    model.add(layers.Activation(params[\"activation\"]))\r\n    \r\n    if params[\"dropout\"] == True:\r\n        model.add(layers.Dropout(params[\"dropout_rate\"]))\r\n\r\n    if params[\"dense_layers\"] > 2:\r\n        if params[\"batch_norm_pos\" == \"before\"]:\r\n            model.add(layers.BatchNormalization())\r\n        if params[\"second_dense_layer_reg_norm\"] == True:\r\n            model.add(layers.Dense(params[\"second_layer_neurons\"], kernel_regularizer=regularizers.l2(params[\"second_dense_layer_reg_value\"])))\r\n        else:\r\n            model.add(layers.Dense(params[\"second_layer_neurons\"]))\r\n        if params[\"batch_norm_pos\" == \"after\"]:\r\n                model.add(layers.BatchNormalization())\r\n        model.add(layers.Activation(params[\"activation\"]))\r\n        \r\n    if params[\"dense_layers\"] == 3:\r\n        if params[\"batch_norm_pos\" == \"before\"]:\r\n            model.add(layers.BatchNormalization())\r\n        if params[\"third_dense_layer_reg_norm\"] == True:\r\n            model.add(layers.Dense(params[\"third_layer_neurons\"], kernel_regularizer=regularizers.l2(params[\"first_dense_layer_reg_value\"])))\r\n        else:\r\n            model.add(layers.Dense(params[\"third_layer_neurons\"]))\r\n        if params[\"batch_norm_pos\" == \"after\"]:\r\n                model.add(layers.BatchNormalization())\r\n        model.add(layers.Activation(params[\"activation\"]))\r\n    \r\n    model.add(layers.Dense(1, activation='sigmoid'))\r\n    \r\n    if params[\"activation\"] == \"rmsprop\":\r\n        opt = keras.optimizers.RMSprop(lr=params[\"learning_rate\"], decay=params[\"decay\"])\r\n    elif params[\"activation\"] == \"adam\":\r\n        opt = keras.optimizers.Adam(lr=params[\"learning_rate\"], decay=params[\"decay\"])\r\n    elif params[\"activation\"] == \"nadam\":\r\n        opt = keras.optimizers.Nadam(lr=params[\"learning_rate\"], decay=params[\"decay\"])\r\n    elif param[\"activation\"] == \"sgd\":\r\n        opt = keras.optimizers.SGD(lr=params[\"learning_rate\"], decay=params[\"decay\"])\r\n    \r\n    model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc'])\r\n    \r\n    #callback to save the best \r\n    early_stop = callbacks.EarlyStopping(monitor=\"val_loss\", patience=30, restore_best_weights=True)\r\n    history = model.fit(x=data_train, y=labels_train, validation_data=(data_val, labels_val), shuffle=True, epochs=150, verbose=0, batch_size=params[\"batch_size\"], callbacks=[early_stop])\r\n\r\n    return history, model\r\n\r\n```\r\n\r\nand I am using ta.Scan as follows:\r\n\r\n```\r\nt = ta.Scan(data_train, labels_train,\r\n            params=p,\r\n            model=dl_model,\r\n            grid_downsample=0.9)\r\n```","reactions":{"url":"https://api.github.com/repos/autonomio/talos/issues/comments/507599265/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dangalea","id":45002049,"node_id":"MDQ6VXNlcjQ1MDAyMDQ5","avatar_url":"https://avatars.githubusercontent.com/u/45002049?v=4","gravatar_id":"","url":"https://api.github.com/users/dangalea","html_url":"https://github.com/dangalea","followers_url":"https://api.github.com/users/dangalea/followers","following_url":"https://api.github.com/users/dangalea/following{/other_user}","gists_url":"https://api.github.com/users/dangalea/gists{/gist_id}","starred_url":"https://api.github.com/users/dangalea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dangalea/subscriptions","organizations_url":"https://api.github.com/users/dangalea/orgs","repos_url":"https://api.github.com/users/dangalea/repos","events_url":"https://api.github.com/users/dangalea/events{/privacy}","received_events_url":"https://api.github.com/users/dangalea/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/autonomio/talos/issues/comments/507618460","html_url":"https://github.com/autonomio/talos/issues/338#issuecomment-507618460","issue_url":"https://api.github.com/repos/autonomio/talos/issues/338","id":507618460,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNzYxODQ2MA==","user":{"login":"dangalea","id":45002049,"node_id":"MDQ6VXNlcjQ1MDAyMDQ5","avatar_url":"https://avatars.githubusercontent.com/u/45002049?v=4","gravatar_id":"","url":"https://api.github.com/users/dangalea","html_url":"https://github.com/dangalea","followers_url":"https://api.github.com/users/dangalea/followers","following_url":"https://api.github.com/users/dangalea/following{/other_user}","gists_url":"https://api.github.com/users/dangalea/gists{/gist_id}","starred_url":"https://api.github.com/users/dangalea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dangalea/subscriptions","organizations_url":"https://api.github.com/users/dangalea/orgs","repos_url":"https://api.github.com/users/dangalea/repos","events_url":"https://api.github.com/users/dangalea/events{/privacy}","received_events_url":"https://api.github.com/users/dangalea/received_events","type":"User","site_admin":false},"created_at":"2019-07-02T10:31:25Z","updated_at":"2019-07-02T10:31:25Z","author_association":"NONE","body":"I have managed to fix my issue. It seems that the model function's first four variables need to be <training data, training_labels, val_data, val_labels> in that order. It would be good if this was explicitly described in the documentation.","reactions":{"url":"https://api.github.com/repos/autonomio/talos/issues/comments/507618460/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"dangalea","id":45002049,"node_id":"MDQ6VXNlcjQ1MDAyMDQ5","avatar_url":"https://avatars.githubusercontent.com/u/45002049?v=4","gravatar_id":"","url":"https://api.github.com/users/dangalea","html_url":"https://github.com/dangalea","followers_url":"https://api.github.com/users/dangalea/followers","following_url":"https://api.github.com/users/dangalea/following{/other_user}","gists_url":"https://api.github.com/users/dangalea/gists{/gist_id}","starred_url":"https://api.github.com/users/dangalea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dangalea/subscriptions","organizations_url":"https://api.github.com/users/dangalea/orgs","repos_url":"https://api.github.com/users/dangalea/repos","events_url":"https://api.github.com/users/dangalea/events{/privacy}","received_events_url":"https://api.github.com/users/dangalea/received_events","type":"User","site_admin":false}},{"id":2453895335,"node_id":"MDExOkNsb3NlZEV2ZW50MjQ1Mzg5NTMzNQ==","url":"https://api.github.com/repos/autonomio/talos/issues/events/2453895335","actor":{"login":"dangalea","id":45002049,"node_id":"MDQ6VXNlcjQ1MDAyMDQ5","avatar_url":"https://avatars.githubusercontent.com/u/45002049?v=4","gravatar_id":"","url":"https://api.github.com/users/dangalea","html_url":"https://github.com/dangalea","followers_url":"https://api.github.com/users/dangalea/followers","following_url":"https://api.github.com/users/dangalea/following{/other_user}","gists_url":"https://api.github.com/users/dangalea/gists{/gist_id}","starred_url":"https://api.github.com/users/dangalea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dangalea/subscriptions","organizations_url":"https://api.github.com/users/dangalea/orgs","repos_url":"https://api.github.com/users/dangalea/repos","events_url":"https://api.github.com/users/dangalea/events{/privacy}","received_events_url":"https://api.github.com/users/dangalea/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2019-07-02T10:31:25Z","state_reason":null,"performed_via_github_app":null}]