{"url":"https://api.github.com/repos/autonomio/talos/issues/421","repository_url":"https://api.github.com/repos/autonomio/talos","labels_url":"https://api.github.com/repos/autonomio/talos/issues/421/labels{/name}","comments_url":"https://api.github.com/repos/autonomio/talos/issues/421/comments","events_url":"https://api.github.com/repos/autonomio/talos/issues/421/events","html_url":"https://github.com/autonomio/talos/issues/421","id":498742380,"node_id":"MDU6SXNzdWU0OTg3NDIzODA=","number":421,"title":"[FEATURE REQUEST] add support for custom layers in `best_model()`","user":{"login":"bjtho08","id":885853,"node_id":"MDQ6VXNlcjg4NTg1Mw==","avatar_url":"https://avatars.githubusercontent.com/u/885853?v=4","gravatar_id":"","url":"https://api.github.com/users/bjtho08","html_url":"https://github.com/bjtho08","followers_url":"https://api.github.com/users/bjtho08/followers","following_url":"https://api.github.com/users/bjtho08/following{/other_user}","gists_url":"https://api.github.com/users/bjtho08/gists{/gist_id}","starred_url":"https://api.github.com/users/bjtho08/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bjtho08/subscriptions","organizations_url":"https://api.github.com/users/bjtho08/orgs","repos_url":"https://api.github.com/users/bjtho08/repos","events_url":"https://api.github.com/users/bjtho08/events{/privacy}","received_events_url":"https://api.github.com/users/bjtho08/received_events","type":"User","site_admin":false},"labels":[{"id":923120513,"node_id":"MDU6TGFiZWw5MjMxMjA1MTM=","url":"https://api.github.com/repos/autonomio/talos/labels/priority:%20MEDIUM","name":"priority: MEDIUM","color":"FFA500","default":false,"description":"medium priority"},{"id":1809233244,"node_id":"MDU6TGFiZWwxODA5MjMzMjQ0","url":"https://api.github.com/repos/autonomio/talos/labels/topic:%20best-model","name":"topic: best-model","color":"ffffff","default":false,"description":""}],"state":"closed","locked":false,"assignee":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false},"assignees":[{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2019-09-26T08:38:47Z","updated_at":"2022-04-14T12:22:50Z","closed_at":"2022-04-14T12:22:50Z","author_association":"NONE","active_lock_reason":null,"body":"### Overview\r\nI built a model in Keras using the functional API. I also use the `keras_contrib` and `keras_radam` libraries to add new activations (Swish) and optimizers (RAdam) not yet implemented in `keras`. Talos initializes and trains all iterations of the model without issue, but if I want to recall the best model or deploy the model, it fails with an error from `keras.utils.generic_utils.deserialize_keras_object()`.\r\nThe error in question is `ValueError: Unknown layer: Swish`.\r\n\r\n#### Prerequisites\r\n- [x] My Python version is 3.5 or higher\r\n- [x] I have searched through the issues [Issues](https://github.com/autonomio/talos/issues) for a duplicate\r\n- [x] I've tested that my Keras model works as a stand-alone\r\n\r\n```python\r\n>>> talos.__version__\r\n'0.6.0'\r\n```\r\n#### Expected behavior\r\n`scan_object.best_model(metric=\"acc\")` should result in a new instance of the best performing model.\r\n\r\n#### Actual behavior\r\n\r\n```python\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-29-2e96fabca5ec> in <module>\r\n      1 #ta.Deploy(t,\"U-nets\", metric=\"acc\")\r\n----> 2 scan_object.best_model(metric=\"acc\")\r\n\r\n~/.pyenv/versions/miniconda3-4.3.30/envs/tf_gpu/lib/python3.6/site-packages/talos/scan/scan_addon.py in func_best_model(scan_object, metric, asc)\r\n     12     from ..utils.best_model import best_model, activate_model\r\n     13     model_no = best_model(scan_object, metric, asc)\r\n---> 14     out = activate_model(scan_object, model_no)\r\n     15 \r\n     16     return out\r\n\r\n~/.pyenv/versions/miniconda3-4.3.30/envs/tf_gpu/lib/python3.6/site-packages/talos/utils/best_model.py in activate_model(self, model_id)\r\n     18     '''Loads the model from the json that is stored in the Scan object'''\r\n     19 \r\n---> 20     model = model_from_json(self.saved_models[model_id])\r\n     21     model.set_weights(self.saved_weights[model_id])\r\n     22 \r\n\r\n~/.pyenv/versions/miniconda3-4.3.30/envs/tf_gpu/lib/python3.6/site-packages/keras/engine/saving.py in model_from_json(json_string, custom_objects)\r\n    490     config = json.loads(json_string)\r\n    491     from ..layers import deserialize\r\n--> 492     return deserialize(config, custom_objects=custom_objects)\r\n    493 \r\n    494 \r\n\r\n~/.pyenv/versions/miniconda3-4.3.30/envs/tf_gpu/lib/python3.6/site-packages/keras/layers/__init__.py in deserialize(config, custom_objects)\r\n     53                                     module_objects=globs,\r\n     54                                     custom_objects=custom_objects,\r\n---> 55                                     printable_module_name='layer')\r\n\r\n~/.pyenv/versions/miniconda3-4.3.30/envs/tf_gpu/lib/python3.6/site-packages/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)\r\n    143                     config['config'],\r\n    144                     custom_objects=dict(list(_GLOBAL_CUSTOM_OBJECTS.items()) +\r\n--> 145                                         list(custom_objects.items())))\r\n    146             with CustomObjectScope(custom_objects):\r\n    147                 return cls.from_config(config['config'])\r\n\r\n~/.pyenv/versions/miniconda3-4.3.30/envs/tf_gpu/lib/python3.6/site-packages/keras/engine/network.py in from_config(cls, config, custom_objects)\r\n   1020         # First, we create all layers and enqueue nodes to be processed\r\n   1021         for layer_data in config['layers']:\r\n-> 1022             process_layer(layer_data)\r\n   1023         # Then we process nodes in order of layer depth.\r\n   1024         # Nodes that cannot yet be processed (if the inbound node\r\n\r\n~/.pyenv/versions/miniconda3-4.3.30/envs/tf_gpu/lib/python3.6/site-packages/keras/engine/network.py in process_layer(layer_data)\r\n   1006 \r\n   1007             layer = deserialize_layer(layer_data,\r\n-> 1008                                       custom_objects=custom_objects)\r\n   1009             created_layers[layer_name] = layer\r\n   1010 \r\n\r\n~/.pyenv/versions/miniconda3-4.3.30/envs/tf_gpu/lib/python3.6/site-packages/keras/layers/__init__.py in deserialize(config, custom_objects)\r\n     53                                     module_objects=globs,\r\n     54                                     custom_objects=custom_objects,\r\n---> 55                                     printable_module_name='layer')\r\n\r\n~/.pyenv/versions/miniconda3-4.3.30/envs/tf_gpu/lib/python3.6/site-packages/keras/utils/generic_utils.py in deserialize_keras_object(identifier, module_objects, custom_objects, printable_module_name)\r\n    136             if cls is None:\r\n    137                 raise ValueError('Unknown ' + printable_module_name +\r\n--> 138                                  ': ' + class_name)\r\n    139         if hasattr(cls, 'from_config'):\r\n    140             custom_objects = custom_objects or {}\r\n\r\nValueError: Unknown layer: Swish\r\n```\r\n\r\n#### Model details\r\n<details><summary>MWE</summary>\r\n\r\n```python\r\nimport keras\r\nfrom keras.models import Model\r\nfrom keras.layers import Input, Conv2D, BatchNormalization\r\nfrom keras.layers.advanced_activations import ReLU\r\nimport talos as ta\r\n\r\ndef u_net(shape, nb_filters=64, conv_size=3, init=\"glorot_uniform\",\r\n          activation=ReLU, output_channels=5):\r\n\r\n    i = Input(shape, name=\"input_layer\")\r\n    n = Conv2D(nb_filters, conv_size, padding=\"same\", kernel_initializer=init,\r\n        name=\"block1_conv1\")(i)\r\n    n = activation(name=\"block1_{}1\".format(activation.__name__))(n)\r\n    n = BatchNormalization(name=\"block1_bn1\")(n)\r\n    n = Conv2D(nb_filters, conv_size, padding=\"same\", kernel_initializer=init,\r\n        name=\"block1_conv2\")(n)\r\n    n = activation(name=\"block1_{}2\".format(activation.__name__))(n)\r\n    n = BatchNormalization(name=\"block1_bn2\")(n)\r\n    o = Conv2D(output_channels, 1, activation=\"softmax\", name=\"conv_out\")(n)\r\n    return Model(inputs=i, outputs=o)\r\n\r\ndef talos_model():\r\n    model = u_net(SHAPE, nb_filters=p[\"nb_filters\"], activation=p[\"act\"])\r\n    model.compile(optimizer=p[\"opt\"](lr=1e-4))\r\n    history = model.fit(x=X, y=Y)\r\n    return model, history\r\n\r\nscan_object = ta.Scan(x=X, y=Y, model=talos_model, params=p)\r\n```\r\n\r\n</details>\r\n\r\n<details><summary>parameter dictionary</summary>\r\n\r\n```python\r\n# fit params\r\nfrom keras.optimizers import Adam\r\nfrom keras.layers.advanced_activations import ReLU\r\nfrom keras_radam import RAdam\r\nfrom keras_contrib.layers.advanced_activations.swish import Swish\r\n\r\np = {\r\n    \"nb_filters\": [12, 16, 32],\r\n    \"act\": [Swish, ReLU],\r\n    \"opt\": [RAdam, Adam]\r\n}\r\n```\r\n\r\n</details>\r\n\r\n- [x] My bug report includes an input model\r\n- [x] My bug report includes a parameter dictionary\r\n- [x] My bug report includes a `Scan()` command\r\n- [ ] My bug report question includes a link to a sample of the data\r\n\r\nI chose to leave out sample data because it is not relevant to the issue at hand. For the same reason, I chose to create a Minimal Working Example rather than pasting the entire model, which is quite complicated and does not help to locate the issue.","closed_by":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/autonomio/talos/issues/421/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/autonomio/talos/issues/421/timeline","performed_via_github_app":null,"state_reason":"completed"}