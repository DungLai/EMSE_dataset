{"url":"https://api.github.com/repos/autonomio/talos/issues/111","repository_url":"https://api.github.com/repos/autonomio/talos","labels_url":"https://api.github.com/repos/autonomio/talos/issues/111/labels{/name}","comments_url":"https://api.github.com/repos/autonomio/talos/issues/111/comments","events_url":"https://api.github.com/repos/autonomio/talos/issues/111/events","html_url":"https://github.com/autonomio/talos/issues/111","id":369784872,"node_id":"MDU6SXNzdWUzNjk3ODQ4NzI=","number":111,"title":"TensorFlow optimizers / more generally on optimizers","user":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false},"labels":[{"id":1346231113,"node_id":"MDU6TGFiZWwxMzQ2MjMxMTEz","url":"https://api.github.com/repos/autonomio/talos/labels/priority:%20ICE","name":"priority: ICE","color":"b5edff","default":false,"description":"For now, this is going to be iced."}],"state":"closed","locked":false,"assignee":{"login":"C0NTRIBUTE","id":39023769,"node_id":"MDQ6VXNlcjM5MDIzNzY5","avatar_url":"https://avatars.githubusercontent.com/u/39023769?v=4","gravatar_id":"","url":"https://api.github.com/users/C0NTRIBUTE","html_url":"https://github.com/C0NTRIBUTE","followers_url":"https://api.github.com/users/C0NTRIBUTE/followers","following_url":"https://api.github.com/users/C0NTRIBUTE/following{/other_user}","gists_url":"https://api.github.com/users/C0NTRIBUTE/gists{/gist_id}","starred_url":"https://api.github.com/users/C0NTRIBUTE/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/C0NTRIBUTE/subscriptions","organizations_url":"https://api.github.com/users/C0NTRIBUTE/orgs","repos_url":"https://api.github.com/users/C0NTRIBUTE/repos","events_url":"https://api.github.com/users/C0NTRIBUTE/events{/privacy}","received_events_url":"https://api.github.com/users/C0NTRIBUTE/received_events","type":"User","site_admin":false},"assignees":[{"login":"C0NTRIBUTE","id":39023769,"node_id":"MDQ6VXNlcjM5MDIzNzY5","avatar_url":"https://avatars.githubusercontent.com/u/39023769?v=4","gravatar_id":"","url":"https://api.github.com/users/C0NTRIBUTE","html_url":"https://github.com/C0NTRIBUTE","followers_url":"https://api.github.com/users/C0NTRIBUTE/followers","following_url":"https://api.github.com/users/C0NTRIBUTE/following{/other_user}","gists_url":"https://api.github.com/users/C0NTRIBUTE/gists{/gist_id}","starred_url":"https://api.github.com/users/C0NTRIBUTE/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/C0NTRIBUTE/subscriptions","organizations_url":"https://api.github.com/users/C0NTRIBUTE/orgs","repos_url":"https://api.github.com/users/C0NTRIBUTE/repos","events_url":"https://api.github.com/users/C0NTRIBUTE/events{/privacy}","received_events_url":"https://api.github.com/users/C0NTRIBUTE/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2018-10-13T09:26:20Z","updated_at":"2019-07-30T20:14:57Z","closed_at":"2019-07-30T20:14:57Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"It seems that there is a notable speedup just from using `keras.optimizers.TFOptimizer()` and wrapping one of the optimizers in `tf.train` inside it. So for example what would otherwise be: \r\n\r\n```\r\nfrom keras.optimizers import Adam\r\n\r\n...optimizers=Adam\r\n```\r\n\r\nWould now become: \r\n\r\n```\r\nfrom keras.optimizers import TFOptimizer\r\nfrom tf.train import AdamOptimizer\r\n\r\n...optimizers=TFOptimizer(AdamOptimizer)\r\n\r\n```\r\n\r\nI spent the whole day yesterday working on integrating this in a way where one could just use a string value and then have a switch `tf_optimizer` in Scan() arguments to opt for using a tf optimizer instead of Keras (for the sake of speedup) but there are several important things that make this not so simple. \r\n\r\nFirst is the use cases: \r\n\r\n1) user inputs string\r\n2) user inputs a Keras optimizer object \r\n3) user inputs a Tensorflow optimizer object (same as Keras)\r\n4) user inputs a Tensorflow optimizer object (different from Keras)\r\n5) user inputs a custom TensorFlow optimizer object \r\n\r\nThe distinction between 3 and 4 is how we already have the learning rate normalizer in place for case 2 (it should also support case 1 or throw a clear error), so case 3 can be handled together with that, whereas case 4 can't. So case 4 and case 5 are similar in that way. Further, it seems that the learning rate normalizer could also be made part of this and have it as an argument in Scan. \r\n\r\nIn summary:\r\n\r\n| case        | type           | lr_normalizer  |\r\n| ------------- |:-------------:| -----:|\r\n| 1 | str | yes |\r\n| 2 | object | yes |\r\n| 3 | object | yes|\r\n| 4 | object | no |\r\n| 5 | object | no |\r\n\r\nThis leads to the observation that it's probably better to always first convert string value to the corresponding object, and throw an error unless its one of the 7 available in Keras (more can be added as they might become added to Keras).\r\n\r\nThen is the topic of learning rate normalizer, here we have the cases: \r\n\r\n- user inputs actual learning rates (no normalization)\r\n- user inputs no learning rates (something is needed by TensorFlow optimizers) \r\n- user inputs relative learning rates\r\n   - normalized the current way\r\n   - normalized behind the scenes through Scan() argument `lr_normalize`\r\n\r\nSo cases 4 and 5 are simple in the sense that they are always handled in the same way, and the optimizer object can be \"packaged\" in the Talos codes and the user only has to add the optimizers to the params dictionary as they would otherwise. Then Talos simply checks if the inputs are on the list of the 7 optimizers (points 2 and 3 above), and if not, treats them as either standard or custom tf optimizers. \r\n\r\nFor the case 1, it will be first converted into object, so now 1 and 2 becomes identical and if `tf_optimizer=True` then as the next step the corresponding tf optimizer is picked, and the packaging is same as with 4 and 5 except if `lr_optimizer=True` where this will be calculated and added (which avoids the need for using lr_normalizer() in the way it's being used now as part of the input model \r\n","closed_by":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/autonomio/talos/issues/111/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/autonomio/talos/issues/111/timeline","performed_via_github_app":null,"state_reason":"completed"}