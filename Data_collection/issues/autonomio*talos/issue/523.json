{"url":"https://api.github.com/repos/autonomio/talos/issues/523","repository_url":"https://api.github.com/repos/autonomio/talos","labels_url":"https://api.github.com/repos/autonomio/talos/issues/523/labels{/name}","comments_url":"https://api.github.com/repos/autonomio/talos/issues/523/comments","events_url":"https://api.github.com/repos/autonomio/talos/issues/523/events","html_url":"https://github.com/autonomio/talos/issues/523","id":749261401,"node_id":"MDU6SXNzdWU3NDkyNjE0MDE=","number":523,"title":"Error with the tutorial example","user":{"login":"gireeshkbogu","id":3885659,"node_id":"MDQ6VXNlcjM4ODU2NTk=","avatar_url":"https://avatars.githubusercontent.com/u/3885659?v=4","gravatar_id":"","url":"https://api.github.com/users/gireeshkbogu","html_url":"https://github.com/gireeshkbogu","followers_url":"https://api.github.com/users/gireeshkbogu/followers","following_url":"https://api.github.com/users/gireeshkbogu/following{/other_user}","gists_url":"https://api.github.com/users/gireeshkbogu/gists{/gist_id}","starred_url":"https://api.github.com/users/gireeshkbogu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gireeshkbogu/subscriptions","organizations_url":"https://api.github.com/users/gireeshkbogu/orgs","repos_url":"https://api.github.com/users/gireeshkbogu/repos","events_url":"https://api.github.com/users/gireeshkbogu/events{/privacy}","received_events_url":"https://api.github.com/users/gireeshkbogu/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-11-24T01:21:37Z","updated_at":"2020-11-24T01:27:07Z","closed_at":"2020-11-24T01:27:07Z","author_association":"NONE","active_lock_reason":null,"body":"I am trying to reproduce your example and ended up with the following error. How can I resolve this?  thanks. \r\n\r\ncode\r\n```\r\nfrom numpy import loadtxt\r\n\r\ndataset = loadtxt(\"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv\", delimiter=\",\")\r\nx = dataset[:,0:8]\r\ny = dataset[:, 8]\r\n\r\nfrom tensorflow.keras.models import Sequential\r\nfrom tensorflow.keras.layers import Dense\r\n\r\ndef diabetes():\r\n    \r\n    model = Sequential()\r\n    model.add(Dense(12, input_dim=8, activation='relu'))\r\n    model.add(Dense(8, activation='relu'))\r\n    model.add(Dense(1, activation='sigmoid'))\r\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\r\n    model.fit(X, Y, epochs=100, batch_size=10, verbose=0)\r\n    \r\n    return model\r\n\r\nfrom tensorflow.keras.activations import relu, elu\r\n\r\np = {\r\n    'first_neuron': [12, 24, 48],\r\n    'activation': ['relu', 'elu'],\r\n    'batch_size': [10, 20, 30]\r\n}\r\n\r\n# add input parameters to the function\r\ndef diabetes(x_train, y_train, x_val, y_val, params):\r\n    \r\n    # replace the hyperparameter inputs with references to params dictionary \r\n    model = Sequential()\r\n    model.add(Dense(params['first_neuron'], input_dim=8, activation=params['activation']))\r\n    #model.add(Dense(8, activation=params['activation']))\r\n    model.add(Dense(1, activation='sigmoid'))\r\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\r\n    \r\n    # make sure history object is returned by model.fit()\r\n    out = model.fit(x=x, \r\n                    y=y,\r\n                    validation_data=[x_val, y_val],\r\n                    epochs=100,\r\n                    batch_size=params['batch_size'],\r\n                    verbose=0)\r\n    \r\n    # modify the output model\r\n    return out, model\r\n\r\n\r\nimport talos\r\n\r\nt = talos.Scan(x=x, y=y, params=p, model=diabetes, experiment_name='diabetes')\r\n```\r\n\r\nerror\r\n```\r\ntalos % python test.py\r\nUsing TensorFlow backend.\r\n  0%|                                                                                                                                                                                                    | 0/18 [00:00<?, ?it/s]2020-11-23 17:21:01.413704: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN)to use the following CPU instructions in performance-critical operations:  AVX2 FMA\r\nTo enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\r\n2020-11-23 17:21:01.444795: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7fcb9a649100 initialized for platform Host (this does not guarantee that XLA will be used). Devices:\r\n2020-11-23 17:21:01.444823: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 55, in <module>\r\n    t = talos.Scan(x=x, y=y, params=p, model=diabetes, experiment_name='diabetes')\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/talos/scan/Scan.py\", line 196, in __init__\r\n    scan_run(self)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/talos/scan/scan_run.py\", line 26, in scan_run\r\n    self = scan_round(self)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/talos/scan/scan_round.py\", line 19, in scan_round\r\n    self.model_history, self.round_model = ingest_model(self)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/talos/model/ingest_model.py\", line 10, in ingest_model\r\n    self.round_params)\r\n  File \"test.py\", line 47, in diabetes\r\n    verbose=0)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 108, in _method_wrapper\r\n    return method(self, *args, **kwargs)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 1133, in fit\r\n    return_dict=True)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 108, in _method_wrapper\r\n    return method(self, *args, **kwargs)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py\", line 1379, in evaluate\r\n    tmp_logs = test_function(iterator)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py\", line 780, in __call__\r\n    result = self._call(*args, **kwds)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py\", line 823, in _call\r\n    self._initialize(args, kwds, add_initializers_to=initializers)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py\", line 697, in _initialize\r\n    *args, **kwds))\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/eager/function.py\", line 2855, in _get_concrete_function_internal_garbage_collected\r\n    graph_function, _, _ = self._maybe_define_function(args, kwargs)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/eager/function.py\", line 3213, in _maybe_define_function\r\n    graph_function = self._create_graph_function(args, kwargs)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/eager/function.py\", line 3075, in _create_graph_function\r\n    capture_by_value=self._capture_by_value),\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/framework/func_graph.py\", line 986, in func_graph_from_py_func\r\n    func_outputs = python_func(*func_args, **func_kwargs)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py\", line 600, in wrapped_fn\r\n    return weak_wrapped_fn().__wrapped__(*args, **kwds)\r\n  File \"/Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/framework/func_graph.py\", line 973, in wrapper\r\n    raise e.ag_error_metadata.to_exception(e)\r\nValueError: in user code:\r\n\r\n    /Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py:1224 test_function  *\r\n        return step_function(self, iterator)\r\n    /Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py:1215 step_function  **\r\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\r\n    /Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/distribute/distribute_lib.py:1211 run\r\n        return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)\r\n    /Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/distribute/distribute_lib.py:2585 call_for_each_replica\r\n        return self._call_for_each_replica(fn, args, kwargs)\r\n    /Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/distribute/distribute_lib.py:2945 _call_for_each_replica\r\n        return fn(*args, **kwargs)\r\n    /Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py:1208 run_step  **\r\n        outputs = model.test_step(data)\r\n    /Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/keras/engine/training.py:1174 test_step\r\n        y_pred = self(x, training=False)\r\n    /Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py:976 __call__\r\n        self.name)\r\n    /Users/gireeshbogu/miniconda2/lib/python3.6/site-packages/tensorflow/python/keras/engine/input_spec.py:158 assert_input_compatibility\r\n        ' input tensors. Inputs received: ' + str(inputs))\r\n\r\n    ValueError: Layer sequential expects 1 inputs, but it received 2 input tensors. Inputs received: [<tf.Tensor 'IteratorGetNext:0' shape=(None, 8) dtype=float32>, <tf.Tensor 'ExpandDims:0' shape=(None, 1) dtype=float32>]\r\n\r\n  0%|                                                                                                                                                                                                    | 0/18 [00:01<?, ?it/s]\r\n\r\n```","closed_by":{"login":"gireeshkbogu","id":3885659,"node_id":"MDQ6VXNlcjM4ODU2NTk=","avatar_url":"https://avatars.githubusercontent.com/u/3885659?v=4","gravatar_id":"","url":"https://api.github.com/users/gireeshkbogu","html_url":"https://github.com/gireeshkbogu","followers_url":"https://api.github.com/users/gireeshkbogu/followers","following_url":"https://api.github.com/users/gireeshkbogu/following{/other_user}","gists_url":"https://api.github.com/users/gireeshkbogu/gists{/gist_id}","starred_url":"https://api.github.com/users/gireeshkbogu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gireeshkbogu/subscriptions","organizations_url":"https://api.github.com/users/gireeshkbogu/orgs","repos_url":"https://api.github.com/users/gireeshkbogu/repos","events_url":"https://api.github.com/users/gireeshkbogu/events{/privacy}","received_events_url":"https://api.github.com/users/gireeshkbogu/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/autonomio/talos/issues/523/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/autonomio/talos/issues/523/timeline","performed_via_github_app":null,"state_reason":"completed"}