{"url":"https://api.github.com/repos/autonomio/talos/issues/521","repository_url":"https://api.github.com/repos/autonomio/talos","labels_url":"https://api.github.com/repos/autonomio/talos/issues/521/labels{/name}","comments_url":"https://api.github.com/repos/autonomio/talos/issues/521/comments","events_url":"https://api.github.com/repos/autonomio/talos/issues/521/events","html_url":"https://github.com/autonomio/talos/issues/521","id":746989411,"node_id":"MDU6SXNzdWU3NDY5ODk0MTE=","number":521,"title":"Empty x and y CSV with Deploy() make impossible to use Restore()","user":{"login":"paloma-ecg","id":74738241,"node_id":"MDQ6VXNlcjc0NzM4MjQx","avatar_url":"https://avatars.githubusercontent.com/u/74738241?v=4","gravatar_id":"","url":"https://api.github.com/users/paloma-ecg","html_url":"https://github.com/paloma-ecg","followers_url":"https://api.github.com/users/paloma-ecg/followers","following_url":"https://api.github.com/users/paloma-ecg/following{/other_user}","gists_url":"https://api.github.com/users/paloma-ecg/gists{/gist_id}","starred_url":"https://api.github.com/users/paloma-ecg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/paloma-ecg/subscriptions","organizations_url":"https://api.github.com/users/paloma-ecg/orgs","repos_url":"https://api.github.com/users/paloma-ecg/repos","events_url":"https://api.github.com/users/paloma-ecg/events{/privacy}","received_events_url":"https://api.github.com/users/paloma-ecg/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-11-19T22:56:00Z","updated_at":"2021-04-01T07:52:00Z","closed_at":"2020-12-11T19:16:19Z","author_association":"NONE","active_lock_reason":null,"body":"First off, make sure to check your [support options](https://github.com/autonomio/talos#-how-to-get-support).\r\n\r\nThe preferred way to resolve usage related matters is through the [docs](https://autonomio.github.io/talos/#/) which are maintained up-to-date with the latest version of Talos.\r\n\r\nIf you do end up asking for support in a new issue, make sure to follow the below steps carefully.\r\n\r\n#### 1) Confirm the below\r\n\r\n- [x] I have looked for an answer in the [Docs](https://autonomio.github.io/talos)\r\n- [x] My Python version is 3.5 or higher\r\n- [x] I have searched through the issues [Issues](https://github.com/autonomio/talos/issues) for a duplicate\r\n- [x] I've tested that my Keras model works as a stand-alone\r\n\r\n#### 2) Include the output of:\r\n\r\n`talos.__version__` '1.0.0'\r\n\r\n#### 3) Explain clearly what you are trying to achieve\r\n\r\nI want to store my Scan object with Deploy and then get it back with Restore it.\r\n\r\n#### 4) Explain what you have already tried\r\n\r\nI've tried using different names and objects, even restarting the kernel. I get the ZIP data after using Deploy(), obtaining the message that \"data is not 2d, dummy data written instead\". As x and y CSV are empty, Restore() fails when reading them. The training data has `X.shape` is (13125, 200, 1) and `y.shape` (13125, 105) as it is categorical with 105 classes.\r\n\r\nI don't know if I'm using them wrong, but the Scan object data gets properly saved\r\n\r\n#### 5) Provide a code-complete reference\r\n\r\n- [x] My support question includes an input model\r\n- [x] My support question includes a parameter dictionary\r\n- [x] My support question includes a `Scan()` command\r\n- [ ] My support question includes a link to a sample of the data\r\n\r\nNOTE: If the data is sensitive and can't be shared, [create dummy data](https://scikit-learn.org/stable/modules/classes.html#samples-generator) that mimics it.\r\n\r\n**A self-contained Jupyter Notebook, Google Colab, or similar is highly preferred and will speed up helping you with your issue.**\r\n\r\n---\r\n```\r\ndef Model(x, y, x_val, y_val, params):\r\n\r\n    model = Sequential()\r\n    steps_per_epoch = y.shape[0] // params['batch_size']\r\n    validation_steps = x_val.shape[0] // params['batch_size']\r\n    \r\n    n_outputs = y.shape[1]\r\n    #conv1D\r\n    model.add(Conv1D(filters = params['filters']*16, kernel_size = params['kernel_size'], \r\n                        strides = params['strides'], batch_input_shape = (None, x.shape[1], x.shape[2])))\r\n    #model.add(BatchNormalization())\r\n    #model.add(Activation('tanh'))\r\n    #model.add(Dropout(0.5))\r\n\r\n    # Recurrent layer\r\n    #model.add(Dropout(params['dropout']))\r\n    model.add(LSTM(units = params['hidden_units']*2, return_sequences = True))\r\n    model.add(Dropout(params['dropout']))\r\n    #model.add(LSTM(units = n_h*2, return_sequences = True))\r\n    model.add(LSTM(units = params['hidden_units'], return_sequences = False))\r\n\r\n    model.add(Dropout(params['dropout']))\r\n    #model.add(BatchNormalization())\r\n    #model.add(Dropout(0.1))\r\n    #Dropout for regularization\r\n    model.add(Dense(n_outputs, activation = 'softmax'))\r\n    model.summary()\r\n    # Compile the model\r\n    #if params['optimizer'] == \"Adam\": a√±adir LR\r\n    model.compile(optimizer=params['optimizer'], loss=params['loss'], metrics=['accuracy'])\r\n\r\n    history = model.fit(x, y, epochs = params['epochs'], batch_size = params['batch_size'], \r\n                        steps_per_epoch = steps_per_epoch, callbacks = [early_stopper(params['min_delta'], patience=10, monitor = 'loss')],\r\n                       validation_data = (x_val, y_val), validation_steps = validation_steps)\r\n    \r\n    return history, model\r\n\r\np = {'hidden_units':[4, 8, 16, 32, 64, 128],\r\n     'batch_size': [50, 100, 150],\r\n     'kernel_size': [5, 7, 9],\r\n     'strides': [1, 2, 3],\r\n     'epochs': [30, 40, 50],\r\n     'dropout': [0, 0.2, 0.4, 0.6, 0.8],\r\n     'optimizer': ['Adam', 'Nadam'],\r\n     'kernel_initializer': ['uniform','normal'],\r\n     'loss': ['categorical_crossentropy'],\r\n     'last_activation': ['softmax'],\r\n     'weight_regulizer': [None],\r\n      'min_delta': [0.001],\r\n      'filters': [1, 2, 3, 4]}\r\n\r\n#2D data and numeric labels, make it suitable for the model\r\nX = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\r\ny = to_categorical(y_train)\r\n\r\nscan_object = talos.Scan(x=X, y=y, params=p, model=Model, experiment_name = 'first', val_split = .2, round_limit = 3, print_params = True)\r\n\r\na = talos.Deploy(scan_object, 'first_try', 'val_accuracy')\r\n\r\nobject = talos.Restore('first_try.zip')\r\n```\r\n","closed_by":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/autonomio/talos/issues/521/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/autonomio/talos/issues/521/timeline","performed_via_github_app":null,"state_reason":"completed"}