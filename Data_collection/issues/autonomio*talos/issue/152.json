{"url":"https://api.github.com/repos/autonomio/talos/issues/152","repository_url":"https://api.github.com/repos/autonomio/talos","labels_url":"https://api.github.com/repos/autonomio/talos/issues/152/labels{/name}","comments_url":"https://api.github.com/repos/autonomio/talos/issues/152/comments","events_url":"https://api.github.com/repos/autonomio/talos/issues/152/events","html_url":"https://github.com/autonomio/talos/issues/152","id":389081430,"node_id":"MDU6SXNzdWUzODkwODE0MzA=","number":152,"title":"Value Error when finetuning a pretrained model. Tensor must be from same graph.","user":{"login":"Umar-Ayub","id":20211196,"node_id":"MDQ6VXNlcjIwMjExMTk2","avatar_url":"https://avatars.githubusercontent.com/u/20211196?v=4","gravatar_id":"","url":"https://api.github.com/users/Umar-Ayub","html_url":"https://github.com/Umar-Ayub","followers_url":"https://api.github.com/users/Umar-Ayub/followers","following_url":"https://api.github.com/users/Umar-Ayub/following{/other_user}","gists_url":"https://api.github.com/users/Umar-Ayub/gists{/gist_id}","starred_url":"https://api.github.com/users/Umar-Ayub/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Umar-Ayub/subscriptions","organizations_url":"https://api.github.com/users/Umar-Ayub/orgs","repos_url":"https://api.github.com/users/Umar-Ayub/repos","events_url":"https://api.github.com/users/Umar-Ayub/events{/privacy}","received_events_url":"https://api.github.com/users/Umar-Ayub/received_events","type":"User","site_admin":false},"labels":[{"id":1004957408,"node_id":"MDU6TGFiZWwxMDA0OTU3NDA4","url":"https://api.github.com/repos/autonomio/talos/labels/topic:%20tensorflow","name":"topic: tensorflow","color":"ffffff","default":false,"description":"relates with tensorflow backend"},{"id":1004957685,"node_id":"MDU6TGFiZWwxMDA0OTU3Njg1","url":"https://api.github.com/repos/autonomio/talos/labels/topic:%20keras","name":"topic: keras","color":"ffffff","default":false,"description":"relates with keras backend"}],"state":"closed","locked":false,"assignee":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false},"assignees":[{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2018-12-10T00:06:14Z","updated_at":"2018-12-13T15:44:31Z","closed_at":"2018-12-13T15:44:31Z","author_association":"NONE","active_lock_reason":null,"body":"- [* ] I'm up-to-date with the latest release:\r\n- [* ] I've confirmed that my Keras model works outside of Talos.\r\n\r\nHey I am using Talos to finetune a pretrained CNN. I keep getting an error where it says that the input tensor to the finetuning part of the model should be connected to the pretrained model. I have treid multiple variations on this including trying a functional model yet I keep getting this error. Following is my model and parameter dictionary\r\n\r\n```python\r\ndef fundal_model(x, y, x_val, y_val, params): \r\n\r\n    model = Sequential()\r\n    model.add(base_model2)\r\n    model.add(layers.Flatten())\r\n    model.add(layers.Dense(params['first_neuron'], activation='relu'))\r\n    model.add(Dropout(params['dropout']))\r\n    hidden_layers(model, params, y.shape[1])\r\n    model.add(Dense(5, activation='sigmoid'))\r\n\r\n    model.compile(loss=\"categorical_crossentropy\",\r\n                 optimizer=params['optimizer'](lr_normalizer(params['lr'], params['optimizer'])))\r\n\r\n    history = model.fit(x, y, \r\n                        validation_data=[x_val, y_val],\r\n                        batch_size=4,\r\n                        epochs=30,\r\n                        verbose=0)\r\n    \r\n    return history, model\r\n\r\nparams = {\r\n    'lr' : [1e-3, 1e-4, 1e-5, 1e-6],\r\n    'first_neuron': [12, 24, 48, 96],\r\n    'dropout': [0, 0.25, 0.5],\r\n    'optimizer': [Adam, Nadam, RMSprop],\r\n    'epochs': [25, 50],\r\n    'batch_size': [4,8,16],\r\n    'hidden_layers':[0, 1 , 2],\r\n    'activation': [relu, elu]\r\n}\r\n\r\nt = ta.Scan(x=x,\r\n            y=y,\r\n            model=fundal_model,\r\n            grid_downsample=1, \r\n            params=params,\r\n            dataset_name='diabetic_retinopathy',\r\n            experiment_no='1')\r\n\r\n```\r\n\r\nFollowing is a Traceback\r\n\r\n```\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-17-54b4074081c0> in <module>()\r\n      5             params=params,\r\n      6             dataset_name='diabetic_retinopathy',\r\n----> 7             experiment_no='1')\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\talos\\scan\\Scan.py in __init__(self, x, y, params, model, dataset_name, experiment_no, x_val, y_val, val_split, shuffle, round_limit, grid_downsample, random_method, seed, search_method, reduction_method, reduction_interval, reduction_window, reduction_threshold, reduction_metric, reduce_loss, last_epoch_value, talos_log_name, clear_tf_session, functional_model, disable_progress_bar, print_params, debug)\r\n    164         # input parameters section ends\r\n    165 \r\n--> 166         self._null = self.runtime()\r\n    167 \r\n    168     def runtime(self):\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\talos\\scan\\Scan.py in runtime(self)\r\n    169 \r\n    170         self = scan_prepare(self)\r\n--> 171         self = scan_run(self)\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\talos\\scan\\scan_run.py in scan_run(self)\r\n     19                      disable=self.disable_progress_bar)\r\n     20     while len(self.param_log) != 0:\r\n---> 21         self = scan_round(self)\r\n     22         self.pbar.update(1)\r\n     23     self.pbar.close()\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\talos\\scan\\scan_round.py in scan_round(self)\r\n     26     # compile the model\r\n     27     try:\r\n---> 28         _hr_out, self.keras_model = ingest_model(self)\r\n     29     except TypeError as err:\r\n     30         if err.args[0] == \"unsupported operand type(s) for +: 'int' and 'numpy.str_'\":\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\talos\\model\\ingest_model.py in ingest_model(self)\r\n      8                       self.x_val,\r\n      9                       self.y_val,\r\n---> 10                       self.round_params)\r\n\r\n<ipython-input-15-b2610fa2bfbb> in fundal_model(x, y, x_val, y_val, params)\r\n      1 def fundal_model(x, y, x_val, y_val, params):\r\n      2     model = Sequential()\r\n----> 3     model.add(base_model2)\r\n      4     model.add(layers.Flatten())\r\n      5     model.add(layers.Dense(params['first_neuron'], activation='relu'))\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\keras\\engine\\sequential.py in add(self, layer)\r\n    162                     # and create the node connecting the current layer\r\n    163                     # to the input layer we just created.\r\n--> 164                     layer(x)\r\n    165                     set_inputs = True\r\n    166                 else:\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\keras\\engine\\base_layer.py in __call__(self, inputs, **kwargs)\r\n    455             # Actually call the layer,\r\n    456             # collecting output(s), mask(s), and shape(s).\r\n--> 457             output = self.call(inputs, **kwargs)\r\n    458             output_mask = self.compute_mask(inputs, previous_mask)\r\n    459 \r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\keras\\engine\\network.py in call(self, inputs, mask)\r\n    568             return self._output_tensor_cache[cache_key]\r\n    569         else:\r\n--> 570             output_tensors, _, _ = self.run_internal_graph(inputs, masks)\r\n    571             return output_tensors\r\n    572 \r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\keras\\engine\\network.py in run_internal_graph(self, inputs, masks)\r\n    722                                 if 'mask' not in kwargs:\r\n    723                                     kwargs['mask'] = computed_mask\r\n--> 724                             output_tensors = to_list(layer.call(computed_tensor, **kwargs))\r\n    725                             output_masks = layer.compute_mask(computed_tensor,\r\n    726                                                               computed_mask)\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\keras\\layers\\convolutional.py in call(self, inputs)\r\n    166                 padding=self.padding,\r\n    167                 data_format=self.data_format,\r\n--> 168                 dilation_rate=self.dilation_rate)\r\n    169         if self.rank == 3:\r\n    170             outputs = K.conv3d(\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py in conv2d(x, kernel, strides, padding, data_format, dilation_rate)\r\n   3563         strides=strides,\r\n   3564         padding=padding,\r\n-> 3565         data_format=tf_data_format)\r\n   3566 \r\n   3567     if data_format == 'channels_first' and tf_data_format == 'NHWC':\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\tensorflow\\python\\ops\\nn_ops.py in convolution(input, filter, padding, strides, dilation_rate, name, data_format)\r\n    765   \"\"\"\r\n    766   # pylint: enable=line-too-long\r\n--> 767   with ops.name_scope(name, \"convolution\", [input, filter]) as name:\r\n    768     input = ops.convert_to_tensor(input, name=\"input\")  # pylint: disable=redefined-builtin\r\n    769     input_shape = input.get_shape()\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py in __enter__(self)\r\n   5975       if self._values is None:\r\n   5976         self._values = []\r\n-> 5977       g = _get_graph_from_inputs(self._values)\r\n   5978       self._g_manager = g.as_default()\r\n   5979       self._g_manager.__enter__()\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py in _get_graph_from_inputs(op_input_list, graph)\r\n   5635         graph = graph_element.graph\r\n   5636       elif original_graph_element is not None:\r\n-> 5637         _assert_same_graph(original_graph_element, graph_element)\r\n   5638       elif graph_element.graph is not graph:\r\n   5639         raise ValueError(\"%s is not from the passed-in graph.\" % graph_element)\r\n\r\nC:\\ProgramData\\Anaconda3\\envs\\tf-gpu\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py in _assert_same_graph(original_item, item)\r\n   5571   if original_item.graph is not item.graph:\r\n   5572     raise ValueError(\"%s must be from the same graph as %s.\" % (item,\r\n-> 5573                                                                 original_item))\r\n   5574 \r\n   5575 \r\n\r\nValueError: Tensor(\"conv2d_1/kernel:0\", shape=(3, 3, 3, 32), dtype=float32_ref) must be from the same graph as Tensor(\"inception_resnet_v2_input:0\", shape=(?, 512, 512, 3), dtype=float32).\r\n```\r\n-------------------------------------------------------------------------\r\n","closed_by":{"login":"mikkokotila","id":7943188,"node_id":"MDQ6VXNlcjc5NDMxODg=","avatar_url":"https://avatars.githubusercontent.com/u/7943188?v=4","gravatar_id":"","url":"https://api.github.com/users/mikkokotila","html_url":"https://github.com/mikkokotila","followers_url":"https://api.github.com/users/mikkokotila/followers","following_url":"https://api.github.com/users/mikkokotila/following{/other_user}","gists_url":"https://api.github.com/users/mikkokotila/gists{/gist_id}","starred_url":"https://api.github.com/users/mikkokotila/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikkokotila/subscriptions","organizations_url":"https://api.github.com/users/mikkokotila/orgs","repos_url":"https://api.github.com/users/mikkokotila/repos","events_url":"https://api.github.com/users/mikkokotila/events{/privacy}","received_events_url":"https://api.github.com/users/mikkokotila/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/autonomio/talos/issues/152/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/autonomio/talos/issues/152/timeline","performed_via_github_app":null,"state_reason":"completed"}