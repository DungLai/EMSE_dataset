{"url":"https://api.github.com/repos/regel/loudml/issues/118","repository_url":"https://api.github.com/repos/regel/loudml","labels_url":"https://api.github.com/repos/regel/loudml/issues/118/labels{/name}","comments_url":"https://api.github.com/repos/regel/loudml/issues/118/comments","events_url":"https://api.github.com/repos/regel/loudml/issues/118/events","html_url":"https://github.com/regel/loudml/issues/118","id":449728101,"node_id":"MDU6SXNzdWU0NDk3MjgxMDE=","number":118,"title":"No data found for time range while training LoudML","user":{"login":"ritaesperond","id":51158211,"node_id":"MDQ6VXNlcjUxMTU4MjEx","avatar_url":"https://avatars.githubusercontent.com/u/51158211?v=4","gravatar_id":"","url":"https://api.github.com/users/ritaesperond","html_url":"https://github.com/ritaesperond","followers_url":"https://api.github.com/users/ritaesperond/followers","following_url":"https://api.github.com/users/ritaesperond/following{/other_user}","gists_url":"https://api.github.com/users/ritaesperond/gists{/gist_id}","starred_url":"https://api.github.com/users/ritaesperond/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ritaesperond/subscriptions","organizations_url":"https://api.github.com/users/ritaesperond/orgs","repos_url":"https://api.github.com/users/ritaesperond/repos","events_url":"https://api.github.com/users/ritaesperond/events{/privacy}","received_events_url":"https://api.github.com/users/ritaesperond/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-05-29T10:32:48Z","updated_at":"2019-06-19T07:39:11Z","closed_at":"2019-06-19T07:31:00Z","author_association":"NONE","active_lock_reason":null,"body":"**Using LoudML 1.5** \r\n\r\n**Command used for training: \r\n\r\n docker exec -ti zealous_leavitt loudml train -d testsaveinput -f 1557401400 -t 1557402300 consumomodel**\r\n\r\n**Error:\r\nINFO:root:connecting to influxdb on 46.183.114.190:8086, using database 'chronograf'\r\nINFO:root:train(consumomodel) range=2019-05-09T11:30:00.000Z-2019-05-09T11:45:00.000Z train_size=0.670000 batch_size=256 epochs=100)\r\nINFO:root:connecting to influxdb on 46.183.114.190:8086, using database 'save'\r\nERROR:root:no data found for time range 2019-05-09T11:30:00.000Z-2019-05-09T11:45:00.000Z**\r\n\r\n**Our influx database:**\r\n\r\nUsing database save\r\n> select * from consumo;\r\nname: consumo\r\ntime       consumo\r\n----       -------\r\n1550266874 0\r\n1550266879 5\r\n1550266885 7\r\n\r\n**Our config.yaml file:**\r\n\r\ndatasources:\r\n - name: testsaveinput\r\n   type: influxdb\r\n   addr: 00.000.000.000:0000 \r\n   database: save\r\n   create_database: false\r\n - name: testsaveoutput\r\n   type: influxdb\r\n   addr: 00.000.000.000:0000\r\n   database: loudml\r\n   create_database: true\r\nstorage:\r\n    path: /var/lib/loudml\r\nserver:\r\n    listen: localhost:8077\r\n\r\n\r\n**Our model.json**\r\n\r\n{\r\n  \"bucket_interval\": \"15m\",\r\n  \"default_datasource\": \"testsaveinput\",\r\n  \"interval\": \"15m\",\r\n  \"max_evals\": 3,\r\n  \"name\": \"consumomodel\",\r\n  \"offset\": \"0s\",\r\n  \"span\": 12,\r\n  \"forecast\": 6,\r\n  \"type\": \"donut\",\r\n  \"default\": 0,\r\n  \"features\": [\r\n    {\r\n      \"default\": 0,\r\n      \"field\": \"consumo\",\r\n      \"measurement\": \"consumo\",  \r\n      \"metric\": \"avg\",  \r\n      \"name\": \"avg_consumo\"\r\n    }\r\n  ]\r\n}\r\n\r\n**Script with our database to a database in influx**  We have changed \r\n\r\nimport MySQLdb\r\nfrom influxdb import InfluxDBClient\r\nimport datetime\r\nimport time\r\n\r\n\r\ndef file_read(path):\r\n    \"\"\" Read a file and return content. \"\"\"\r\n    \r\n    try:\r\n        handler = open(path, 'r')\r\n        data = handler.read()\r\n        handler.close()\r\n        return data\r\n    \r\n    except Exception as e:\r\n        print('Exception: %s' % str(e))\r\n        return None\r\n\r\n\r\ndef file_write(path, mode, content):\r\n    \"\"\" Write content to a file. \"\"\"\r\n    \r\n    handler = open(path, mode)\r\n    \r\n    handler.write(content)\r\n    \r\n    handler.close()\r\n\r\n\r\ndef get_data_from_mysql(host, username, password, db, sql):\r\n    \"\"\" Run SQL query and get data from MySQL table. \"\"\"\r\n    \r\n    db = MySQLdb.connect(host, username, password, db)\r\n    \r\n    cursor = db.cursor(MySQLdb.cursors.DictCursor)\r\n    \r\n    try:\r\n        cursor.execute(sql)\r\n        data = cursor.fetchall()\r\n    except Exception as e:\r\n        print(\"MySQL error %s: %s\" % (e.args[0], e.args[1]))\r\n        data = None\r\n    \r\n    db.close()\r\n    \r\n    return data\r\n\r\n\r\nmain_config = {\r\n    'state_file_path'  : '/tmp/migrate_mysql_to_influxdb_state_file_',\r\n    'mysql_host'       : '',\r\n    'mysql_username'   : '',\r\n    'mysql_password'   : '',\r\n    'mysql_database'   : '',\r\n    'influxdb_host'    : '',\r\n    'influxdb_port'    : '',\r\n    'influxdb_database': '',\r\n    'tables'           : [\r\n        {\r\n            'table_name'           : 'consumo',\r\n            'measurement_name'     : 'consumo',\r\n            'columns'              : [\r\n                {\r\n                    'column_name': 'consumo',\r\n                    'is_tag'     : False,\r\n                    'type'       : 'string'\r\n                }\r\n            ],\r\n            'unix_timestamp_column': 'fecha',\r\n            'auto_increment_column': 'id'\r\n        },\r\n        {\r\n            'table_name'           : 'demanda',\r\n            'measurement_name'     : 'demanda',\r\n            'columns'              : [\r\n                {\r\n                    'column_name': 'demanda',\r\n                    'is_tag'     : False,\r\n                    'type'       : 'string'\r\n                }\r\n            ],\r\n            'unix_timestamp_column': 'fecha',\r\n            'auto_increment_column': 'id'\r\n        }\r\n    ]\r\n}\r\n\r\nif __name__ == '__main__':\r\n    \r\n    mysql_tables = main_config['tables']\r\n    state_file_prefix = main_config['state_file_path']\r\n    \r\n    for table in mysql_tables:\r\n        \r\n        table_name = table['table_name']\r\n        measurement = table['measurement_name']\r\n        state_file = state_file_prefix + table_name\r\n        \r\n        last_state_value = file_read(state_file) if file_read(state_file) else '0'\r\n        \r\n        columns_list = [table['unix_timestamp_column'], table['auto_increment_column']]\r\n        default_values = {}\r\n        tags_list = []\r\n        for item in table['columns']:\r\n            \r\n            columns_list.append(item['column_name'])\r\n            \r\n            if item['type'] == 'string':\r\n                \r\n                default_values[item['column_name']] = ''\r\n            if item['type'] == 'int':\r\n                \r\n                default_values[item['column_name']] = 0\r\n            if item['type'] == 'float':\r\n                \r\n                default_values[item['column_name']] = 0.0\r\n            \r\n            if item['is_tag']:\r\n                \r\n                tags_list.append(item['column_name'])\r\n        \r\n        columns_list = ','.join(columns_list)\r\n        \r\n        sql = 'SELECT ' + columns_list + ' FROM ' + table_name + ' WHERE ' + table[\r\n            'auto_increment_column'] + ' > ' + last_state_value #+ ' LIMIT 10000'\r\n        \r\n        data = get_data_from_mysql(host=main_config['mysql_host'], username=main_config['mysql_username'],\r\n                                   password=main_config['mysql_password'], db=main_config['mysql_database'], sql=sql)\r\n        \r\n        influxdb_data = []\r\n        \r\n        if len(data) > 0:\r\n        \r\n           \r\n            influxdb_client = InfluxDBClient(main_config['influxdb_host'], main_config['influxdb_port'], '', '',\r\n                                             main_config['influxdb_database'])\r\n            \r\n            for item in data:\r\n                \r\n                timestamp = 0\r\n                fields = {}\r\n                tags = {}\r\n                max_auto_increment_value = 0\r\n                for key, value in item.items():\r\n                    \r\n                    if key == table['auto_increment_column']:\r\n                        \r\n                        max_auto_increment_value = value\r\n                    \r\n                    elif key == table['unix_timestamp_column']:\r\n                        \r\n                        **#timestamp = datetime.datetime.fromtimestamp(1557480543).isoformat()\r\n                        timestr = value.strftime('%s.%f')\r\n                        timestamp = int(float(timestr)*1000)\r\n\r\n                        #timestr = value.strftime(\"%Y-%m-%d %H:%M:%S\")\r\n                        #timestamp = int(value.strftime('%s'))**\r\n                        \r\n                    else:\r\n                        \r\n                        if key in tags_list:\r\n                            \r\n                            tags[key] = value\r\n                        else:\r\n                            \r\n                            fields[key] = value if value else default_values[key]\r\n                \r\n                data_point = {\r\n                    \"measurement\": measurement,\r\n                    \"tags\"       : tags,\r\n                    \"time\"       : timestamp,\r\n                    \"fields\"     : fields\r\n                }\r\n                \r\n                influxdb_data.append(data_point)\r\n                \r\n                file_write(state_file, 'w', str(max_auto_increment_value))\r\n            \r\n            influxdb_client.write_points(influxdb_data)\r\n            \r\n            print('Written ' + str(len(data)) + ' points for table ' + table_name + '.')\r\n        \r\n        else:\r\n            \r\n            print('No data retrieved from MySQL for table ' + table_name + '.')\r\n\r\n\r\n","closed_by":{"login":"ritaesperond","id":51158211,"node_id":"MDQ6VXNlcjUxMTU4MjEx","avatar_url":"https://avatars.githubusercontent.com/u/51158211?v=4","gravatar_id":"","url":"https://api.github.com/users/ritaesperond","html_url":"https://github.com/ritaesperond","followers_url":"https://api.github.com/users/ritaesperond/followers","following_url":"https://api.github.com/users/ritaesperond/following{/other_user}","gists_url":"https://api.github.com/users/ritaesperond/gists{/gist_id}","starred_url":"https://api.github.com/users/ritaesperond/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ritaesperond/subscriptions","organizations_url":"https://api.github.com/users/ritaesperond/orgs","repos_url":"https://api.github.com/users/ritaesperond/repos","events_url":"https://api.github.com/users/ritaesperond/events{/privacy}","received_events_url":"https://api.github.com/users/ritaesperond/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/regel/loudml/issues/118/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/regel/loudml/issues/118/timeline","performed_via_github_app":null,"state_reason":"completed"}