[{"url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/comments/815174246","html_url":"https://github.com/BloodAxe/pytorch-toolbelt/issues/59#issuecomment-815174246","issue_url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/59","id":815174246,"node_id":"MDEyOklzc3VlQ29tbWVudDgxNTE3NDI0Ng==","user":{"login":"BloodAxe","id":532320,"node_id":"MDQ6VXNlcjUzMjMyMA==","avatar_url":"https://avatars.githubusercontent.com/u/532320?v=4","gravatar_id":"","url":"https://api.github.com/users/BloodAxe","html_url":"https://github.com/BloodAxe","followers_url":"https://api.github.com/users/BloodAxe/followers","following_url":"https://api.github.com/users/BloodAxe/following{/other_user}","gists_url":"https://api.github.com/users/BloodAxe/gists{/gist_id}","starred_url":"https://api.github.com/users/BloodAxe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BloodAxe/subscriptions","organizations_url":"https://api.github.com/users/BloodAxe/orgs","repos_url":"https://api.github.com/users/BloodAxe/repos","events_url":"https://api.github.com/users/BloodAxe/events{/privacy}","received_events_url":"https://api.github.com/users/BloodAxe/received_events","type":"User","site_admin":false},"created_at":"2021-04-07T19:38:17Z","updated_at":"2021-04-07T19:38:17Z","author_association":"OWNER","body":"Greetings! Thanks for your question and positive feedback in my lib. Let me break your question in parts, so it should be easier to answer.\r\n\r\n>  I noticed that when you calculate the Dice Loss you always calculate per sample AND per channel loss and then average it. I don't understand why are you doing the per channel calculation ad averaging, and not the Dice loss for all classes together.\r\n\r\nAs I recall, the main driving force for this implementation was to ensure we have as many classes as possible present during loss computation. Let me give an example, suppose we have batch of 4 images with classes {A,B} in first image, {B,C} in second, {C,D}, in third and {A,D} in the fourth. The current implementation will compute the soft Dice (or IoU) score for each class within batch, so all classes {A,B,C,D} will have non-zero support value. In case when we compute loss per each image individually, we will have zero contribution on classes that are absent in that sample.  I believe both implementations should converge to same accuracy, yet I don't have publications to prove it.\r\n\r\n> However, total Dice Loss for the whole picture is 1 - (2*(16+9+341)/(2*400) = 0.085\r\n\r\nFor binary and multi-label case I think current implementation is just perfect option. For multi-class segmentation it's also known to work good. For multi-class segmentation I see when proposed loss may work better. Can you please refer to any publication / post which describes why one would want to compute it differently? \r\n\r\n> Second smaller question regrading your Dice Loss is why you use from_logits= True by default?\r\n\r\nThat's due to fact that we don't want to have final activation layer in our models by default. It's recommended to use `BCEWithLogits`  / `CrossEntropyLoss` losses, which compute `log_sigmoid`/`log_softmax` with greater numerical accuracy rather than simple `x.sigmoid().log()`. Since this is well-known convention in PyTorch, DiceLoss has this `from_logits=True`. In that case it will compute probabilities by itself using `log_sigmoid().exp()` trick. \r\n\r\n","reactions":{"url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/comments/815174246/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"BloodAxe","id":532320,"node_id":"MDQ6VXNlcjUzMjMyMA==","avatar_url":"https://avatars.githubusercontent.com/u/532320?v=4","gravatar_id":"","url":"https://api.github.com/users/BloodAxe","html_url":"https://github.com/BloodAxe","followers_url":"https://api.github.com/users/BloodAxe/followers","following_url":"https://api.github.com/users/BloodAxe/following{/other_user}","gists_url":"https://api.github.com/users/BloodAxe/gists{/gist_id}","starred_url":"https://api.github.com/users/BloodAxe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BloodAxe/subscriptions","organizations_url":"https://api.github.com/users/BloodAxe/orgs","repos_url":"https://api.github.com/users/BloodAxe/repos","events_url":"https://api.github.com/users/BloodAxe/events{/privacy}","received_events_url":"https://api.github.com/users/BloodAxe/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/comments/815433154","html_url":"https://github.com/BloodAxe/pytorch-toolbelt/issues/59#issuecomment-815433154","issue_url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/59","id":815433154,"node_id":"MDEyOklzc3VlQ29tbWVudDgxNTQzMzE1NA==","user":{"login":"JanSobus","id":17416468,"node_id":"MDQ6VXNlcjE3NDE2NDY4","avatar_url":"https://avatars.githubusercontent.com/u/17416468?v=4","gravatar_id":"","url":"https://api.github.com/users/JanSobus","html_url":"https://github.com/JanSobus","followers_url":"https://api.github.com/users/JanSobus/followers","following_url":"https://api.github.com/users/JanSobus/following{/other_user}","gists_url":"https://api.github.com/users/JanSobus/gists{/gist_id}","starred_url":"https://api.github.com/users/JanSobus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JanSobus/subscriptions","organizations_url":"https://api.github.com/users/JanSobus/orgs","repos_url":"https://api.github.com/users/JanSobus/repos","events_url":"https://api.github.com/users/JanSobus/events{/privacy}","received_events_url":"https://api.github.com/users/JanSobus/received_events","type":"User","site_admin":false},"created_at":"2021-04-08T04:17:17Z","updated_at":"2021-04-08T04:17:17Z","author_association":"NONE","body":"Thanks for the quick reply! \r\nI always understood that for area based losses (Dice, Jaccard) the loss is 1 - corresponding score. I was using the segmentation_models package (https://github.com/qubvel/segmentation_models) in TF and switched to the pytorch wversion which utilises your toolbelt after moving to PyTorch (https://github.com/qubvel/segmentation_models.pytorch). As I mentioned in opening post, what got me thinking was that having that during training similar metrics resulted in vastly different loss scores (using same metrics and loss functions in both frameworks). Even checking the loss scores and metrics on single gt_mask-pred_mask pairs, the metrics in both frameworks were the same (same Dice Score) but the loss values were different. TF version was showing loss = 1 - score as expected and Pytorch was not, which led to those dummy tests above. Now, I understand the premise of calculation on per class basis, but wouldn't it be sufficient to calculate score for the whole batch then (dims=None)? And it results in loss = 1 - score too. In all honesty, all the previous implementations of Dice Loss I stumbled upon didn't make a class distinction - examples (https://www.kaggle.com/bigironsphere/loss-function-library-keras-pytorch , https://lars76.github.io/2018/09/27/loss-functions-for-segmentation.html) that's why your implementation really took me by surprise. And the underlying reason reason for all this digging is that I wasn't able to reproduce my TF results in Pytorch yet using same model (Unet  with efficientnet b0 - b3 backbone) on my highly imbalanced dataset (2 important classes, very small part of image  +background class, around 50% of samples consisting only background).\r\n\r\nOther than that, I noticed 2 more things in your Dice Loss code that raise questions:\r\n1) Is channel ignoring going to work in MULTILABEL case? [108-111] y_true is already only 0s and 1s of shape [N,C,H,W] so if we try to ignore class/channel >1 the mask is gonna pass everything through.\r\n2)  In the comment on line [120] shouldn't it say \"Dice loss is undefined for empty classes\" ?\r\n\r\nThanks again!\r\n\r\n ","reactions":{"url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/comments/815433154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"JanSobus","id":17416468,"node_id":"MDQ6VXNlcjE3NDE2NDY4","avatar_url":"https://avatars.githubusercontent.com/u/17416468?v=4","gravatar_id":"","url":"https://api.github.com/users/JanSobus","html_url":"https://github.com/JanSobus","followers_url":"https://api.github.com/users/JanSobus/followers","following_url":"https://api.github.com/users/JanSobus/following{/other_user}","gists_url":"https://api.github.com/users/JanSobus/gists{/gist_id}","starred_url":"https://api.github.com/users/JanSobus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JanSobus/subscriptions","organizations_url":"https://api.github.com/users/JanSobus/orgs","repos_url":"https://api.github.com/users/JanSobus/repos","events_url":"https://api.github.com/users/JanSobus/events{/privacy}","received_events_url":"https://api.github.com/users/JanSobus/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/comments/936137022","html_url":"https://github.com/BloodAxe/pytorch-toolbelt/issues/59#issuecomment-936137022","issue_url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/59","id":936137022,"node_id":"IC_kwDOCntH-843zFE-","user":{"login":"MuadDev","id":29200372,"node_id":"MDQ6VXNlcjI5MjAwMzcy","avatar_url":"https://avatars.githubusercontent.com/u/29200372?v=4","gravatar_id":"","url":"https://api.github.com/users/MuadDev","html_url":"https://github.com/MuadDev","followers_url":"https://api.github.com/users/MuadDev/followers","following_url":"https://api.github.com/users/MuadDev/following{/other_user}","gists_url":"https://api.github.com/users/MuadDev/gists{/gist_id}","starred_url":"https://api.github.com/users/MuadDev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MuadDev/subscriptions","organizations_url":"https://api.github.com/users/MuadDev/orgs","repos_url":"https://api.github.com/users/MuadDev/repos","events_url":"https://api.github.com/users/MuadDev/events{/privacy}","received_events_url":"https://api.github.com/users/MuadDev/received_events","type":"User","site_admin":false},"created_at":"2021-10-06T12:25:19Z","updated_at":"2021-10-06T12:36:21Z","author_association":"NONE","body":"I am still struggling with this same issue, could you help me understand it better?\r\n\r\nRunning this piece of code makes the dice loss return 0, while none of the predictions were correct. I would have expected a loss of 1 instead. How can that be?\r\n```python\r\nimport torch\r\nfrom segmentation_models_pytorch.losses import BINARY_MODE, DiceLoss\r\n\r\ndice_loss = DiceLoss(\r\n    mode=BINARY_MODE,\r\n    from_logits=False,  # If True applies log_sigmoid or log_softmax only to y_pred.\r\n  )\r\n\r\nbatch_size = 1\r\nnum_classes = 1\r\nimage_size = 10\r\nzeros = torch.zeros(size=(batch_size, num_classes, image_size, image_size), dtype=torch.float64)\r\nones = torch.ones(size=(batch_size, num_classes, image_size, image_size), dtype=torch.float64)\r\nprint(dice_loss(ones, zeros))  # Prints 0\r\n```\r\n\r\nAdding an epsilon does seem to solve the error though:\r\n```python\r\nzeros = torch.zeros(size=(batch_size, num_classes, image_size, image_size), dtype=torch.float64)\r\nzeros += 1e-90  # Adding an epsilon does solve the error\r\nones = torch.ones(size=(batch_size, num_classes, image_size, image_size), dtype=torch.float64)\r\nprint(dice_loss(ones, zeros))  # Prints 1\r\n```","reactions":{"url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/comments/936137022/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"MuadDev","id":29200372,"node_id":"MDQ6VXNlcjI5MjAwMzcy","avatar_url":"https://avatars.githubusercontent.com/u/29200372?v=4","gravatar_id":"","url":"https://api.github.com/users/MuadDev","html_url":"https://github.com/MuadDev","followers_url":"https://api.github.com/users/MuadDev/followers","following_url":"https://api.github.com/users/MuadDev/following{/other_user}","gists_url":"https://api.github.com/users/MuadDev/gists{/gist_id}","starred_url":"https://api.github.com/users/MuadDev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MuadDev/subscriptions","organizations_url":"https://api.github.com/users/MuadDev/orgs","repos_url":"https://api.github.com/users/MuadDev/repos","events_url":"https://api.github.com/users/MuadDev/events{/privacy}","received_events_url":"https://api.github.com/users/MuadDev/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/comments/936159885","html_url":"https://github.com/BloodAxe/pytorch-toolbelt/issues/59#issuecomment-936159885","issue_url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/59","id":936159885,"node_id":"IC_kwDOCntH-843zKqN","user":{"login":"BloodAxe","id":532320,"node_id":"MDQ6VXNlcjUzMjMyMA==","avatar_url":"https://avatars.githubusercontent.com/u/532320?v=4","gravatar_id":"","url":"https://api.github.com/users/BloodAxe","html_url":"https://github.com/BloodAxe","followers_url":"https://api.github.com/users/BloodAxe/followers","following_url":"https://api.github.com/users/BloodAxe/following{/other_user}","gists_url":"https://api.github.com/users/BloodAxe/gists{/gist_id}","starred_url":"https://api.github.com/users/BloodAxe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BloodAxe/subscriptions","organizations_url":"https://api.github.com/users/BloodAxe/orgs","repos_url":"https://api.github.com/users/BloodAxe/repos","events_url":"https://api.github.com/users/BloodAxe/events{/privacy}","received_events_url":"https://api.github.com/users/BloodAxe/received_events","type":"User","site_admin":false},"created_at":"2021-10-06T12:40:10Z","updated_at":"2021-10-06T12:40:10Z","author_association":"OWNER","body":"The signature of all losses defined as `forward(predictions, targets)`. So the second argument defines the ground-truth values.\r\nSecondly, Dice metric is not defined when there are not positive targets (As you pass empty `zeros` tensor). To avoid `NaN` in loss, it falls back to zero. \r\nHope this clarifies why you getting zero output if the first case.","reactions":{"url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/comments/936159885/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"BloodAxe","id":532320,"node_id":"MDQ6VXNlcjUzMjMyMA==","avatar_url":"https://avatars.githubusercontent.com/u/532320?v=4","gravatar_id":"","url":"https://api.github.com/users/BloodAxe","html_url":"https://github.com/BloodAxe","followers_url":"https://api.github.com/users/BloodAxe/followers","following_url":"https://api.github.com/users/BloodAxe/following{/other_user}","gists_url":"https://api.github.com/users/BloodAxe/gists{/gist_id}","starred_url":"https://api.github.com/users/BloodAxe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BloodAxe/subscriptions","organizations_url":"https://api.github.com/users/BloodAxe/orgs","repos_url":"https://api.github.com/users/BloodAxe/repos","events_url":"https://api.github.com/users/BloodAxe/events{/privacy}","received_events_url":"https://api.github.com/users/BloodAxe/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/comments/936212857","html_url":"https://github.com/BloodAxe/pytorch-toolbelt/issues/59#issuecomment-936212857","issue_url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/59","id":936212857,"node_id":"IC_kwDOCntH-843zXl5","user":{"login":"MuadDev","id":29200372,"node_id":"MDQ6VXNlcjI5MjAwMzcy","avatar_url":"https://avatars.githubusercontent.com/u/29200372?v=4","gravatar_id":"","url":"https://api.github.com/users/MuadDev","html_url":"https://github.com/MuadDev","followers_url":"https://api.github.com/users/MuadDev/followers","following_url":"https://api.github.com/users/MuadDev/following{/other_user}","gists_url":"https://api.github.com/users/MuadDev/gists{/gist_id}","starred_url":"https://api.github.com/users/MuadDev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MuadDev/subscriptions","organizations_url":"https://api.github.com/users/MuadDev/orgs","repos_url":"https://api.github.com/users/MuadDev/repos","events_url":"https://api.github.com/users/MuadDev/events{/privacy}","received_events_url":"https://api.github.com/users/MuadDev/received_events","type":"User","site_admin":false},"created_at":"2021-10-06T13:12:40Z","updated_at":"2021-10-06T13:12:40Z","author_association":"NONE","body":"Thanks for your reply.\r\nIt is clear to me now that you would prefer a zero loss instead of a `NaN` loss.\r\n\r\nHowever, why would you say that the dice loss is not defined when there are no positive targets?\r\nLooking up the Dice metric at [Wikipedia](https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient#Formula) seems to suggest it is just an intersection over union for two sets. Do you have a source for this which I could read to understand it better?\r\n","reactions":{"url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/comments/936212857/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"MuadDev","id":29200372,"node_id":"MDQ6VXNlcjI5MjAwMzcy","avatar_url":"https://avatars.githubusercontent.com/u/29200372?v=4","gravatar_id":"","url":"https://api.github.com/users/MuadDev","html_url":"https://github.com/MuadDev","followers_url":"https://api.github.com/users/MuadDev/followers","following_url":"https://api.github.com/users/MuadDev/following{/other_user}","gists_url":"https://api.github.com/users/MuadDev/gists{/gist_id}","starred_url":"https://api.github.com/users/MuadDev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MuadDev/subscriptions","organizations_url":"https://api.github.com/users/MuadDev/orgs","repos_url":"https://api.github.com/users/MuadDev/repos","events_url":"https://api.github.com/users/MuadDev/events{/privacy}","received_events_url":"https://api.github.com/users/MuadDev/received_events","type":"User","site_admin":false}},{"id":7634667982,"node_id":"CE_lADOCntH-84yyLRtzwAAAAHHD8nO","url":"https://api.github.com/repos/BloodAxe/pytorch-toolbelt/issues/events/7634667982","actor":{"login":"BloodAxe","id":532320,"node_id":"MDQ6VXNlcjUzMjMyMA==","avatar_url":"https://avatars.githubusercontent.com/u/532320?v=4","gravatar_id":"","url":"https://api.github.com/users/BloodAxe","html_url":"https://github.com/BloodAxe","followers_url":"https://api.github.com/users/BloodAxe/followers","following_url":"https://api.github.com/users/BloodAxe/following{/other_user}","gists_url":"https://api.github.com/users/BloodAxe/gists{/gist_id}","starred_url":"https://api.github.com/users/BloodAxe/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BloodAxe/subscriptions","organizations_url":"https://api.github.com/users/BloodAxe/orgs","repos_url":"https://api.github.com/users/BloodAxe/repos","events_url":"https://api.github.com/users/BloodAxe/events{/privacy}","received_events_url":"https://api.github.com/users/BloodAxe/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2022-10-20T20:19:49Z","state_reason":null,"performed_via_github_app":null}]