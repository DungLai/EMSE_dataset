{"url":"https://api.github.com/repos/hendrycks/outlier-exposure/issues/18","repository_url":"https://api.github.com/repos/hendrycks/outlier-exposure","labels_url":"https://api.github.com/repos/hendrycks/outlier-exposure/issues/18/labels{/name}","comments_url":"https://api.github.com/repos/hendrycks/outlier-exposure/issues/18/comments","events_url":"https://api.github.com/repos/hendrycks/outlier-exposure/issues/18/events","html_url":"https://github.com/hendrycks/outlier-exposure/issues/18","id":878709273,"node_id":"MDU6SXNzdWU4Nzg3MDkyNzM=","number":18,"title":"Questions about the test phase and the training detail","user":{"login":"xfffrank","id":19388792,"node_id":"MDQ6VXNlcjE5Mzg4Nzky","avatar_url":"https://avatars.githubusercontent.com/u/19388792?v=4","gravatar_id":"","url":"https://api.github.com/users/xfffrank","html_url":"https://github.com/xfffrank","followers_url":"https://api.github.com/users/xfffrank/followers","following_url":"https://api.github.com/users/xfffrank/following{/other_user}","gists_url":"https://api.github.com/users/xfffrank/gists{/gist_id}","starred_url":"https://api.github.com/users/xfffrank/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xfffrank/subscriptions","organizations_url":"https://api.github.com/users/xfffrank/orgs","repos_url":"https://api.github.com/users/xfffrank/repos","events_url":"https://api.github.com/users/xfffrank/events{/privacy}","received_events_url":"https://api.github.com/users/xfffrank/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-05-07T10:02:45Z","updated_at":"2021-06-07T08:21:21Z","closed_at":"2021-05-09T12:45:13Z","author_association":"NONE","active_lock_reason":null,"body":"Hi, I'm new to out-of-distribution detection. After reading the paper and the code, I still cannot figure out how the out-of-distribution data is detected. I see there are two related lines of code as below.\r\n```python\r\nout_score = get_ood_scores(ood_loader)\r\nmeasures = get_measures(out_score, in_score)\r\n```\r\nIt seems that the detection process is related to the `in_score`. But what about the prediction in a real application scenario? I'm confused. You could give me some references to read if that's easier to explain.\r\n\r\nIn the training script, the cross entropy between the softmax distribution and the uniform distribution is implemented with this line.\r\n```python\r\nloss += 0.5 * -(x[len(in_set[0]):].mean(1) - torch.logsumexp(x[len(in_set[0]):], dim=1)).mean()\r\n```\r\nHow does `torch.logsumexp(x[len(in_set[0]):], dim=1)` represent the uniform distribution?\r\n\r\nThanks.","closed_by":{"login":"xfffrank","id":19388792,"node_id":"MDQ6VXNlcjE5Mzg4Nzky","avatar_url":"https://avatars.githubusercontent.com/u/19388792?v=4","gravatar_id":"","url":"https://api.github.com/users/xfffrank","html_url":"https://github.com/xfffrank","followers_url":"https://api.github.com/users/xfffrank/followers","following_url":"https://api.github.com/users/xfffrank/following{/other_user}","gists_url":"https://api.github.com/users/xfffrank/gists{/gist_id}","starred_url":"https://api.github.com/users/xfffrank/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xfffrank/subscriptions","organizations_url":"https://api.github.com/users/xfffrank/orgs","repos_url":"https://api.github.com/users/xfffrank/repos","events_url":"https://api.github.com/users/xfffrank/events{/privacy}","received_events_url":"https://api.github.com/users/xfffrank/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/hendrycks/outlier-exposure/issues/18/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hendrycks/outlier-exposure/issues/18/timeline","performed_via_github_app":null,"state_reason":"completed"}