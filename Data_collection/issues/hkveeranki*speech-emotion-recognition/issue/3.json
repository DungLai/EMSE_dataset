{"url":"https://api.github.com/repos/hkveeranki/speech-emotion-recognition/issues/3","repository_url":"https://api.github.com/repos/hkveeranki/speech-emotion-recognition","labels_url":"https://api.github.com/repos/hkveeranki/speech-emotion-recognition/issues/3/labels{/name}","comments_url":"https://api.github.com/repos/hkveeranki/speech-emotion-recognition/issues/3/comments","events_url":"https://api.github.com/repos/hkveeranki/speech-emotion-recognition/issues/3/events","html_url":"https://github.com/hkveeranki/speech-emotion-recognition/issues/3","id":367650604,"node_id":"MDU6SXNzdWUzNjc2NTA2MDQ=","number":3,"title":"accuracy calculated from model.evaluate is not same as from model.pred using scikit","user":{"login":"ramesh720","id":43946769,"node_id":"MDQ6VXNlcjQzOTQ2NzY5","avatar_url":"https://avatars.githubusercontent.com/u/43946769?v=4","gravatar_id":"","url":"https://api.github.com/users/ramesh720","html_url":"https://github.com/ramesh720","followers_url":"https://api.github.com/users/ramesh720/followers","following_url":"https://api.github.com/users/ramesh720/following{/other_user}","gists_url":"https://api.github.com/users/ramesh720/gists{/gist_id}","starred_url":"https://api.github.com/users/ramesh720/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ramesh720/subscriptions","organizations_url":"https://api.github.com/users/ramesh720/orgs","repos_url":"https://api.github.com/users/ramesh720/repos","events_url":"https://api.github.com/users/ramesh720/events{/privacy}","received_events_url":"https://api.github.com/users/ramesh720/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2018-10-08T06:16:27Z","updated_at":"2018-10-08T17:08:01Z","closed_at":"2018-10-08T17:08:01Z","author_association":"NONE","active_lock_reason":null,"body":"actually i run the code below code . \r\n```\r\nfrom sklearn.metrics import accuracy_score\r\nimport numpy as np\r\nimport sys\r\nfrom keras import Sequential\r\nfrom keras.layers import LSTM, Dense, Dropout, Conv2D, Flatten, \\\r\n    BatchNormalization, Activation, MaxPooling2D\r\nfrom keras.utils import np_utils\r\nfrom keras.layers import Bidirectional\r\nfrom tqdm import tqdm\r\n\r\nfrom utilities import get_data, class_labels\r\nimport pickle\r\nimport os\r\nos.environ[\"CUDA_VISIBLE_DEVICES\"]=\"0\"\r\n\r\nmodels = [\"CNN\", \"LSTM\"]\r\n\r\n\r\ndef get_model(model_name, input_shape):\r\n    \"\"\"\r\n    Generate the required model and return it\r\n    :return: Model created\r\n    \"\"\"\r\n    # Models are inspired from\r\n    # CNN - https://yashk2810.github.io/Applying-Convolutional-Neural-Network-on-the-MNIST-dataset/\r\n    # LSTM - https://github.com/harry-7/Deep-Sentiment-Analysis/blob/master/code/generatePureLSTM.py\r\n    model = Sequential()\r\n    if model_name == 'CNN':\r\n        model.add(Conv2D(8, (13, 13),\r\n                         input_shape=(input_shape[0], input_shape[1], 1)))\r\n        model.add(BatchNormalization(axis=-1))\r\n        model.add(Activation('relu'))\r\n        model.add(Conv2D(8, (13, 13)))\r\n        model.add(BatchNormalization(axis=-1))\r\n        model.add(Activation('relu'))\r\n        model.add(MaxPooling2D(pool_size=(2, 1)))\r\n        model.add(Conv2D(8, (13, 13)))\r\n        model.add(BatchNormalization(axis=-1))\r\n        model.add(Activation('relu'))\r\n        model.add(Conv2D(8, (2, 2)))\r\n        model.add(BatchNormalization(axis=-1))\r\n        model.add(Activation('relu'))\r\n        model.add(MaxPooling2D(pool_size=(2, 1)))\r\n        model.add(Flatten())\r\n        model.add(Dense(64))\r\n        model.add(BatchNormalization())\r\n        model.add(Activation('relu'))\r\n        model.add(Dropout(0.2))\r\n    elif model_name == 'LSTM':\r\n        model.add(Bidirectional(LSTM(128), input_shape=(input_shape[0], input_shape[1])))\r\n        model.add(Dropout(0.5))\r\n        model.add(Dense(32, activation='relu'))\r\n        model.add(Dense(16, activation='tanh'))\r\n    model.add(Dense(len(class_labels), activation='softmax'))\r\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\r\n    print(model.summary())\r\n    return model\r\n\r\n\r\ndef evaluateModel(model):\r\n    \"\"\"\r\n    Train the model and evaluate it\r\n    :param model: model to be evaluted\r\n    \"\"\"\r\n    # Train the epochs\r\n    best_acc = 0\r\n    global x_train, y_train, x_test, y_test\r\n    for i in tqdm(range(50)):\r\n        # Shuffle the data for each epoch in unison inspired from https://stackoverflow.com/a/4602224\r\n        p = np.random.permutation(len(x_train))\r\n        x_train = x_train[p]\r\n        y_train = y_train[p]\r\n        model.fit(x_train, y_train, batch_size=32, epochs=1)\r\n        loss, acc = model.evaluate(x_test, y_test)\r\n        if acc > best_acc:\r\n            print ('Updated best accuracy', acc)\r\n            best_acc = acc\r\n            model.save_weights(best_model_path)\r\n    model.load_weights(best_model_path)\r\n    print ('keras_Accuracy = ', model.evaluate(x_test, y_test)[1])\r\n    y_pred=model.predict(x_test)\r\n    return y_pred\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    if len(sys.argv) != 2:\r\n        sys.stderr.write('Invalid arguments\\n')\r\n        sys.stderr.write('Usage python2 train_DNN.py <model_number>\\n')\r\n        sys.stderr.write('1 - CNN\\n')\r\n        sys.stderr.write('2 - LSTM\\n')\r\n        sys.exit(-1)\r\n\r\n    n = int(sys.argv[1]) - 1\r\n    print ('model given', models[n])\r\n\r\n    # Read data\r\n    global x_train, y_train, x_test, y_test\r\n    x_train, x_test, y_train, y_test = get_data(flatten=False)\r\n    y_train = np_utils.to_categorical(y_train)\r\n    y_test = np_utils.to_categorical(y_test)\r\n\r\n    if n == 0:\r\n        # Model is CNN so have to reshape the data\r\n        in_shape = x_train[0].shape\r\n        x_train = x_train.reshape(x_train.shape[0], in_shape[0], in_shape[1], 1)\r\n        x_test = x_test.reshape(x_test.shape[0], in_shape[0], in_shape[1], 1)\r\n    elif n > len(models):\r\n        sys.stderr.write('Model Not Implemented yet')\r\n        sys.exit(-1)\r\n\r\n    model = get_model(models[n], x_train[0].shape)\r\n\r\n    global best_model_path\r\n    best_model_path = '../model/best_model_' + models[n - 1] + '.h5'\r\n\r\n    y_pred=evaluateModel(model)\r\n    t=[]\r\n    for i in y_test:\r\n        t.append(np.argmax(i))\r\n    p=[]\r\n    for i in y_pred:\r\n        p.append(np.argmax(i))\r\n    scikit_accuracy=accuracy_score(t,p)*100\r\n    print(scikit_accuracy)\r\n```\r\nI got 92 as keras_accyracy from model.evalute , but i got 67 as scikit accuracy . could you anyone solve my problem please......@","closed_by":{"login":"hkveeranki","id":12495975,"node_id":"MDQ6VXNlcjEyNDk1OTc1","avatar_url":"https://avatars.githubusercontent.com/u/12495975?v=4","gravatar_id":"","url":"https://api.github.com/users/hkveeranki","html_url":"https://github.com/hkveeranki","followers_url":"https://api.github.com/users/hkveeranki/followers","following_url":"https://api.github.com/users/hkveeranki/following{/other_user}","gists_url":"https://api.github.com/users/hkveeranki/gists{/gist_id}","starred_url":"https://api.github.com/users/hkveeranki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hkveeranki/subscriptions","organizations_url":"https://api.github.com/users/hkveeranki/orgs","repos_url":"https://api.github.com/users/hkveeranki/repos","events_url":"https://api.github.com/users/hkveeranki/events{/privacy}","received_events_url":"https://api.github.com/users/hkveeranki/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/hkveeranki/speech-emotion-recognition/issues/3/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/hkveeranki/speech-emotion-recognition/issues/3/timeline","performed_via_github_app":null,"state_reason":"completed"}