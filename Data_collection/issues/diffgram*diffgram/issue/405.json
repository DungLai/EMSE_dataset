{"url":"https://api.github.com/repos/diffgram/diffgram/issues/405","repository_url":"https://api.github.com/repos/diffgram/diffgram","labels_url":"https://api.github.com/repos/diffgram/diffgram/issues/405/labels{/name}","comments_url":"https://api.github.com/repos/diffgram/diffgram/issues/405/comments","events_url":"https://api.github.com/repos/diffgram/diffgram/issues/405/events","html_url":"https://github.com/diffgram/diffgram/issues/405","id":1042772558,"node_id":"I_kwDOCM48Rc4-J3JO","number":405,"title":"Manually Changing Frames Gets Progressively Slower","user":{"login":"PJEstrada","id":6606958,"node_id":"MDQ6VXNlcjY2MDY5NTg=","avatar_url":"https://avatars.githubusercontent.com/u/6606958?v=4","gravatar_id":"","url":"https://api.github.com/users/PJEstrada","html_url":"https://github.com/PJEstrada","followers_url":"https://api.github.com/users/PJEstrada/followers","following_url":"https://api.github.com/users/PJEstrada/following{/other_user}","gists_url":"https://api.github.com/users/PJEstrada/gists{/gist_id}","starred_url":"https://api.github.com/users/PJEstrada/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PJEstrada/subscriptions","organizations_url":"https://api.github.com/users/PJEstrada/orgs","repos_url":"https://api.github.com/users/PJEstrada/repos","events_url":"https://api.github.com/users/PJEstrada/events{/privacy}","received_events_url":"https://api.github.com/users/PJEstrada/received_events","type":"User","site_admin":false},"labels":[{"id":3162957544,"node_id":"MDU6TGFiZWwzMTYyOTU3NTQ0","url":"https://api.github.com/repos/diffgram/diffgram/labels/front-end","name":"front-end","color":"233FCC","default":false,"description":""},{"id":3214748822,"node_id":"MDU6TGFiZWwzMjE0NzQ4ODIy","url":"https://api.github.com/repos/diffgram/diffgram/labels/performance","name":"performance","color":"5E763D","default":false,"description":""},{"id":3342280499,"node_id":"MDU6TGFiZWwzMzQyMjgwNDk5","url":"https://api.github.com/repos/diffgram/diffgram/labels/video-annotation","name":"video-annotation","color":"0F5E42","default":false,"description":""},{"id":3512372106,"node_id":"LA_kwDOCM48Rc7RWouK","url":"https://api.github.com/repos/diffgram/diffgram/labels/foxtrot","name":"foxtrot","color":"BAECB7","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-11-02T20:21:04Z","updated_at":"2021-11-03T22:45:03Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"On some really big videos with 1800+ frames and almost 30+ annotations per frame, users are experiencing the UI getting progressivelt slower as the manually move to the next frame with the arrows on the keyboard.\r\n\r\n- Usually the UI works fine for the first 100-150 frames.\r\n- After frames 200-250 we start to see degraded performance.\r\n- It comes a point where we need to refresh to be able to continue to use the UI\r\n\r\n## Ideas And Things to look at:\r\n\r\n- The mounted() method of annotation core has some watcher in place that I think may not be used that much now. Specifically I think `refresh_video_buffer_watcher` seems to be something that could be causing some performance issues.\r\n- We should analyze the time it takes to call `go_to_keyframe()` as we progress to the frames. This may give us insights on where the issue might be.\r\n- `go_to_key_frame()` usually emit the event `change_frame_from_video_event`. We should check the method that handles the event `change_frame_from_video_event` in annotation_core to see if there is any degraded performance there too. \r\n\r\n## Object.freeze for the video frame buffer\r\n\r\nRight now we the entire video frame buffer is reactive. That means that for example, on a 500 frame video we can have 500 instance_lists. Say each instance_list has 10 instances, that's 5,000 js objects that the reactivity system must keep an eye on.\r\n\r\nMy proposal is that we  **only keep the instance list reactive** and we alway keep the frame buffer dict in a freezed state. This can give us a huge performance boost as the reactivity system will not care about the huge video size but only about the currently rendered instance list.\r\n\r\nThis would require to refactor several places in the annotation core and video player, but could lead to significant improvements for supporting longer videos and even more complex UI components on top of what we already have.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/diffgram/diffgram/issues/405/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/diffgram/diffgram/issues/405/timeline","performed_via_github_app":null,"state_reason":null}