[{"id":5313238876,"node_id":"LE_lADOCB5Jx847gSIGzwAAAAE8sZdc","url":"https://api.github.com/repos/mlflow/mlflow/issues/events/5313238876","actor":{"login":"arsvm","id":88142961,"node_id":"MDQ6VXNlcjg4MTQyOTYx","avatar_url":"https://avatars.githubusercontent.com/u/88142961?v=4","gravatar_id":"","url":"https://api.github.com/users/arsvm","html_url":"https://github.com/arsvm","followers_url":"https://api.github.com/users/arsvm/followers","following_url":"https://api.github.com/users/arsvm/following{/other_user}","gists_url":"https://api.github.com/users/arsvm/gists{/gist_id}","starred_url":"https://api.github.com/users/arsvm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arsvm/subscriptions","organizations_url":"https://api.github.com/users/arsvm/orgs","repos_url":"https://api.github.com/users/arsvm/repos","events_url":"https://api.github.com/users/arsvm/events{/privacy}","received_events_url":"https://api.github.com/users/arsvm/received_events","type":"User","site_admin":false},"event":"labeled","commit_id":null,"commit_url":null,"created_at":"2021-09-16T15:01:03Z","label":{"name":"bug","color":"d73a4a"},"performed_via_github_app":null},{"url":"https://api.github.com/repos/mlflow/mlflow/issues/comments/920985831","html_url":"https://github.com/mlflow/mlflow/issues/4814#issuecomment-920985831","issue_url":"https://api.github.com/repos/mlflow/mlflow/issues/4814","id":920985831,"node_id":"IC_kwDOCB5Jx8425SDn","user":{"login":"arsvm","id":88142961,"node_id":"MDQ6VXNlcjg4MTQyOTYx","avatar_url":"https://avatars.githubusercontent.com/u/88142961?v=4","gravatar_id":"","url":"https://api.github.com/users/arsvm","html_url":"https://github.com/arsvm","followers_url":"https://api.github.com/users/arsvm/followers","following_url":"https://api.github.com/users/arsvm/following{/other_user}","gists_url":"https://api.github.com/users/arsvm/gists{/gist_id}","starred_url":"https://api.github.com/users/arsvm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arsvm/subscriptions","organizations_url":"https://api.github.com/users/arsvm/orgs","repos_url":"https://api.github.com/users/arsvm/repos","events_url":"https://api.github.com/users/arsvm/events{/privacy}","received_events_url":"https://api.github.com/users/arsvm/received_events","type":"User","site_admin":false},"created_at":"2021-09-16T15:06:32Z","updated_at":"2021-09-16T15:06:32Z","author_association":"NONE","body":"import mlflow\r\nimport mlflow.pytorch\r\n    \r\n# YOLOv5 experimental modules\r\nimport numpy as np\r\nimport torch\r\nimport torch.nn as nn\r\n\r\nfrom models.common import Conv, DWConv\r\nfrom utils.downloads import attempt_download\r\n\r\n\r\nclass CrossConv(nn.Module):\r\n    # Cross Convolution Downsample\r\n    def __init__(self, c1, c2, k=3, s=1, g=1, e=1.0, shortcut=False):\r\n        # ch_in, ch_out, kernel, stride, groups, expansion, shortcut\r\n        super().__init__()\r\n        c_ = int(c2 * e)  # hidden channels\r\n        self.cv1 = Conv(c1, c_, (1, k), (1, s))\r\n        self.cv2 = Conv(c_, c2, (k, 1), (s, 1), g=g)\r\n        self.add = shortcut and c1 == c2\r\n\r\n    def forward(self, x):\r\n        return x + self.cv2(self.cv1(x)) if self.add else self.cv2(self.cv1(x))\r\n\r\n\r\nclass Sum(nn.Module):\r\n    # Weighted sum of 2 or more layers https://arxiv.org/abs/1911.09070\r\n    def __init__(self, n, weight=False):  # n: number of inputs\r\n        super().__init__()\r\n        self.weight = weight  # apply weights boolean\r\n        self.iter = range(n - 1)  # iter object\r\n        if weight:\r\n            self.w = nn.Parameter(-torch.arange(1., n) / 2, requires_grad=True)  # layer weights\r\n\r\n    def forward(self, x):\r\n        y = x[0]  # no weight\r\n        if self.weight:\r\n            w = torch.sigmoid(self.w) * 2\r\n            for i in self.iter:\r\n                y = y + x[i + 1] * w[i]\r\n        else:\r\n            for i in self.iter:\r\n                y = y + x[i + 1]\r\n        return y\r\n\r\n\r\nclass GhostConv(nn.Module):\r\n    # Ghost Convolution https://github.com/huawei-noah/ghostnet\r\n    def __init__(self, c1, c2, k=1, s=1, g=1, act=True):  # ch_in, ch_out, kernel, stride, groups\r\n        super().__init__()\r\n        c_ = c2 // 2  # hidden channels\r\n        self.cv1 = Conv(c1, c_, k, s, None, g, act)\r\n        self.cv2 = Conv(c_, c_, 5, 1, None, c_, act)\r\n\r\n    def forward(self, x):\r\n        y = self.cv1(x)\r\n        return torch.cat([y, self.cv2(y)], 1)\r\n\r\n\r\nclass GhostBottleneck(nn.Module):\r\n    # Ghost Bottleneck https://github.com/huawei-noah/ghostnet\r\n    def __init__(self, c1, c2, k=3, s=1):  # ch_in, ch_out, kernel, stride\r\n        super().__init__()\r\n        c_ = c2 // 2\r\n        self.conv = nn.Sequential(GhostConv(c1, c_, 1, 1),  # pw\r\n                                  DWConv(c_, c_, k, s, act=False) if s == 2 else nn.Identity(),  # dw\r\n                                  GhostConv(c_, c2, 1, 1, act=False))  # pw-linear\r\n        self.shortcut = nn.Sequential(DWConv(c1, c1, k, s, act=False),\r\n                                      Conv(c1, c2, 1, 1, act=False)) if s == 2 else nn.Identity()\r\n\r\n    def forward(self, x):\r\n        return self.conv(x) + self.shortcut(x)\r\n\r\n\r\nclass MixConv2d(nn.Module):\r\n    # Mixed Depth-wise Conv https://arxiv.org/abs/1907.09595\r\n    def __init__(self, c1, c2, k=(1, 3), s=1, equal_ch=True):\r\n        super().__init__()\r\n        groups = len(k)\r\n        if equal_ch:  # equal c_ per group\r\n            i = torch.linspace(0, groups - 1E-6, c2).floor()  # c2 indices\r\n            c_ = [(i == g).sum() for g in range(groups)]  # intermediate channels\r\n        else:  # equal weight.numel() per group\r\n            b = [c2] + [0] * groups\r\n            a = np.eye(groups + 1, groups, k=-1)\r\n            a -= np.roll(a, 1, axis=1)\r\n            a *= np.array(k) ** 2\r\n            a[0] = 1\r\n            c_ = np.linalg.lstsq(a, b, rcond=None)[0].round()  # solve for equal weight indices, ax = b\r\n\r\n        self.m = nn.ModuleList([nn.Conv2d(c1, int(c_[g]), k[g], s, k[g] // 2, bias=False) for g in range(groups)])\r\n        self.bn = nn.BatchNorm2d(c2)\r\n        self.act = nn.LeakyReLU(0.1, inplace=True)\r\n\r\n    def forward(self, x):\r\n        return x + self.act(self.bn(torch.cat([m(x) for m in self.m], 1)))\r\n\r\n\r\nclass Ensemble(nn.ModuleList):\r\n    # Ensemble of models\r\n    def __init__(self):\r\n        super().__init__()\r\n\r\n    def forward(self, x, augment=False, profile=False, visualize=False):\r\n        y = []\r\n        for module in self:\r\n            y.append(module(x, augment, profile, visualize)[0])\r\n        # y = torch.stack(y).max(0)[0]  # max ensemble\r\n        # y = torch.stack(y).mean(0)  # mean ensemble\r\n        y = torch.cat(y, 1)  # nms ensemble\r\n        return y, None  # inference, train output\r\n\r\n\r\ndef attempt_load(weights, map_location=None, inplace=True):\r\n    from models.yolo import Detect, Model\r\n\r\n    # Loads an ensemble of models weights=[a,b,c] or a single model weights=[a] or weights=a\r\n    model = Ensemble()\r\n    for w in weights if isinstance(weights, list) else [weights]:\r\n        ckpt = torch.load(attempt_download(w), map_location=map_location)  # load\r\n        model.append(ckpt['ema' if ckpt.get('ema') else 'model'].float().fuse().eval())  # FP32 model\r\n\r\n    # Compatibility updates\r\n    for m in model.modules():\r\n        if type(m) in [nn.Hardswish, nn.LeakyReLU, nn.ReLU, nn.ReLU6, nn.SiLU, Detect, Model]:\r\n            m.inplace = inplace  # pytorch 1.7.0 compatibility\r\n        elif type(m) is Conv:\r\n            m._non_persistent_buffers_set = set()  # pytorch 1.6.0 compatibility\r\n\r\n    if len(model) == 1:\r\n        return model[-1]  # return model\r\n    else:\r\n        print(f'Ensemble created with {weights}\\n')\r\n        for k in ['names']:\r\n            setattr(model, k, getattr(model[-1], k))\r\n        model.stride = model[torch.argmax(torch.tensor([m.stride.max() for m in model])).int()].stride  # max stride\r\n        return model  # return ensemble\r\n\r\nfrom models.yolo import Model\r\nimport os\r\n\r\n#mlflow.set_experiment('yolo_style')\r\nwith mlflow.start_run():\r\n    \r\n    print('mlflow version:', mlflow.__version__)\r\n    print('tracking URI:', mlflow.get_artifact_uri())\r\n    print('artifact URI:', mlflow.get_tracking_uri())\r\n    weights=\"C:/Users/dsexa/Desktop/Testing-yolo/yolov5x.pt\"\r\n    model = attempt_load(weights)\r\n    #model.load_state_dict(torch.load(args.checkpoint_path))\r\n    mlflow.pytorch.log_model(model, 'yolo')\r\n    uri = mlflow.get_artifact_uri()\r\n    model = mlflow.pytorch.load_model(os.path.join(uri, 'yolo'))\r\n    model.eval() ","reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/comments/920985831/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"arsvm","id":88142961,"node_id":"MDQ6VXNlcjg4MTQyOTYx","avatar_url":"https://avatars.githubusercontent.com/u/88142961?v=4","gravatar_id":"","url":"https://api.github.com/users/arsvm","html_url":"https://github.com/arsvm","followers_url":"https://api.github.com/users/arsvm/followers","following_url":"https://api.github.com/users/arsvm/following{/other_user}","gists_url":"https://api.github.com/users/arsvm/gists{/gist_id}","starred_url":"https://api.github.com/users/arsvm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/arsvm/subscriptions","organizations_url":"https://api.github.com/users/arsvm/orgs","repos_url":"https://api.github.com/users/arsvm/repos","events_url":"https://api.github.com/users/arsvm/events{/privacy}","received_events_url":"https://api.github.com/users/arsvm/received_events","type":"User","site_admin":false}}]