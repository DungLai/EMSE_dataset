{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1090","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/1090/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/1090/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/1090/events","html_url":"https://github.com/mlflow/mlflow/issues/1090","id":428541539,"node_id":"MDU6SXNzdWU0Mjg1NDE1Mzk=","number":1090,"title":"Update experiment_id from int64 to string, and move default behavior into respective stores","user":{"login":"eedeleon","id":31962564,"node_id":"MDQ6VXNlcjMxOTYyNTY0","avatar_url":"https://avatars.githubusercontent.com/u/31962564?v=4","gravatar_id":"","url":"https://api.github.com/users/eedeleon","html_url":"https://github.com/eedeleon","followers_url":"https://api.github.com/users/eedeleon/followers","following_url":"https://api.github.com/users/eedeleon/following{/other_user}","gists_url":"https://api.github.com/users/eedeleon/gists{/gist_id}","starred_url":"https://api.github.com/users/eedeleon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eedeleon/subscriptions","organizations_url":"https://api.github.com/users/eedeleon/orgs","repos_url":"https://api.github.com/users/eedeleon/repos","events_url":"https://api.github.com/users/eedeleon/events{/privacy}","received_events_url":"https://api.github.com/users/eedeleon/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"},{"id":2022866842,"node_id":"MDU6TGFiZWwyMDIyODY2ODQy","url":"https://api.github.com/repos/mlflow/mlflow/labels/priority/awaiting-more-evidence","name":"priority/awaiting-more-evidence","color":"534cb5","default":false,"description":"Lowest priority. Possibly useful, but not yet enough support to actually get it done."}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-04-03T03:03:05Z","updated_at":"2022-06-02T01:18:17Z","closed_at":"2022-06-02T01:18:17Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Update experiment_id in protos to string, change semantics around default experiment id to support more id schemas\r\n### Describe the problem\r\nCurrently experiment_id is an int, FileStore and SQLAlchemyStore handle the local case by incrementing an integer, however, this behavior does not translate well to servers that might benefit from using UUIDs or other unique identifiers.\r\n\r\nThe overall proposal includes an update from int64 -> string for experiment_id\r\nHowever, updating the type is also not enough, this is best explained below:\r\n\r\n### Quote from @acroz  that covers a lot of the benefits of removing default experiment_id and possible ways to implement this change\r\nRetaining a default experiment ID of \"0\" seems like a lost opportunity in this case - it (for example) prevents a backend developer from using UUIDs as their ID schema.For the experiment ID schema to truly be flexible like the run ID schema, I think a fixed default value hard coded in MLflow would need to be removed. This could be solved either by something like https://github.com/mlflow/mlflow/pull/1032 or by making store implementation responsible for determining the ID of a default experiment with something like:\r\n\r\n\r\n```class StoreWithIntIds(AbstractStore):\r\n\r\n    def _create_experiment_with_id(self, name, experiment_id, artifact_location=None):\r\n\r\n        pass\r\n\r\n    def create_default_experiment(self):\r\n\r\n        self._create_experiment_with_id('Default', 0)\r\n\r\n    def create_experiment(self, name, artifact_location=None):\r\n\r\n        self._create_experiment_with_id(name, self._next_available_id(), artifact_location)\r\n```\r\n\r\nUUIDs (for example) could then be supported with:\r\n\r\n```from uuid import uuid4\r\n\r\nclass StoreWithUuids(AbstractStore):\r\n\r\n    def _create_experiment_with_id(self, name, experiment_id, artifact_location=None):\r\n\r\n        pass\r\n\r\n    def create_default_experiment(self):\r\n\r\n        self._create_experiment_with_id('Default', uuid4())\r\n\r\n    def create_experiment(self, name, artifact_location=None):\r\n\r\n        self._create_experiment_with_id(name, uuid4(), artifact_location)\r\n```\r\n\r\n### Proposal\r\n- make experiment_id an optional string parameter of the REST API/protos\r\n- return None instead of a value for experiment_id if no value is set\r\n- stores implement the default behavior as desired for store.get_experiment(None)\r\n### Benefits\r\n#### Support varying id schemas\r\nFor this, changing the type to string allows for UUID based id schemas, as well as many other id schemas\r\n#### Reduce complexity of store and server implementations by removing a specified default experiment_id\r\n\r\n### Test Proposal\r\n#### to and from proto\r\n- new client reading old proto\r\nThis will be added by editing the yaml of a new proto, int casting experiment_id, then loading the entity from the new modified proto/yaml\r\n- new client reading new proto(existing tests cover this)\r\n#### servers\r\n- New client old server\r\n(option 1) Test serialization and deserialization logic for old and new protos - less expansive but also lower maintenance costs\r\n(option 2) add a flag for old and new server behavior parametrize tests for rest store to run against both\r\n- new client new server(existing tests cover this)\r\n- optional(nice to have), old client new server","closed_by":{"login":"dbczumar","id":39497902,"node_id":"MDQ6VXNlcjM5NDk3OTAy","avatar_url":"https://avatars.githubusercontent.com/u/39497902?v=4","gravatar_id":"","url":"https://api.github.com/users/dbczumar","html_url":"https://github.com/dbczumar","followers_url":"https://api.github.com/users/dbczumar/followers","following_url":"https://api.github.com/users/dbczumar/following{/other_user}","gists_url":"https://api.github.com/users/dbczumar/gists{/gist_id}","starred_url":"https://api.github.com/users/dbczumar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dbczumar/subscriptions","organizations_url":"https://api.github.com/users/dbczumar/orgs","repos_url":"https://api.github.com/users/dbczumar/repos","events_url":"https://api.github.com/users/dbczumar/events{/privacy}","received_events_url":"https://api.github.com/users/dbczumar/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1090/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/1090/timeline","performed_via_github_app":null,"state_reason":"completed"}