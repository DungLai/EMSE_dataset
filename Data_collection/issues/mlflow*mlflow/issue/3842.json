{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3842","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/3842/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/3842/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/3842/events","html_url":"https://github.com/mlflow/mlflow/issues/3842","id":767134699,"node_id":"MDU6SXNzdWU3NjcxMzQ2OTk=","number":3842,"title":"[FR] Programmatically specify a backend store connection string","user":{"login":"rbrown-kayak","id":75629364,"node_id":"MDQ6VXNlcjc1NjI5MzY0","avatar_url":"https://avatars.githubusercontent.com/u/75629364?v=4","gravatar_id":"","url":"https://api.github.com/users/rbrown-kayak","html_url":"https://github.com/rbrown-kayak","followers_url":"https://api.github.com/users/rbrown-kayak/followers","following_url":"https://api.github.com/users/rbrown-kayak/following{/other_user}","gists_url":"https://api.github.com/users/rbrown-kayak/gists{/gist_id}","starred_url":"https://api.github.com/users/rbrown-kayak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rbrown-kayak/subscriptions","organizations_url":"https://api.github.com/users/rbrown-kayak/orgs","repos_url":"https://api.github.com/users/rbrown-kayak/repos","events_url":"https://api.github.com/users/rbrown-kayak/events{/privacy}","received_events_url":"https://api.github.com/users/rbrown-kayak/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"},{"id":2022852620,"node_id":"MDU6TGFiZWwyMDIyODUyNjIw","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/sqlalchemy","name":"area/sqlalchemy","color":"ede978","default":false,"description":"Use of SQL alchemy in tracking service or model registry"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-12-15T03:33:00Z","updated_at":"2020-12-15T03:33:17Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [X] Yes. I can contribute this feature independently.\r\n- [ ] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nProvide a way to set the backend storage connection string that removes the security risk of placing secrets (password) on the command line.\r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\nI would like to be able to run MLFlow connected to a database server, with a database user that requires a password, without exposing that password on a command line.\r\n- Why is this use case valuable to support for MLflow users in general?\r\nPrimarily to lower the security risk, but also could add more extendability with regard to backend connection configuration.\r\n- Why is this use case valuable to support for your project(s) or organization?\r\nWe are reluctant to deploy MLFlow in our environment with the password exposed in the current manner.\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\nWhile the related (AWS S3) artifact root config poses the same issue, those secrets can be removed from command line by using ~/.aws/credentials. Unfortunately there is no such alternative for the backend connection string.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [X] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [X] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n\r\n## Details\r\n\r\nI would like to add support for specifying a python function callback as a connection string via command line. This connection string would be interpreted by `store/db/utils.py:create_sqlalchemy_engine(str)`. If the connection string looks like a callback string (see format below), the referenced python package/module:function would be dynamically imported and invoked. This function would serve as a connection string factory; in other words, the return value of said function would be passed into `sqlalchemy.create_engine(...)`\r\n\r\n`create_sqlalchemy_engine(str)` would process a connection string as a callback iff the \"driver\" portion of the connection string is \"pycallback\". Otherwise the connection string would be used as-is.\r\n\r\n**Proposed callback connection string format:**\r\n`pycallback://{target_package}/{module}:{function_name}?{options...}`\r\n- **target_package**: optional; name of python package where module and factory function reside\r\n- **module**: required;  name of the python module containing the factory function\r\n- **function_name**: optional; name of the factory function (default: get_db_url)\r\n- **options**: optional; a query string ('&' separated pairs, each pair is '=' separated. These are parsed into a dict and passed into the factory function as kwargs\r\n\r\n**Example Connection Strings:**\r\n`pycallback://my_module`\r\n- attempts to invoke `my_module.py:get_db_url` function with no kwargs\r\n\r\n`pycallback://my_package/my_module:my_connection_factory?user=mlflow&secret_location=/somewhere/safe/passwd_file&host=192.168.1.10`\r\n- attempts to invoke `my_package.my_module.py:my_connection_factory` with kwargs: `{'user': 'mlflow', 'secret_location': '/secrets/passwd_file', 'host': '192.168.1.10'}`\r\n\r\n**Example Factory Function (pseudo-code):**\r\n```\r\ndef get_db_url(**kwargs):\r\n     secret = load_secret_from(kwargs['secret_location']\r\n     # ...\r\n     return 'mysql://{user}:{passwd}@....'.format(user=kwargs['user'], passwd=secret, ...)\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3842/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/3842/timeline","performed_via_github_app":null,"state_reason":null}