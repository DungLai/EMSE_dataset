{"url":"https://api.github.com/repos/mlflow/mlflow/issues/2900","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/2900/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/2900/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/2900/events","html_url":"https://github.com/mlflow/mlflow/issues/2900","id":630457616,"node_id":"MDU6SXNzdWU2MzA0NTc2MTY=","number":2900,"title":"[FR] Configurable SQLAlchemy Engine Options","user":{"login":"aarushahuja-epi","id":65219597,"node_id":"MDQ6VXNlcjY1MjE5NTk3","avatar_url":"https://avatars.githubusercontent.com/u/65219597?v=4","gravatar_id":"","url":"https://api.github.com/users/aarushahuja-epi","html_url":"https://github.com/aarushahuja-epi","followers_url":"https://api.github.com/users/aarushahuja-epi/followers","following_url":"https://api.github.com/users/aarushahuja-epi/following{/other_user}","gists_url":"https://api.github.com/users/aarushahuja-epi/gists{/gist_id}","starred_url":"https://api.github.com/users/aarushahuja-epi/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aarushahuja-epi/subscriptions","organizations_url":"https://api.github.com/users/aarushahuja-epi/orgs","repos_url":"https://api.github.com/users/aarushahuja-epi/repos","events_url":"https://api.github.com/users/aarushahuja-epi/events{/privacy}","received_events_url":"https://api.github.com/users/aarushahuja-epi/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-06-04T02:18:17Z","updated_at":"2020-06-04T22:23:00Z","closed_at":"2020-06-04T22:22:59Z","author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\nAllow higher configurability of the SQLAlchemy engine. [SQLAlchemy Engines](https://docs.sqlalchemy.org/en/13/core/engines.html) provide various configuration options which can be passed in during engine creation to `sqlalchemy.create_engine`. Have a system for SQLAlchemy Engine parameters to be configured at runtime.\r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\nSQLAlchemy configuration options can be used by users to optimize database access based on the database being used. \r\n\r\n- Why is this use case valuable to support for MLflow users in general?\r\nThis can allow users to configure SQLAlchemy to their requirements without modifying the [engine creation code](https://github.com/mlflow/mlflow/blob/master/mlflow/store/db/utils.py#L175). The user can configure custom `connect_args`, Pooling options (beyond `pool_size` and `pool_overflow`), etc as defined in the [SQLAlchemy Documentation](https://docs.sqlalchemy.org/en/13/core/engines.html).\r\n\r\n- Why is this use case valuable to support for your project(s) or organization?\r\nMy specific use case is to use MLFlow Server with AWS Serverless DB, in which short-lived connections are preferred over persistent connections, as produced by the default SQLAlchemy Pooling strategy. Pooling can be disabled by passing the `sqlalchemy.pool.NullPool` during engine creation, but this is not possible because of the [hardcoded configuration](https://github.com/mlflow/mlflow/blob/master/mlflow/store/db/utils.py#L175) (barring the options for `pool_size` and `pool_overflow`).\r\n\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\nThe [configuration](https://github.com/mlflow/mlflow/blob/master/mlflow/store/db/utils.py#L175) is hardcoded currently, except for configuring the `pool_size` and `pool_overflow` parameters. While this is helpful, it is limiting. Parameters like `poolclass`, `connect_args`, `pool_timeout` cannot be configured easily without changing the codebase.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [x] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for\r\nModel Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [x] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [x] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n\r\n## Details\r\nInstead of having hardcoded environment variables for two parameters, all environment variables of the format `MLFLOW_SQLALCHEMYSTORE_*` could be read and passed in as kwargs to `sqlalchemy.create_engine`.\r\n\r\nAn issue here could be when classes have to be passed to the engine, like `poolclass=sqlalchemy.pool.NullPool`. An alternative solution could be to employ the `sqlalchemy.engine_from_config` method for engine creation.","closed_by":{"login":"andychow-db","id":58712524,"node_id":"MDQ6VXNlcjU4NzEyNTI0","avatar_url":"https://avatars.githubusercontent.com/u/58712524?v=4","gravatar_id":"","url":"https://api.github.com/users/andychow-db","html_url":"https://github.com/andychow-db","followers_url":"https://api.github.com/users/andychow-db/followers","following_url":"https://api.github.com/users/andychow-db/following{/other_user}","gists_url":"https://api.github.com/users/andychow-db/gists{/gist_id}","starred_url":"https://api.github.com/users/andychow-db/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andychow-db/subscriptions","organizations_url":"https://api.github.com/users/andychow-db/orgs","repos_url":"https://api.github.com/users/andychow-db/repos","events_url":"https://api.github.com/users/andychow-db/events{/privacy}","received_events_url":"https://api.github.com/users/andychow-db/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/2900/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/2900/timeline","performed_via_github_app":null,"state_reason":"completed"}