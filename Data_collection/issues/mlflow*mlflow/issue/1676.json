{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1676","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/1676/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/1676/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/1676/events","html_url":"https://github.com/mlflow/mlflow/issues/1676","id":474157731,"node_id":"MDU6SXNzdWU0NzQxNTc3MzE=","number":1676,"title":"[BUG]The feed_dict of the \\python3.6\\Lib\\site-packages\\mlflow\\tensorflow.py line 329 does not recognize the full shape of the dataframe object","user":{"login":"lyw615","id":32604809,"node_id":"MDQ6VXNlcjMyNjA0ODA5","avatar_url":"https://avatars.githubusercontent.com/u/32604809?v=4","gravatar_id":"","url":"https://api.github.com/users/lyw615","html_url":"https://github.com/lyw615","followers_url":"https://api.github.com/users/lyw615/followers","following_url":"https://api.github.com/users/lyw615/following{/other_user}","gists_url":"https://api.github.com/users/lyw615/gists{/gist_id}","starred_url":"https://api.github.com/users/lyw615/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lyw615/subscriptions","organizations_url":"https://api.github.com/users/lyw615/orgs","repos_url":"https://api.github.com/users/lyw615/repos","events_url":"https://api.github.com/users/lyw615/events{/privacy}","received_events_url":"https://api.github.com/users/lyw615/received_events","type":"User","site_admin":false},"labels":[{"id":955449428,"node_id":"MDU6TGFiZWw5NTU0NDk0Mjg=","url":"https://api.github.com/repos/mlflow/mlflow/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":1554650079,"node_id":"MDU6TGFiZWwxNTU0NjUwMDc5","url":"https://api.github.com/repos/mlflow/mlflow/labels/stale","name":"stale","color":"828282","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2019-07-29T17:00:43Z","updated_at":"2019-12-30T19:33:23Z","closed_at":"2019-12-30T19:33:23Z","author_association":"NONE","active_lock_reason":null,"body":"Please do not delete this template unless you are sure your issue is outside its scope.\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in MLflow)**:\r\n- **OS Platform and Distribution ï¼š Linux Ubuntu 16.04\r\n- **MLflow installed from (source or binary)**: \r\n- **MLflow version (run ``mlflow --version``)**:1.0.0\r\n- **Python version**: 3.6\r\n\r\n### Describe the problem\r\nThe feed_dict of the F:\\python3.6\\Lib\\site-packages\\mlflow\\tensorflow.py line 329 does not recognize the full shape of the dataframe object and needs to be manually converted to an ndarray array to recognize the full shape. I found this problem by rewriting the init function in \\site-packages\\mlflow/pyfunc/scoring_server/wsgi.py and \\site-packages\\mlflow\\pyfunc\\scoring_server\\__init__.py.Next I will show all the code I am rewriting, and the running process, the other code is the same as the source code.\r\n### Code to reproduce issue\r\nPredict function of mlflow.tensorflow:\r\n```\r\n    def predict(self, df):\r\n        import json\r\n        import numpy as np\r\n        with self.tf_graph.as_default():\r\n            print((df[\"input_x\"].values).shape)\r\n            feed_dict = {\r\n                    self.input_tensor_mapping[tensor_column_name]: np.array((df[tensor_column_name].values).tolist())\r\n                    for tensor_column_name in self.input_tensor_mapping.keys()\r\n            }\r\n##############################\r\n            kj=df[\"input_x\"].values\r\n            print(kj.shape,\"shape of kj\")\r\n            kj=kj.tolist()\r\n            load_dic=np.array(kj)\r\n            print(load_dic.shape,\"shape of dic\")\r\n            raw_preds = self.tf_sess.run(self.output_tensors, feed_dict=feed_dict)\r\n            #raw_preds = self.tf_sess.run(self.output_tensors, feed_dict=feed_dict)\r\n            print('predict is ok')\r\n            pred_dict = {column_name: values.ravel() for column_name, values in raw_preds.items()}\r\n            return pandas.DataFrame(data=pred_dict)`\r\n```\r\n\r\ninit function of __init__.py:\r\n```\r\ndef init(model):\r\n       app = flask.Flask(__name__)\r\n\r\n    @app.route('/ping', methods=['GET'])\r\n    def ping():  # pylint: disable=unused-variable\r\n        \"\"\"\r\n        Determine if the container is working and healthy.\r\n        We declare it healthy if we can load the model successfully.\r\n        \"\"\"\r\n        health = model is not None\r\n        status = 200 if health else 404\r\n        return flask.Response(response='\\n', status=status, mimetype='application/json')\r\n\r\n    @app.route('/invocations', methods=['POST'])\r\n    @catch_mlflow_exception\r\n    def transformation():  # pylint: disable=unused-variable\r\n        data = parse_json_input(json_input='/home/do/mlflow_x/Semantic-Segmentation-Suite-master/ij.json',orient=\"split\")\r\n\r\n        # Do the prediction\r\n        # pylint: disable=broad-except\r\n        try:\r\n            print('ok')\r\n            print(data.shape)\r\n            import pdb\r\n            pdb.set_trace()\r\n            raw_predictions = model.predict(data)\r\n        except Exception:\r\n            _handle_serving_error(\r\n                error_message=(\r\n                    \"Encountered an unexpected error while evaluating the model. Verify\"\r\n                    \" that the serialized input Dataframe is compatible with the model for\"\r\n                    \" inference.\"),\r\n                error_code=BAD_REQUEST)\r\n        result = StringIO()\r\n        predictions_to_json(raw_predictions, result)\r\n        return flask.Response(response=result.getvalue(), status=200, mimetype='application/json')\r\n    transformation()\r\n    return app\r\n```\r\nEdition of wsgi.py:\r\n```\r\nos.environ['CUDA_VISIBLE_DEVICES']='0'\r\nmm='/home/do/mlflow_x/Semantic-Segmentation-Suite-master/mlruns/0/0e7e1804cd814b9f92a068e969dc07cf/artifacts/need/good1'\r\napp = scoring_server.init(load_model(mm))\r\n```\r\n### Other info / logs\r\n```\r\n(Pdb) tbreak 6\r\nBreakpoint 1 at /software/conda/lib/python3.6/site-packages/mlflow/pyfunc/scoring_server/wsgi_copy.py:6\r\n(Pdb) c\r\nDeleted breakpoint 1 at /software/conda/lib/python3.6/site-packages/mlflow/pyfunc/scoring_server/wsgi_copy.py:6\r\n> /software/conda/lib/python3.6/site-packages/mlflow/pyfunc/scoring_server/wsgi_copy.py(6)<module>()\r\n-> app = scoring_server.init(load_model(mm))\r\n(Pdb) n\r\nok\r\n(1, 1)\r\n> /software/conda/lib/python3.6/site-packages/mlflow/pyfunc/scoring_server/__init__.py(176)transformation()\r\n-> raw_predictions = model.predict(data)\r\n(Pdb) s\r\n--Call--\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(326)predict()\r\n-> def predict(self, df):\r\n(Pdb) n\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(327)predict()\r\n-> import json\r\n325  \t\r\n326  \t    def predict(self, df):\r\n327  ->\t        import json\r\n328  \t        import numpy as np\r\n329  \t        with self.tf_graph.as_default():\r\n330  \t            # Build the feed dict, mapping input tensors to DataFrame column values.\r\n(Pdb) n\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(328)predict()\r\n-> import numpy as np\r\n(Pdb) n\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(329)predict()\r\n-> with self.tf_graph.as_default():\r\n(Pdb) n\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(336)predict()\r\n-> print((df[\"input_x\"].values).shape)#because self.input_tensor_mapping.keys()\r\n#is just \"input_x\"\r\n(Pdb) n\r\n(1,)#show the shape of df[\"input_x\"].values\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(337)predict()\r\n-> feed_dict = {\r\n(Pdb) n\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(339)predict()\r\n-> for tensor_column_name in self.input_tensor_mapping.keys()\r\n(Pdb) n\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(342)predict()\r\n-> kj=df[\"input_x\"].values\r\n(Pdb) pp self.input_tensor_mapping.keys()\r\ndict_keys(['input_x'])\r\n(Pdb) l\r\n337  \t            feed_dict = {\r\n338  \t                    self.input_tensor_mapping[tensor_column_name]: np.array((df[tensor_column_name].values).tolist())#edition was done here\r\n339  \t                    for tensor_column_name in self.input_tensor_mapping.keys()\r\n340  \t            }\r\n341  \t##############################\r\n342  ->\t            kj=df[\"input_x\"].values\r\n343  \t            print(kj.shape,\"shape of kj\")\r\n344  \t            kj=kj.tolist()\r\n345  \t            load_dic=np.array(kj)\r\n346  \t\r\n347  \t            # #print(kj.shape, \"shape  of list kj\")\r\n(Pdb) n\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(343)predict()\r\n-> print(kj.shape,\"shape of kj\")\r\n(Pdb) n\r\n(1,) shape of kj\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(344)predict()\r\n-> kj=kj.tolist()\r\n(Pdb) n\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(345)predict()\r\n-> load_dic=np.array(kj)\r\n(Pdb) n\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(356)predict()\r\n-> print(load_dic.shape,\"shape of dic\")\r\n(Pdb) n\r\n(1, 512, 512, 3) shape of dic#by tolist() and np.array() ,the completed shape  showed\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(361)predict()\r\n-> raw_preds = self.tf_sess.run(self.output_tensors, feed_dict=feed_dict)\r\n(Pdb) n\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(363)predict()\r\n-> print('predict is ok')\r\n(Pdb) n\r\npredict is ok#this show predict is well done\r\n> /software/conda/lib/python3.6/site-packages/mlflow/tensorflow.py(364)predict()\r\n-> pred_dict = {column_name: values.ravel() for column_name, values in raw_preds.items()}\r\n\r\n```\r\n","closed_by":{"login":"stale[bot]","id":26384082,"node_id":"MDM6Qm90MjYzODQwODI=","avatar_url":"https://avatars.githubusercontent.com/in/1724?v=4","gravatar_id":"","url":"https://api.github.com/users/stale%5Bbot%5D","html_url":"https://github.com/apps/stale","followers_url":"https://api.github.com/users/stale%5Bbot%5D/followers","following_url":"https://api.github.com/users/stale%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stale%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/stale%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/stale%5Bbot%5D/repos","events_url":"https://api.github.com/users/stale%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/stale%5Bbot%5D/received_events","type":"Bot","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1676/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/1676/timeline","performed_via_github_app":null,"state_reason":"completed"}