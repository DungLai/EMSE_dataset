{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5209","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/5209/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/5209/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/5209/events","html_url":"https://github.com/mlflow/mlflow/issues/5209","id":1091085188,"node_id":"I_kwDOCB5Jx85BCKOE","number":5209,"title":"[FR] Support an option to use sqlalchemy.pool.NullPool to avoid overwhelming DB in parallel runs","user":{"login":"A-Alaa","id":5414936,"node_id":"MDQ6VXNlcjU0MTQ5MzY=","avatar_url":"https://avatars.githubusercontent.com/u/5414936?v=4","gravatar_id":"","url":"https://api.github.com/users/A-Alaa","html_url":"https://github.com/A-Alaa","followers_url":"https://api.github.com/users/A-Alaa/followers","following_url":"https://api.github.com/users/A-Alaa/following{/other_user}","gists_url":"https://api.github.com/users/A-Alaa/gists{/gist_id}","starred_url":"https://api.github.com/users/A-Alaa/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/A-Alaa/subscriptions","organizations_url":"https://api.github.com/users/A-Alaa/orgs","repos_url":"https://api.github.com/users/A-Alaa/repos","events_url":"https://api.github.com/users/A-Alaa/events{/privacy}","received_events_url":"https://api.github.com/users/A-Alaa/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":978584226,"node_id":"MDU6TGFiZWw5Nzg1ODQyMjY=","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/docs","name":"area/docs","color":"48eabc","default":false,"description":"Documentation issues"},{"id":2022852620,"node_id":"MDU6TGFiZWwyMDIyODUyNjIw","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/sqlalchemy","name":"area/sqlalchemy","color":"ede978","default":false,"description":"Use of SQL alchemy in tracking service or model registry"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-12-30T12:48:44Z","updated_at":"2021-12-30T12:49:00Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nThe requested feature will allow users of mlflow (directly or e.g. through [optuna](https://github.com/optuna/optuna/tree/master/optuna)) to avoid using connection pools when relying on RDBMS. In this case, a connection is made for each transaction then closed afterwards.\r\n\r\n## Motivation\r\n\r\nTo control the connections to the database when the program is run by parallel processes (or nodes). Using `pool_size=1` and `max_overflow=1` can efficiently serve this purpose if the script is run by a single process, but doesn't prevent overwhelming the database server when the program is run by parallel processes.\r\n\r\nThe motivation arose when I deployed my program of model training and evaluation for hyperparameters search within an HPC environment. The program instances were aborted due to SQLAlchemy exception indicating that maximum connections to the database has been reached. I also received a report from the server admin conveying that this behavior has affected other users of the database server and limited their access.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [x] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [x] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nBy consulting the documentation of [sqlalchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine.params.poolclass), this turns out to be solved if we set `poolclass` to `pool.NullPool`.\r\n\r\nHere is a proposed solution for this request:\r\n\r\n[A-Alaa/mlflow/tree/null_pool](https://github.com/A-Alaa/mlflow/tree/null_pool)\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5209/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/5209/timeline","performed_via_github_app":null,"state_reason":null}