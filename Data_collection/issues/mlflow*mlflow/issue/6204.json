{"url":"https://api.github.com/repos/mlflow/mlflow/issues/6204","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/6204/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/6204/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/6204/events","html_url":"https://github.com/mlflow/mlflow/issues/6204","id":1296562953,"node_id":"I_kwDOCB5Jx85NR_sJ","number":6204,"title":"[FR] Support overriding profile.yml confs when running an MLflow pipeline  ","user":{"login":"smurching","id":2358483,"node_id":"MDQ6VXNlcjIzNTg0ODM=","avatar_url":"https://avatars.githubusercontent.com/u/2358483?v=4","gravatar_id":"","url":"https://api.github.com/users/smurching","html_url":"https://github.com/smurching","followers_url":"https://api.github.com/users/smurching/followers","following_url":"https://api.github.com/users/smurching/following{/other_user}","gists_url":"https://api.github.com/users/smurching/gists{/gist_id}","starred_url":"https://api.github.com/users/smurching/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/smurching/subscriptions","organizations_url":"https://api.github.com/users/smurching/orgs","repos_url":"https://api.github.com/users/smurching/repos","events_url":"https://api.github.com/users/smurching/events{/privacy}","received_events_url":"https://api.github.com/users/smurching/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":4265961281,"node_id":"LA_kwDOCB5Jx87-RWdB","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/recipes","name":"area/recipes","color":"48eabc","default":false,"description":"MLflow Recipes, Recipes APIs, Recipes configs, Recipe Templates"}],"state":"closed","locked":false,"assignee":{"login":"jinzhang21","id":78067366,"node_id":"MDQ6VXNlcjc4MDY3MzY2","avatar_url":"https://avatars.githubusercontent.com/u/78067366?v=4","gravatar_id":"","url":"https://api.github.com/users/jinzhang21","html_url":"https://github.com/jinzhang21","followers_url":"https://api.github.com/users/jinzhang21/followers","following_url":"https://api.github.com/users/jinzhang21/following{/other_user}","gists_url":"https://api.github.com/users/jinzhang21/gists{/gist_id}","starred_url":"https://api.github.com/users/jinzhang21/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jinzhang21/subscriptions","organizations_url":"https://api.github.com/users/jinzhang21/orgs","repos_url":"https://api.github.com/users/jinzhang21/repos","events_url":"https://api.github.com/users/jinzhang21/events{/privacy}","received_events_url":"https://api.github.com/users/jinzhang21/received_events","type":"User","site_admin":false},"assignees":[{"login":"jinzhang21","id":78067366,"node_id":"MDQ6VXNlcjc4MDY3MzY2","avatar_url":"https://avatars.githubusercontent.com/u/78067366?v=4","gravatar_id":"","url":"https://api.github.com/users/jinzhang21","html_url":"https://github.com/jinzhang21","followers_url":"https://api.github.com/users/jinzhang21/followers","following_url":"https://api.github.com/users/jinzhang21/following{/other_user}","gists_url":"https://api.github.com/users/jinzhang21/gists{/gist_id}","starred_url":"https://api.github.com/users/jinzhang21/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jinzhang21/subscriptions","organizations_url":"https://api.github.com/users/jinzhang21/orgs","repos_url":"https://api.github.com/users/jinzhang21/repos","events_url":"https://api.github.com/users/jinzhang21/events{/privacy}","received_events_url":"https://api.github.com/users/jinzhang21/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2022-07-06T22:38:56Z","updated_at":"2022-08-03T15:50:00Z","closed_at":"2022-08-03T15:50:00Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"### Willingness to contribute\r\n\r\nNo. I cannot contribute this feature at this time.\r\n\r\n### Proposal Summary\r\n\r\nI'm trying to run an MLflow pipeline in production. I want to log runs to an experiment / register model versions to a registered model created and managed via the [Databricks Terraform Provider](https://github.com/databrickslabs/terraform-provider-databricks). The experiment ID / model name created by Terraform are stored in JSON files (e.g. `terraform-output/prod.json`).\r\n\r\nIt'd be nice if I could dynamically augment the conf of my pipeline before running it. Unfortunately this is difficult to achieve (AFAICT) using current tools - see the \"Motivation\" section below for detail\r\n\r\n### Option 1: Provide Python API to override MLflow Pipeline configs\r\nAdd a `conf_overrides` constructor argument to the `Pipeline` class for passing pipeline overrides.\r\n\r\n```python\r\ndef load_resource_ids(env):\r\n  with open(os.path.join(\"terraform-output\", f\"{env}.json\"), \"r\") as terraform_resources_handle:\r\n    return json.load(terraform_resources_handle)\r\n\r\nenv = \"prod\"\r\n# Produces a dict like {\"mlflow_experiment_id\": <id>, \"mlflow_registered_model_name\": <name>}\r\nids = load_resource_ids(env)\r\n\r\n# Create a pipeline with config overrides supplied as a dict\r\np = Pipeline(profile=env, conf_overrides=ids)\r\np.run()\r\n```\r\n\r\nPros:\r\n* Flexible, allows loading confs from any external source, writing custom logic to conditionally set confs, etc.\r\n\r\nCons:\r\n* Splits source of truth of pipeline configs across ML code, `profiles/*.yaml` files, and `profile.yaml`. Makes it harder to understand what configs are being used when code is run -> harder to reproduce and debug pipeline execution.\r\n\r\n### Option 2: Provide custom DSL (Jinja filter) to read confs from terraform output YAML files\r\n\r\nAnother (much less flexible but more declarative) way to enable this use case could be to add a custom jinja filter for loading YAML (since JSON is a subset of YAML) to the [jinja Environment](https://github.com/mlflow/mlflow/blob/972c67dc48534befeb6b9664caeaf05afd0d0599/mlflow/utils/file_utils.py#L222-L224) used to render the final materialized pipeline YAML, e.g. just expose `yaml.load`-ing a file as a Jinja filter named `load_yaml`. Then profile.yml files could contain code like the following to load confs from JSON/YAML:\r\n\r\n```yaml\r\nexperiment:\r\n  id: {{ (\"terraform-output/prod.json\" | load_yaml )[\"mlflow_experiment_id\"] }}\r\n```\r\n\r\nPros:\r\n* Compared to option 1, preserves `pipeline.yaml` and `profiles/*.yaml` files as the main mechanisms for customizing pipeline config\r\n* Extensible to option 1 later on\r\n\r\nCons:\r\n* Not as flexible as option 1 upfront\r\n* Custom DSL for loading confs from JSON/YAML may be hard to discover. Users may also struggle to find docs for it and understand its behavior.\r\n\r\n\r\n### Motivation\r\n\r\n#### What is the use case for this feature?\r\nReferencing production resources managed through infra-as-code in MLflow pipelines\r\n\r\n#### Why is this use case valuable to support for MLflow users in general?\r\nSimplifies and enables more production use cases with MLflow pipelines\r\n\r\n#### Why is this use case valuable to support for your project(s) or organization?\r\nUnblocks my usage of MLflow pipelines for production use :) \r\n\r\n#### Why is it currently difficult to achieve this use case?\r\n\r\nThe workarounds I can think of aren't great:\r\n\r\n**Workaround 1: Leverage native YAML / Jinja functionality to include terraform output in pipeline config**\r\nUnfortunately it seems YAML provides [no way to do this natively](https://stackoverflow.com/questions/528281/how-can-i-include-a-yaml-file-inside-another), and in Jinja there are [no builtin filters](https://jinja.palletsprojects.com/en/3.1.x/templates/#list-of-builtin-filters) for parsing JSON & [it's not possible](https://stackoverflow.com/a/4829057/12111347) to define custom Python code within templates themselves. [Jinja macros](https://jinja.palletsprojects.com/en/3.0.x/templates/#import) are also limited to executing Jinja code and so not a viable solution.\r\n\r\n**Workaround 2: Convert terraform output into JSON that can be Jinja [`include`](https://jinja.palletsprojects.com/en/3.0.x/templates/#include)-d into profile.yaml**\r\nThis approach pushes the responsibility for producing MLP-compatible config output to external tools like Terraform. At least in the case of Terraform, [there's no obvious way](https://learn.hashicorp.com/tutorials/terraform/outputs#generate-machine-readable-output) to customize output format, so users would need to write their own logic for this using e.g. `jq`. This approach is pretty unwieldy.\r\n\r\n**Workaround 3: Create a temporary profile.yml with configs substituted in**\r\nWrite user code to create a temporary profile.yml files with JSON terraform output merged in, call `pipeline.run()`, then tear down the temporary profile.yml file. This option is complicated and error-prone\r\n\r\n### Details\r\n\r\n_No response_\r\n\r\n### What component(s) does this bug affect?\r\n\r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [X] `area/pipelines`: Pipelines, Pipeline APIs, Pipeline configs, Pipeline Templates\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\n### What interface(s) does this bug affect?\r\n\r\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\n### What language(s) does this bug affect?\r\n\r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\n### What integration(s) does this bug affect?\r\n\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations","closed_by":{"login":"jinzhang21","id":78067366,"node_id":"MDQ6VXNlcjc4MDY3MzY2","avatar_url":"https://avatars.githubusercontent.com/u/78067366?v=4","gravatar_id":"","url":"https://api.github.com/users/jinzhang21","html_url":"https://github.com/jinzhang21","followers_url":"https://api.github.com/users/jinzhang21/followers","following_url":"https://api.github.com/users/jinzhang21/following{/other_user}","gists_url":"https://api.github.com/users/jinzhang21/gists{/gist_id}","starred_url":"https://api.github.com/users/jinzhang21/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jinzhang21/subscriptions","organizations_url":"https://api.github.com/users/jinzhang21/orgs","repos_url":"https://api.github.com/users/jinzhang21/repos","events_url":"https://api.github.com/users/jinzhang21/events{/privacy}","received_events_url":"https://api.github.com/users/jinzhang21/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/6204/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/6204/timeline","performed_via_github_app":null,"state_reason":"completed"}