{"url":"https://api.github.com/repos/mlflow/mlflow/issues/479","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/479/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/479/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/479/events","html_url":"https://github.com/mlflow/mlflow/issues/479","id":359573305,"node_id":"MDU6SXNzdWUzNTk1NzMzMDU=","number":479,"title":"Broken runs when tag value contains new line characters","user":{"login":"GCBallesteros","id":6859287,"node_id":"MDQ6VXNlcjY4NTkyODc=","avatar_url":"https://avatars.githubusercontent.com/u/6859287?v=4","gravatar_id":"","url":"https://api.github.com/users/GCBallesteros","html_url":"https://github.com/GCBallesteros","followers_url":"https://api.github.com/users/GCBallesteros/followers","following_url":"https://api.github.com/users/GCBallesteros/following{/other_user}","gists_url":"https://api.github.com/users/GCBallesteros/gists{/gist_id}","starred_url":"https://api.github.com/users/GCBallesteros/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/GCBallesteros/subscriptions","organizations_url":"https://api.github.com/users/GCBallesteros/orgs","repos_url":"https://api.github.com/users/GCBallesteros/repos","events_url":"https://api.github.com/users/GCBallesteros/events{/privacy}","received_events_url":"https://api.github.com/users/GCBallesteros/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-09-12T17:08:13Z","updated_at":"2018-09-18T03:13:55Z","closed_at":"2018-09-18T03:13:08Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in MLflow)**:\r\nNo\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nLinux Ubuntu\r\n- **MLflow installed from (source or binary)**: \r\npip\r\n- **MLflow version (run ``mlflow --version``)**:\r\n0.6.0\r\n- **Python version**: \r\n3.5.2\r\n\r\n### Describe the problem\r\nWhen a tag value contains a string with a new line character a generic exception is raised. If the run is done within a `with` statement with `start_run` after the exception is raised the run is left unfinished. As a result the the web UI is left in a broken state for the whole experiment in which the run was made.\r\n\r\nI would expect tags to be able to contain arbitrary strings and broken runs to not completely break the web UI or at least to give a brief explanation as to what went wrong so that the faulty run can be manually removed from the `mlruns` directory.\r\n\r\n### Source code / logs\r\n```\r\nwith flow.start_run(experiment_id=3):\r\n    extra_comments=\"\"\"New lines break the tag, the run and the UI.\r\nOopsie.\"\"\"\r\n    mlflow.set_tag('ExtraComments', extra_comments)\r\n```\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nException                                 Traceback (most recent call last)\r\n<ipython-input-4-ddad37fe21b6> in <module>()\r\n      3     extra_comments=\"\"\"New lines break the tag, the run and UI.\r\n      4 Oopsie.\"\"\"\r\n----> 5     mlflow.set_tag('ExtraComments', extra_comments)\r\n\r\n/usr/local/lib/python3.5/dist-packages/mlflow/tracking/fluent.py in __exit__(self, exc_type, exc_val, exc_tb)\r\n     38     def __exit__(self, exc_type, exc_val, exc_tb):\r\n     39         status = \"FINISHED\" if exc_type is None else \"FAILED\"\r\n---> 40         end_run(status)\r\n     41         return exc_type is None\r\n     42 \r\n\r\n/usr/local/lib/python3.5/dist-packages/mlflow/tracking/fluent.py in end_run(status)\r\n    116     global _active_run\r\n    117     if _active_run:\r\n--> 118         MlflowClient().set_terminated(_active_run.info.run_uuid, status)\r\n    119         # Clear out the global existing run environment variable as well.\r\n    120         env.unset_variable(_RUN_ID_ENV_VAR)\r\n\r\n/usr/local/lib/python3.5/dist-packages/mlflow/tracking/client.py in set_terminated(self, run_id, status, end_time)\r\n    202         status = status if status else \"FINISHED\"\r\n    203         self.store.update_run_info(run_id, run_status=RunStatus.from_string(status),\r\n--> 204                                    end_time=end_time)\r\n    205 \r\n    206 \r\n\r\n/usr/local/lib/python3.5/dist-packages/mlflow/store/file_store.py in update_run_info(self, run_uuid, run_status, end_time)\r\n    195     def update_run_info(self, run_uuid, run_status, end_time):\r\n    196         _validate_run_id(run_uuid)\r\n--> 197         run_info = self.get_run(run_uuid).info\r\n    198         new_info = run_info._copy_with_overrides(run_status, end_time)\r\n    199         run_dir = self._get_run_dir(run_info.experiment_id, run_info.run_uuid)\r\n\r\n/usr/local/lib/python3.5/dist-packages/mlflow/store/file_store.py in get_run(self, run_uuid)\r\n    247         metrics = self.get_all_metrics(run_uuid)\r\n    248         params = self.get_all_params(run_uuid)\r\n--> 249         tags = self.get_all_tags(run_uuid)\r\n    250         return Run(run_info, RunData(metrics, params, tags))\r\n    251 \r\n\r\n/usr/local/lib/python3.5/dist-packages/mlflow/store/file_store.py in get_all_tags(self, run_uuid)\r\n    358         tags = []\r\n    359         for tag_file in tag_files:\r\n--> 360             tags.append(self._get_tag_from_file(parent_path, tag_file))\r\n    361         return tags\r\n    362 \r\n\r\n/usr/local/lib/python3.5/dist-packages/mlflow/store/file_store.py in _get_tag_from_file(parent_path, tag_name)\r\n    336         if len(tag_data) > 1:\r\n    337             raise Exception(\"Unexpected data for tag '%s'. Tag recorded more than once\"\r\n--> 338                             % tag_name)\r\n    339         return RunTag(tag_name, str(tag_data[0].strip()))\r\n    340 \r\n\r\nException: Unexpected data for tag 'ExtraComments'. Tag recorded more than once\r\n```\r\n\r\nThanks for sharing this great work with all of us!","closed_by":{"login":"aarondav","id":1400247,"node_id":"MDQ6VXNlcjE0MDAyNDc=","avatar_url":"https://avatars.githubusercontent.com/u/1400247?v=4","gravatar_id":"","url":"https://api.github.com/users/aarondav","html_url":"https://github.com/aarondav","followers_url":"https://api.github.com/users/aarondav/followers","following_url":"https://api.github.com/users/aarondav/following{/other_user}","gists_url":"https://api.github.com/users/aarondav/gists{/gist_id}","starred_url":"https://api.github.com/users/aarondav/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aarondav/subscriptions","organizations_url":"https://api.github.com/users/aarondav/orgs","repos_url":"https://api.github.com/users/aarondav/repos","events_url":"https://api.github.com/users/aarondav/events{/privacy}","received_events_url":"https://api.github.com/users/aarondav/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/479/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/479/timeline","performed_via_github_app":null,"state_reason":"completed"}