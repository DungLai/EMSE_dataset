{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3298","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/3298/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/3298/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/3298/events","html_url":"https://github.com/mlflow/mlflow/issues/3298","id":682337354,"node_id":"MDU6SXNzdWU2ODIzMzczNTQ=","number":3298,"title":"[FR] Support creating conda environments from spec files","user":{"login":"hajapy","id":21218230,"node_id":"MDQ6VXNlcjIxMjE4MjMw","avatar_url":"https://avatars.githubusercontent.com/u/21218230?v=4","gravatar_id":"","url":"https://api.github.com/users/hajapy","html_url":"https://github.com/hajapy","followers_url":"https://api.github.com/users/hajapy/followers","following_url":"https://api.github.com/users/hajapy/following{/other_user}","gists_url":"https://api.github.com/users/hajapy/gists{/gist_id}","starred_url":"https://api.github.com/users/hajapy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hajapy/subscriptions","organizations_url":"https://api.github.com/users/hajapy/orgs","repos_url":"https://api.github.com/users/hajapy/repos","events_url":"https://api.github.com/users/hajapy/events{/privacy}","received_events_url":"https://api.github.com/users/hajapy/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022848510,"node_id":"MDU6TGFiZWwyMDIyODQ4NTEw","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/projects","name":"area/projects","color":"48eabc","default":false,"description":"MLproject format, project running backends"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-08-20T02:48:37Z","updated_at":"2020-08-20T13:19:22Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Willingness to contribute\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\nExtend the conda support in mlflow to also support spec files in addition to an environment.yml file. \r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\nTo support more explicit environment specification through conda native features.\r\n- Why is this use case valuable to support for MLflow users in general?\r\nImproved environment reproducibility while still using conda. Faster first-time conda environment creation.\r\n- Why is this use case valuable to support for your project(s) or organization?\r\nI'd like environments created on different machines and/or at different times to be consistent.\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\nThe docker environment requires a lot more external effort and tooling to set up vs. the conda environment. Currently mlflow creates conda env only via [the `conda env create -n <name> --file <env-file>` command](https://github.com/mlflow/mlflow/blob/67b09adcd276271aab81bbbfa638bc3aa7dfa7c4/mlflow/utils/conda.py#L94), whereas if it could also use `conda create -n <name> --file <spec-file>`.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [x] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\nThe conda docs explain spec files here: https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#building-identical-conda-environments. These are generally produced by `conda list --explicit`, though [conda-lock](https://github.com/mariusvniekerk/conda-lock) is a tool that helps build them from environment files. The two main benefits are 1. fully explicit environments 2. avoid invoking the conda solver producing environments faster.\r\n\r\nTo implement this one could simply look at the extension of the file: \r\n\r\n```\r\nif ext in {\".yaml\", \".yml\"}:\r\n    conda env create -n name --file <env-file>  \r\nelse if ext in {\".txt\", \".lock\"}:  \r\n    conda create -n name --file <spec-file>\r\n```\r\n(note: the .lock extension is a conda-lock detail)\r\n\r\nThis would overload the meaning of the \"conda_env\" field in MLProject, which may require some extra documentation. A more explicit approach might be to define a \"conda_spec\" field for MLProject, though I'm not sure if that is much better/clearer. \r\n\r\nIf the file extension based approach sounds like a good idea, I would be able to contribute it.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3298/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/3298/timeline","performed_via_github_app":null,"state_reason":null}