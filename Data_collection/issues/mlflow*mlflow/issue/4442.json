{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4442","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/4442/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/4442/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/4442/events","html_url":"https://github.com/mlflow/mlflow/issues/4442","id":916657376,"node_id":"MDU6SXNzdWU5MTY2NTczNzY=","number":4442,"title":"[FR] Add support to pass keyword arguments to m","user":{"login":"narayanacharya6","id":6968565,"node_id":"MDQ6VXNlcjY5Njg1NjU=","avatar_url":"https://avatars.githubusercontent.com/u/6968565?v=4","gravatar_id":"","url":"https://api.github.com/users/narayanacharya6","html_url":"https://github.com/narayanacharya6","followers_url":"https://api.github.com/users/narayanacharya6/followers","following_url":"https://api.github.com/users/narayanacharya6/following{/other_user}","gists_url":"https://api.github.com/users/narayanacharya6/gists{/gist_id}","starred_url":"https://api.github.com/users/narayanacharya6/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/narayanacharya6/subscriptions","organizations_url":"https://api.github.com/users/narayanacharya6/orgs","repos_url":"https://api.github.com/users/narayanacharya6/repos","events_url":"https://api.github.com/users/narayanacharya6/events{/privacy}","received_events_url":"https://api.github.com/users/narayanacharya6/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022845866,"node_id":"MDU6TGFiZWwyMDIyODQ1ODY2","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/artifacts","name":"area/artifacts","color":"48eabc","default":false,"description":"Artifact stores and artifact logging"},{"id":2022848043,"node_id":"MDU6TGFiZWwyMDIyODQ4MDQz","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/models","name":"area/models","color":"48eabc","default":false,"description":"MLmodel format, model serialization/deserialization, flavors"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-06-09T20:42:08Z","updated_at":"2021-06-09T20:42:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [x] Yes. I can contribute this feature independently.\r\n- [] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nCurrently the[ `mlflow.spacy.load_model()`](https://github.com/mlflow/mlflow/blob/master/mlflow/spacy.py#L263) function takes in only the `model_uri` as a parameter to fetch and load the spaCy model. Internally it calls `spacy.load()` passing in the directory where the model was downloaded. `spacy.load()` also takes in [additional keyword arguments](https://spacy.io/api/top-level#spacy.load) to pass config overrides, options to exclude and disable components, etc. which the current implementation of `mlflow.spacy.load_model()` does not take advantage of.\r\n\r\n## Motivation\r\n- What is the use case for this feature? _Load spaCy models with customizations as required easily._\r\n- Why is this use case valuable to support for MLflow users in general? _Load spaCy models with customizations as required easily._\r\n- Why is this use case valuable to support for your project(s) or organization? _Load spaCy models with customizations as required easily._\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient) _Current API does not support the use case and workarounds involve touching some internal functions. See below for a workaround._\r\n\r\n```\r\nmodel_uri = f\"models:/{model_name}/{model_version}\"\r\nlocal_model_path = _download_artifact_from_uri(artifact_uri=model_uri)\r\nflavor_conf = _get_flavor_configuration(model_path=local_model_path, flavor_name=\"spacy\")\r\nspacy_model_file_path = os.path.join(local_model_path, flavor_conf.get(\"data\", \"model.spacy\"))\r\nnlp = spacy.load(spacy_model_file_path, config=config)\r\n```\r\n\r\nThe proposed method should allow this to be:\r\n```\r\nmodel_uri = f\"models:/{model_name}/{model_version}\"\r\nnlp = mlflow.spacy.load_model(model_uri, config=config)\r\n```\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [x] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [x] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\nAllow `mlflow.spacy.load_model()` to take in pass through keyword argument parameters to be passed to `spacy.load()` internally.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4442/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/4442/timeline","performed_via_github_app":null,"state_reason":null}