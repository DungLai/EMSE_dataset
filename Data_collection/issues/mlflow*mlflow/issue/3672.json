{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3672","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/3672/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/3672/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/3672/events","html_url":"https://github.com/mlflow/mlflow/issues/3672","id":740742994,"node_id":"MDU6SXNzdWU3NDA3NDI5OTQ=","number":3672,"title":"[FR] Global parameters for projects","user":{"login":"lorenzwalthert","id":10477073,"node_id":"MDQ6VXNlcjEwNDc3MDcz","avatar_url":"https://avatars.githubusercontent.com/u/10477073?v=4","gravatar_id":"","url":"https://api.github.com/users/lorenzwalthert","html_url":"https://github.com/lorenzwalthert","followers_url":"https://api.github.com/users/lorenzwalthert/followers","following_url":"https://api.github.com/users/lorenzwalthert/following{/other_user}","gists_url":"https://api.github.com/users/lorenzwalthert/gists{/gist_id}","starred_url":"https://api.github.com/users/lorenzwalthert/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lorenzwalthert/subscriptions","organizations_url":"https://api.github.com/users/lorenzwalthert/orgs","repos_url":"https://api.github.com/users/lorenzwalthert/repos","events_url":"https://api.github.com/users/lorenzwalthert/events{/privacy}","received_events_url":"https://api.github.com/users/lorenzwalthert/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022848510,"node_id":"MDU6TGFiZWwyMDIyODQ4NTEw","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/projects","name":"area/projects","color":"48eabc","default":false,"description":"MLproject format, project running backends"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2020-11-11T12:51:29Z","updated_at":"2022-01-05T09:18:14Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Thank you for submitting a feature request. **Before proceeding, please review MLflow's [Issue Policy for feature requests](https://www.github.com/mlflow/mlflow/blob/master/ISSUE_POLICY.md#feature-requests) and the [MLflow Contributing Guide](https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.rst)**.\r\n\r\n**Please fill in this feature request template to ensure a timely and thorough response.**\r\n\r\n## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\nI can contribute the R part (if any of the implementation is specific to R), ideally someone else implements this for the other language clients. Maybe I can support for Python too.\r\n\r\n## Proposal Summary\r\n\r\nI suggest to allow specifying parameters in MLprojects globally in addition to per entry-point to reduce code duplication.\r\n\r\n## Motivation\r\n\r\nI am using MLflow in my daily workflows and I came across the following problem: MLprojects can grow big in terms of entry points and parameters. Some entry points share parameters, e.g. how to treat missing values. It would be great if these could be defined globally in MLproject instead of by entry point because this would reduce duplication and cognitive burden for the user. In particular if a user wants to change the value of the parameter, it has to be updated in multiple places, which is error prone. Building on the [example](https://mlflow.org/docs/latest/projects.html#mlproject-file) from the doc, here is how I imagine this to be implemented:\r\n\r\n\r\n```yaml\r\nname: My Project\r\nparameters: # <- This is a new key\r\n  on_missing: {type: string, default: \"error\"}\r\n\r\n\r\nconda_env: my_env.yaml\r\n# Can have a docker_env instead of a conda_env, e.g.\r\n# docker_env:\r\n#    image:  mlflow-docker-example\r\n\r\nentry_points:\r\n  main:\r\n    parameters:\r\n       regularization: {type: float, default: 0.1}\r\n  command: \"python train.py -r {regularization} --on_missing={on_missing}\"\r\n  validate:\r\n    parameters:\r\n      data_file: path\r\n    command: \"python validate.py {data_file} --on_missing={on_missing}\"\r\n```\r\n\r\nI suggest that the parameters defined in an entry point take precedence over the ones defined globally in case both are defined. This is a non-breaking API change and would benefit everyone who uses MLprojects with entry points that share at least one parameter. I think the benefit of this relative to the implementation effort is small. \r\n\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [x] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\n(Use this section to include any additional information about the feature. If you have a proposal for how to implement this feature, please include it here. For implementation guidelines, please refer to the [Contributing Guide](https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.rst#contribution-guidelines).)\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3672/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/3672/timeline","performed_via_github_app":null,"state_reason":null}