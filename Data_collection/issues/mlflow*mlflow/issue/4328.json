{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4328","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/4328/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/4328/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/4328/events","html_url":"https://github.com/mlflow/mlflow/issues/4328","id":878645578,"node_id":"MDU6SXNzdWU4Nzg2NDU1Nzg=","number":4328,"title":"[FR] Allow customisation of active model stages above Staging, Production","user":{"login":"Samreay","id":6748505,"node_id":"MDQ6VXNlcjY3NDg1MDU=","avatar_url":"https://avatars.githubusercontent.com/u/6748505?v=4","gravatar_id":"","url":"https://api.github.com/users/Samreay","html_url":"https://github.com/Samreay","followers_url":"https://api.github.com/users/Samreay/followers","following_url":"https://api.github.com/users/Samreay/following{/other_user}","gists_url":"https://api.github.com/users/Samreay/gists{/gist_id}","starred_url":"https://api.github.com/users/Samreay/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Samreay/subscriptions","organizations_url":"https://api.github.com/users/Samreay/orgs","repos_url":"https://api.github.com/users/Samreay/repos","events_url":"https://api.github.com/users/Samreay/events{/privacy}","received_events_url":"https://api.github.com/users/Samreay/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1470945519,"node_id":"MDU6TGFiZWwxNDcwOTQ1NTE5","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/uiux","name":"area/uiux","color":"ede978","default":false,"description":"Front-end, user experience, plotting, JavaScript, JavaScript dev server"},{"id":2022847714,"node_id":"MDU6TGFiZWwyMDIyODQ3NzE0","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/model-registry","name":"area/model-registry","color":"48eabc","default":false,"description":"Model registry, model registry APIs, and the fluent client calls for model registry"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-05-07T09:11:18Z","updated_at":"2021-07-13T23:59:15Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [X] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nCurrently model stages are fixed - Staging, Production and Archived. This FR would extend this list of three to be configurable, such that custom stages could be added. For example \"Dev, UAT, Production, Archived\"\r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\n\r\nUsers who want more fine-grained control of the model lifecycle\r\n\r\n- Why is this use case valuable to support for MLflow users in general?\r\n\r\nMLflow is a great experiment tracker, and this would help improve its ease-of-integration with model serving solutions by, as an example, promoting/deploying models at different stages to different locations/severs/environments.\r\n\r\n- Why is this use case valuable to support for your project(s) or organization?\r\n\r\nSame as the above.\r\n\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\n\r\nCurrently model stages are few (only two active stages - Staging and Production), and they are hard coded.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [X] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [X] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nWould love help figuring this out. I did a quick search for [\"Staging\"](https://github.com/mlflow/mlflow/search?q=Staging) in the repo, and I can see that the stages are hard coded in two places:\r\n\r\n```\r\nmlflow/server/js/src/model-registry/constants.js\r\nmlflow/entities/model_registry/model_version_stages.py\r\n```\r\n\r\nIf the active stages could be bought out into config file, and then exposed so the UI can request them, I am hoping there will be minimal other changes. The code utilising ACTIVE_STAGES in the js should be able to handle extensions to the list, a same for the ALL_STAGES python variable. I believe this is because the stages are used mostly by clients through the cil or python API, so are more like useful semantic tags rather than something utilised significantly by mlflow in its own internal logic.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4328/reactions","total_count":6,"+1":6,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/4328/timeline","performed_via_github_app":null,"state_reason":null}