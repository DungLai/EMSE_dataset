{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5218","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/5218/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/5218/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/5218/events","html_url":"https://github.com/mlflow/mlflow/issues/5218","id":1094246783,"node_id":"I_kwDOCB5Jx85BOOF_","number":5218,"title":"[FR] Adding versioning of MLproject file specification","user":{"login":"pbezglasny","id":3322382,"node_id":"MDQ6VXNlcjMzMjIzODI=","avatar_url":"https://avatars.githubusercontent.com/u/3322382?v=4","gravatar_id":"","url":"https://api.github.com/users/pbezglasny","html_url":"https://github.com/pbezglasny","followers_url":"https://api.github.com/users/pbezglasny/followers","following_url":"https://api.github.com/users/pbezglasny/following{/other_user}","gists_url":"https://api.github.com/users/pbezglasny/gists{/gist_id}","starred_url":"https://api.github.com/users/pbezglasny/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pbezglasny/subscriptions","organizations_url":"https://api.github.com/users/pbezglasny/orgs","repos_url":"https://api.github.com/users/pbezglasny/repos","events_url":"https://api.github.com/users/pbezglasny/events{/privacy}","received_events_url":"https://api.github.com/users/pbezglasny/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022848510,"node_id":"MDU6TGFiZWwyMDIyODQ4NTEw","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/projects","name":"area/projects","color":"48eabc","default":false,"description":"MLproject format, project running backends"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-01-05T11:21:07Z","updated_at":"2022-01-05T11:21:24Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Thank you for submitting a feature request. **Before proceeding, please review MLflow's [Issue Policy for feature requests](https://www.github.com/mlflow/mlflow/blob/master/ISSUE_POLICY.md#feature-requests) and the [MLflow Contributing Guide](https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.rst)**.\r\n\r\n**Please fill in this feature request template to ensure a timely and thorough response.**\r\n\r\n## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\nAdd versioning of MLroject file specification and add support to mlflow working with different versions of MLproject file. \r\n\r\n## Motivation\r\nToday mlflow uses single file format. In this approach, it is necessary to maintain backward compatibility when adding a new feature. For example, there is feature request #4246 (adding poetry to create environment). To implement it we need to add another if condition to [here](https://github.com/mlflow/mlflow/blob/master/mlflow/projects/_project_spec.py#L38)\r\n```python\r\n    docker_env = yaml_obj.get(\"docker_env\")\r\n    if docker_env:\r\n   ...\r\n    # Validate config if conda_env parameter is present\r\n    conda_path = yaml_obj.get(\"conda_env\")\r\n    if conda_path and docker_env:\r\n        raise ExecutionException(\"Project cannot contain both a docker and \" \"conda environment.\")\r\n```\r\nThat approach will look not great and in my opinion it better to add environment field to MLproject file, something like this\r\n```yaml\r\nenv:\r\n  type: docker\r\n  image: python:3.7\r\n```\r\nor \r\n```yaml\r\nenv:\r\n  type: conda\r\n  file: conda.yaml\r\n```\r\nThis type of change will break backaward compability. To get good user experience of using projects explicit information about used version of the file should be given.\r\n\r\nThus, proposal will next: add version field to MLproject file and add mlflow support of using different version of MLproject file specification. For example, like it uses in [docker compose file](https://docs.docker.com/compose/compose-file/) and [kubernetes apiVersion field](https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/).  \r\nTo save backaward campability of current version it posible to maintain current functionality without  adding version field in file. To use new functionality user have to add version field to MLproject file.\r\n\r\nFiles in package projects will be affected (I can add more details if needed).  \r\n\r\nNext pros and cons \r\nPros:\r\n- possibility to break backward compatibility and add new features with less effort\r\n- explicit information which functionality is available for installed version of mlflow\r\n\r\nCons:\r\n- user should know version of MLproject file specification (using of major+minor versioning with compatibility for major version can help to reduce this problem).\r\n\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [x] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\n(Use this section to include any additional information about the feature. If you have a proposal for how to implement this feature, please include it here. For implementation guidelines, please refer to the [Contributing Guide](https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.rst#contribution-guidelines).)\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5218/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/5218/timeline","performed_via_github_app":null,"state_reason":null}