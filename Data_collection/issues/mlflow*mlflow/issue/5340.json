{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5340","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/5340/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/5340/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/5340/events","html_url":"https://github.com/mlflow/mlflow/issues/5340","id":1121877219,"node_id":"I_kwDOCB5Jx85C3nzj","number":5340,"title":"[FR] Make the AzureML entry script accept more data types","user":{"login":"ecm200","id":34489160,"node_id":"MDQ6VXNlcjM0NDg5MTYw","avatar_url":"https://avatars.githubusercontent.com/u/34489160?v=4","gravatar_id":"","url":"https://api.github.com/users/ecm200","html_url":"https://github.com/ecm200","followers_url":"https://api.github.com/users/ecm200/followers","following_url":"https://api.github.com/users/ecm200/following{/other_user}","gists_url":"https://api.github.com/users/ecm200/gists{/gist_id}","starred_url":"https://api.github.com/users/ecm200/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ecm200/subscriptions","organizations_url":"https://api.github.com/users/ecm200/orgs","repos_url":"https://api.github.com/users/ecm200/repos","events_url":"https://api.github.com/users/ecm200/events{/privacy}","received_events_url":"https://api.github.com/users/ecm200/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022848043,"node_id":"MDU6TGFiZWwyMDIyODQ4MDQz","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/models","name":"area/models","color":"48eabc","default":false,"description":"MLmodel format, model serialization/deserialization, flavors"},{"id":2022848902,"node_id":"MDU6TGFiZWwyMDIyODQ4OTAy","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/scoring","name":"area/scoring","color":"48eabc","default":false,"description":"MLflow Model server, model deployment tools, Spark UDFs"},{"id":2022859639,"node_id":"MDU6TGFiZWwyMDIyODU5NjM5","url":"https://api.github.com/repos/mlflow/mlflow/labels/integrations/azure","name":"integrations/azure","color":"ffbce5","default":false,"description":"Azure and Azure ML integrations"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-02-02T12:40:07Z","updated_at":"2022-07-26T15:31:51Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Thank you for submitting a feature request. **Before proceeding, please review MLflow's [Issue Policy for feature requests](https://www.github.com/mlflow/mlflow/blob/master/ISSUE_POLICY.md#feature-requests) and the [MLflow Contributing Guide](https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.rst)**.\r\n\r\n**Please fill in this feature request template to ensure a timely and thorough response.**\r\n\r\n## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [x] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nCurrently, the required entry script for deployment of models onto the `azureml` ecosystem from `mlflow` is hardwired as a text string, and configurable using the `mlflow.pyfunc` functions for each model flavour. However, the current function to decoding JSON input data only supports Schema types associated with Pandas Dataframe tabular data, and does not for example, support the use **TFServing type tensor structures** which are important for image based applications.\r\n\r\nThe current string which is hard coded into the `mlflow.azureml.__init__.py` file is as follows:\r\n\r\n```python\r\nimport pandas as pd\r\nfrom azureml.core.model import Model\r\nfrom mlflow.pyfunc import load_model\r\nfrom mlflow.pyfunc.scoring_server import parse_json_input, _get_jsonable_obj\r\n\r\ndef init():\r\n    global model\r\n    model_path = Model.get_model_path(model_name=\"{model_name}\", version={model_version})\r\n    model = load_model(model_path)\r\n\r\ndef run(json_input):\r\n    input_df = parse_json_input(json_input=json_input, orient=\"split\")\r\n    return _get_jsonable_obj(model.predict(input_df), pandas_orient=\"records\")\r\n```\r\n\r\nThe [`parse_json_input`](https://github.com/mlflow/mlflow/blob/1335164d20a6521dd4ebfe3f361d19fe9672efcf/mlflow/pyfunc/scoring_server/__init__.py#L116) function, which comes form the module `mlflow.pyfunc.scoring_server`, has only the ability to handle Pandas Dataframe tabular data, and thus does not convert input JSON content to tensor (numpy ndarray) type objects. It doesn't support the TFServing tensor format, which would allow for decoding of these types of structures.\r\n\r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\n\r\nA simple extension of a use case here is the ability to tensor type inputs as defined by the Tensorspec Schema type, and support the deserialization of numpy ndarrays, such as images. This opens up the potential for any type of application which uses ndarray objects as inputs, such as CNN applications.\r\n\r\n- Why is this use case valuable to support for MLflow users in general?\r\n\r\nIt broadens the scope of the types of models that can be deployed on AzureML using the model agnostic infrastructure developed through the `mlflow.pyfunc` flavours.\r\n\r\n- Why is this use case valuable to support for your project(s) or organization?\r\n\r\nPotential for many different types of models, not just Pandas dataframe tabular based data structures as input.\r\n\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\n\r\nThe current implementation of the entry script is defined as a hard coded string in the `mlflow.azureml` module and cannot be overwritten or modified by any functional call. Therefore, the limitations of what data types can be deserialized by the JSON deserialization function used cannot be circumvented without changes to the said the module.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [x] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [x] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [x] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\n(Use this section to include any additional information about the feature. If you have a proposal for how to implement this feature, please include it here. For implementation guidelines, please refer to the [Contributing Guide](https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.rst#contribution-guidelines).)\r\n\r\nOne potential solution to the problem is to use existing functionality that has been developed for other deployment types in the `mlflow` package. A number of JSON deserialization functions are contained within the `mlflow.pyfunc.scoring_serving` module which do have the ability to decode TFServing type tensor formats, and convert these to numpy ndarrays from the specified `mlflow.types.Schema`.\r\n\r\nIf an input of a numpy ndarray representing an image (e.g. shape of `image` is `(3,800,600)` array) is encapsulated and serialized in the following way (using the TFServing definintion):\r\n\r\n```python\r\npayload = {\r\n            'instances' : [\r\n                image.tolist()\r\n                ]\r\n        }\r\npayload = str.encode(json.dumps(payload)))\r\n```\r\n\r\nThen using the `mlflow.pyfunc.scoring_server` module function [`infer_and_parse_json_input()`](https://github.com/mlflow/mlflow/blob/1335164d20a6521dd4ebfe3f361d19fe9672efcf/mlflow/pyfunc/scoring_server/__init__.py#L76) in the entry script does result in successful decoding of the above JSON serialized numpy ndarray back to the correct sized object, which can then be passed to loaded model function for inference.\r\n\r\nA notional modification to the entry script could potentially be as simple as:\r\n\r\n```python\r\nimport pandas as pd\r\nfrom azureml.core.model import Model\r\nfrom mlflow.pyfunc import load_model\r\nfrom mlflow.pyfunc.scoring_server import infer_and_parse_json_input, _get_jsonable_obj\r\n\r\ndef init():\r\n    global model\r\n    model_path = Model.get_model_path(model_name=\"{model_name}\", version={model_version})\r\n    model = load_model(model_path)\r\n\r\ndef run(json_input):\r\n    input = infer_and_parse_json_input(json_input=json_input, orient=\"split\")\r\n    return _get_jsonable_obj(model.predict(input), pandas_orient=\"records\")\r\n```\r\n\r\nLocal testing of this functionality appears to be successful in decoding the JSON serialized image back to a `numpy ndarray` and was successfully accepted by a `PyTorch ONNX` model that takes `numpy ndarray` image representations as input.\r\n\r\nThere are a few issues to iron out, including the additional dimension returned by the `infer_and_parse_json_input()` function, that is a shape of `(1,3,nx,ny)` instead of the transmitted `(3,nx,ny)`. A simple `numpy.squeeze()` application solves this issue, however, `input` may not be only be a `numpy ndarray` so some digging into the `infer_and_parse_json_input()` function is required to see why.\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5340/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/5340/timeline","performed_via_github_app":null,"state_reason":null}