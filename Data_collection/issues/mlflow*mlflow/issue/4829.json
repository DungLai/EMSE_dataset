{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4829","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/4829/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/4829/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/4829/events","html_url":"https://github.com/mlflow/mlflow/issues/4829","id":999803361,"node_id":"I_kwDOCB5Jx847l8nh","number":4829,"title":"[FR] Simplify model registration in autolog","user":{"login":"mmaitre314","id":8584604,"node_id":"MDQ6VXNlcjg1ODQ2MDQ=","avatar_url":"https://avatars.githubusercontent.com/u/8584604?v=4","gravatar_id":"","url":"https://api.github.com/users/mmaitre314","html_url":"https://github.com/mmaitre314","followers_url":"https://api.github.com/users/mmaitre314/followers","following_url":"https://api.github.com/users/mmaitre314/following{/other_user}","gists_url":"https://api.github.com/users/mmaitre314/gists{/gist_id}","starred_url":"https://api.github.com/users/mmaitre314/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmaitre314/subscriptions","organizations_url":"https://api.github.com/users/mmaitre314/orgs","repos_url":"https://api.github.com/users/mmaitre314/repos","events_url":"https://api.github.com/users/mmaitre314/events{/privacy}","received_events_url":"https://api.github.com/users/mmaitre314/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-09-18T00:22:32Z","updated_at":"2022-02-25T03:39:33Z","closed_at":"2022-02-25T03:39:33Z","author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [X] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\n`autolog()` makes tracking a lot simpler but it does not seem to provide an option to register models. That leads to code like this where the user needs to format a `runs:/` URL to be able to register the model, which is pretty user-unfriendly. Ideally, model registration would also not require special-casing `file:` during local runs.\r\n\r\n```python\r\nimport mlflow\r\nimport mlflow.sklearn\r\nfrom sklearn.datasets import load_diabetes\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.linear_model import Ridge\r\nfrom sklearn.metrics import mean_squared_error\r\n\r\n# Setup MLFlow tracking\r\nmlflow.sklearn.autolog()\r\n\r\n# Load data\r\nX, y = load_diabetes(return_X_y = True)\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\r\n\r\nwith mlflow.start_run() as run:\r\n    # Train model\r\n    model = Ridge(alpha=0.03)\r\n    model.fit(X_train, y_train)\r\n\r\n    # Test model\r\n    mse = mean_squared_error(model.predict(X_test), y_test)\r\n    mlflow.log_metric(\"test_mse\", mse)\r\n\r\n    # Register model\r\n    if not(mlflow.get_tracking_uri().startswith('file:')):\r\n        mlflow.register_model(f\"runs:/{run.info.run_id}/model\", \"my_model\")\r\n```\r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\n\r\nSimplify model registration.\r\n\r\n- Why is this use case valuable to support for MLflow users in general?\r\n\r\nThis creates a barrier to entry for new users: I had to spend quite some time figuring out the right string-format incantation.\r\n\r\n- Why is this use case valuable to support for your project(s) or organization?\r\n\r\nI am trying to evangelize more rigorous MLOps processes and extra complexity reduces appeal.\r\n\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\n\r\nString formatting is very low level and leads to typos difficult to debug.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [x] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nImplementation-wise, one possibility would be for `mlflow.register_model()` to accept a `run` object as input, or for `autolog()` to give an option to register models.\r\n\r\nNote sure how to deal with the `file:` special-case. Maybe log instead of failing (or implement model registration in `file:` but that's likely larger work). ","closed_by":{"login":"harupy","id":17039389,"node_id":"MDQ6VXNlcjE3MDM5Mzg5","avatar_url":"https://avatars.githubusercontent.com/u/17039389?v=4","gravatar_id":"","url":"https://api.github.com/users/harupy","html_url":"https://github.com/harupy","followers_url":"https://api.github.com/users/harupy/followers","following_url":"https://api.github.com/users/harupy/following{/other_user}","gists_url":"https://api.github.com/users/harupy/gists{/gist_id}","starred_url":"https://api.github.com/users/harupy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harupy/subscriptions","organizations_url":"https://api.github.com/users/harupy/orgs","repos_url":"https://api.github.com/users/harupy/repos","events_url":"https://api.github.com/users/harupy/events{/privacy}","received_events_url":"https://api.github.com/users/harupy/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4829/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/4829/timeline","performed_via_github_app":null,"state_reason":"completed"}