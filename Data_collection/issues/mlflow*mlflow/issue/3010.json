{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3010","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/3010/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/3010/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/3010/events","html_url":"https://github.com/mlflow/mlflow/issues/3010","id":646207064,"node_id":"MDU6SXNzdWU2NDYyMDcwNjQ=","number":3010,"title":"[FR] logging metrics via log_batch using SqlAlchemyStore takes very long","user":{"login":"creinders","id":8905380,"node_id":"MDQ6VXNlcjg5MDUzODA=","avatar_url":"https://avatars.githubusercontent.com/u/8905380?v=4","gravatar_id":"","url":"https://api.github.com/users/creinders","html_url":"https://github.com/creinders","followers_url":"https://api.github.com/users/creinders/followers","following_url":"https://api.github.com/users/creinders/following{/other_user}","gists_url":"https://api.github.com/users/creinders/gists{/gist_id}","starred_url":"https://api.github.com/users/creinders/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/creinders/subscriptions","organizations_url":"https://api.github.com/users/creinders/orgs","repos_url":"https://api.github.com/users/creinders/repos","events_url":"https://api.github.com/users/creinders/events{/privacy}","received_events_url":"https://api.github.com/users/creinders/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022852620,"node_id":"MDU6TGFiZWwyMDIyODUyNjIw","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/sqlalchemy","name":"area/sqlalchemy","color":"ede978","default":false,"description":"Use of SQL alchemy in tracking service or model registry"},{"id":2022863969,"node_id":"MDU6TGFiZWwyMDIyODYzOTY5","url":"https://api.github.com/repos/mlflow/mlflow/labels/priority/important-soon","name":"priority/important-soon","color":"534cb5","default":false,"description":"The issue is worked on by the community currently or will be very soon, ideally in time for the"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-06-26T11:46:00Z","updated_at":"2020-12-15T03:16:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"\r\n## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nLogging multiple metrics via log_batch takes very long when using SQLAlchemy storage. I did some experiments using a mysql database. For logging 1000 metrics it takes about 9 seconds on average (on a Intel(R) Core(TM) i7-7820X CPU @ 3.60GHz). The sample code is attached at the end.\r\n\r\nThe reason that the function is very slow is that each metric entry is handled individually. I think this can be speed up by introducing a batch-wise processing of the data. I did some tests and was able to speed up the processing to 2 seconds (factor 4.5) e.g. by initializing the session only once and updating the latest metric at the end.\r\n\r\n With some additional improvements (batch-wise insertion of the data and checking the integrity at the end), I was able to decrease the processing time to 0.13 seconds (factor 69).\r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\nSpeed up logging multiple metrics via log_batch when using SQLAlchemy storage.\r\n- Why is this use case valuable to support for MLflow users in general?\r\nMakes adding metrics in batch mode much faster.\r\n- Why is this use case valuable to support for your project(s) or organization?\r\nWe developed an import to mysql storage and notices that it takes a while. \r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\nA couple of initializations and checks (e.g. session or check if is running) are performed multiple times. \r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for\r\nModel Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [x] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n\r\n## Details\r\n\r\ntest script for measuring the time log_batch need for inserting 1000 data points.\r\n```python\r\nimport mlflow\r\nimport time\r\nfrom mlflow.entities import Metric\r\n\r\ndst_uri = 'mysql://mlflow:XXXXX@localhost:3306/mlflow'\r\n\r\nmlflow.set_tracking_uri(dst_uri)\r\nclient = mlflow.tracking.MlflowClient(dst_uri)\r\n\r\nwith mlflow.start_run():\r\n\r\n    run = mlflow.active_run()\r\n    run_id = run.info.run_id\r\n    mlflow.log_param(\"test\", 12)\r\n\r\n    metrics = []\r\n    metrics = [Metric('acc', i, i, i) for i in range(1000)]\r\n\r\n    start = time.time()\r\n    client.log_batch(run_id, metrics=metrics)\r\n    end = time.time()\r\n    print(end - start)\r\n\r\n```\r\n\r\nI'm looking forward what you think and I would be happy to submit a pull request.\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3010/reactions","total_count":4,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":2,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/3010/timeline","performed_via_github_app":null,"state_reason":null}