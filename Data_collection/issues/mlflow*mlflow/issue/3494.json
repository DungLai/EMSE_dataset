{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3494","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/3494/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/3494/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/3494/events","html_url":"https://github.com/mlflow/mlflow/issues/3494","id":715118780,"node_id":"MDU6SXNzdWU3MTUxMTg3ODA=","number":3494,"title":"[FR] tracking event callbacks for external observers in R interface of mlflow","user":{"login":"yitao-li","id":405346,"node_id":"MDQ6VXNlcjQwNTM0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/405346?v=4","gravatar_id":"","url":"https://api.github.com/users/yitao-li","html_url":"https://github.com/yitao-li","followers_url":"https://api.github.com/users/yitao-li/followers","following_url":"https://api.github.com/users/yitao-li/following{/other_user}","gists_url":"https://api.github.com/users/yitao-li/gists{/gist_id}","starred_url":"https://api.github.com/users/yitao-li/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yitao-li/subscriptions","organizations_url":"https://api.github.com/users/yitao-li/orgs","repos_url":"https://api.github.com/users/yitao-li/repos","events_url":"https://api.github.com/users/yitao-li/events{/privacy}","received_events_url":"https://api.github.com/users/yitao-li/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1041183632,"node_id":"MDU6TGFiZWwxMDQxMTgzNjMy","url":"https://api.github.com/repos/mlflow/mlflow/labels/language/r","name":"language/r","color":"349cd8","default":false,"description":"R APIs and clients"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2020-10-05T19:54:18Z","updated_at":"2020-10-26T17:40:58Z","closed_at":"2020-10-26T17:12:28Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [x] Yes. I can contribute this feature independently.\r\n- [ ] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nIt would be great if the R interface of `mlflow` can provide optional generic callbacks for informing an external observer of tracking events such as setting active run ID, setting active experiment ID, logging metric, etc. If there is no external observer present, then no additional callback will be run.\r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\nIDE extensions can act as external observers receiving those callbacks. Users will be able to see current and past experiments and metric associated with them from an external IDE, which will be helpful during development.\r\n\r\n- Why is this use case valuable to support for MLflow users in general?\r\nIt will be useful for users who run non-trivial number of experiments to have a hierarchical view of runs and experiments in an integrated development environment via an IDE extension.\r\n  \r\n- Why is this use case valuable to support for your project(s) or organization?\r\nHaving an integrated view of ongoing and past MLFlow experiments would greatly improve user experience for IDE users.\r\n\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\nI don't think there is any existing construct in the R code base of MLflow that can be customized to optionally keep an external observer up-to-date with tracking events such as `set_active_run_id` or `set_active_experiment_id`, so, a small amount of code change is needed for this to happen.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [x] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [x] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nIt can be as simple as the following (I shall use `mlflow_set_active_experiment_id()` as an example):\r\n\r\n```\r\nmlflow_set_active_experiment_id <- function(experiment_id) {\r\n  <code for updating active experiment ID globally>\r\n\r\n  on_active_experiment_id(experiment_id)\r\n}\r\n\r\non_active_experiment_id <- function(experiment_id) {\r\n  observer <- getOption(\"MLFlowExternalObserver\")\r\n  if (!is.null(observer)) {\r\n    # inform an external observer of the experiment id\r\n    tryCatch({\r\n      observer$set_active_experiment_id(experiment_id)\r\n    }, error = function(e) {\r\n      # we can log the error in some way, but there is not much else we can do here\r\n    })\r\n  } # otherwise there is no external observer, and no callback is run\r\n}\r\n```\r\n\r\nAny such callback should return instantaneously, and if there is any operation that could be blocking or taking non-trivial amount of time, then such operation will need to be completed asynchronously rather than being executed inline within the callback.\r\n\r\nAlso, the user has complete control over whether such callbacks are run or not (by enabling or disabling IDE extensions that will act as observers).\r\n","closed_by":{"login":"yitao-li","id":405346,"node_id":"MDQ6VXNlcjQwNTM0Ng==","avatar_url":"https://avatars.githubusercontent.com/u/405346?v=4","gravatar_id":"","url":"https://api.github.com/users/yitao-li","html_url":"https://github.com/yitao-li","followers_url":"https://api.github.com/users/yitao-li/followers","following_url":"https://api.github.com/users/yitao-li/following{/other_user}","gists_url":"https://api.github.com/users/yitao-li/gists{/gist_id}","starred_url":"https://api.github.com/users/yitao-li/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yitao-li/subscriptions","organizations_url":"https://api.github.com/users/yitao-li/orgs","repos_url":"https://api.github.com/users/yitao-li/repos","events_url":"https://api.github.com/users/yitao-li/events{/privacy}","received_events_url":"https://api.github.com/users/yitao-li/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3494/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/3494/timeline","performed_via_github_app":null,"state_reason":"completed"}