{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1403","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/1403/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/1403/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/1403/events","html_url":"https://github.com/mlflow/mlflow/issues/1403","id":452621903,"node_id":"MDU6SXNzdWU0NTI2MjE5MDM=","number":1403,"title":"Convert POST input to data format other than Pandas","user":{"login":"lennon310","id":4810706,"node_id":"MDQ6VXNlcjQ4MTA3MDY=","avatar_url":"https://avatars.githubusercontent.com/u/4810706?v=4","gravatar_id":"","url":"https://api.github.com/users/lennon310","html_url":"https://github.com/lennon310","followers_url":"https://api.github.com/users/lennon310/followers","following_url":"https://api.github.com/users/lennon310/following{/other_user}","gists_url":"https://api.github.com/users/lennon310/gists{/gist_id}","starred_url":"https://api.github.com/users/lennon310/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lennon310/subscriptions","organizations_url":"https://api.github.com/users/lennon310/orgs","repos_url":"https://api.github.com/users/lennon310/repos","events_url":"https://api.github.com/users/lennon310/events{/privacy}","received_events_url":"https://api.github.com/users/lennon310/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-06-05T17:20:19Z","updated_at":"2019-06-27T18:09:42Z","closed_at":"2019-06-27T18:09:42Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in MLflow)**: Yes\r\n- **MLflow version (run ``mlflow --version``)**: 1.0.0\r\n- **Python version**: 3.6.8\r\n\r\n### Describe the problem\r\nI was wondering how we can benefit from using Pandas Dataframe in model prediction.\r\nI found in the [transform() api](https://github.com/mlflow/mlflow/blob/master/mlflow/pyfunc/scoring_server/__init__.py#L140) the POST input is converted to the Pandas. I copied this part of code and added a profiler on this api (code attached below), and found it takes ~ 5 ms on the data format conversion (csv is slightly faster with 4 ms). If the model we are using is only a look up table, the `predict` api takes only ~ 1 ms, which makes the time spent on transform process non-trivial. \r\nIs there a reason MLflow is using Pandas, or is it possible to add other data format (such as `numpy`, or `dict`)?\r\n\r\n### Source code / logs\r\n\r\n```\r\nfrom mlflow.pyfunc import PythonModel, PythonModelContext\r\nimport flask\r\nimport json\r\nimport numpy as np\r\nimport os\r\nimport pandas as pd\r\nfrom io import StringIO\r\nfrom json import JSONEncoder\r\nfrom pathlib import Path\r\nfrom profilehooks import profile\r\n\r\nclass LookupTable(PythonModel):\r\n    def __init__(self, context: PythonModelContext):\r\n        self.load_context(context)\r\n\r\n    def load_context(self, context: PythonModelContext) -> None:\r\n        super().load_context(context)\r\n\r\n    def predict(self, context: PythonModelContext, model_input: pd.Dataframe) -> pd.Dataframe:\r\n       # My prediction code, basically get value from keys in model_input\r\n\r\n# Below is the code I copied directly from https://github.com/mlflow/mlflow/blob/master/mlflow/pyfunc/scoring_server/__init__.py\r\ndef init(model: Xsell):  # type: ignore\r\n    app = flask.Flask(__name__)\r\n\r\n    @app.route(\"/invocations\", methods=[\"POST\"])\r\n    @profile\r\n    def transformation():  # type: ignore\r\n        \"\"\"\r\n        Do an inference on a single batch of data. In this sample server,\r\n        we take data as CSV or json, convert it to a Pandas DataFrame,\r\n        generate predictions and convert them back to JSON.\r\n        \"\"\"\r\n        # Convert from JSON to pandas\r\n\r\n        data = parse_json_input(\r\n            json_input=flask.request.data.decode(\"utf-8\"), orient=\"split\"\r\n        )\r\n        raw_predictions = model.predict(PythonModelContext(None), data)\r\n        result = StringIO()\r\n        predictions_to_json(raw_predictions, result)\r\n        return flask.Response(\r\n            response=result.getvalue(), status=200, mimetype=\"application/json\"\r\n        )\r\n\r\n    return app\r\n\r\n\r\ndef parse_csv_input(csv_input):  # type: ignore\r\n    \"\"\"\r\n    :param csv_input: A CSV-formatted string representation of a Pandas DataFrame, or a stream\r\n                      containing such a string representation.\r\n    \"\"\"\r\n    return pd.read_csv(csv_input)\r\n\r\n\r\ndef parse_json_input(json_input, orient=\"records\"):  # type: ignore\r\n    return pd.read_json(json_input, orient=orient, dtype=False)\r\n\r\n\r\ndef predictions_to_json(raw_predictions, output):  # type: ignore\r\n    predictions = _get_jsonable_obj(raw_predictions, pandas_orient=\"records\")\r\n    json.dump(predictions, output, cls=NumpyEncoder)\r\n\r\n\r\nclass NumpyEncoder(JSONEncoder):  # type: ignore\r\n    \"\"\" Special json encoder for numpy types.\r\n    Note that some numpy types doesn't have native python equivalence,\r\n    hence json.dumps will raise TypeError.\r\n    In this case, you'll need to convert your numpy types into its closest python equivalence.\r\n    \"\"\"\r\n\r\n    def default(self, o):  # type: ignore\r\n        if isinstance(o, np.generic):\r\n            return np.asscalar(o)\r\n        return JSONEncoder.default(self, o)\r\n\r\n\r\ndef _get_jsonable_obj(data, pandas_orient=\"records\"):  # type: ignore\r\n    \"\"\"Attempt to make the data json-able via standard library.\r\n    Look for some commonly used types that are not jsonable and convert them into json-able ones.\r\n    Unknown data types are returned as is.\r\n    :param data: data to be converted, works with pandas and numpy, rest will be returned as is.\r\n    :param pandas_orient: If `data` is a Pandas DataFrame, it will be converted to a JSON\r\n                          dictionary using this Pandas serialization orientation.\r\n    \"\"\"\r\n    if isinstance(data, np.ndarray):\r\n        return data.tolist()\r\n    if isinstance(data, pd.DataFrame):\r\n        return data.to_dict(orient=pandas_orient)\r\n    if isinstance(data, pd.Series):\r\n        return pd.DataFrame(data).to_dict(orient=pandas_orient)\r\n    else:  # by default just return whatever this is and hope for the best\r\n        return data\r\n\r\nif __name__ == \"__main__\":\r\n    model = LookupTable(_get_artifact())\r\n    app = init(model)\r\n    app.run()\r\n```\r\n\r\nThe bash command I was running for profiling purpose:\r\n```\r\nfor((i=0;i<100;i++)); do curl -X POST localhost:5000/invocations -H \"Content-Type: application/json\" -d\"@json.txt\"; done\r\n```\r\njson.txt is :\r\n```\r\n{\"columns\":[0],\"index\":[\"0\"],\"data\":[[[78113]]]}\r\n```\r\n\r\nResult:\r\n```\r\ntransformation (test_model_with_profiler.py:59)\r\nfunction called 100 times\r\n\r\n         816598 function calls (804588 primitive calls) in 0.722 seconds\r\n\r\n   Ordered by: cumulative time, internal time, call count\r\n   List reduced from 618 to 40 due to restriction <40>\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n      100    0.002    0.000    0.722    0.007 test_model_with_profiler.py:59(transformation)\r\n      100    0.000    0.000    0.533    0.005 test_model_with_profiler.py:91(parse_json_input)\r\n      100    0.001    0.000    0.533    0.005 json.py:229(read_json)\r\n      100    0.000    0.000    0.455    0.005 json.py:524(read)\r\n      100    0.001    0.000    0.454    0.005 json.py:541(_get_object_parser)\r\n      100    0.000    0.000    0.454    0.005 json.py:644(parse)\r\n      100    0.001    0.000    0.310    0.003 json.py:661(_convert_axes)\r\n      300    0.002    0.000    0.307    0.001 json.py:675(_try_convert_data)\r\n      200    0.005    0.000    0.270    0.001 json.py:749(_try_convert_to_date)\r\n      400    0.003    0.000    0.233    0.001 datetimes.py:401(to_datetime)\r\n      200    0.003    0.000    0.225    0.001 frame.py:378(__init__)\r\n     2000    0.004    0.000    0.185    0.000 base.py:5318(ensure_index)\r\n 1100/700    0.008    0.000    0.169    0.000 series.py:152(__init__)\r\n      400    0.001    0.000    0.165    0.000 datetimes.py:31(_maybe_cache)\r\n      400    0.001    0.000    0.153    0.000 series.py:271(_init_dict)\r\n      200    0.001    0.000    0.124    0.001 construction.py:43(arrays_to_mgr)\r\n      100    0.001    0.000    0.123    0.001 json.py:864(_parse_no_numpy)\r\n 1100/700    0.016    0.000    0.116    0.000 base.py:253(__new__)\r\n 1601/501    0.007    0.000    0.116    0.000 <frozen importlib._bootstrap>:966(_find_and_load)\r\n      100    0.001    0.000    0.114    0.001 test_model_with_profiler.py:32(predict)\r\n 1601/501    0.004    0.000    0.105    0.000 <frozen importlib._bootstrap>:936(_find_and_load_unlocked)\r\n138322/137377    0.045    0.000    0.104    0.000 {built-in method builtins.isinstance}\r\n 1101/501    0.001    0.000    0.104    0.000 <frozen importlib._bootstrap>:211(_call_with_frames_removed)\r\n 1100/500    0.001    0.000    0.103    0.000 {built-in method builtins.__import__}\r\n      501    0.008    0.000    0.080    0.000 <frozen importlib._bootstrap>:870(_find_spec)\r\n      200    0.001    0.000    0.070    0.000 common.py:120(_stringify_path)\r\n      200    0.001    0.000    0.065    0.000 managers.py:1663(create_block_manager_from_arrays)\r\n      501    0.001    0.000    0.064    0.000 <frozen importlib._bootstrap_external>:1149(find_spec)\r\n      501    0.004    0.000    0.063    0.000 <frozen importlib._bootstrap_external>:1117(_get_spec)\r\n      700    0.007    0.000    0.063    0.000 {pandas._libs.lib.clean_index_list}\r\n    11900    0.011    0.000    0.060    0.000 base.py:75(is_dtype)\r\n      400    0.002    0.000    0.059    0.000 datetimes.py:134(_convert_listlike_datetimes)\r\n      100    0.000    0.000    0.056    0.001 test_model_with_profiler.py:95(predictions_to_json)\r\n     1704    0.014    0.000    0.056    0.000 <frozen importlib._bootstrap_external>:1233(find_spec)\r\n      700    0.004    0.000    0.053    0.000 construction.py:537(sanitize_array)\r\n      100    0.000    0.000    0.051    0.001 test_model_with_profiler.py:113(_get_jsonable_obj)\r\n      100    0.001    0.000    0.051    0.001 frame.py:1195(to_dict)\r\n      400    0.002    0.000    0.050    0.000 base.py:732(astype)\r\n      400    0.015    0.000    0.050    0.000 {pandas._libs.tslib.array_with_unit_to_datetime}\r\n80591/80191    0.035    0.000    0.046    0.000 {built-in method builtins.getattr}\r\n```\r\nAs you can see, each `parse_json_input` takes ~ 5 ms.\r\n\r\nOn the other hand, if the JSON input was converted to numpy array:\r\n```\r\n# in transform():\r\ndata = json.loads(flask.request.data.decode(\"utf-8\"))\r\nnumpy_data = [np.array(data) for data in data['data']]\r\nraw_predictions = model.predict(PythonModelContext(None), numpy_data[0][0])\r\n```\r\n\r\nwith the same bash command running, the result was:\r\n```\r\n*** PROFILER RESULTS ***\r\ntransformation (test_model_with_profiler.py:50)\r\nfunction called 100 times\r\n\r\n         19200 function calls (18400 primitive calls) in 0.027 seconds\r\n\r\n   Ordered by: cumulative time, internal time, call count\r\n   List reduced from 81 to 40 due to restriction <40>\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n      100    0.002    0.000    0.027    0.000 test_model_with_profiler.py:50(transformation)\r\n  300/100    0.000    0.000    0.013    0.000 local.py:345(__getattr__)\r\n  600/200    0.001    0.000    0.011    0.000 {built-in method builtins.getattr}\r\n  300/100    0.001    0.000    0.011    0.000 utils.py:86(__get__)\r\n      100    0.000    0.000    0.010    0.000 base_request.py:407(data)\r\n      100    0.000    0.000    0.010    0.000 base_request.py:425(get_data)\r\n      100    0.000    0.000    0.009    0.000 wrappers.py:167(_load_form_data)\r\n      100    0.001    0.000    0.007    0.000 base_request.py:295(_load_form_data)\r\n      100    0.001    0.000    0.004    0.000 base_response.py:173(__init__)\r\n      100    0.000    0.000    0.004    0.000 test_model_with_profiler.py:86(predictions_to_json)\r\n      100    0.001    0.000    0.003    0.000 __init__.py:120(dump)\r\n      500    0.001    0.000    0.003    0.000 local.py:301(_get_current_object)\r\n      100    0.000    0.000    0.002    0.000 base_request.py:280(make_form_data_parser)\r\n      100    0.000    0.000    0.002    0.000 wrappers.py:145(max_content_length)\r\n      100    0.000    0.000    0.002    0.000 __init__.py:302(loads)\r\n      200    0.000    0.000    0.002    0.000 datastructures.py:1246(__setitem__)\r\n      600    0.000    0.000    0.002    0.000 encoder.py:412(_iterencode)\r\n      200    0.001    0.000    0.002    0.000 local.py:327(__bool__)\r\n      100    0.000    0.000    0.001    0.000 base_response.py:343(set_data)\r\n      100    0.000    0.000    0.001    0.000 decoder.py:334(decode)\r\n      200    0.001    0.000    0.001    0.000 datastructures.py:1198(set)\r\n      100    0.000    0.000    0.001    0.000 base_request.py:330(_get_stream_for_parsing)\r\n      100    0.001    0.000    0.001    0.000 http.py:378(parse_options_header)\r\n      100    0.001    0.000    0.001    0.000 globals.py:34(_lookup_req_object)\r\n      100    0.000    0.000    0.001    0.000 test_model_with_profiler.py:61(<listcomp>)\r\n      500    0.001    0.000    0.001    0.000 local.py:163(top)\r\n      600    0.001    0.000    0.001    0.000 encoder.py:333(_iterencode_dict)\r\n      100    0.000    0.000    0.001    0.000 formparser.py:208(parse)\r\n      400    0.000    0.000    0.001    0.000 globals.py:48(_find_app)\r\n      100    0.000    0.000    0.001    0.000 base_request.py:359(stream)\r\n      100    0.001    0.000    0.001    0.000 test_model_with_profiler.py:32(predict)\r\n      100    0.001    0.000    0.001    0.000 {built-in method numpy.array}\r\n      100    0.001    0.000    0.001    0.000 wsgi.py:929(read)\r\n      100    0.000    0.000    0.001    0.000 wsgi.py:203(get_input_stream)\r\n      100    0.000    0.000    0.001    0.000 encoder.py:204(iterencode)\r\n     3300    0.001    0.000    0.001    0.000 {built-in method builtins.isinstance}\r\n      100    0.001    0.000    0.001    0.000 decoder.py:345(raw_decode)\r\n      200    0.000    0.000    0.001    0.000 wsgi.py:183(get_content_length)\r\n      200    0.000    0.000    0.001    0.000 datastructures.py:403(__init__)\r\n      500    0.000    0.000    0.000    0.000 local.py:70(__getattr__)\r\n```\r\nthe conversion process takes less than 1 ms. \r\n\r\nUPDATE:\r\nAs suggested by @tomasatdatabricks, the `numpy=True` is set in `pd.read_json()`, so the function looks like\r\n```\r\ndef parse_json_input(json_input, orient=\"records\"):  # type: ignore\r\n    return pd.read_json(json_input, orient=orient, dtype=False, numpy=True)\r\n```\r\n and the profiler result:\r\n```\r\n*** PROFILER RESULTS ***\r\ntransformation (test_model_with_profiler.py:52)\r\nfunction called 100 times\r\n\r\n         391648 function calls (383833 primitive calls) in 0.436 seconds\r\n\r\n   Ordered by: cumulative time, internal time, call count\r\n   List reduced from 608 to 40 due to restriction <40>\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n      100    0.002    0.000    0.436    0.004 test_model_with_profiler.py:52(transformation)\r\n      100    0.000    0.000    0.396    0.004 test_model_with_profiler.py:87(parse_json_input)\r\n      100    0.001    0.000    0.396    0.004 json.py:224(read_json)\r\n      100    0.000    0.000    0.379    0.004 json.py:518(read)\r\n      100    0.001    0.000    0.379    0.004 json.py:533(_get_object_parser)\r\n      100    0.000    0.000    0.378    0.004 json.py:630(parse)\r\n      100    0.001    0.000    0.232    0.002 json.py:647(_convert_axes)\r\n      300    0.002    0.000    0.228    0.001 json.py:659(_try_convert_data)\r\n      200    0.006    0.000    0.208    0.001 json.py:733(_try_convert_to_date)\r\n      400    0.003    0.000    0.180    0.000 datetimes.py:106(to_datetime)\r\n      100    0.001    0.000    0.122    0.001 json.py:846(_parse_no_numpy)\r\n     1200    0.003    0.000    0.120    0.000 base.py:4914(_ensure_index)\r\n      100    0.002    0.000    0.118    0.001 frame.py:334(__init__)\r\n  900/500    0.007    0.000    0.113    0.000 series.py:166(__init__)\r\n      400    0.001    0.000    0.112    0.000 datetimes.py:39(_maybe_cache)\r\n      400    0.001    0.000    0.101    0.000 series.py:284(_init_dict)\r\n      100    0.000    0.000    0.065    0.001 frame.py:7349(_arrays_to_mgr)\r\n 1000/600    0.013    0.000    0.064    0.000 base.py:255(__new__)\r\n      400    0.001    0.000    0.058    0.000 datetimes.py:276(_convert_listlike)\r\n      400    0.016    0.000    0.052    0.000 {built-in method pandas._libs.tslib.array_with_unit_to_datetime}\r\n      600    0.005    0.000    0.051    0.000 {pandas._libs.lib.clean_index_list}\r\n  810/203    0.004    0.000    0.045    0.000 <frozen importlib._bootstrap>:966(_find_and_load)\r\n87689/87272    0.022    0.000    0.041    0.000 {built-in method builtins.isinstance}\r\n  810/203    0.002    0.000    0.040    0.000 <frozen importlib._bootstrap>:936(_find_and_load_unlocked)\r\n  613/204    0.000    0.000    0.038    0.000 <frozen importlib._bootstrap>:211(_call_with_frames_removed)\r\n  605/202    0.001    0.000    0.038    0.000 {built-in method builtins.__import__}\r\n      500    0.002    0.000    0.028    0.000 series.py:4019(_sanitize_array)\r\n      100    0.001    0.000    0.027    0.000 internals.py:4869(create_block_manager_from_arrays)\r\n      500    0.001    0.000    0.025    0.000 series.py:4036(_try_cast)\r\n      400    0.002    0.000    0.025    0.000 base.py:1283(astype)\r\n      100    0.000    0.000    0.023    0.000 json.py:892(_try_convert_types)\r\n      200    0.001    0.000    0.023    0.000 json.py:869(_process_converter)\r\n21671/21271    0.010    0.000    0.022    0.000 {built-in method builtins.getattr}\r\n      209    0.004    0.000    0.022    0.000 <frozen importlib._bootstrap>:870(_find_spec)\r\n      400    0.001    0.000    0.021    0.000 frame.py:713(iteritems)\r\n      100    0.000    0.000    0.019    0.000 json.py:901(_try_convert_dates)\r\n     6400    0.007    0.000    0.018    0.000 base.py:61(is_dtype)\r\n      100    0.001    0.000    0.016    0.000 test_model_with_profiler.py:33(predict)\r\n      600    0.003    0.000    0.016    0.000 cast.py:971(maybe_cast_to_datetime)\r\n      600    0.001    0.000    0.015    0.000 internals.py:3191(make_block)\r\n```\r\nlooks like numpy option does not support for 'split' orient.\r\n\r\nUPDATE2:\r\n\r\nFor 'record' orient, I was using\r\n`for ((i=1;i<=100;i++));do curl -X POST localhost:5000/invocations -H \"accept: application/json\" -H \"Content-Type: application/json\" -d '{\"0\":[78113]}';done` and got:\r\n\r\n```\r\n*** PROFILER RESULTS ***\r\ntransformation (test_model_with_profiler.py:52)\r\nfunction called 100 times\r\n\r\n         212637 function calls (209978 primitive calls) in 0.224 seconds\r\n\r\n   Ordered by: cumulative time, internal time, call count\r\n   List reduced from 449 to 40 due to restriction <40>\r\n\r\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\r\n      100    0.002    0.000    0.224    0.002 test_model_with_profiler.py:52(transformation)\r\n      100    0.000    0.000    0.188    0.002 test_model_with_profiler.py:88(parse_json_input)\r\n      100    0.001    0.000    0.188    0.002 json.py:224(read_json)\r\n      100    0.000    0.000    0.172    0.002 json.py:518(read)\r\n      100    0.000    0.000    0.172    0.002 json.py:533(_get_object_parser)\r\n      100    0.000    0.000    0.171    0.002 json.py:630(parse)\r\n      100    0.001    0.000    0.115    0.001 json.py:647(_convert_axes)\r\n      300    0.003    0.000    0.110    0.000 json.py:659(_try_convert_data)\r\n      500    0.002    0.000    0.060    0.000 base.py:1283(astype)\r\n      200    0.004    0.000    0.049    0.000 json.py:733(_try_convert_to_date)\r\n      400    0.007    0.000    0.048    0.000 base.py:255(__new__)\r\n      100    0.001    0.000    0.039    0.000 json.py:821(_parse_numpy)\r\n      100    0.001    0.000    0.037    0.000 frame.py:334(__init__)\r\n      100    0.001    0.000    0.035    0.000 frame.py:461(_init_ndarray)\r\n      300    0.005    0.000    0.023    0.000 base.py:90(cmp_method)\r\n4900/4200    0.007    0.000    0.018    0.000 common.py:1835(_get_dtype_type)\r\n      100    0.000    0.000    0.017    0.000 json.py:892(_try_convert_types)\r\n11359/10959    0.006    0.000    0.017    0.000 {built-in method builtins.getattr}\r\n      200    0.001    0.000    0.016    0.000 json.py:869(_process_converter)\r\n      100    0.000    0.000    0.016    0.000 numeric.py:309(astype)\r\n      100    0.001    0.000    0.016    0.000 internals.py:4846(create_block_manager_from_blocks)\r\n      100    0.000    0.000    0.015    0.000 json.py:901(_try_convert_dates)\r\n      400    0.001    0.000    0.015    0.000 frame.py:713(iteritems)\r\n     6400    0.006    0.000    0.015    0.000 base.py:61(is_dtype)\r\n      100    0.000    0.000    0.015    0.000 frame.py:478(_get_axes)\r\n56026/56025    0.011    0.000    0.015    0.000 {built-in method builtins.isinstance}\r\n      300    0.001    0.000    0.013    0.000 generic.py:2484(_get_item_cache)\r\n      600    0.001    0.000    0.013    0.000 base.py:4914(_ensure_index)\r\n      400    0.000    0.000    0.013    0.000 missing.py:32(isna)\r\n  300/100    0.000    0.000    0.012    0.000 local.py:345(__getattr__)\r\n      400    0.001    0.000    0.012    0.000 missing.py:112(_isna_new)\r\n      100    0.001    0.000    0.012    0.000 test_model_with_profiler.py:33(predict)\r\n      100    0.001    0.000    0.012    0.000 internals.py:3265(__init__)\r\n      800    0.001    0.000    0.011    0.000 common.py:692(is_dtype_equal)\r\n     1900    0.003    0.000    0.011    0.000 common.py:1784(_get_dtype)\r\n  300/100    0.001    0.000    0.011    0.000 utils.py:86(__get__)\r\n      100    0.000    0.000    0.010    0.000 base_request.py:407(data)\r\n      100    0.000    0.000    0.010    0.000 base_request.py:425(get_data)\r\n      300    0.003    0.000    0.010    0.000 missing.py:189(_isna_ndarraylike)\r\n     2700    0.001    0.000    0.009    0.000 common.py:369(is_datetime64tz_dtype)\r\n```\r\nthe time in conversion reduced but slightly slower than numpy conversion directly.","closed_by":{"login":"lennon310","id":4810706,"node_id":"MDQ6VXNlcjQ4MTA3MDY=","avatar_url":"https://avatars.githubusercontent.com/u/4810706?v=4","gravatar_id":"","url":"https://api.github.com/users/lennon310","html_url":"https://github.com/lennon310","followers_url":"https://api.github.com/users/lennon310/followers","following_url":"https://api.github.com/users/lennon310/following{/other_user}","gists_url":"https://api.github.com/users/lennon310/gists{/gist_id}","starred_url":"https://api.github.com/users/lennon310/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lennon310/subscriptions","organizations_url":"https://api.github.com/users/lennon310/orgs","repos_url":"https://api.github.com/users/lennon310/repos","events_url":"https://api.github.com/users/lennon310/events{/privacy}","received_events_url":"https://api.github.com/users/lennon310/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1403/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/1403/timeline","performed_via_github_app":null,"state_reason":"completed"}