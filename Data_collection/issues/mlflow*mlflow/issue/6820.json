{"url":"https://api.github.com/repos/mlflow/mlflow/issues/6820","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/6820/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/6820/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/6820/events","html_url":"https://github.com/mlflow/mlflow/issues/6820","id":1376726252,"node_id":"I_kwDOCB5Jx85SDyzs","number":6820,"title":"[FR] Fully support PyTorch schemas / signatures in Mlflow Models","user":{"login":"IngoStatworx","id":102803372,"node_id":"U_kgDOBiCnrA","avatar_url":"https://avatars.githubusercontent.com/u/102803372?v=4","gravatar_id":"","url":"https://api.github.com/users/IngoStatworx","html_url":"https://github.com/IngoStatworx","followers_url":"https://api.github.com/users/IngoStatworx/followers","following_url":"https://api.github.com/users/IngoStatworx/following{/other_user}","gists_url":"https://api.github.com/users/IngoStatworx/gists{/gist_id}","starred_url":"https://api.github.com/users/IngoStatworx/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IngoStatworx/subscriptions","organizations_url":"https://api.github.com/users/IngoStatworx/orgs","repos_url":"https://api.github.com/users/IngoStatworx/repos","events_url":"https://api.github.com/users/IngoStatworx/events{/privacy}","received_events_url":"https://api.github.com/users/IngoStatworx/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022847714,"node_id":"MDU6TGFiZWwyMDIyODQ3NzE0","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/model-registry","name":"area/model-registry","color":"48eabc","default":false,"description":"Model registry, model registry APIs, and the fluent client calls for model registry"},{"id":2022848043,"node_id":"MDU6TGFiZWwyMDIyODQ4MDQz","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/models","name":"area/models","color":"48eabc","default":false,"description":"MLmodel format, model serialization/deserialization, flavors"},{"id":2022859639,"node_id":"MDU6TGFiZWwyMDIyODU5NjM5","url":"https://api.github.com/repos/mlflow/mlflow/labels/integrations/azure","name":"integrations/azure","color":"ffbce5","default":false,"description":"Azure and Azure ML integrations"},{"id":2022860064,"node_id":"MDU6TGFiZWwyMDIyODYwMDY0","url":"https://api.github.com/repos/mlflow/mlflow/labels/integrations/sagemaker","name":"integrations/sagemaker","color":"ffbce5","default":false,"description":"Sagemaker integrations"},{"id":2114036915,"node_id":"MDU6TGFiZWwyMTE0MDM2OTE1","url":"https://api.github.com/repos/mlflow/mlflow/labels/integrations/databricks","name":"integrations/databricks","color":"ffbce5","default":false,"description":"Databricks integrations"},{"id":4265961281,"node_id":"LA_kwDOCB5Jx87-RWdB","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/recipes","name":"area/recipes","color":"48eabc","default":false,"description":"MLflow Recipes, Recipes APIs, Recipes configs, Recipe Templates"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-09-17T09:54:31Z","updated_at":"2022-09-25T00:17:22Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"### Willingness to contribute\n\nYes. I would be willing to contribute this feature with guidance from the MLflow community.\n\n### Proposal Summary\n\nI propose to modify the PyTorch wrapper here:\r\n\r\nhttps://github.com/mlflow/mlflow/blob/6eccc69286b7d8b34ce6d34a20bf821e8c69feba/mlflow/pytorch/__init__.py#L738\r\n\r\nto allow for arbitrary inputs to the model. Sufficient would be to allow for dictionaries, lists or generally iterables of tensor types - in particular iterables of tensors as defined by Mlflow's own model signature logic.\r\n\r\nIdeally, if one can define it as a signature in tensor format, the PyTorch wrapper should be able to process it!\r\n\r\nIt doesnt't seem that the limitation of one array in - one array out holds for other model flavors. As such it appears that this is not a limitation by some other part of the code. It may thus be worth checking whether the change could be as simple as adding a few more input checks or unwrapping operations in the wrapper.\r\n\r\nFor instance, it does not seem to be necessary to not accept pytorch tensors, when casting to tensors will be done anyway. Furthermore, if the input will be type checked, one could recursively do the same if an iterable type (list or dict) is provided instead of a single input.\n\n### Motivation\n\n> #### What is the use case for this feature?\r\n\r\nMlflow allows considerable flexibility to define a model's signature. Supporting PyTorch is obviously something the Mlflow team strives for (as indicated by the website).\r\n\r\nHowever, the PyTorch wrapper will straight up fail if\r\n1. The input is not a numpy or pandas type - it will even fail if fed a pytorch tensor!\r\n2. An iterable of tensor types\r\n3. Input / Output schemas that would normally be supported by other Mlflow model flavors.\r\n\r\nThese limitations are not mentioned for other model flavors.\r\n\r\nFor PyTorch specifically, this is an issue. Increasingly many use cases involve the use of pre-trained models, for instance from HuggingFace.\r\nHuggingFace models specifically take a dict-like input, and thus can not be used.\r\nSimilar cases can be made for more complex DL models, for instance\r\n\r\n\r\n-> Language models with masking tensors\r\n-> Transformer models with memory embeddings of some sort\r\n-> Tabular transformer-models with categorical / continuous tensor inputs (that are embedded differently)\r\n->  Contrastive learning models\r\n-> Retrieval models with paired attention or cross attention\r\n-> Neural search, retrieval enhanced models\r\n-> and many, many more\r\n\r\n> #### Why is this use case valuable to support for MLflow users in general?\r\n\r\nPyTorch is now the dominant machine learning framework for deep learning models. Mlflow users will want to use deep learning models which typically require more flexible input and output signatures.\r\n\r\n> #### Why is this use case valuable to support for your project(s) or organization?\r\n\r\nWe seek to deploy and train PyTorch models and immediately ran into this issue.\r\n\r\n> #### Why is it currently difficult to achieve this use case?\r\n\r\nFew SOTA models natively run a single input tensor and a single output tensor. \r\n\n\n### Details\n\n_No response_\n\n### What component(s) does this bug affect?\n\n- [ ] `area/artifacts`: Artifact stores and artifact logging\n- [ ] `area/build`: Build and test infrastructure for MLflow\n- [ ] `area/docs`: MLflow documentation pages\n- [ ] `area/examples`: Example code\n- [X] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\n- [X] `area/models`: MLmodel format, model serialization/deserialization, flavors\n- [X] `area/pipelines`: Pipelines, Pipeline APIs, Pipeline configs, Pipeline Templates\n- [ ] `area/projects`: MLproject format, project running backends\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\n- [ ] `area/server-infra`: MLflow Tracking server backend\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\n\n### What interface(s) does this bug affect?\n\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\n- [ ] `area/windows`: Windows support\n\n### What language(s) does this bug affect?\n\n- [ ] `language/r`: R APIs and clients\n- [ ] `language/java`: Java APIs and clients\n- [ ] `language/new`: Proposals for new client languages\n\n### What integration(s) does this bug affect?\n\n- [X] `integrations/azure`: Azure and Azure ML integrations\n- [X] `integrations/sagemaker`: SageMaker integrations\n- [X] `integrations/databricks`: Databricks integrations","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/6820/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/6820/timeline","performed_via_github_app":null,"state_reason":null}