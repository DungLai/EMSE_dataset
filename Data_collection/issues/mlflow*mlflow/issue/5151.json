{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5151","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/5151/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/5151/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/5151/events","html_url":"https://github.com/mlflow/mlflow/issues/5151","id":1073791748,"node_id":"I_kwDOCB5Jx85AAMME","number":5151,"title":"[BUG] mlflow.pyfunc.load_model(model_uri=f\"models:/{name}/{stage}\") returns an HTTP 405 Method Not Allowed","user":{"login":"jmckib","id":183379,"node_id":"MDQ6VXNlcjE4MzM3OQ==","avatar_url":"https://avatars.githubusercontent.com/u/183379?v=4","gravatar_id":"","url":"https://api.github.com/users/jmckib","html_url":"https://github.com/jmckib","followers_url":"https://api.github.com/users/jmckib/followers","following_url":"https://api.github.com/users/jmckib/following{/other_user}","gists_url":"https://api.github.com/users/jmckib/gists{/gist_id}","starred_url":"https://api.github.com/users/jmckib/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jmckib/subscriptions","organizations_url":"https://api.github.com/users/jmckib/orgs","repos_url":"https://api.github.com/users/jmckib/repos","events_url":"https://api.github.com/users/jmckib/events{/privacy}","received_events_url":"https://api.github.com/users/jmckib/received_events","type":"User","site_admin":false},"labels":[{"id":955449428,"node_id":"MDU6TGFiZWw5NTU0NDk0Mjg=","url":"https://api.github.com/repos/mlflow/mlflow/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":2022847714,"node_id":"MDU6TGFiZWwyMDIyODQ3NzE0","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/model-registry","name":"area/model-registry","color":"48eabc","default":false,"description":"Model registry, model registry APIs, and the fluent client calls for model registry"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-12-07T22:05:19Z","updated_at":"2021-12-10T18:20:49Z","closed_at":"2021-12-10T18:20:49Z","author_association":"NONE","active_lock_reason":null,"body":"### Willingness to contribute\r\nThe MLflow Community encourages bug fix contributions. Would you or another member of your organization be willing to contribute a fix for this bug to the MLflow code base?\r\n\r\n- [ ] Yes. I can contribute a fix for this bug independently.\r\n- [ ] Yes. I would be willing to contribute a fix for this bug with guidance from the MLflow community.\r\n- [x] No. I cannot contribute a bug fix at this time.\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in MLflow)**: yes\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Linux 67b050c0d2b8 5.10.47-linuxkit\r\n- **MLflow installed from (source or binary)**: pip install\r\n- **MLflow version (run ``mlflow --version``)**: 1.22.0\r\n- **Python version**: 3.7.6\r\n- **npm version, if running the dev UI**: \r\n- **Exact command to reproduce**: model = mlflow.pyfunc.load_model(model_uri=f\"models:/KNN/staging\")\r\n\r\n### Describe the problem\r\n\r\nWhen running `mlflow.pyfunc.load_model`, an HTTP 405 error is returned.\r\n\r\n```\r\nIn [14]: model = mlflow.pyfunc.load_model(model_uri=f\"models:/KNN/staging\")\r\n---------------------------------------------------------------------------\r\nMlflowException                           Traceback (most recent call last)\r\n<ipython-input-14-bd881dd521c6> in <module>\r\n----> 1 model = mlflow.pyfunc.load_model(model_uri=f\"models:/KNN/staging\")\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/pyfunc/__init__.py in load_model(model_uri, suppress_warnings, dst_path)\r\n    652                      path will be created.\r\n    653     \"\"\"\r\n--> 654     local_path = _download_artifact_from_uri(artifact_uri=model_uri, output_path=dst_path)\r\n    655     model_meta = Model.load(os.path.join(local_path, MLMODEL_FILE_NAME))\r\n    656\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/tracking/artifact_utils.py in _download_artifact_from_uri(artifact_uri, output_path)\r\n     93         root_uri = prefix + urllib.parse.urlunparse(parsed_uri)\r\n     94\r\n---> 95     return get_artifact_repository(artifact_uri=root_uri).download_artifacts(\r\n     96         artifact_path=artifact_path, dst_path=output_path\r\n     97     )\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/store/artifact/artifact_repository_registry.py in get_artifact_repository(artifact_uri)\r\n    105              requirements.\r\n    106     \"\"\"\r\n--> 107     return _artifact_repository_registry.get_artifact_repository(artifact_uri)\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/store/artifact/artifact_repository_registry.py in get_artifact_repository(self, artifact_uri)\r\n     71                 )\r\n     72             )\r\n---> 73         return repository(artifact_uri)\r\n     74\r\n     75\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/store/artifact/models_artifact_repo.py in __init__(self, artifact_uri)\r\n     32             self.repo = DatabricksModelsArtifactRepository(artifact_uri)\r\n     33         else:\r\n---> 34             uri = ModelsArtifactRepository.get_underlying_uri(artifact_uri)\r\n     33         else:\r\n---> 34             uri = ModelsArtifactRepository.get_underlying_uri(artifact_uri)\r\n     35             self.repo = get_artifact_repository(uri)\r\n     36             # TODO: it may be nice to fall back to the source URI explicitly here if for some reason\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/store/artifact/models_artifact_repo.py in get_underlying_uri(uri)\r\n     51         )\r\n     52         client = MlflowClient(registry_uri=databricks_profile_uri)\r\n---> 53         (name, version) = get_model_name_and_version(client, uri)\r\n     54         download_uri = client.get_model_version_download_uri(name, version)\r\n     55         return add_databricks_profile_info_to_artifact_uri(download_uri, databricks_profile_uri)\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/store/artifact/utils/models.py in get_model_name_and_version(client, models_uri)\r\n     54     (model_name, model_version, model_stage) = _parse_model_uri(models_uri)\r\n     55     if model_stage is not None:\r\n---> 56         model_version = _get_model_version_from_stage(client, model_name, model_stage)\r\n     57     return model_name, str(model_version)\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/store/artifact/utils/models.py in _get_model_version_from_stage(client, name, stage)\r\n     19\r\n     20 def _get_model_version_from_stage(client, name, stage):\r\n---> 21     latest = client.get_latest_versions(name, [stage])\r\n     22     if len(latest) == 0:\r\n     23         raise MlflowException(\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/tracking/client.py in get_latest_versions(self, name, stages)\r\n   2046             current_stage: None\r\n   2047         \"\"\"\r\n-> 2048         return self._get_registry_client().get_latest_versions(name, stages)\r\n   2049\r\n   2050     def set_registered_model_tag(self, name, key, value) -> None:\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/tracking/_model_registry/client.py in get_latest_versions(self, name, stages)\r\n    147         :return: List of :py:class:`mlflow.entities.model_registry.ModelVersion` objects.\r\n    148         \"\"\"\r\n--> 149         return self.store.get_latest_versions(name, stages)\r\n    150\r\n    151     def set_registered_model_tag(self, name, key, value):\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/store/model_registry/rest_store.py in get_latest_versions(self, name, stages)\r\n    195         \"\"\"\r\n    196         req_body = message_to_json(GetLatestVersions(name=name, stages=stages))\r\n--> 197         response_proto = self._call_endpoint(GetLatestVersions, req_body, call_all_endpoints=True)\r\n    198         return [\r\n    199             ModelVersion.from_proto(model_version)\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/store/model_registry/rest_store.py in _call_endpoint(self, api, json_body, call_all_endpoints)\r\n     59         if call_all_endpoints:\r\n     60             endpoints = _METHOD_TO_ALL_INFO[api]\r\n---> 61             return call_endpoints(self.get_host_creds(), endpoints, json_body, response_proto)\r\n     62         else:\r\n     63             endpoint, method = _METHOD_TO_INFO[api]\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/utils/rest_utils.py in call_endpoints(host_creds, endpoints, json_body, response_proto)\r\n    238     for i, (endpoint, method) in enumerate(endpoints):\r\n    239         try:\r\n--> 240             return call_endpoint(host_creds, endpoint, method, json_body, response_proto)\r\n    241         except RestException as e:\r\n    242             if e.error_code != ErrorCode.Name(ENDPOINT_NOT_FOUND) or i == len(endpoints) - 1:\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/utils/rest_utils.py in call_endpoint(host_creds, endpoint, method, json_body, response_proto)\r\n    227             host_creds=host_creds, endpoint=endpoint, method=method, json=json_body\r\n    228         )\r\n--> 229     response = verify_rest_response(response, endpoint)\r\n    230     js_dict = json.loads(response.text)\r\n    231     parse_dict(js_dict=js_dict, message=response_proto)\r\n\r\n/opt/conda/lib/python3.7/site-packages/mlflow/utils/rest_utils.py in verify_rest_response(response, endpoint)\r\n    173                 response.status_code,\r\n    174             )\r\n--> 175             raise MlflowException(\"%s. Response body: '%s'\" % (base_msg, response.text))\r\n    176\r\n    177     # Skip validation for endpoints (e.g. DBFS file-download API) which may return a non-JSON\r\n\r\nMlflowException: API request to endpoint /api/2.0/mlflow/registered-models/get-latest-versions failed with error code 405 != 200. Response body: '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\r\n<title>405 Method Not Allowed</title>\r\n<h1>Method Not Allowed</h1>\r\n<p>The method is not allowed for the requested URL.</p>\r\n```\r\n\r\nIt looks like the problem is that the `get-latest-versions` endpoint is receiving a POST request when it expects a GET. [The documentation says that it should be a POST](https://mlflow.org/docs/latest/rest-api.html#get-latest-modelversions), but I've confirmed that only a GET works.\r\n\r\n```\r\nIn [13]: resp = requests.get(mlflow.get_tracking_uri() + \"/api/2.0/mlflow/registered-models/get-latest-versions\", params={\"name\": \"KNN\", \"stages\": [\"No\r\n    ...: ne\"]}, headers={\"Authorization\": f\"Bearer {os.environ['MLFLOW_TRACKING_TOKEN']}\"})\r\n\r\nIn [14]: resp.status_code\r\nOut[14]: 200\r\n\r\nIn [15]: resp=requests.post(mlflow.get_tracking_uri() + \"/api/2.0/mlflow/registered-models/get-latest-versions\", data={\"name\": \"KNN\", \"stages\": [\"Stagi\r\n    ...: ng\"]}, headers={\"Authorization\": \"Bearer 537f88d4b4bbff6827c6dd6241dfb3f6\"})\r\n\r\nIn [16]: resp.status_code\r\nOut[16]: 405\r\n```\r\n\r\n### What component(s), interfaces, languages, and integrations does this bug affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [x] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [x] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterface \r\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguage \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n- [x] `language/python`\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n","closed_by":{"login":"jmckib","id":183379,"node_id":"MDQ6VXNlcjE4MzM3OQ==","avatar_url":"https://avatars.githubusercontent.com/u/183379?v=4","gravatar_id":"","url":"https://api.github.com/users/jmckib","html_url":"https://github.com/jmckib","followers_url":"https://api.github.com/users/jmckib/followers","following_url":"https://api.github.com/users/jmckib/following{/other_user}","gists_url":"https://api.github.com/users/jmckib/gists{/gist_id}","starred_url":"https://api.github.com/users/jmckib/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jmckib/subscriptions","organizations_url":"https://api.github.com/users/jmckib/orgs","repos_url":"https://api.github.com/users/jmckib/repos","events_url":"https://api.github.com/users/jmckib/events{/privacy}","received_events_url":"https://api.github.com/users/jmckib/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5151/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/5151/timeline","performed_via_github_app":null,"state_reason":"completed"}