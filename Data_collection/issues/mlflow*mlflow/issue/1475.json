{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1475","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/1475/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/1475/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/1475/events","html_url":"https://github.com/mlflow/mlflow/issues/1475","id":458091258,"node_id":"MDU6SXNzdWU0NTgwOTEyNTg=","number":1475,"title":"[RFC] Supporting Oracle databases as backing stores","user":{"login":"mstrosaker","id":5873687,"node_id":"MDQ6VXNlcjU4NzM2ODc=","avatar_url":"https://avatars.githubusercontent.com/u/5873687?v=4","gravatar_id":"","url":"https://api.github.com/users/mstrosaker","html_url":"https://github.com/mstrosaker","followers_url":"https://api.github.com/users/mstrosaker/followers","following_url":"https://api.github.com/users/mstrosaker/following{/other_user}","gists_url":"https://api.github.com/users/mstrosaker/gists{/gist_id}","starred_url":"https://api.github.com/users/mstrosaker/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mstrosaker/subscriptions","organizations_url":"https://api.github.com/users/mstrosaker/orgs","repos_url":"https://api.github.com/users/mstrosaker/repos","events_url":"https://api.github.com/users/mstrosaker/events{/privacy}","received_events_url":"https://api.github.com/users/mstrosaker/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022852620,"node_id":"MDU6TGFiZWwyMDIyODUyNjIw","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/sqlalchemy","name":"area/sqlalchemy","color":"ede978","default":false,"description":"Use of SQL alchemy in tracking service or model registry"},{"id":2022866842,"node_id":"MDU6TGFiZWwyMDIyODY2ODQy","url":"https://api.github.com/repos/mlflow/mlflow/labels/priority/awaiting-more-evidence","name":"priority/awaiting-more-evidence","color":"534cb5","default":false,"description":"Lowest priority. Possibly useful, but not yet enough support to actually get it done."}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-06-19T15:47:41Z","updated_at":"2022-09-23T14:09:54Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"This proposal is for allowing Oracle databases to be used as backing stores, using the same SqlAlchemyStore implementation used for other databases.  There are three identified issues that need to be addressed to add this support:  URI parsing, autoincrementing primary keys, and creation of the default experiment.\r\n\r\n### URI Parsing\r\n\r\nThe URI parsing in six.moves.urllib does not appear to like underscores in the scheme part of URIs, which is unfortunate considering that cx_Oracle is a commonly-used driver:\r\n\r\n```\r\n>>> from six.moves import urllib\r\n>>> urllib.parse.urlparse('oracle+cx_Oracle://user:passw0rd@127.0.0.1:1521/?service_name=FOO')\r\nParseResult(scheme='', netloc='', path='oracle+cx_Oracle://user:passw0rd@127.0.0.1:1521/', params='', query='service_name=FOO', fragment='')\r\n>>> urllib.parse.urlparse('oracle+cxOracle://user:passw0rd@127.0.0.1:1521/?service_name=FOO')\r\nParseResult(scheme='oracle+cxoracle', netloc='user:passw0rd@127.0.0.1:1521', path='/', params='', query='service_name=FOO', fragment='')\r\n```\r\n\r\nThe six.moves.urllib behavior seems to be the same as the python3 urllib behavior (as expected).\r\n\r\nAltering this behavior is not proposed in this RFC.  Instead, it should be documented that URIs intending to specify the use of the cx_Oracle driver should start with “oracle://“ instead of “oracle+cx_Oracle://“ (leveraging the fact that cx_Oracle is the default driver for that dialect).\r\n\r\n### Autoincrementing Primary Keys\r\n\r\nDatabases generally support one (or both) of two techniques for producing monotonically-increasing primary keys.  First is the use of database-specific autoincrementig column types; this is supported in SqlAlchemy by passing autoincrement=True when creating a column.  This technique is supported by sqlite, mssql, mysql, and postgresql.  It is not supported by Oracle.  (Technically, recent versions of Oracle database products, 12.1 or later, add an IDENTITY column type that implements this behavior, but SqlAlchemy is not currently capable of emitting SQL using that column type.)\r\n\r\nThe second technique is the use of Sequences, which are database constructs used to produce monotonically-increasing values.  With an autoincrement column type, the primary key does not need to be specified in INSERT statements; it will automatically receive the next value.  With sequences, the value of a primary key must be specified in an INSERT statement (it is specified as next_val(seq), or similar).  Sequences are supported in Oracle (and, incidentally, in postgresql).\r\n\r\nThere is only one autoincrementing value in the current schema: the primary key in the experiments table.  This proposal is to define the column as either:\r\n```\r\n    experiment_id = Column(Integer, autoincrement=True)\r\n```\r\nor\r\n```\r\n    experiment_id = Column(Integer, Sequence('experiment_seq’, start=1))\r\n```\r\ndepending on the dialect that is being used.\r\n\r\nNote that the sequence should be created to start at 1, since 0 is reserved for the default experiment.  Oracle defaults to starting sequences at 1, but it should be made explicit in case that changes, or in case other dialects need to use Sequences in the future.\r\n\r\n### Creating the default experiment\r\n\r\nThe _create_default_experiment method in the SqlAlchemyStore class (mlflow/store/sqlalchemy_store,py) includes an SQL INSERT statement for creating the default (ID: 0) experiment.  This statement produces the following error:\r\n\r\n```\r\nmlflow.exceptions.MlflowException: (cx_Oracle.DatabaseError) ORA-00933: SQL command not properly ended\r\n```\r\n\r\nFurther investigation shows that the cx_Oracle driver rejects statements that are terminated with semicolons; the statement works as expected if the semicolon is omitted.  I have been able to test sqlite, which works correctly if the semicolon is deleted.  This proposal includes removing the semicolon at the end of the INSERT statement, assuming it does not affect the other dialects.\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1475/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/1475/timeline","performed_via_github_app":null,"state_reason":null}