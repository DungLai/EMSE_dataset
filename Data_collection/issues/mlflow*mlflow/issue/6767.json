{"url":"https://api.github.com/repos/mlflow/mlflow/issues/6767","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/6767/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/6767/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/6767/events","html_url":"https://github.com/mlflow/mlflow/issues/6767","id":1370543779,"node_id":"I_kwDOCB5Jx85RsNaj","number":6767,"title":"[FR] Support Pandas Extension Types with Signatures","user":{"login":"skylarbpayne","id":4830598,"node_id":"MDQ6VXNlcjQ4MzA1OTg=","avatar_url":"https://avatars.githubusercontent.com/u/4830598?v=4","gravatar_id":"","url":"https://api.github.com/users/skylarbpayne","html_url":"https://github.com/skylarbpayne","followers_url":"https://api.github.com/users/skylarbpayne/followers","following_url":"https://api.github.com/users/skylarbpayne/following{/other_user}","gists_url":"https://api.github.com/users/skylarbpayne/gists{/gist_id}","starred_url":"https://api.github.com/users/skylarbpayne/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/skylarbpayne/subscriptions","organizations_url":"https://api.github.com/users/skylarbpayne/orgs","repos_url":"https://api.github.com/users/skylarbpayne/repos","events_url":"https://api.github.com/users/skylarbpayne/events{/privacy}","received_events_url":"https://api.github.com/users/skylarbpayne/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022848043,"node_id":"MDU6TGFiZWwyMDIyODQ4MDQz","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/models","name":"area/models","color":"48eabc","default":false,"description":"MLmodel format, model serialization/deserialization, flavors"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-09-12T21:34:29Z","updated_at":"2022-09-20T00:33:59Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Willingness to contribute\r\n\r\nYes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n\r\n### Proposal Summary\r\n\r\nToday, we do not support pandas extension types. These are useful as they let us represent missingness of values other than floats. While many (I would even acknowledge _most_) ML tools do not work with these extension types, there are some that do.\r\n\r\nThough I acknowledge that this depends a bit on the semantics of what you want the mlflow `DataType` to mean (i.e. does `DataType.boolean` allow nullable?). The answer will determine possible implementation options.\r\n\r\nIf we are okay with these mlflow `DataType`s to allow missingness, then it seems like small amount of work to support the extension types -- [e.g. just add corresponding pandas types here](https://github.com/mlflow/mlflow/blob/b2f1569caa2e0f62f3b057b9fabe48cfa8f8e01d/mlflow/types/schema.py#L28)\r\n\r\nHowever, the corresponding Spark types we have used do not allow nullable (we would have to explicitly take the nullable version). So a better option could be to extend `DataType` to more explicitly allow for types with missing. See the `Details` section below for a sketch of how we could support this.\r\n\r\n### Motivation\r\n\r\n> #### What is the use case for this feature?\r\nWe often use frameworks that directly support missingness; sometimes our own models. It's unfortunate that we are able to log models with correct schemas, but then can't predict with them due to this check.\r\n\r\n> #### Why is this use case valuable to support for MLflow users in general?\r\nMost data is not without missingness. Today, if you want to use signatures, you have two choices:\r\n\r\n1. Implement imputation _outside_ of your model (so that you can convert to a non-nullable type)\r\n2. Convert to float\r\n\r\n(1) feels somewhat dangerous and (2) is mostly fine, but feels somewhat annoying because we are throwing away semantic information about the valid range of values -- this decays understanding of what the data elements are IMHO.\r\n\r\n> #### Why is this use case valuable to support for your project(s) or organization?\r\nYes -- see above.\r\n\r\n> #### Why is it currently difficult to achieve this use case?\r\nDifficult might be a strong word. We _could_ convert everything to float and call it a day. But I would prefer us retaining the type semantics. E.g. it's better to me to know that a feature is actually a bool rather than being forced to call it a float because it _might_ have missing values.\r\n\r\n### Details\r\n\r\nI split the solution into three sequential changes that can happen in separate PRs, described below.\r\n\r\n## (1) Allowing Nullable data types\r\n\r\nWe can simply add separate nullable types to [DataType](); possibly implementing a `nullable()` method on `DataType` too to maintain the link between non-nullable/nullable versions of the \"same\" type. This is [similar to what Spark does](https://spark.apache.org/docs/1.3.1/api/java/org/apache/spark/sql/types/DataType.html#asNullable()).\r\n\r\nHowever, [in Spark we generally apply nullability at the _field_ level of the schema](https://spark.apache.org/docs/3.2.1/api/java/index.html?org/apache/spark/sql/types/StructField.html). I felt this is not a good idea to replicate because the code enforcing signature types assumes it is only a `DataType` that is passed around. Having to somehow modify all this code to pass around a different kind of object carrying the nullability information (e.g. a ColSpec) seems potentially error prone to me.\r\n\r\nAdditionally, \r\n\r\n## (2) Changes to Signature Enforcement\r\n\r\nWe should then [change schema enforcement](https://github.com/mlflow/mlflow/blob/master/mlflow/models/utils.py#L318) to consider nullable types.\r\n\r\nEssentially: if the expected `DataType` is a nullable one, then we should accept the nullable OR non-nullable type (because nullable should be a superset of non-nullable). This is where maintaining the link between nullable/non-nullable types above is helpful.\r\n\r\n## (3) Changes to Signature Inference\r\n\r\nFinally, [when inferring Signatures](https://github.com/mlflow/mlflow/blob/master/mlflow/models/signature.py#L98), we should consider that the types may be nullable. Generally, we have a DataFrame, so anytime we are coming from a possibly null type (e.g. pandas `BooleanDtype`), we can infer the nullable status of that column to be nullable. I think this is mostly \"icing on the cake\" -- I generally don't rely on mlflow's signature inference personally ðŸ˜… .\r\n\r\n### What component(s) does this bug affect?\r\n\r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [X] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/pipelines`: Pipelines, Pipeline APIs, Pipeline configs, Pipeline Templates\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\n### What interface(s) does this bug affect?\r\n\r\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\n### What language(s) does this bug affect?\r\n\r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\n### What integration(s) does this bug affect?\r\n\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/6767/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/6767/timeline","performed_via_github_app":null,"state_reason":null}