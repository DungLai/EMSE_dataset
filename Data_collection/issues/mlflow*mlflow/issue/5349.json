{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5349","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/5349/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/5349/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/5349/events","html_url":"https://github.com/mlflow/mlflow/issues/5349","id":1124686556,"node_id":"I_kwDOCB5Jx85DCVrc","number":5349,"title":"[FR] Implement a way to filter experiments by tags","user":{"login":"rvandegrift","id":976207,"node_id":"MDQ6VXNlcjk3NjIwNw==","avatar_url":"https://avatars.githubusercontent.com/u/976207?v=4","gravatar_id":"","url":"https://api.github.com/users/rvandegrift","html_url":"https://github.com/rvandegrift","followers_url":"https://api.github.com/users/rvandegrift/followers","following_url":"https://api.github.com/users/rvandegrift/following{/other_user}","gists_url":"https://api.github.com/users/rvandegrift/gists{/gist_id}","starred_url":"https://api.github.com/users/rvandegrift/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rvandegrift/subscriptions","organizations_url":"https://api.github.com/users/rvandegrift/orgs","repos_url":"https://api.github.com/users/rvandegrift/repos","events_url":"https://api.github.com/users/rvandegrift/events{/privacy}","received_events_url":"https://api.github.com/users/rvandegrift/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"},{"id":2022852620,"node_id":"MDU6TGFiZWwyMDIyODUyNjIw","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/sqlalchemy","name":"area/sqlalchemy","color":"ede978","default":false,"description":"Use of SQL alchemy in tracking service or model registry"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-02-04T22:50:43Z","updated_at":"2022-07-21T01:54:58Z","closed_at":"2022-07-21T01:54:58Z","author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [X] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n`CreateExperiments` permits attaching tags to an experiment.  But I can't find a way to filter experiments using those tags:\r\n- `ListExperiments` has no parameters for filtering\r\n- there isn't a `SearchExperiments` endpoint\r\n\r\n## Motivation\r\n- What is the use case for this feature?  I want to be able to organize experiments from different users and organizations.  Tags are often promising, but without a way to retrieve experiments based on tags, I don't see a way to use them.\r\n- Why is this use case valuable to support for MLflow users in general?  I'm probably not the only person who'd like to enable different users and organizations to be able to filter the experiments.\r\n- Why is this use case valuable to support for your project(s) or organization?  Different users may share the same MLflow installation, and want to look at their own experiments.\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient) Not sure how to answer this: it's not implemented, so it's hard to do :)  Client side filtering of the API responses is possible so long as the number of experiments and users are small.  But as those grow over time, I expect it to be unwieldy and slow.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [X] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [X] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nCurrently, I'm focused only on the API - there's some new UI possibility here, but I'm going to ignore those issues for now.\r\n\r\nTwo approaches occur to me.\r\n\r\n### `SearchExperiments`\r\n\r\n`SearchExperiments` could be added, by analogy with e.g. `SearchRuns`.  This would involve implementing the search functionality at [1] for experiments.  This way, experiment search has a similar developer experience to other search endpoints.\r\n\r\nThis would allow callers to get a filtered list by tag using an expression like: `tags.<key> = <value>`.  Since the search syntax already supports boolean combinations, it'd be easy to implement a filtered view of experiments.\r\n\r\nPros:\r\n- suffices for my use-case\r\n- extends existing search features\r\n- the `Search...` endpoints use `POST`, so no encoding is needed\r\n\r\nCons:\r\n- more powerful than I need\r\n- some preferences exist against this design, e.g. [2]\r\n\r\n### `ListExperiments`\r\n\r\n`ListExperiments` could be extended with a `tags` parameter that accepts a (default empty) list of key-value pairs.  Those pair would *all* be applied as filters on the sqlalchemy query.\r\n\r\nThis would allow callers to get a filtered list by using an argument like `[<key>=<value>]`.  Since filtering by multiple tags is often useful, this should be a list so no expression parsing is required.  Each key-value pair would translate to a sqlalchemy filter on the underlying query.\r\n\r\nPros:\r\n- suffices for my use-case\r\n- simpler interface and probably implementation\r\n- searching by tag conjunction is a common paradigm\r\n\r\nCons:\r\n- `ListExpressions` uses GET, so the key value pairs need to be url-encoded\r\n- different developer experience when filtering experiments vs e.g. runs\r\n\r\n\r\n[1] - https://mlflow.org/docs/latest/search-syntax.html\r\n[2] - https://github.com/mlflow/mlflow/pull/3881#issuecomment-754053632\r\n","closed_by":{"login":"harupy","id":17039389,"node_id":"MDQ6VXNlcjE3MDM5Mzg5","avatar_url":"https://avatars.githubusercontent.com/u/17039389?v=4","gravatar_id":"","url":"https://api.github.com/users/harupy","html_url":"https://github.com/harupy","followers_url":"https://api.github.com/users/harupy/followers","following_url":"https://api.github.com/users/harupy/following{/other_user}","gists_url":"https://api.github.com/users/harupy/gists{/gist_id}","starred_url":"https://api.github.com/users/harupy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harupy/subscriptions","organizations_url":"https://api.github.com/users/harupy/orgs","repos_url":"https://api.github.com/users/harupy/repos","events_url":"https://api.github.com/users/harupy/events{/privacy}","received_events_url":"https://api.github.com/users/harupy/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5349/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/5349/timeline","performed_via_github_app":null,"state_reason":"completed"}