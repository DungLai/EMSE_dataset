{"url":"https://api.github.com/repos/mlflow/mlflow/issues/6604","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/6604/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/6604/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/6604/events","html_url":"https://github.com/mlflow/mlflow/issues/6604","id":1351768146,"node_id":"I_kwDOCB5Jx85QklhS","number":6604,"title":"Use `tuple` instead a comma-separated string in `pytest.mark.parametrize` for better readability","user":{"login":"harupy","id":17039389,"node_id":"MDQ6VXNlcjE3MDM5Mzg5","avatar_url":"https://avatars.githubusercontent.com/u/17039389?v=4","gravatar_id":"","url":"https://api.github.com/users/harupy","html_url":"https://github.com/harupy","followers_url":"https://api.github.com/users/harupy/followers","following_url":"https://api.github.com/users/harupy/following{/other_user}","gists_url":"https://api.github.com/users/harupy/gists{/gist_id}","starred_url":"https://api.github.com/users/harupy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harupy/subscriptions","organizations_url":"https://api.github.com/users/harupy/orgs","repos_url":"https://api.github.com/users/harupy/repos","events_url":"https://api.github.com/users/harupy/events{/privacy}","received_events_url":"https://api.github.com/users/harupy/received_events","type":"User","site_admin":false},"labels":[{"id":955449436,"node_id":"MDU6TGFiZWw5NTU0NDk0MzY=","url":"https://api.github.com/repos/mlflow/mlflow/labels/good%20first%20issue","name":"good first issue","color":"7057ff","default":true,"description":"Good for newcomers"},{"id":4300304016,"node_id":"LA_kwDOCB5Jx88AAAABAFFukA","url":"https://api.github.com/repos/mlflow/mlflow/labels/has-closing-pr","name":"has-closing-pr","color":"fef2c0","default":false,"description":"This issue has a closing PR"}],"state":"closed","locked":false,"assignee":{"login":"shraddhafalane","id":72125392,"node_id":"MDQ6VXNlcjcyMTI1Mzky","avatar_url":"https://avatars.githubusercontent.com/u/72125392?v=4","gravatar_id":"","url":"https://api.github.com/users/shraddhafalane","html_url":"https://github.com/shraddhafalane","followers_url":"https://api.github.com/users/shraddhafalane/followers","following_url":"https://api.github.com/users/shraddhafalane/following{/other_user}","gists_url":"https://api.github.com/users/shraddhafalane/gists{/gist_id}","starred_url":"https://api.github.com/users/shraddhafalane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shraddhafalane/subscriptions","organizations_url":"https://api.github.com/users/shraddhafalane/orgs","repos_url":"https://api.github.com/users/shraddhafalane/repos","events_url":"https://api.github.com/users/shraddhafalane/events{/privacy}","received_events_url":"https://api.github.com/users/shraddhafalane/received_events","type":"User","site_admin":false},"assignees":[{"login":"shraddhafalane","id":72125392,"node_id":"MDQ6VXNlcjcyMTI1Mzky","avatar_url":"https://avatars.githubusercontent.com/u/72125392?v=4","gravatar_id":"","url":"https://api.github.com/users/shraddhafalane","html_url":"https://github.com/shraddhafalane","followers_url":"https://api.github.com/users/shraddhafalane/followers","following_url":"https://api.github.com/users/shraddhafalane/following{/other_user}","gists_url":"https://api.github.com/users/shraddhafalane/gists{/gist_id}","starred_url":"https://api.github.com/users/shraddhafalane/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/shraddhafalane/subscriptions","organizations_url":"https://api.github.com/users/shraddhafalane/orgs","repos_url":"https://api.github.com/users/shraddhafalane/repos","events_url":"https://api.github.com/users/shraddhafalane/events{/privacy}","received_events_url":"https://api.github.com/users/shraddhafalane/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2022-08-26T05:31:39Z","updated_at":"2022-08-30T04:29:34Z","closed_at":"2022-08-30T04:29:34Z","author_association":"MEMBER","active_lock_reason":null,"body":"## Example\r\n\r\n```diff\r\ndiff --git a/tests/utils/test_string_utils.py b/tests/utils/test_string_utils.py\r\nindex 47209eebb..ef933c1a3 100644\r\n--- a/tests/utils/test_string_utils.py\r\n+++ b/tests/utils/test_string_utils.py\r\n@@ -4,7 +4,7 @@ from mlflow.utils.string_utils import strip_prefix, strip_suffix, is_string_type\r\n \r\n \r\n @pytest.mark.parametrize(\r\n-    \"original,prefix,expected\",\r\n+    (\"original\", \"prefix\", \"expected\"),\r\n     [(\"smoketest\", \"smoke\", \"test\"), (\"\", \"test\", \"\"), (\"\", \"\", \"\"), (\"test\", \"\", \"test\")],\r\n )\r\n def test_strip_prefix(original, prefix, expected):\r\n@@ -12,7 +12,7 @@ def test_strip_prefix(original, prefix, expected):\r\n \r\n \r\n @pytest.mark.parametrize(\r\n-    \"original,suffix,expected\",\r\n+    (\"original\", \"suffix\", \"expected\"),\r\n     [(\"smoketest\", \"test\", \"smoke\"), (\"\", \"test\", \"\"), (\"\", \"\", \"\"), (\"test\", \"\", \"test\")],\r\n )\r\n def test_strip_suffix(original, suffix, expected):\r\n```\r\n\r\n## Instructions\r\n\r\n1. Save the following code as `a.py` and run it in the repository root.\r\n2. Remove `a.py`\r\n3. Run `black tests`.\r\n4. File a PR.\r\n\r\n```python\r\nimport ast\r\nimport subprocess\r\nimport re\r\nfrom typing import Optional, List\r\nfrom pathlib import Path\r\n\r\n\r\ndef get_qualname(node: ast.AST) -> Optional[str]:\r\n    parts = []\r\n    while True:\r\n        if isinstance(node, ast.Name):\r\n            parts.append(node.id)\r\n            break\r\n        if isinstance(node, ast.Attribute):\r\n            parts.append(node.attr)\r\n            node = node.value\r\n        else:\r\n            return None\r\n    return \".\".join(reversed(parts))\r\n\r\n\r\nclass Replacer(ast.NodeVisitor):\r\n    def __init__(self, lines: List[str]) -> None:\r\n        self.lines = lines\r\n\r\n    def visit_Call(self, node: ast.Call) -> None:\r\n        if (get_qualname(node.func)) == \"pytest.mark.parametrize\":\r\n            first_arg = node.args[0]\r\n            if isinstance(first_arg, ast.Str) and \",\" in first_arg.s:\r\n                argnames = first_arg.s\r\n                row = first_arg.lineno - 1\r\n                col = first_arg.col_offset\r\n                head = self.lines[row][:col]  # @pytest.mark.parametrize(\r\n                tail = self.lines[row][col:]  # \"a,b\", [(1, 2)])\r\n                tup = str(tuple(re.split(r\"\\s*,\\s*\", argnames)))\r\n                self.lines[row] = head + tail.replace(f'\"{argnames}\"', tup, 1)\r\n        self.generic_visit(node)\r\n\r\n\r\ndef is_python_file(path: str) -> bool:\r\n    return path.endswith(\".py\")\r\n\r\n\r\ngit_ls_files_out = subprocess.check_output(\r\n    [\"git\", \"ls-files\", \"--directory\", \"tests\"],\r\n    text=True,\r\n)\r\n\r\nfor f in map(Path, filter(is_python_file, git_ls_files_out.splitlines())):\r\n    print(\"Processing\", f)\r\n    src = f.read_text()\r\n    replacer = Replacer(lines=src.split(\"\\n\"))\r\n    node = ast.parse(src)\r\n    replacer.visit(node)\r\n    f.write_text(\"\\n\".join(replacer.lines))\r\n```\r\n\r\n## References\r\n\r\n- https://docs.pytest.org/en/7.1.x/reference/reference.html#pytest.Metafunc.parametrize","closed_by":{"login":"dbczumar","id":39497902,"node_id":"MDQ6VXNlcjM5NDk3OTAy","avatar_url":"https://avatars.githubusercontent.com/u/39497902?v=4","gravatar_id":"","url":"https://api.github.com/users/dbczumar","html_url":"https://github.com/dbczumar","followers_url":"https://api.github.com/users/dbczumar/followers","following_url":"https://api.github.com/users/dbczumar/following{/other_user}","gists_url":"https://api.github.com/users/dbczumar/gists{/gist_id}","starred_url":"https://api.github.com/users/dbczumar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dbczumar/subscriptions","organizations_url":"https://api.github.com/users/dbczumar/orgs","repos_url":"https://api.github.com/users/dbczumar/repos","events_url":"https://api.github.com/users/dbczumar/events{/privacy}","received_events_url":"https://api.github.com/users/dbczumar/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/6604/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/6604/timeline","performed_via_github_app":null,"state_reason":"completed"}