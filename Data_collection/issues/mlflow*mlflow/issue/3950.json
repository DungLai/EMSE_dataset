{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3950","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/3950/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/3950/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/3950/events","html_url":"https://github.com/mlflow/mlflow/issues/3950","id":780627177,"node_id":"MDU6SXNzdWU3ODA2MjcxNzc=","number":3950,"title":"[FR] Experiment Tracking Decorator to remove boilerplate","user":{"login":"Chris-hughes10","id":31883449,"node_id":"MDQ6VXNlcjMxODgzNDQ5","avatar_url":"https://avatars.githubusercontent.com/u/31883449?v=4","gravatar_id":"","url":"https://api.github.com/users/Chris-hughes10","html_url":"https://github.com/Chris-hughes10","followers_url":"https://api.github.com/users/Chris-hughes10/followers","following_url":"https://api.github.com/users/Chris-hughes10/following{/other_user}","gists_url":"https://api.github.com/users/Chris-hughes10/gists{/gist_id}","starred_url":"https://api.github.com/users/Chris-hughes10/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Chris-hughes10/subscriptions","organizations_url":"https://api.github.com/users/Chris-hughes10/orgs","repos_url":"https://api.github.com/users/Chris-hughes10/repos","events_url":"https://api.github.com/users/Chris-hughes10/events{/privacy}","received_events_url":"https://api.github.com/users/Chris-hughes10/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022847277,"node_id":"MDU6TGFiZWwyMDIyODQ3Mjc3","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/examples","name":"area/examples","color":"48eabc","default":false,"description":"Example code"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-01-06T15:16:03Z","updated_at":"2021-02-04T12:34:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Thank you for submitting a feature request. **Before proceeding, please review MLflow's [Issue Policy for feature requests](https://www.github.com/mlflow/mlflow/blob/master/ISSUE_POLICY.md#feature-requests) and the [MLflow Contributing Guide](https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.rst)**.\r\n\r\n**Please fill in this feature request template to ensure a timely and thorough response.**\r\n\r\n## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [x] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nWith the current tracking API, some boilerplate code is required to create an experiment and start a run. Specifically, it is quite common to see code blocks such as:\r\n```\r\nmlflow.set_tracking_uri(MLFLOW_TRACKING_SERVICE_URI)\r\nexperiment_id = mlflow.set_experiment(EXPERIMENT_NAME)\r\nwith mlflow.start_run(experiment_id=experiment_id):\r\n    ...\r\n``` \r\nat the start of a training script.\r\n\r\nIn an effort to remove this when using mlflow for personal projects, I implemented a decorator that can be added to a training function, which can set some of these parameters using decorator arguments or environment variables. The syntax currently looks like:\r\n```\r\n@mlflow_experiment\r\ndef train_model_1():\r\n   ...\r\n\r\n@mlflow_experiment(experiment_name='Train Random Forest', autolog=True)\r\ndef train_sklearn_model():\r\n    ...\r\n```\r\n\r\nThis has worked well for me and has resulted in my training scripts requiring less mlflow specific code - especially when combined with autologging - and eases adoption. I have primarily used this in scripts that are deployed on platforms such as AzureML, Kubeflow and Argo as opposed to in a notebook environment. This approach has received positive feedback from my colleagues at Microsoft, and I believe this could be a useful feature for other members of the community, and as a single function which uses existing components, it would be simple to integrate.\r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\nTo remove boilerplate code from training scripts when using the tracking API for simple use cases.\r\n- Why is this use case valuable to support for MLflow users in general?\r\nLess code is required to start using mlflow, and it arguably provides a cleaner approach than a context manager.\r\n- Why is this use case valuable to support for your project(s) or organization?\r\nThis enabled me to remove some boilerplate code that I was observing in every training script in which I was using mlflow\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\nCurrently, the use, and knowledge, of additional components in the tracking API are required to create experiments and log results to a remote tracking server, which ends up becoming boilerplate.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [x] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [x] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\n(Use this section to include any additional information about the feature. If you have a proposal for how to implement this feature, please include it here. For implementation guidelines, please refer to the [Contributing Guide](https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.rst#contribution-guidelines).)\r\n\r\nI shall include the implementation (and tests) that I am currently using, which have worked well for my use cases, below:\r\n```\r\nimport functools\r\nimport os\r\n\r\nimport mlflow\r\n\r\ndef mlflow_experiment(\r\n    _func=None,\r\n    *,\r\n    experiment_name=None,\r\n    tracking_uri=None,\r\n    autolog=False,\r\n    run_name=None,\r\n    tags=None,\r\n):\r\n    def experiment_decorator(func):\r\n        @functools.wraps(func)\r\n        def experiment_wrapper(*args, **kwargs):\r\n            nonlocal experiment_name, tracking_uri\r\n\r\n            if tracking_uri is None:\r\n                tracking_uri = os.getenv(\r\n                    \"MLFLOW_TRACKING_SERVICE_URI\", mlflow.get_tracking_uri()\r\n                )\r\n            mlflow.set_tracking_uri(tracking_uri)\r\n\r\n            if experiment_name is None:\r\n                experiment_name = os.getenv(\"MLFLOW_EXPERIMENT_NAME\", None)\r\n\r\n            experiment_id = (\r\n                mlflow.set_experiment(experiment_name)\r\n                if experiment_name is not None\r\n                else None\r\n            )\r\n\r\n            if autolog:\r\n                mlflow.autolog()\r\n\r\n            with mlflow.start_run(\r\n                experiment_id=experiment_id, run_name=run_name, tags=tags\r\n            ):\r\n                value = func(*args, **kwargs)\r\n\r\n            return value\r\n\r\n        return experiment_wrapper\r\n\r\n    if _func is None:\r\n        return experiment_decorator\r\n    else:\r\n        return experiment_decorator(_func)\r\n\r\n---\r\n\r\nfrom unittest.mock import MagicMock\r\n\r\nfrom pytest import fixture\r\n\r\nfrom mlflow_decorator import mlflow_experiment\r\n\r\n\r\nEXPERIMENT_NAME = \"experiment_name\"\r\nEXPERIMENT_ID = \"experiment_id\"\r\nTRACKING_URI = \"tracking_uri\"\r\nRUN_NAME = \"run_name\"\r\nTAGS = \"tags\"\r\nFUNCTION_ARG = \"arg1\"\r\nFUNCTION_KWARG = \"kwarg1\"\r\n\r\nMLFLOW_TRACKING_SERVICE_URI_ENV_VAR = \"MLFLOW_TRACKING_SERVICE_URI_ENV_VAR\"\r\nMLFLOW_EXPERIMENT_NAME_ENV_VAR = \"MLFLOW_EXPERIMENT_NAME_ENV_VAR\"\r\n\r\n@fixture\r\ndef target_func():\r\n    return MagicMock()\r\n\r\ndef get_env_fake(env_name, *args):\r\n    if env_name == \"MLFLOW_TRACKING_SERVICE_URI\":\r\n        return MLFLOW_TRACKING_SERVICE_URI_ENV_VAR\r\n    elif env_name == \"MLFLOW_EXPERIMENT_NAME\":\r\n        return MLFLOW_EXPERIMENT_NAME_ENV_VAR\r\n\r\n\r\ndef test_experiment_decorator_no_args(mocker, target_func):\r\n    mlflow_mock = MagicMock()\r\n    get_tracking_uri_mock = MagicMock(return_value=TRACKING_URI)\r\n    mlflow_mock.get_tracking_uri = get_tracking_uri_mock\r\n    mocker.patch(\"mlflow_decorator.mlflow\", mlflow_mock)\r\n\r\n    decorated_func = mlflow_experiment(target_func)\r\n    decorated_func(FUNCTION_ARG, FUNCTION_KWARG=FUNCTION_KWARG)\r\n\r\n    mlflow_mock.get_tracking_uri.assert_called_once()\r\n    mlflow_mock.set_tracking_uri.assert_called_once_with(TRACKING_URI)\r\n    mlflow_mock.start_run.assert_called_once_with(\r\n        experiment_id=None, run_name=None, tags=None\r\n    )\r\n    target_func.assert_called_once_with(FUNCTION_ARG, FUNCTION_KWARG=FUNCTION_KWARG)\r\n\r\ndef test_experiment_decorator_with_env_vars(mocker, target_func):\r\n    # patch os.getenv to return specified values\r\n    os_mock = MagicMock()\r\n    os_mock.getenv = get_env_fake\r\n    mocker.patch(\"mlflow_decorator.os\", os_mock)\r\n\r\n    mlflow_mock = MagicMock()\r\n    mlflow_mock.set_experiment.return_value = EXPERIMENT_ID\r\n    mocker.patch(\"mlflow_decorator.mlflow\", mlflow_mock)\r\n\r\n    decorated_func = mlflow_experiment(target_func)\r\n    decorated_func(FUNCTION_ARG, FUNCTION_KWARG=FUNCTION_KWARG)\r\n\r\n    mlflow_mock.set_tracking_uri.assert_called_once_with(\r\n        MLFLOW_TRACKING_SERVICE_URI_ENV_VAR\r\n    )\r\n    mlflow_mock.set_experiment.assert_called_once_with(MLFLOW_EXPERIMENT_NAME_ENV_VAR)\r\n    mlflow_mock.start_run.assert_called_once_with(\r\n        experiment_id=EXPERIMENT_ID, run_name=None, tags=None\r\n    )\r\n    target_func.assert_called_once_with(FUNCTION_ARG, FUNCTION_KWARG=FUNCTION_KWARG)\r\n\r\n\r\ndef test_experiment_decorator_with_args(mocker, target_func):\r\n    mlflow_mock = MagicMock()\r\n    mlflow_mock.set_experiment.return_value = EXPERIMENT_ID\r\n    mocker.patch(\"mlflow_decorator.mlflow\", mlflow_mock)\r\n\r\n    decorator_with_args = mlflow_experiment(\r\n        experiment_name=EXPERIMENT_NAME,\r\n        run_name=RUN_NAME,\r\n        tracking_uri=TRACKING_URI,\r\n        tags=TAGS,\r\n    )\r\n    decorated_func = decorator_with_args(target_func)\r\n    decorated_func(FUNCTION_ARG, FUNCTION_KWARG=FUNCTION_KWARG)\r\n\r\n    mlflow_mock.set_tracking_uri.assert_called_once_with(TRACKING_URI)\r\n    mlflow_mock.set_experiment.assert_called_once_with(EXPERIMENT_NAME)\r\n    mlflow_mock.start_run.assert_called_once_with(\r\n        experiment_id=EXPERIMENT_ID, run_name=RUN_NAME, tags=TAGS\r\n    )\r\n    target_func.assert_called_once_with(FUNCTION_ARG, FUNCTION_KWARG=FUNCTION_KWARG)\r\n\r\n\r\ndef test_experiment_decorator_can_enable_autologging(mocker, target_func):\r\n    mlflow_mock = MagicMock()\r\n    mocker.patch(\"mlflow_decorator.mlflow\", mlflow_mock)\r\n\r\n    decorator_with_args = mlflow_experiment(autolog=True)\r\n    decorated_func = decorator_with_args(target_func)\r\n    decorated_func()\r\n\r\n    mlflow_mock.autolog.assert_called_once()\r\n```\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3950/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/3950/timeline","performed_via_github_app":null,"state_reason":null}