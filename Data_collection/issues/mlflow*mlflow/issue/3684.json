{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3684","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/3684/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/3684/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/3684/events","html_url":"https://github.com/mlflow/mlflow/issues/3684","id":742446672,"node_id":"MDU6SXNzdWU3NDI0NDY2NzI=","number":3684,"title":"[BUG] Numpy datetime type not supported in model signatures","user":{"login":"mikeoconnor0308","id":2626260,"node_id":"MDQ6VXNlcjI2MjYyNjA=","avatar_url":"https://avatars.githubusercontent.com/u/2626260?v=4","gravatar_id":"","url":"https://api.github.com/users/mikeoconnor0308","html_url":"https://github.com/mikeoconnor0308","followers_url":"https://api.github.com/users/mikeoconnor0308/followers","following_url":"https://api.github.com/users/mikeoconnor0308/following{/other_user}","gists_url":"https://api.github.com/users/mikeoconnor0308/gists{/gist_id}","starred_url":"https://api.github.com/users/mikeoconnor0308/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mikeoconnor0308/subscriptions","organizations_url":"https://api.github.com/users/mikeoconnor0308/orgs","repos_url":"https://api.github.com/users/mikeoconnor0308/repos","events_url":"https://api.github.com/users/mikeoconnor0308/events{/privacy}","received_events_url":"https://api.github.com/users/mikeoconnor0308/received_events","type":"User","site_admin":false},"labels":[{"id":955449428,"node_id":"MDU6TGFiZWw5NTU0NDk0Mjg=","url":"https://api.github.com/repos/mlflow/mlflow/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":2022848043,"node_id":"MDU6TGFiZWwyMDIyODQ4MDQz","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/models","name":"area/models","color":"48eabc","default":false,"description":"MLmodel format, model serialization/deserialization, flavors"},{"id":2022848902,"node_id":"MDU6TGFiZWwyMDIyODQ4OTAy","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/scoring","name":"area/scoring","color":"48eabc","default":false,"description":"MLflow Model server, model deployment tools, Spark UDFs"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-11-13T13:23:31Z","updated_at":"2021-03-02T09:35:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Willingness to contribute\r\nThe MLflow Community encourages bug fix contributions. Would you or another member of your organization be willing to contribute a fix for this bug to the MLflow code base?\r\n\r\n- [ ] Yes. I can contribute a fix for this bug independently.\r\n- [x] Yes. I would be willing to contribute a fix for this bug with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute a bug fix at this time.\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in MLflow)**:\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Windows 10\r\n- **MLflow installed from (source or binary)**: Binary\r\n- **MLflow version (run ``mlflow --version``)**: 1.12\r\n- **Python version**: 3.6\r\n- **npm version, if running the dev UI**:\r\n- **Exact command to reproduce**:\r\n\r\n### Describe the problem\r\n\r\nModels that make use of np.datetime64 objects cannot have their signatures inferred. One can convert the column to a np.int64, but that introduces a processing step. Could we automatically infer them as `long`? The scoring server seems to already do this (see below). If not, some documentation for best practices with this behaviour would be good (which I can contribute). \r\n\r\n### Code to reproduce issue\r\n\r\n```python\r\nIn [25]: import pandas as pd\r\n\r\nIn [26]: import numpy as np\r\n\r\nIn [27]: dates = pd.date_range('1/1/2000', periods=8)\r\n\r\nIn [28]: df = pd.DataFrame(dates, columns=['timestamps'])\r\n\r\nIn [29]: df\r\nOut[29]:\r\n  timestamps\r\n0 2000-01-01\r\n1 2000-01-02\r\n2 2000-01-03\r\n3 2000-01-04\r\n4 2000-01-05\r\n5 2000-01-06\r\n6 2000-01-07\r\n7 2000-01-08\r\n\r\nIn [30]: from mlflow.models import infer_signature\r\n\r\nIn [33]: infer_signature(df)\r\n---------------------------------------------------------------------------\r\nMlflowException                           Traceback (most recent call last)\r\n<ipython-input-33-290f50834d60> in <module>\r\n----> 1 infer_signature(df)\r\n\r\n~\\anaconda3\\envs\\mlflow\\lib\\site-packages\\mlflow\\models\\signature.py in infer_signature(model_input, model_output)\r\n    121     :return: ModelSignature\r\n    122     \"\"\"\r\n--> 123     inputs = _infer_schema(model_input)\r\n    124     outputs = _infer_schema(model_output) if model_output is not None else None\r\n    125     return ModelSignature(inputs, outputs)\r\n\r\n~\\anaconda3\\envs\\mlflow\\lib\\site-packages\\mlflow\\types\\utils.py in _infer_schema(data)\r\n     60     elif isinstance(data, pd.DataFrame):\r\n     61         return Schema(\r\n---> 62             [ColSpec(type=_infer_numpy_array(data[col].values), name=col) for col in data.columns]\r\n     63         )\r\n     64     elif isinstance(data, np.ndarray):\r\n\r\n~\\anaconda3\\envs\\mlflow\\lib\\site-packages\\mlflow\\types\\utils.py in <listcomp>(.0)\r\n     60     elif isinstance(data, pd.DataFrame):\r\n     61         return Schema(\r\n---> 62             [ColSpec(type=_infer_numpy_array(data[col].values), name=col) for col in data.columns]\r\n     63         )\r\n     64     elif isinstance(data, np.ndarray):\r\n\r\n~\\anaconda3\\envs\\mlflow\\lib\\site-packages\\mlflow\\types\\utils.py in _infer_numpy_array(col)\r\n    162             )\r\n    163     else:\r\n--> 164         return _infer_numpy_dtype(col.dtype)\r\n    165\r\n    166\r\n\r\n~\\anaconda3\\envs\\mlflow\\lib\\site-packages\\mlflow\\types\\utils.py in _infer_numpy_dtype(dtype)\r\n    115             \"_map_numpy_array instead.\"\r\n    116         )\r\n--> 117     raise MlflowException(\"Unsupported numpy data type '{0}', kind '{1}'\".format(dtype, dtype.kind))\r\n    118\r\n    119\r\n\r\nMlflowException: Unsupported numpy data type 'datetime64[ns]', kind 'M'\r\n```\r\n\r\nWorkaround, convert timestamps to np.int64 and signature will be of type `long`: \r\n\r\n```\r\ndf['timestamps'] = df['timestamps'].astype(np.int64)\r\n```\r\n\r\n### Other info / logs\r\n\r\nThere is some subtlety here with how this interacts with the prediction server. If you have the signature use the `np.int64` type, then the signature will have type `long`. The prediction server will then happily accept datetimes serialized from pandas as either timestamps or iso format. In the following toy example, a simple pyfunc server accepts `np.int64` types, which are correctly converted:\r\n\r\n```python\r\nIn [1]: import numpy as np\r\n\r\nIn [2]: import pandas as pd\r\n\r\nIn [3]: dates = pd.date_range('1/1/2000', periods=6)\r\n   ...: x = [5,-1,11,10.0,0,0]\r\n   ...: data = pd.DataFrame({'timestamps': dates, 'X':x})\r\n   ...: data.head()\r\nOut[3]:\r\n  timestamps     X\r\n0 2000-01-01   5.0\r\n1 2000-01-02  -1.0\r\n2 2000-01-03  11.0\r\n3 2000-01-04  10.0\r\n4 2000-01-05   0.0\r\n\r\n# use iso formatting\r\nIn [4]: data_json = data.to_json(orient='split', date_format='iso')\r\n   ...: data_json\r\nOut[4]: '{\"columns\":[\"timestamps\",\"X\"],\"index\":[0,1,2,3,4,5],\"data\":[[\"2000-01-01T00:00:00.000Z\",5.0],[\"2000-01-02T00:00:00.000Z\",-1.0],[\"2000-01-03T00:00:00.000Z\",11.0],[\"2000-01-04T00:00:00.000Z\",10.0],[\"2000-01-05T00:00:00.000Z\",0.0],[\"2000-01-06T00:00:00.000Z\",0.0]]}'\r\n\r\nIn [6]: import requests\r\n\r\nIn [7]: reply = requests.post('http://localhost:5000/invocations',data=data_json, headers={\"Content-Type\": \"application\r\n   ...: /json; format=pandas-split\"})\r\n\r\nIn [8]: reply.json()\r\nOut[8]:\r\n[{'Y': False},\r\n {'Y': True},\r\n {'Y': True},\r\n {'Y': False},\r\n {'Y': False},\r\n {'Y': False}]\r\n\r\n# this time serialize to ns timestamps\r\nIn [9]: data_json = data.to_json(orient='split')\r\n   ...: data_json\r\nOut[9]: '{\"columns\":[\"timestamps\",\"X\"],\"index\":[0,1,2,3,4,5],\"data\":[[946684800000,5.0],[946771200000,-1.0],[946857600000,11.0],[946944000000,10.0],[947030400000,0.0],[947116800000,0.0]]}'\r\n\r\nIn [10]: reply = requests.post('http://localhost:5000/invocations',data=data_json, headers={\"Content-Type\": \"applicatio\r\n    ...: n/json; format=pandas-split\"})\r\n\r\nIn [11]: reply.json()\r\nOut[11]:\r\n[{'Y': False},\r\n {'Y': True},\r\n {'Y': True},\r\n {'Y': False},\r\n {'Y': False},\r\n {'Y': False}]\r\n```\r\n\r\nIn both cases, the dataframe is read in correctly:\r\n\r\n```\r\n           timestamps     X\r\n0  946684800000000000   5.0\r\n1  946771200000000000  -1.0\r\n2  946857600000000000  11.0\r\n3  946944000000000000  10.0\r\n4  947030400000000000   0.0\r\n5  947116800000000000   0.0\r\n```\r\n\r\nOn the flip side, if one converts the column to an ISO formatted string, so the signature has type `string`, then it doesn't work for numeric inputs. So I think `long` type does make the most sense. \r\n\r\n### What component(s), interfaces, languages, and integrations does this bug affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [x] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [x] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterface \r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguage \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3684/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/3684/timeline","performed_via_github_app":null,"state_reason":null}