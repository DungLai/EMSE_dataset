{"url":"https://api.github.com/repos/mlflow/mlflow/issues/34","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/34/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/34/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/34/events","html_url":"https://github.com/mlflow/mlflow/issues/34","id":331264197,"node_id":"MDU6SXNzdWUzMzEyNjQxOTc=","number":34,"title":"Retrieve experiment ID by name","user":{"login":"mlucas-NU","id":15447878,"node_id":"MDQ6VXNlcjE1NDQ3ODc4","avatar_url":"https://avatars.githubusercontent.com/u/15447878?v=4","gravatar_id":"","url":"https://api.github.com/users/mlucas-NU","html_url":"https://github.com/mlucas-NU","followers_url":"https://api.github.com/users/mlucas-NU/followers","following_url":"https://api.github.com/users/mlucas-NU/following{/other_user}","gists_url":"https://api.github.com/users/mlucas-NU/gists{/gist_id}","starred_url":"https://api.github.com/users/mlucas-NU/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mlucas-NU/subscriptions","organizations_url":"https://api.github.com/users/mlucas-NU/orgs","repos_url":"https://api.github.com/users/mlucas-NU/repos","events_url":"https://api.github.com/users/mlucas-NU/events{/privacy}","received_events_url":"https://api.github.com/users/mlucas-NU/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2018-06-11T16:38:38Z","updated_at":"2020-01-10T20:30:01Z","closed_at":"2018-06-12T15:20:18Z","author_association":"NONE","active_lock_reason":null,"body":"### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in MLflow)**:\r\nSlightly altered version of the tutorial snippet. See below.\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nThis is a feature request, so it should affect all installations of mlflow 0.1.0.\r\n- **MLflow installed from (source or binary)**: \r\n`pip3 install mlflow` (version 0.1.0)\r\n- **MLflow version (run ``python -c \"from mlflow import version; print(version.version)\"``)**:\r\n0.1.0\r\n- **Python version**: \r\n3.6.2\r\n- **npm version (if running the dev UI):\r\n3.10.8\r\n- **Exact command to reproduce**:\r\n```import mlflow\r\n\r\nif __name__ == \"__main__\":\r\n    # Create Experiment\r\n    exp_id = mlflow.create_experiment('mlucas Test')\r\n\r\n    # Start run as a child of that experiment\r\n    mlflow.start_run(experiment_id=exp_id)\r\n\r\n    # Log a parameter (key-value pair)\r\n    mlflow.log_param(\"param1\", 5)\r\n\r\n    # Log a metric; metrics can be updated throughout the run\r\n    mlflow.log_metric(\"f1\", 0.5)\r\n```\r\n\r\nNote that the function I'm requesting doesn't exist. The above code will run once (and create the experiment), but subsequent calls will raise an error because the experiment already exists. There does not appear to be a way to retrieve the experiment ID using the name given the existing mlflow functions.\r\n\r\n### Describe the problem\r\nAssuming that I programmatically create experiments, I'd like to be able to programmatically retrieve them as well. Currently, it's very easy to create experiments with `mlflow.create_experiment`, but there does not appear to be a pythonic means of retrieving existing experiment IDs via the module using the experiment name.\r\n\r\nTo programmatically use an existing experiment by name, I expect either: the create_experiment to return the id of the existing project (less ideal) OR to call something like `get_experiment_by_name` to retrieve experiment metadata OR to have to call list_experiments and find the relevant experiment metadata by looping through the response.\r\n\r\nPossible function call: `mlflow.list_experiments()`\r\nDesired response:\r\n>[\r\n>  {\r\n>    \"id\": 0,\r\n>    \"name\": \"Default\",\r\n>    \"artifact_location\": \"/Users/michael.lucas/mlflow/mlruns/0\"\r\n>  },\r\n>  ...\r\n>]\r\n\r\nPossible function call: `mlflow.get_experiment_by_name(name=\"mlucas Test\")`\r\nDesired response:\r\n>[\r\n>  {\r\n>    \"id\": 1,\r\n>    \"name\": \"mlucas Test\",\r\n>    \"artifact_location\": \"/Users/michael.lucas/mlflow/mlruns/1\"\r\n>  }\r\n>]\r\nIf no experiments exists, could raise a relevant exception.\r\n\r\nAny thoughts on these two options? And if the first is an interesting endpoint in general, does the proposed response (JSON-ic list of dicts) make sense within the mlflow paradigm?\r\n\r\nThanks!\r\nMichael","closed_by":{"login":"mlucas-NU","id":15447878,"node_id":"MDQ6VXNlcjE1NDQ3ODc4","avatar_url":"https://avatars.githubusercontent.com/u/15447878?v=4","gravatar_id":"","url":"https://api.github.com/users/mlucas-NU","html_url":"https://github.com/mlucas-NU","followers_url":"https://api.github.com/users/mlucas-NU/followers","following_url":"https://api.github.com/users/mlucas-NU/following{/other_user}","gists_url":"https://api.github.com/users/mlucas-NU/gists{/gist_id}","starred_url":"https://api.github.com/users/mlucas-NU/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mlucas-NU/subscriptions","organizations_url":"https://api.github.com/users/mlucas-NU/orgs","repos_url":"https://api.github.com/users/mlucas-NU/repos","events_url":"https://api.github.com/users/mlucas-NU/events{/privacy}","received_events_url":"https://api.github.com/users/mlucas-NU/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/34/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/34/timeline","performed_via_github_app":null,"state_reason":"completed"}