{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1461","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/1461/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/1461/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/1461/events","html_url":"https://github.com/mlflow/mlflow/issues/1461","id":456672440,"node_id":"MDU6SXNzdWU0NTY2NzI0NDA=","number":1461,"title":"Runs with certain invalid names prevent UI from displaying","user":{"login":"jhadjar","id":1817442,"node_id":"MDQ6VXNlcjE4MTc0NDI=","avatar_url":"https://avatars.githubusercontent.com/u/1817442?v=4","gravatar_id":"","url":"https://api.github.com/users/jhadjar","html_url":"https://github.com/jhadjar","followers_url":"https://api.github.com/users/jhadjar/followers","following_url":"https://api.github.com/users/jhadjar/following{/other_user}","gists_url":"https://api.github.com/users/jhadjar/gists{/gist_id}","starred_url":"https://api.github.com/users/jhadjar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jhadjar/subscriptions","organizations_url":"https://api.github.com/users/jhadjar/orgs","repos_url":"https://api.github.com/users/jhadjar/repos","events_url":"https://api.github.com/users/jhadjar/events{/privacy}","received_events_url":"https://api.github.com/users/jhadjar/received_events","type":"User","site_admin":false},"labels":[{"id":955449428,"node_id":"MDU6TGFiZWw5NTU0NDk0Mjg=","url":"https://api.github.com/repos/mlflow/mlflow/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"}],"state":"closed","locked":false,"assignee":{"login":"ankit-db","id":52183359,"node_id":"MDQ6VXNlcjUyMTgzMzU5","avatar_url":"https://avatars.githubusercontent.com/u/52183359?v=4","gravatar_id":"","url":"https://api.github.com/users/ankit-db","html_url":"https://github.com/ankit-db","followers_url":"https://api.github.com/users/ankit-db/followers","following_url":"https://api.github.com/users/ankit-db/following{/other_user}","gists_url":"https://api.github.com/users/ankit-db/gists{/gist_id}","starred_url":"https://api.github.com/users/ankit-db/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ankit-db/subscriptions","organizations_url":"https://api.github.com/users/ankit-db/orgs","repos_url":"https://api.github.com/users/ankit-db/repos","events_url":"https://api.github.com/users/ankit-db/events{/privacy}","received_events_url":"https://api.github.com/users/ankit-db/received_events","type":"User","site_admin":false},"assignees":[{"login":"ankit-db","id":52183359,"node_id":"MDQ6VXNlcjUyMTgzMzU5","avatar_url":"https://avatars.githubusercontent.com/u/52183359?v=4","gravatar_id":"","url":"https://api.github.com/users/ankit-db","html_url":"https://github.com/ankit-db","followers_url":"https://api.github.com/users/ankit-db/followers","following_url":"https://api.github.com/users/ankit-db/following{/other_user}","gists_url":"https://api.github.com/users/ankit-db/gists{/gist_id}","starred_url":"https://api.github.com/users/ankit-db/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ankit-db/subscriptions","organizations_url":"https://api.github.com/users/ankit-db/orgs","repos_url":"https://api.github.com/users/ankit-db/repos","events_url":"https://api.github.com/users/ankit-db/events{/privacy}","received_events_url":"https://api.github.com/users/ankit-db/received_events","type":"User","site_admin":false}],"milestone":null,"comments":3,"created_at":"2019-06-16T19:12:31Z","updated_at":"2020-02-22T13:41:02Z","closed_at":"2019-07-26T22:14:23Z","author_association":"NONE","active_lock_reason":null,"body":"### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in MLflow)**:\r\nNo\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\n```\r\nLinux silver 5.0.0-16-generic #17-Ubuntu SMP Wed May 15 10:52:21 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n\r\n- **MLflow installed from (source or binary)**: \r\nSource\r\n- **MLflow version (run ``mlflow --version``)**:\r\n```\r\n/home/jugurtha/workspace/python/mlflow/mlflow/tracking/context.py:195: UserWarning: Failure attempting to register context provider \"unused\": module 'mlflow_test_plugin' has no attribute 'PluginRunContextProvider'\r\n  _run_context_provider_registry.register_entrypoints()\r\nmlflow, version 1.0.0\r\n```\r\n- **Python version**: \r\n```\r\nPython 3.7.3 (default, Apr  3 2019, 05:39:12) \r\n[GCC 8.3.0]\r\n```\r\n\r\n\r\n- **npm version (if running the dev UI)**:\r\n6.4.1\r\n- **Exact command to reproduce**:\r\n```\r\n# in root directory mlflow\r\nmkdir mlruns/_foo\r\nmlflow ui\r\n# Visit http://localhost:5000 and an image with 'Oops! Something went wrong.' returns\r\n```\r\n### Describe the problem\r\n\r\nUser James Salvatore opened a thread on mlflow's Slack general channel on this thread https://mlflow-users.slack.com/archives/CBFQ95Y2G/p1559066402036200 and the problem was raised when mlflow considered `__pycache__` directories as runs.\r\n\r\nWhy it's a problem:\r\n\r\nA malformed run name silently renders the application unusable instead of being discarded and raising a warning/error message.\r\n\r\n### Source code / logs\r\n\r\nThere are no error logs in the terminal, as opposed to when a run lacks a `meta.yaml` file and gives an error log like the following *without* preventing the UI from displaying:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/jugurtha/workspace/python/mlflow/mlflow/store/file_store.py\", line 183, in list_experiments\r\n    experiment = self._get_experiment(exp_id, view_type)\r\n  File \"/home/jugurtha/workspace/python/mlflow/mlflow/store/file_store.py\", line 233, in _get_experiment\r\n    meta = read_yaml(experiment_dir, FileStore.META_DATA_FILE_NAME)\r\n  File \"/home/jugurtha/workspace/python/mlflow/mlflow/utils/file_utils.py\", line 159, in read_yaml\r\n    raise MissingConfigException(\"Yaml file '%s' does not exist.\" % file_path)\r\nmlflow.exceptions.MissingConfigException: Yaml file './mlruns/foo_/meta.yaml' does not exist.\r\n```\r\n\r\nThe browser logs however indicate that there was an error 500:\r\n\r\n```\r\nGET http://localhost:5000/ajax-api/2.0/preview/mlflow/experiments/list 500 (INTERNAL SERVER ERROR)\r\n```\r\nOne has to inspect the browser console and then visit the link to get:\r\n\r\n```\r\n{\"error_code\": \"INVALID_PARAMETER_VALUE\", \"message\": \"Invalid experiment ID: '_foo'\"}\r\n```\r\n\r\nA `git grep \"Invalid experiment ID\"` points to `mlflow/utils/validation.py`, function `_validate_experiment_id`, which validates the experiment id against a regular expression found in the same file:\r\n\r\n```python\r\n_EXPERIMENT_ID_REGEX = re.compile(r\"^[a-zA-Z0-9][\\w\\-]{0,63}$\")\r\n```\r\nThe function is called from `mlflow/store/file_store.py` in function `_get_experiment`.\r\n\r\nThe problem is that `mlflow.exceptions.MlflowException` is caught by `mlflow.server.handlers.catch_mlflow_exception`, and contrary to a missing YAML file that raises a `MissingConfigException`, the handler returns data as JSON without terminal logs.\r\n\r\nIn other words, in `mlflow.store.file_store.FileStore.list_experiments`, the method iterates over found runs:\r\n\r\n```python\r\nfor exp_id in rsl:\r\n    try:\r\n        # trap and warn known issues, will raise unexpected exceptions to caller\r\n        experiment = self._get_experiment(exp_id, view_type)\r\n        if experiment:\r\n            experiments.append(experiment)\r\n    except MissingConfigException as rnfe:\r\n        # Trap malformed experiments and log warnings.\r\n        logging.warning(\"Malformed experiment '%s'. Detailed error %s\",\r\n                        str(exp_id), str(rnfe), exc_info=True)\r\n```\r\n\r\nIf a directory is named `foo_` (trailing underscore) without a `meta.yaml` will simply cause a `MissingConfigException` to be raised and caught and logged without impeding on the rest of the runs/experiments.\r\n\r\nHowever, if a directory is named `_foo` (leading underscore),  `_get_experiment_` calls `_validate_experiment_id` which  calls `_validate_experiment_id`, which raises an `mlflow.exceptions.MlflowException`. When the request is made and `mlflow.server.handlers._list_experiments` runs and calls `mlflow.store.file_store.FileStore.list_experiments` internally, the `mlflow.exceptions.MlflowException` is caught by the decorator `mlflow.server.handlers.catch_mlflow_exception` which simply returns a JSON response.\r\n\r\n\r\nThe same pattern is in `mlflow.store.file_store.list_experiments` and `mlflow.store.file_store.list_run_infos`.\r\n\r\nProposal:\r\n\r\n- The loops in both methods should complete even with bad runs or experiments\r\n- An informative log message in the terminal would be nice and keep the same logic as MissingConfigException (log, discard run, and continue).\r\n\r\n**Approach 1: Catch MlflowException instead of MissingConfigException**:\r\n\r\nMissingConfigException is a subclass of MlflowException, we can just catch MlflowException for logging\r\n\r\n```python\r\nexcept MlflowException as rnfe:\r\n    # trap malformed run exception and log warning\r\n    logging.warning(\"Malformed run '%s'. Detailed error %s\", r_id, str(rnfe),\r\n                    exc_info=True)\r\n```\r\n\r\nOr, \r\n\r\n**Approach 1: Savagely discard MissingConfigException**:\r\n\r\nWe can insert a line at the end of  `mlflow/exceptions.py` that reads:\r\n\r\n```python\r\nMissingConfigException = MlflowException\r\n```\r\n\r\nWhich causes log warnings to appear that reads:\r\n\r\n```\r\nWARNING:root:Malformed experiment '_foo'. Detailed error Invalid experiment ID: '_foo'\r\nTraceback (most recent call last):\r\n  File \"/home/jugurtha/workspace/python/mlflow/mlflow/store/file_store.py\", line 183, in list_experiments\r\n    experiment = self._get_experiment(exp_id, view_type)\r\n  File \"/home/jugurtha/workspace/python/mlflow/mlflow/store/file_store.py\", line 228, in _get_experiment\r\n    _validate_experiment_id(experiment_id)\r\n  File \"/home/jugurtha/workspace/python/mlflow/mlflow/utils/validation.py\", line 142, in _validate_experiment_id\r\n    error_code=INVALID_PARAMETER_VALUE)\r\nmlflow.exceptions.MlflowException: Invalid experiment ID: '_foo'\r\n```\r\n\r\nAnd the UI to render correctly ignoring the bad run and giving us plenty of information in logs.\r\n\r\n\r\nThe downside is that we miss the information that it's a `MissingConfigException`, an exception raised at a grand total of three places in the code, in the same `file_utils.py` module. Nobody will miss it.","closed_by":{"login":"ankit-db","id":52183359,"node_id":"MDQ6VXNlcjUyMTgzMzU5","avatar_url":"https://avatars.githubusercontent.com/u/52183359?v=4","gravatar_id":"","url":"https://api.github.com/users/ankit-db","html_url":"https://github.com/ankit-db","followers_url":"https://api.github.com/users/ankit-db/followers","following_url":"https://api.github.com/users/ankit-db/following{/other_user}","gists_url":"https://api.github.com/users/ankit-db/gists{/gist_id}","starred_url":"https://api.github.com/users/ankit-db/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ankit-db/subscriptions","organizations_url":"https://api.github.com/users/ankit-db/orgs","repos_url":"https://api.github.com/users/ankit-db/repos","events_url":"https://api.github.com/users/ankit-db/events{/privacy}","received_events_url":"https://api.github.com/users/ankit-db/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1461/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/1461/timeline","performed_via_github_app":null,"state_reason":"completed"}