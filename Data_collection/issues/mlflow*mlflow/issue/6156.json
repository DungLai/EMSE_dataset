{"url":"https://api.github.com/repos/mlflow/mlflow/issues/6156","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/6156/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/6156/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/6156/events","html_url":"https://github.com/mlflow/mlflow/issues/6156","id":1287722917,"node_id":"I_kwDOCB5Jx85MwRel","number":6156,"title":"[FR] Treatment of Existing Model Versions in a Stage When Making Transitions","user":{"login":"MinuraPunchihewa","id":49385643,"node_id":"MDQ6VXNlcjQ5Mzg1NjQz","avatar_url":"https://avatars.githubusercontent.com/u/49385643?v=4","gravatar_id":"","url":"https://api.github.com/users/MinuraPunchihewa","html_url":"https://github.com/MinuraPunchihewa","followers_url":"https://api.github.com/users/MinuraPunchihewa/followers","following_url":"https://api.github.com/users/MinuraPunchihewa/following{/other_user}","gists_url":"https://api.github.com/users/MinuraPunchihewa/gists{/gist_id}","starred_url":"https://api.github.com/users/MinuraPunchihewa/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MinuraPunchihewa/subscriptions","organizations_url":"https://api.github.com/users/MinuraPunchihewa/orgs","repos_url":"https://api.github.com/users/MinuraPunchihewa/repos","events_url":"https://api.github.com/users/MinuraPunchihewa/events{/privacy}","received_events_url":"https://api.github.com/users/MinuraPunchihewa/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022847714,"node_id":"MDU6TGFiZWwyMDIyODQ3NzE0","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/model-registry","name":"area/model-registry","color":"48eabc","default":false,"description":"Model registry, model registry APIs, and the fluent client calls for model registry"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-06-28T18:23:39Z","updated_at":"2022-06-30T02:57:01Z","closed_at":"2022-06-29T23:25:02Z","author_association":"NONE","active_lock_reason":null,"body":"### Willingness to contribute\n\nYes. I would be willing to contribute this feature with guidance from the MLflow community.\n\n### Proposal Summary\n\nIt is possible to transition model versions using the `MlflowClient` as shown below,\r\n```\r\nclient = MlflowClient()\r\nclient.transition_model_version_stage(\r\n    name=\"sk-learn-random-forest-reg-model\",\r\n    version=3,\r\n    stage=\"Production\"\r\n)\r\n```\r\nThis does not provide any feature to define how models that already exist in the stage that the transition is made to, should be treated.\r\n\r\nFor example, in the above scenario, when version 3 is transitioned to Production and if version 2 is already in Production, it will continue to stay in Production.\r\n\r\nHowever, I would like to be able to define how to treat version 2 in this situation. The default can still be to allow multiple versions in each stage.\r\n\r\nThis feature is already available through the UI,\r\n![image](https://user-images.githubusercontent.com/49385643/176254936-cd8f9a01-00a7-4977-a4b9-8e0efe79a5fa.png)\r\n\n\n### Motivation\n\n> #### What is the use case for this feature?\r\nIt may sometimes be necessary for certain projects or use cases, to maintain only a single version of a model in Staging, Production or both. Therefore, when making transitions, it would be quite useful to be able to specify what to do with models that already exist in the stage that is being transitioned to.\r\n\r\n> #### Why is this use case valuable to support for MLflow users in general?\r\nI believe that this may be a common use case for many users: to be able to maintain a single model version in a chosen stage.\r\n\r\n> #### Why is this use case valuable to support for your project(s) or organization?\r\nFor each model that we develop, we want to maintain a single Staging and Production version. Our model transitions are facilitated via a pipeline and it is quite cumbersome to first, find if there is a version of the model already in the stage that is being transitioned to and to make that transition to a different stage beforehand.\r\n\r\n> #### Why is it currently difficult to achieve this use case?\r\nCurrently, before each transition, we will need to first transition the existing model version (in a given stage) to a different stage prior.\n\n### Details\n\n_No response_\n\n### What component(s) does this bug affect?\n\n- [ ] `area/artifacts`: Artifact stores and artifact logging\n- [ ] `area/build`: Build and test infrastructure for MLflow\n- [ ] `area/docs`: MLflow documentation pages\n- [ ] `area/examples`: Example code\n- [X] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\n- [ ] `area/pipelines`: Pipelines, Pipeline APIs, Pipeline configs, Pipeline Templates\n- [ ] `area/projects`: MLproject format, project running backends\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\n- [ ] `area/server-infra`: MLflow Tracking server backend\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\n\n### What interface(s) does this bug affect?\n\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\n- [ ] `area/windows`: Windows support\n\n### What language(s) does this bug affect?\n\n- [ ] `language/r`: R APIs and clients\n- [ ] `language/java`: Java APIs and clients\n- [ ] `language/new`: Proposals for new client languages\n\n### What integration(s) does this bug affect?\n\n- [ ] `integrations/azure`: Azure and Azure ML integrations\n- [ ] `integrations/sagemaker`: SageMaker integrations\n- [ ] `integrations/databricks`: Databricks integrations","closed_by":{"login":"dbczumar","id":39497902,"node_id":"MDQ6VXNlcjM5NDk3OTAy","avatar_url":"https://avatars.githubusercontent.com/u/39497902?v=4","gravatar_id":"","url":"https://api.github.com/users/dbczumar","html_url":"https://github.com/dbczumar","followers_url":"https://api.github.com/users/dbczumar/followers","following_url":"https://api.github.com/users/dbczumar/following{/other_user}","gists_url":"https://api.github.com/users/dbczumar/gists{/gist_id}","starred_url":"https://api.github.com/users/dbczumar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dbczumar/subscriptions","organizations_url":"https://api.github.com/users/dbczumar/orgs","repos_url":"https://api.github.com/users/dbczumar/repos","events_url":"https://api.github.com/users/dbczumar/events{/privacy}","received_events_url":"https://api.github.com/users/dbczumar/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/6156/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/6156/timeline","performed_via_github_app":null,"state_reason":"completed"}