{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4569","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/4569/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/4569/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/4569/events","html_url":"https://github.com/mlflow/mlflow/issues/4569","id":946636563,"node_id":"MDU6SXNzdWU5NDY2MzY1NjM=","number":4569,"title":"[FR] Add autolog support for daskml estimators","user":{"login":"thjwhite","id":2566844,"node_id":"MDQ6VXNlcjI1NjY4NDQ=","avatar_url":"https://avatars.githubusercontent.com/u/2566844?v=4","gravatar_id":"","url":"https://api.github.com/users/thjwhite","html_url":"https://github.com/thjwhite","followers_url":"https://api.github.com/users/thjwhite/followers","following_url":"https://api.github.com/users/thjwhite/following{/other_user}","gists_url":"https://api.github.com/users/thjwhite/gists{/gist_id}","starred_url":"https://api.github.com/users/thjwhite/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/thjwhite/subscriptions","organizations_url":"https://api.github.com/users/thjwhite/orgs","repos_url":"https://api.github.com/users/thjwhite/repos","events_url":"https://api.github.com/users/thjwhite/events{/privacy}","received_events_url":"https://api.github.com/users/thjwhite/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-16T22:42:51Z","updated_at":"2021-07-16T22:43:09Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Thank you for submitting a feature request. **Before proceeding, please review MLflow's [Issue Policy for feature requests](https://www.github.com/mlflow/mlflow/blob/master/ISSUE_POLICY.md#feature-requests) and the [MLflow Contributing Guide](https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.rst)**.\r\n\r\n**Please fill in this feature request template to ensure a timely and thorough response.**\r\n\r\n## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\ndask-ml is a part of the larger dask ecosystem, and provides a few interfaces for running certain machine learning tasks at scale using dask. dask-ml provides scikit-learn interfaces for the implemented estimators. \r\n[dask-ml](https://ml.dask.org/index.html)\r\n\r\nAn example would be [GridSearchCV](https://ml.dask.org/modules/generated/dask_ml.model_selection.GridSearchCV.html#dask_ml.model_selection.GridSearchCV) which allows the user to train any scikit learn compatible model/estimator over a hyperparameter grid in a parallel way (using dask).\r\n\r\n## Motivation\r\n- What is the use case for this feature? **support autolog for dask-ml estimators**\r\n- Why is this use case valuable to support for MLflow users in general? **autolog support for dask-ml would enable a one line integration for users of dask-ml by calling an equivalent to mlflow.sklearn.autolog(). There could also be some dask specific metrics or something that can be added if we find that useful**\r\n- Why is this use case valuable to support for your project(s) or organization? **ease of use** \r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient) **currently there is no integration with dask for autolog. We need to call the various tracking apis for log model, metrics, artifacts, etc.. after we do a run with dask. The sklearn implementation also has support for things like parameter search models in autolog that would be helpful in this context as well**\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [x] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nThere is a related github issue #3966 with slightly different use case. There is discussion there around potentially sharing code between distributed computing platforms. Another idea I had was to somehow make an autolog feature that accepts any estimator/class with the sklearn API (can be done as some kind of registration thing or pass the class reference through for patching). But maybe making an autolog function specific to dask-ml might be better since it will have it's own idiosyncrasies.\r\n\r\nBy studying some of the code I was able to monkey patch in a few things into the existing sklearn autolog support (basically I tricked the mlflow code into patching the dask-ml code). Particularly `_get_meta_estimators_for_autologging` and `_is_parameter_search_estimator` in sklearn/utils.py . This seems to work for GridSearchCV and RandomizedSearchCV in dask-ml since they are drop-in replacements for the sklearn equivalents. I had less luck for some of the other hyperparameter search functions.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4569/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/4569/timeline","performed_via_github_app":null,"state_reason":null}