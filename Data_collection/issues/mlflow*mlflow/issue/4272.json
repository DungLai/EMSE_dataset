{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4272","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/4272/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/4272/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/4272/events","html_url":"https://github.com/mlflow/mlflow/issues/4272","id":863300715,"node_id":"MDU6SXNzdWU4NjMzMDA3MTU=","number":4272,"title":"[FR] MLflow Model Serving -- Add CORS headers to enable calls from javascript web applications","user":{"login":"snosrap","id":57339,"node_id":"MDQ6VXNlcjU3MzM5","avatar_url":"https://avatars.githubusercontent.com/u/57339?v=4","gravatar_id":"","url":"https://api.github.com/users/snosrap","html_url":"https://github.com/snosrap","followers_url":"https://api.github.com/users/snosrap/followers","following_url":"https://api.github.com/users/snosrap/following{/other_user}","gists_url":"https://api.github.com/users/snosrap/gists{/gist_id}","starred_url":"https://api.github.com/users/snosrap/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/snosrap/subscriptions","organizations_url":"https://api.github.com/users/snosrap/orgs","repos_url":"https://api.github.com/users/snosrap/repos","events_url":"https://api.github.com/users/snosrap/events{/privacy}","received_events_url":"https://api.github.com/users/snosrap/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022847714,"node_id":"MDU6TGFiZWwyMDIyODQ3NzE0","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/model-registry","name":"area/model-registry","color":"48eabc","default":false,"description":"Model registry, model registry APIs, and the fluent client calls for model registry"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2021-04-20T22:47:07Z","updated_at":"2022-09-07T09:26:08Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [X] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\n[MLflow Model Serving](https://docs.microsoft.com/en-us/azure/databricks/applications/mlflow/model-serving) is a great way to surface MLFlow models over a REST API endpoint. These endpoints are easily consumed using python, curl, etc. However, due to web browser level restrictions on cross-origin requests, javascript web applications are not able to consume these RESTful model endpoints (i.e., using XMLHttpRequest). The typical way around this is to serve the REST API with [CORS headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS), which specifically allow HTTP verbs, headers, etc from remote servers (i.e., servers other than the one serving the model).\r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\n  - This will enable integration with javascript web applications. Modern web frameworks (react, angular, vue) can't connect to remote APIs unless the destination server's CORS headers allow cross-origin requests. This is in contrast to traditional, server-side web languages/frameworks (C#, python, PHP) that don't have that CORS header requirement\r\n- Why is this use case valuable to support for MLflow users in general?\r\n  - Increased availability of a shared model will facilitate integration into more environments -- especially  modern javascript web frameworks\r\n- Why is this use case valuable to support for your project(s) or organization?\r\n  - We would like to incorporate the results of an MLFlow model into a web application without having to set up and maintain other server-side infrastructure to proxy the calls between our javascript web app and our model's REST endpoint.\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\n  - MLflow Model Serving is currently so close to making this possible, but because there is no ability to add HTTP headers to the model's HTTP responses, we are unable to integrate cleanly with our javascript web app. If MLflow Model Serving had functionality to add custom HTTP headers to every response, we would have a much easier time integrating with our web application. Specifically, I would want to add the following headers:\r\n    - `Access-Control-Allow-Credentials: true`\r\n    - `Access-Control-Allow-Headers: Authorization, Accept, Content-Type`\r\n    - `Access-Control-Allow-Methods: POST`\r\n    - `Access-Control-Allow-Origin: *`\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [X] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nIs there precedent for using the `Cluster Settings > Tags` for customizations to the model's web server? That's where I first looked when I was searching for a \"Add Custom HTTP Headers\" UI element. Setting a tag key:value pair that corresponds to an HTTP header key:value pair wouldn't require any UI changes, although it would make discoverability difficult.\r\n\r\nHere's a mockup:\r\n![image](https://user-images.githubusercontent.com/57339/115472576-051d6400-a1ef-11eb-96d5-2b4fb5b27ce3.png)\r\n\r\nHaving a dedicated \"Custom HTTP Headers\" section within the `Cluster Settings` section would be a more natural UI.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4272/reactions","total_count":5,"+1":5,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/4272/timeline","performed_via_github_app":null,"state_reason":null}