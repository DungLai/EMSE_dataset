{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3418","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/3418/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/3418/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/3418/events","html_url":"https://github.com/mlflow/mlflow/issues/3418","id":701034874,"node_id":"MDU6SXNzdWU3MDEwMzQ4NzQ=","number":3418,"title":"[FR] Support for `tidymodels` flavours for R","user":{"login":"mdneuzerling","id":14957706,"node_id":"MDQ6VXNlcjE0OTU3NzA2","avatar_url":"https://avatars.githubusercontent.com/u/14957706?v=4","gravatar_id":"","url":"https://api.github.com/users/mdneuzerling","html_url":"https://github.com/mdneuzerling","followers_url":"https://api.github.com/users/mdneuzerling/followers","following_url":"https://api.github.com/users/mdneuzerling/following{/other_user}","gists_url":"https://api.github.com/users/mdneuzerling/gists{/gist_id}","starred_url":"https://api.github.com/users/mdneuzerling/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdneuzerling/subscriptions","organizations_url":"https://api.github.com/users/mdneuzerling/orgs","repos_url":"https://api.github.com/users/mdneuzerling/repos","events_url":"https://api.github.com/users/mdneuzerling/events{/privacy}","received_events_url":"https://api.github.com/users/mdneuzerling/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":978584226,"node_id":"MDU6TGFiZWw5Nzg1ODQyMjY=","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/docs","name":"area/docs","color":"48eabc","default":false,"description":"Documentation issues"},{"id":1041183632,"node_id":"MDU6TGFiZWwxMDQxMTgzNjMy","url":"https://api.github.com/repos/mlflow/mlflow/labels/language/r","name":"language/r","color":"349cd8","default":false,"description":"R APIs and clients"},{"id":2022847277,"node_id":"MDU6TGFiZWwyMDIyODQ3Mjc3","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/examples","name":"area/examples","color":"48eabc","default":false,"description":"Example code"},{"id":2022848043,"node_id":"MDU6TGFiZWwyMDIyODQ4MDQz","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/models","name":"area/models","color":"48eabc","default":false,"description":"MLmodel format, model serialization/deserialization, flavors"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2020-09-14T12:03:58Z","updated_at":"2021-02-19T16:21:29Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [x] Yes. I can contribute this feature independently.\r\n- [ ] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\n* Implement new R flavours to support the `tidymodels` framework.\r\n* Implement autologging for these flavours.\r\n\r\n## Motivation\r\n\r\nCurrently, three flavours are supported in R: `keras`, `xgboost`, and `crate`. While `crate` supports arbitrary functions, it is difficult to use, requiring careful declarations of dependencies and methods. There remains no easy way to implement common machine learning techniques, such as random forests and k-nearest-neighbours.\r\n\r\n[The `tidymodels` metapackage/framework](https://www.tidymodels.org/) provides a unified interface for various machine learning packages in R. Rather than directly implementing machine learning techniques, it calls on other packages as _engines_. With the same syntax, a user can train a random forest with either the `randomForest` package or the `ranger` package. By supporting `tidymodels` flavours, MLflow can indirectly support [the wide variety of engines with which `tidymodels` interfaces](https://www.tidymodels.org/find/parsnip/).\r\n\r\nMoreover, the unified interface also opens up the possibility of introducing autologging for R.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [x] `area/docs`: MLflow documentation pages\r\n- [x] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [x] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [x] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [x] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nThree `tidymodels` packages are relevant here:\r\n\r\n* `parsnip` interfaces with the various machine learning packages (engines).\r\n* `recipes` is used for data pre-processing.\r\n* `workflows` combines the above into single objects. This is somewhat analogous to `sklearn` pipelines.\r\n\r\nSince the models are single objects, we can implement `parsnip` and `workflow` flavours that save and load these as `RDS` files. This would involve extending the S3 generics `mlflow_save_model` and `mlflow_load_flavor`. For example, the below S3 method would work for `parsnip` models (with the \"model_fit\" class):\r\n\r\n```r\r\nmlflow_save_model.model_fit <- function(model,\r\n                                        path,\r\n                                        model_spec = list(),\r\n                                        ...) {\r\n  if (dir.exists(path)) unlink(path, recursive = TRUE)\r\n  dir.create(path)\r\n\r\n  saveRDS(model, file.path(path, \"parsnip_model.rds\"))\r\n\r\n  spec <- model$spec\r\n  model <- class(spec)[[1]] # adapted from workflows:::print_header\r\n  engine <- spec$engine\r\n  mode <- spec$mode\r\n\r\n  model_spec$flavors <- append(model_spec$flavors, list(\r\n    parsnip = list(\r\n      data = \"parsnip_model.rds\",\r\n      model = model,\r\n      engine = engine,\r\n      mode = mode\r\n    )\r\n  ))\r\n  mlflow_write_model_spec(path, model_spec)\r\n  model_spec\r\n}\r\n```\r\n\r\nThe `model` and `engine` attributes are particularly useful here: they can be used to check that the required packages for a particular `parsnip` model are available:\r\n\r\n```r\r\nget_parsnip_dependencies <- function(model, engine) {\r\n  dependencies <- parsnip::get_dependency(model)\r\n  if (!(engine %in% dependencies$engine)) {\r\n    stop(engine, \" is not a valid engine for \", model)\r\n  }\r\n  engine_dependencies <- dependencies[which(dependencies$engine == engine), ]\r\n  engine_dependencies$pkg[[1]]\r\n}\r\n\r\nrequire_parsnip_dependencies <- function(model, engine) {\r\n  required_packages <- get_parsnip_dependencies(model, engine)\r\n  for (package in required_packages) {\r\n    require_package(package)\r\n  }\r\n  invisible(required_packages)\r\n}\r\n```\r\n\r\nThis check is performed when the model is loaded back in:\r\n\r\n```r\r\nmlflow_load_flavor.mlflow_flavor_parsnip <- function(flavor, model_path) {\r\n  require_package(\"parsnip\")\r\n  model_spec <- mlflow_read_model_spec(\"model\")\r\n  model <- model_spec$flavors$parsnip$model\r\n  engine <- model_spec$flavors$parsnip$engine\r\n  require_parsnip_dependencies(model, engine)\r\n  readRDS(file.path(model_path, \"parsnip_model.rds\"))\r\n}\r\n```\r\n\r\nSomething similar is required for `workflow`s.\r\n\r\n`parsnip`'s unified interface also means that we can implement autologging for R models. A function that fits in with `magrittr`'s pipes would make sense here. In the example below, `mlflow_autolog_params` returns the model unaltered, but logs the arguments to `linear_model` as parameters. It's implemented as an S3 method, to leave the door open for autologging other flavours:\r\n\r\n```r\r\nlibrary(mlflow)\r\nlibrary(parsnip)\r\nlibrary(magrittr)\r\nidx <- sample(nrow(mtcars))\r\ntrain <- mtcars[idx[1:25], ]\r\ntest <- mtcars[idx[26:32], ]\r\nlinear_model <- linear_reg(penalty = 0.2, mixture = 0.5) %>% set_engine(\"lm\")\r\nwith(mlflow_start_run(),\r\n  linear_model %>%\r\n    mlflow_autolog_params() %>%\r\n    fit(mpg ~ ., train) %>%\r\n    mlflow_save_model(\"model\")\r\n)\r\n# Will log parameters \"penalty\" = 0.2 and \"mixture\" = 0.5\r\n# Default values are not logged\r\n```\r\n\r\nThere's also the possibilty of autologging metrics with the `yardstick` package, also a part of `tidymodels`, although I haven't yet explored this.\r\n\r\nI've drafted a bit of code to support the new flavours and autologging of parameters but, in line with the MLflow contributing guidelines, I'll hold off on submitting a pull request for now. Apart from design matters, I still need to do the following:\r\n\r\n- [ ] Request that the `tidymodels` team expose `workflows:::predict.workflow`, as CRAN will not be happy with using an internal function like this (`parsnip::predict.parsnip` looks fine)\r\n- [ ] Incorporate the new flavours into the MLflow CLI (I might need help with this)\r\n- [ ] Implement autologging of metrics, if desired\r\n- [ ] Update documentation and examples\r\n\r\nI hope I can help out! I really like MLflow --- this is a great tool, and I'm grateful for the work of all of the contributors.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3418/reactions","total_count":8,"+1":8,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/3418/timeline","performed_via_github_app":null,"state_reason":null}