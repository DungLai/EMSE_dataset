{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3613","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/3613/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/3613/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/3613/events","html_url":"https://github.com/mlflow/mlflow/issues/3613","id":733829761,"node_id":"MDU6SXNzdWU3MzM4Mjk3NjE=","number":3613,"title":"[FR] Model Cards (Documentation)","user":{"login":"antoniomdk","id":4209122,"node_id":"MDQ6VXNlcjQyMDkxMjI=","avatar_url":"https://avatars.githubusercontent.com/u/4209122?v=4","gravatar_id":"","url":"https://api.github.com/users/antoniomdk","html_url":"https://github.com/antoniomdk","followers_url":"https://api.github.com/users/antoniomdk/followers","following_url":"https://api.github.com/users/antoniomdk/following{/other_user}","gists_url":"https://api.github.com/users/antoniomdk/gists{/gist_id}","starred_url":"https://api.github.com/users/antoniomdk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antoniomdk/subscriptions","organizations_url":"https://api.github.com/users/antoniomdk/orgs","repos_url":"https://api.github.com/users/antoniomdk/repos","events_url":"https://api.github.com/users/antoniomdk/events{/privacy}","received_events_url":"https://api.github.com/users/antoniomdk/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1470945519,"node_id":"MDU6TGFiZWwxNDcwOTQ1NTE5","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/uiux","name":"area/uiux","color":"ede978","default":false,"description":"Front-end, user experience, plotting, JavaScript, JavaScript dev server"},{"id":2022847714,"node_id":"MDU6TGFiZWwyMDIyODQ3NzE0","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/model-registry","name":"area/model-registry","color":"48eabc","default":false,"description":"Model registry, model registry APIs, and the fluent client calls for model registry"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"},{"id":2022865338,"node_id":"MDU6TGFiZWwyMDIyODY1MzM4","url":"https://api.github.com/repos/mlflow/mlflow/labels/priority/important-longterm","name":"priority/important-longterm","color":"534cb5","default":false,"description":"Important over the long term, but may not be staffed or may need multiple releases to complete."}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2020-10-31T23:51:19Z","updated_at":"2021-07-30T17:39:16Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [x] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nSome time ago, Google proposed Model Cards as a way to document models. In words of the author of the paper:\r\n\r\n\"Model cards are short documents accompanying trained machine learning models that provide benchmarked evaluation in a variety of conditions, such as across different cultural, demographic, or phenotypic groups (e.g., race, geographic location, sex, Fitzpatrick skin type) and intersectional groups (e.g., age and race, or sex and Fitzpatrick skin type) that are relevant to the intended application domains. Model cards also disclose the context in which models are intended to be used, details of the performance evaluation procedures, and other relevant information.\"\r\n\r\nI believe it would be a good idea to have a piece of the JS UI dedicated to model documentation, where not only scientists but also stakeholders or other engineers can know the purpose of the model, limitations, type and dimension of inputs/outputs, inference time, etc. I'm also aware that Model Registry has a description field, but I think it could be extended to a more sophisticated component. See examples of Model Cards from Google here: https://modelcards.withgoogle.com/object-detection.\r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\nThis is applicable to users that want to integrate detailed technical and non-technical documentation of models as part of the ML lifecycle.\r\n\r\n- Why is this use case valuable to support for MLflow users in general?\r\nDocumentation is a vital part of the development and productioning of ML models. It is useful for users of the model as they know what inputs and outputs are expected, as well as its limitations. It is also valuable to stakeholders as they can visualize easily the model performance on the evaluation tests. And finally, documenting the model is a good way to reflect on its behavior and assess fairness and bias.\r\n\r\n- Why is this use case valuable to support for your project(s) or organization?\r\n\r\nWe are currently working with a pipeline of 8-10 different ML models, and it is difficult for us to find a single source of truth for documentation that keeps up to date with the continuous improvement of models.\r\n\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\n\r\nBeing completely honest, I haven't dig deep into the Model Registry documentation features, but I feel that having a markdown field for the model description could be insufficient for detailed documentation. I would appreciate a richer interface or set of components. I think it'd be interesting to have some fields where we can play around with the model, upload a dataset for evaluation, etc. (Some of the things that Google Model Cards support).\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [x] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [x] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [x] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nThis proposal would introduce several changes to the codebase. Those changes are mainly focused on the UI part, where the main goal would be to create a richer documentation editor. But some features proposed need changes on the core of MLFlow. For example, if we want to have a field where we can play around with the model, eg. submit inputs and show predictions, we would need to deploy a model for that. Another alternative I'm thinking of is embedding a swagger API REST doc page (#2948) (https://github.com/Redocly/redoc).\r\n\r\nIt would also be great if some of the model metadata, like input/output type, could be extracted automatically. Google released a toolkit for creating model cards as simple HTML pages, and they use TFX to extract some metadata. I know it is not applicable for the rest of the frameworks supported, but there may be some way to infer that information automatically. \r\n\r\nI apologize in advance for not being very specific, I just wanted to share my idea and get some feedback from the community and see where we can go from here.\r\n\r\nThanks!\r\n\r\n\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/3613/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/3613/timeline","performed_via_github_app":null,"state_reason":null}