{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5582","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/5582/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/5582/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/5582/events","html_url":"https://github.com/mlflow/mlflow/issues/5582","id":1189563583,"node_id":"I_kwDOCB5Jx85G50y_","number":5582,"title":"`mlflow.pyfunc.PythonModel`s referencing multiple artifacts with distinct uris but common sub-paths do not work as expected","user":{"login":"kyle-jarvis","id":55158055,"node_id":"MDQ6VXNlcjU1MTU4MDU1","avatar_url":"https://avatars.githubusercontent.com/u/55158055?v=4","gravatar_id":"","url":"https://api.github.com/users/kyle-jarvis","html_url":"https://github.com/kyle-jarvis","followers_url":"https://api.github.com/users/kyle-jarvis/followers","following_url":"https://api.github.com/users/kyle-jarvis/following{/other_user}","gists_url":"https://api.github.com/users/kyle-jarvis/gists{/gist_id}","starred_url":"https://api.github.com/users/kyle-jarvis/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kyle-jarvis/subscriptions","organizations_url":"https://api.github.com/users/kyle-jarvis/orgs","repos_url":"https://api.github.com/users/kyle-jarvis/repos","events_url":"https://api.github.com/users/kyle-jarvis/events{/privacy}","received_events_url":"https://api.github.com/users/kyle-jarvis/received_events","type":"User","site_admin":false},"labels":[{"id":955449428,"node_id":"MDU6TGFiZWw5NTU0NDk0Mjg=","url":"https://api.github.com/repos/mlflow/mlflow/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":2022845866,"node_id":"MDU6TGFiZWwyMDIyODQ1ODY2","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/artifacts","name":"area/artifacts","color":"48eabc","default":false,"description":"Artifact stores and artifact logging"},{"id":2022848043,"node_id":"MDU6TGFiZWwyMDIyODQ4MDQz","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/models","name":"area/models","color":"48eabc","default":false,"description":"MLmodel format, model serialization/deserialization, flavors"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2022-04-01T10:08:21Z","updated_at":"2022-04-12T00:10:53Z","closed_at":"2022-04-12T00:10:53Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Thank you for submitting an issue. Please refer to our [issue policy](https://www.github.com/mlflow/mlflow/blob/master/ISSUE_POLICY.md) for additional information about bug reports. For help with debugging your code, please refer to [Stack Overflow](https://stackoverflow.com/questions/tagged/mlflow).\r\n\r\n### Willingness to contribute\r\nThe MLflow Community encourages bug fix contributions. Would you or another member of your organization be willing to contribute a fix for this bug to the MLflow code base?\r\n\r\n- [ ] Yes. I can contribute a fix for this bug independently.\r\n- [x] Yes. I would be willing to contribute a fix for this bug with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute a bug fix at this time.\r\n\r\n### Describe the problem\r\nActual behaviour: \r\nA common pattern I have been working with is to use a pyfunc.PythonModel to wrap up a sequence of inference steps from separate models. The idea is illustrated below. The PythonModel references multiple artifacts that are distinguishable through their uris, but share a common artifact sub-path. When these are downloaded as part of a call to `mlflow.pyfunc.save_model` the artifacts are sequentially overwritten, and the result is that multiple distinct references are resolved to the same underlying artifacts. This all happens quietly, and could cause a real headache that might be hard to catch for practitioners.\r\n\r\n```python\r\nimport mlflow\r\n\r\nclass TwoStepPyfuncModel(mlflow.pyfunc.PythonModel):\r\n  def load_context(self, context):\r\n    self._first_step_model = mlflow.keras.load_model(context.artifacts[\"first_step_model\"])\r\n    self._second_step_model = mlflow.keras.load_model(context.artifacts[\"second_step_model\"])\r\n    # Issue: context.artifacts[\"first_step_model\"] = context.artifacts[\"second_step_model\"]\r\n    # Naive way to catch:\r\n    if context.artifacts[\"first_step_model\"] == context.artifacts[\"second_step_model\"]:\r\n      raise Exception(\"oops\")\r\n\r\n  def predict(self, context, model_input):    \r\n    first_step_result = self._first_step_model(model_input, training=False)\r\n    if condition(first_step_result):\r\n      second_step_result = self.second_step_model(model_input, training=False)\r\n      return {\"first_step_result\": first_step_result, \"second_step_result\": second_step_result}\r\n    else:\r\n      return {\"first_step_result\": first_step_result, \"second_step_result\": None}\r\n\r\n\r\ntwo_step_model = TwoStepPyfuncModel()\r\n\r\nmlflow.pyfunc.save_model(\r\n  \"./pyfunc_model\", \r\n  python_model = two_step_model, \r\n  artifacts = {\r\n    \"first_step_model\": 'runs:/abc/model', # Default artifact path for saving a model.\r\n    \"second_step_model\": 'runs:/cde/model' # Default artifact path for saving a model.\r\n  }\r\n)\r\n\r\ntwo_step_model_reloaded = mlflow.pyfunc.load_model(\"./pyfunc_model\")\r\n\r\ntwo_step_model_reloaded.predict(some_input)\r\n# Exception: Oops\r\n```\r\nDesired behaviour:\r\nIt should not be possible for artifacts specified in `mlflow.pyfunc.save_model` to be quietly overwritten. I imagine there are reasons why it may be desirable for these artifacts to retain the same relative path as their originating sources, but at the very least we should tell the user that this has happened and raise an exception. An alternative would be to handle this situation by injecting a differentiator in the sub-paths of the artifacts downloaded for the new PythonModel, and to alert the user to this, though I don't have much visibility on whether this would cause side-effects elsewhere. I note that this is only an issue if the source artifacts in their separate runs happen to have the same relative path - but this is often the case, for the first model logged to an mlflow run, in my experience. \r\n\r\n### What component(s), interfaces, languages, and integrations does this bug affect?\r\nComponents \r\n- [x] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [x] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterface \r\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguage \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n","closed_by":{"login":"harupy","id":17039389,"node_id":"MDQ6VXNlcjE3MDM5Mzg5","avatar_url":"https://avatars.githubusercontent.com/u/17039389?v=4","gravatar_id":"","url":"https://api.github.com/users/harupy","html_url":"https://github.com/harupy","followers_url":"https://api.github.com/users/harupy/followers","following_url":"https://api.github.com/users/harupy/following{/other_user}","gists_url":"https://api.github.com/users/harupy/gists{/gist_id}","starred_url":"https://api.github.com/users/harupy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harupy/subscriptions","organizations_url":"https://api.github.com/users/harupy/orgs","repos_url":"https://api.github.com/users/harupy/repos","events_url":"https://api.github.com/users/harupy/events{/privacy}","received_events_url":"https://api.github.com/users/harupy/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5582/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/5582/timeline","performed_via_github_app":null,"state_reason":"completed"}