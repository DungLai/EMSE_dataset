{"url":"https://api.github.com/repos/mlflow/mlflow/issues/288","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/288/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/288/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/288/events","html_url":"https://github.com/mlflow/mlflow/issues/288","id":349757373,"node_id":"MDU6SXNzdWUzNDk3NTczNzM=","number":288,"title":"Unsupported pickle protocol in model serving","user":{"login":"fclesio","id":10605378,"node_id":"MDQ6VXNlcjEwNjA1Mzc4","avatar_url":"https://avatars.githubusercontent.com/u/10605378?v=4","gravatar_id":"","url":"https://api.github.com/users/fclesio","html_url":"https://github.com/fclesio","followers_url":"https://api.github.com/users/fclesio/followers","following_url":"https://api.github.com/users/fclesio/following{/other_user}","gists_url":"https://api.github.com/users/fclesio/gists{/gist_id}","starred_url":"https://api.github.com/users/fclesio/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fclesio/subscriptions","organizations_url":"https://api.github.com/users/fclesio/orgs","repos_url":"https://api.github.com/users/fclesio/repos","events_url":"https://api.github.com/users/fclesio/events{/privacy}","received_events_url":"https://api.github.com/users/fclesio/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-08-11T19:17:40Z","updated_at":"2018-08-22T20:27:40Z","closed_at":"2018-08-22T20:27:40Z","author_association":"NONE","active_lock_reason":null,"body":"### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in MLflow)**:\r\nYes.\r\n\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:\r\nMacBook Pro - macOS High Sierra - Version 10.13.4 - 2,3 GHzIntel Core i5, 16Gb memory\r\n- **MLflow installed from (source or binary)**: \r\n`pip install mlflow`\r\n- **MLflow version (run ``mlflow --version``)**:\r\n`mlflow, version 0.4.2`\r\n- **Python version**: \r\n`Python 2.7.15`\r\n- **npm version (if running the dev UI):\r\n- **Exact command to reproduce**:\r\n`mlflow sklearn serve /Python/mlruns/0/01ba40fe5fbb4942a6a37b62c77b8fcc/artifacts/model_random_forests -p 1234`\r\n\r\n### Describe the problem\r\nWhen I go to make the servicing of the model using the following command I receive an error - Error: `ValueError: unsupported pickle protocol: 3`\r\n\r\n### Source code / logs\r\n*Logs*\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/bin/mlflow\", line 11, in <module>\r\n    sys.exit(cli())\r\n  File \"/Library/Python/2.7/site-packages/click/core.py\", line 722, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"/Library/Python/2.7/site-packages/click/core.py\", line 697, in main\r\n    rv = self.invoke(ctx)\r\n  File \"/Library/Python/2.7/site-packages/click/core.py\", line 1066, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"/Library/Python/2.7/site-packages/click/core.py\", line 1066, in invoke\r\n    return _process_result(sub_ctx.command.invoke(sub_ctx))\r\n  File \"/Library/Python/2.7/site-packages/click/core.py\", line 895, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"/Library/Python/2.7/site-packages/click/core.py\", line 535, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"/Library/Python/2.7/site-packages/mlflow/sklearn.py\", line 102, in serve_model\r\n    model = load_model(run_id=run_id, path=model_path)\r\n  File \"/Library/Python/2.7/site-packages/mlflow/sklearn.py\", line 78, in load_model\r\n    return _load_model_from_local_file(path)\r\n  File \"/Library/Python/2.7/site-packages/mlflow/sklearn.py\", line 64, in _load_model_from_local_file\r\n    return pickle.load(f)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py\", line 1378, in load\r\n    return Unpickler(file).load()\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py\", line 858, in load\r\n    dispatch[key](self)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py\", line 886, in load_proto\r\n    raise ValueError, \"unsupported pickle protocol: %d\" % proto\r\nValueError: unsupported pickle protocol: 3\r\n```\r\n\r\n*Code*\r\n```\r\n# In[2]:\r\nimport warnings\r\nwarnings.filterwarnings(\"ignore\")\r\n\r\nget_ipython().run_line_magic('matplotlib', 'inline')\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport pandas as pd\r\nimport mlflow\r\nimport mlflow.sklearn\r\nfrom sklearn import cross_validation\r\nfrom sklearn import metrics\r\nfrom sklearn import preprocessing\r\nfrom sklearn.ensemble import AdaBoostClassifier\r\nfrom sklearn.ensemble import ExtraTreesClassifier\r\nfrom sklearn.ensemble import GradientBoostingClassifier\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.linear_model import Perceptron\r\nfrom sklearn.metrics import mean_squared_error\r\nfrom sklearn.model_selection import train_test_split\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nfrom sklearn.svm import SVC\r\nfrom sklearn.tree import DecisionTreeClassifier\r\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\r\nfrom sklearn.linear_model import ElasticNet\r\n\r\n# Data\r\ndf = pd.read_csv('https://raw.githubusercontent.com/fclesio/learning-space/master/Datasets/02%20-%20Classification/default_credit_card.csv')\r\n\r\n# Split the data into training and test sets. (0.75, 0.25) split.\r\ntrain, test = train_test_split(df)\r\n\r\n# The predicted column is \"quality\" which is a scalar from [3, 9]\r\ntrain_x = train.drop([\"DEFAULT\"], axis=1)\r\ntest_x = test.drop([\"DEFAULT\"], axis=1)\r\ntrain_y = train[[\"DEFAULT\"]]\r\ntest_y = test[[\"DEFAULT\"]]\r\n\r\n# Convert Pandas datasets to numpy arrays \r\ntrain_x = train_x.as_matrix()\r\ntest_x = test_x.as_matrix()\r\ntrain_y = train_y.as_matrix()\r\ntest_y = test_y.as_matrix()\r\n\r\n# Standardize the data attributes\r\ntrain_x = preprocessing.scale(train_x)\r\ntest_x = preprocessing.scale(test_x)\r\n\r\n# Set seed\r\nnp.random.seed(12345)\r\n\r\n\r\n# In[3]:\r\n\r\n\r\n# RandomForestClassifier\r\nn_estimators = [500, 1000, 3000]\r\nmin_samples_splits = [50, 100, 500]\r\nmax_depths = [10, 20, 50]\r\n\r\nfor n_estimator in n_estimators:\r\n    for min_samples_split in min_samples_splits:    \r\n        for depth in max_depths:\r\n            with mlflow.start_run():\r\n                \r\n                lr = RandomForestClassifier(n_estimators=n_estimator, \r\n                                            min_samples_split=min_samples_split,\r\n                                            max_depth=depth)\r\n            \r\n                lr.fit(train_x, train_y)\r\n                accuracy = lr.score(test_x, test_y)\r\n\r\n                predicted_qualities = lr.predict(test_x)\r\n\r\n\r\n                print(\"Random Forest model (n_estimators=%f, min_samples_split=%f, max_depth=%f):\" % (n_estimator,min_samples_split,depth))\r\n                print(\"Accuracy: %s\" % round((accuracy * 100),2))\r\n\r\n                # Logging in mlflow to appears in UI\r\n                mlflow.log_param(\"n_estimators\", n_estimator)\r\n                mlflow.log_param(\"min_samples_split\", min_samples_split)\r\n                mlflow.log_param(\"max_depth\", depth)\r\n                \r\n                mlflow.log_metric(\"accuracy\", accuracy)\r\n                mlflow.sklearn.log_model(lr, \"model_random_forests\")\r\n\r\n\r\n# In[4]:\r\n\r\n\r\n# ExtraTreesClassifier\r\nn_estimators = [1000, 3000]\r\nmax_depths = [20, 30]\r\nmin_samples_leafs = [20, 50]\r\n\r\nfor n_estimator in n_estimators:\r\n    for min_samples_leaf in min_samples_leafs:    \r\n        for depth in max_depths:\r\n            with mlflow.start_run():\r\n                \r\n                lr = ExtraTreesClassifier(n_estimators=n_estimator, \r\n                                          min_samples_leaf=min_samples_leaf,\r\n                                          max_depth=depth)\r\n            \r\n                lr.fit(train_x, train_y)\r\n                accuracy = lr.score(test_x, test_y)\r\n\r\n                predicted_qualities = lr.predict(test_x)\r\n\r\n                print(\"Gradient Boosting model (n_estimators=%f, min_samples_leaf=%f, max_depth=%f):\" % (n_estimator, min_samples_leaf, depth))\r\n                print(\"Accuracy: %s\" % round((accuracy * 100),2))\r\n\r\n                # Logging in mlflow to appears in UI\r\n                mlflow.log_param(\"n_estimators\", n_estimator)\r\n                mlflow.log_param(\"min_samples_leaf\", min_samples_leaf)\r\n                mlflow.log_param(\"max_depth\", depth)\r\n                \r\n                mlflow.log_metric(\"accuracy\", accuracy)\r\n                mlflow.sklearn.log_model(lr, \"model_extratrees_classifier\")            \r\n\r\n\r\n# In[5]:\r\n\r\n\r\n# LogisticRegression\r\npenalties  = ['l2']\r\nfit_intercepts = [False, True]\r\nCs = [0.03, 0.02, 0.01, 0.005, 0.004, 0.003, 0.002, 0.001]\r\nsolvers = ['newton-cg', 'sag', 'saga', 'lbfgs']\r\n\r\nfor penalty in penalties:\r\n    for fit_intercept in fit_intercepts:    \r\n        for C in Cs:\r\n            for solver in solvers:\r\n                with mlflow.start_run():\r\n                    lr = LogisticRegression(penalty=penalty,\r\n                                        fit_intercept=fit_intercept,\r\n                                        C=C,\r\n                                        solver=solver)\r\n            \r\n                    lr.fit(train_x, train_y)\r\n                    accuracy = lr.score(test_x, test_y)\r\n\r\n                    predicted_qualities = lr.predict(test_x)\r\n\r\n                    print(\"Accuracy: %s\" % round((accuracy * 100),2))\r\n\r\n                    # Logging in mlflow to appears in UI\r\n                    mlflow.log_param(\"penalty\", penalty)\r\n                    mlflow.log_param(\"fit_intercept\", fit_intercept)\r\n                    mlflow.log_param(\"C\", C)\r\n\r\n                    mlflow.log_metric(\"accuracy\", accuracy)\r\n                    mlflow.sklearn.log_model(lr, \"model_logistic_regression\")\r\n```","closed_by":{"login":"fclesio","id":10605378,"node_id":"MDQ6VXNlcjEwNjA1Mzc4","avatar_url":"https://avatars.githubusercontent.com/u/10605378?v=4","gravatar_id":"","url":"https://api.github.com/users/fclesio","html_url":"https://github.com/fclesio","followers_url":"https://api.github.com/users/fclesio/followers","following_url":"https://api.github.com/users/fclesio/following{/other_user}","gists_url":"https://api.github.com/users/fclesio/gists{/gist_id}","starred_url":"https://api.github.com/users/fclesio/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fclesio/subscriptions","organizations_url":"https://api.github.com/users/fclesio/orgs","repos_url":"https://api.github.com/users/fclesio/repos","events_url":"https://api.github.com/users/fclesio/events{/privacy}","received_events_url":"https://api.github.com/users/fclesio/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/288/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/288/timeline","performed_via_github_app":null,"state_reason":"completed"}