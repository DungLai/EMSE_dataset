{"url":"https://api.github.com/repos/mlflow/mlflow/issues/2719","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/2719/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/2719/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/2719/events","html_url":"https://github.com/mlflow/mlflow/issues/2719","id":601362054,"node_id":"MDU6SXNzdWU2MDEzNjIwNTQ=","number":2719,"title":"[BUG] Plotting ~ 35 metric curves causes significant browser lag","user":{"login":"dbczumar","id":39497902,"node_id":"MDQ6VXNlcjM5NDk3OTAy","avatar_url":"https://avatars.githubusercontent.com/u/39497902?v=4","gravatar_id":"","url":"https://api.github.com/users/dbczumar","html_url":"https://github.com/dbczumar","followers_url":"https://api.github.com/users/dbczumar/followers","following_url":"https://api.github.com/users/dbczumar/following{/other_user}","gists_url":"https://api.github.com/users/dbczumar/gists{/gist_id}","starred_url":"https://api.github.com/users/dbczumar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dbczumar/subscriptions","organizations_url":"https://api.github.com/users/dbczumar/orgs","repos_url":"https://api.github.com/users/dbczumar/repos","events_url":"https://api.github.com/users/dbczumar/events{/privacy}","received_events_url":"https://api.github.com/users/dbczumar/received_events","type":"User","site_admin":false},"labels":[{"id":955449428,"node_id":"MDU6TGFiZWw5NTU0NDk0Mjg=","url":"https://api.github.com/repos/mlflow/mlflow/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":1470945519,"node_id":"MDU6TGFiZWwxNDcwOTQ1NTE5","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/uiux","name":"area/uiux","color":"ede978","default":false,"description":"Front-end, user experience, plotting, JavaScript, JavaScript dev server"},{"id":2022865338,"node_id":"MDU6TGFiZWwyMDIyODY1MzM4","url":"https://api.github.com/repos/mlflow/mlflow/labels/priority/important-longterm","name":"priority/important-longterm","color":"534cb5","default":false,"description":"Important over the long term, but may not be staffed or may need multiple releases to complete."}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2020-04-16T19:16:17Z","updated_at":"2022-04-13T13:13:28Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"Thank you for submitting an issue. Please refer to our [issue policy](https://www.github.com/mlflow/mlflow/blob/master/ISSUE_POLICY.md)\r\nfor information on what types of issues we address. For help with debugging your code, please refer to [Stack Overflow](https://stackoverflow.com/questions/tagged/mlflow).\r\n\r\nPlease fill in this template and do not delete it unless you are sure your issue is outside its scope.\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in MLflow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: OSX 10.14\r\n- **MLflow installed from (source or binary)**: binary\r\n- **MLflow version (run ``mlflow --version``)**: 1.7\r\n- **Python version**: 3.7\r\n- **npm version, if running the dev UI**:\r\n- **Exact command to reproduce**: See steps below\r\n\r\n### Describe the problem\r\nPlotting a large number of metrics, each with multiple values recorded at different steps, produces significant browser lag in the UI. i.e., this UI is slow (and pretty unreadable):\r\n\r\n<img width=\"2474\" alt=\"Screen Shot 2020-04-16 at 12 13 09 PM\" src=\"https://user-images.githubusercontent.com/39497902/79496893-acaff700-7fdb-11ea-9a10-3d0d2e630be6.png\">\r\n\r\n### Code to reproduce issue\r\n1. Launch the MLflow UI / Tracking Server\r\n\r\n2. Create a python script with the following contents:\r\n```\r\nimport argparse\r\nimport time\r\nimport random\r\n\r\nimport numpy as np\r\n\r\nimport mlflow\r\nfrom mlflow.tracking.client import MlflowClient\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    parser = argparse.ArgumentParser(description='PyTorch MNIST Example')\r\n    parser.add_argument('--runs', type=int, default=1, help='The number of runs to generate')\r\n    parser.add_argument('--metrics', type=int, default=5, help='The number of metrics to generate for each run')\r\n    parser.add_argument('--min-step', type=int, default=-10, help='The minimum step to record for each metric')\r\n    parser.add_argument('--max-step', type=int, default=100, help='The maximum step to record for each metric')\r\n    parser.add_argument('--min-value', type=float, default=-10, help='The maximum value to record for each metric')\r\n    parser.add_argument('--max-value', type=float, default=10, help='The maximum value to record for each metric')\r\n    parser.add_argument('--entry-dropout', type=float, default=0.1, help='The fraction of entries to randomly omit')\r\n    parser.add_argument('--step-replication', type=float, default=0.1, help='The fraction of entries that should be given the same step')\r\n    parser.add_argument('--shuffle', action=\"store_true\", help='If specified, shuffles timestamps')\r\n\r\n    args = parser.parse_args()\r\n\r\n    mlflow_client = MlflowClient()\r\n\r\n    for i in range(args.runs):\r\n        with mlflow.start_run():\r\n            run_id = mlflow.active_run().info.run_uuid\r\n            for j in range(args.metrics):\r\n                metric_name = \"metric_{idx}\".format(idx=j)\r\n\r\n                steps = range(args.min_step, args.max_step)\r\n                replicated_steps = np.random.choice(steps, size=int(len(steps) * args.step_replication))\r\n                steps = np.concatenate([steps, replicated_steps])\r\n\r\n                curr_time = int(time.time())\r\n                timestamps = [1000 * item for item in range(curr_time, curr_time + len(steps))]\r\n                if args.shuffle:\r\n                    np.random.shuffle(timestamps)\r\n\r\n                steps_timestamps = list(zip(steps, timestamps))\r\n                sample_indices = random.sample(\r\n                    range(len(steps_timestamps)),\r\n                    int((1 - args.entry_dropout) * len(steps_timestamps)))\r\n                steps_timestamps = [steps_timestamps[i] for i in sorted(sample_indices)]\r\n\r\n                values = (args.max_value - args.min_value) * np.random.random(len(steps_timestamps)) + args.min_value\r\n\r\n                for k in range(len(steps_timestamps)):\r\n                    step, timestamp = steps_timestamps[k]\r\n                    value = values[k]\r\n                    print(step, timestamp, value)\r\n                    mlflow_client.log_metric(\r\n                        run_id=run_id,\r\n                        key=metric_name,\r\n                        value=value,\r\n                        timestamp=timestamp,\r\n                        step=step)\r\n```\r\n\r\n3. Invoke `python gen_metrics.py --runs 1 --metrics 35 --min-step -10 --max-step 100    --min-value -10 --max-value 10 --entry-dropout 0 --step-replication 0.0` from the command line\r\n\r\n4. Open the run metrics plot view and select all 35 metrics that were produced to plot each curve\r\n\r\n5. Observe browser lag\r\n\r\n### Other info / logs\r\nNA","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/2719/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/2719/timeline","performed_via_github_app":null,"state_reason":null}