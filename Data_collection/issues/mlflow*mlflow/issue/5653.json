{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5653","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/5653/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/5653/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/5653/events","html_url":"https://github.com/mlflow/mlflow/issues/5653","id":1199308296,"node_id":"I_kwDOCB5Jx85He_4I","number":5653,"title":"[BUG] Loading more runs in the experiment UI becomes very slow with a large number of rows","user":{"login":"adamreeve","id":626438,"node_id":"MDQ6VXNlcjYyNjQzOA==","avatar_url":"https://avatars.githubusercontent.com/u/626438?v=4","gravatar_id":"","url":"https://api.github.com/users/adamreeve","html_url":"https://github.com/adamreeve","followers_url":"https://api.github.com/users/adamreeve/followers","following_url":"https://api.github.com/users/adamreeve/following{/other_user}","gists_url":"https://api.github.com/users/adamreeve/gists{/gist_id}","starred_url":"https://api.github.com/users/adamreeve/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adamreeve/subscriptions","organizations_url":"https://api.github.com/users/adamreeve/orgs","repos_url":"https://api.github.com/users/adamreeve/repos","events_url":"https://api.github.com/users/adamreeve/events{/privacy}","received_events_url":"https://api.github.com/users/adamreeve/received_events","type":"User","site_admin":false},"labels":[{"id":955449428,"node_id":"MDU6TGFiZWw5NTU0NDk0Mjg=","url":"https://api.github.com/repos/mlflow/mlflow/labels/bug","name":"bug","color":"d73a4a","default":true,"description":"Something isn't working"},{"id":1470945519,"node_id":"MDU6TGFiZWwxNDcwOTQ1NTE5","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/uiux","name":"area/uiux","color":"ede978","default":false,"description":"Front-end, user experience, plotting, JavaScript, JavaScript dev server"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-04-11T02:34:48Z","updated_at":"2022-05-06T22:42:46Z","closed_at":"2022-05-06T22:42:46Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"### Willingness to contribute\r\nThe MLflow Community encourages bug fix contributions. Would you or another member of your organization be willing to contribute a fix for this bug to the MLflow code base?\r\n\r\n- [x] Yes. I can contribute a fix for this bug independently.\r\n- [ ] Yes. I would be willing to contribute a fix for this bug with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute a bug fix at this time.\r\n\r\n### System information\r\n- **Have I written custom code (as opposed to using a stock example script provided in MLflow)**: No\r\n- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**: Fedora Linux 35\r\n- **MLflow installed from (source or binary)**: Source\r\n- **MLflow version (run ``mlflow --version``)**: 1.24.1.dev0 (at commit 3984c2c9a536505eabd183a04467ab52a80127db)\r\n- **Python version**: 3.9.12\r\n- **npm version, if running the dev UI**: 8.3.1\r\n- **Exact command to reproduce**: Create > 1000 runs in an experiment. Then in the experiment view, keep clicking \"Load more\"\r\n\r\n### Describe the problem\r\n\r\nAs the number of runs in the run table increases, clicking \"Load more\" to load more rows takes longer and performance degrades significantly.\r\n\r\nThe table below shows the time taken to load 100 more rows, measured as the time from clicking \"Load more\" until the new rows are fully rendered and the load more button is visible again.\r\n\r\n| Starting number of rows | Time taken to load 100 more rows |\r\n|-------------------------|----------------------------------|\r\n| 100 | 3 s |\r\n| 200 | 5 s |\r\n| 300 | 8 s |\r\n| 400 | 11 s |\r\n| 500 | 15 s |\r\n| 600 | 21 s |\r\n| 700 | 26 s |\r\n| 800 | 37 s |\r\n| 900 | 45 s |\r\n| 1000 | 59 s |\r\n\r\nOnly around 100 ms of each loading time is actually fetching the data from the backend, plus two queries to the model-versions/search endpoint that take less than 10 ms each (they are returning empty responses in my test case).\r\n\r\nThese numbers are all based on running a production build of the UI from commit 3984c2c9a536505eabd183a04467ab52a80127db, using Firefox 98 on Fedora Linux, and using a local SQLite store, on a machine with an AMD 5900X and 64 GB of RAM. I see the same behaviour under Chrome on Linux and Windows too, although performance does seem a bit better with Chrome.\r\n\r\nI've tested a series of changes that all help to improve performance significantly:\r\n* Updating to ag-grid 27.1.0, which reduces the time to go from 1000 to 1100 runs to 33 s\r\n* Removing the use of the full width cell renderer and moving the LoadMoreBar out of the table: down to 11 s\r\n* Implementing `getRowId`, which is supposed to help prevent re-rendering rows that haven't changed when updating the data (https://www.ag-grid.com/react-data-grid/row-ids/): 3 s\r\n\r\nJust using `getRowId` without removing the full width cell renderer didn't work, this caused some errors internally within ag-grid (`this.cellComp is undefined`).\r\n\r\nAnd making these two changes while sticking to version 25.3.0 didn't work well either, removing the full width cell renderer improved performance but implementing `getRowNodeId` (which was deprecated in 27.1.0 and replaced by `getRowId`) seemed to make performance worse.\r\n\r\nThere are a couple of new warnings that appear with a dev build after the update to 27.1.0:\r\n\r\n```\r\nWarning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.\r\nAgGridReactUi@http://localhost:3000/static-files/static/js/bundle.js:117332:20\r\nAgGridReact@http://localhost:3000/static-files/static/js/bundle.js:116686:20\r\ndiv\r\nExperimentRunsTableMultiColumnView2@http://localhost:3000/static-files/static/js/bundle.js:17195:193\r\ndiv\r\nSpacer@http://localhost:3000/static-files/static/js/bundle.js:45732:193\r\ndiv\r\ndiv\r\nExperimentView@http://localhost:3000/static-files/static/js/bundle.js:18230:193\r\ninjectIntl(ExperimentView)\r\nConnectFunction@http://localhost:3000/static-files/static/js/bundle.js:423772:68\r\nC@http://localhost:3000/static-files/static/js/bundle.js:426980:31\r\n```\r\n\r\n```\r\nWarning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\r\nGridBodyComp@http://localhost:3000/static-files/static/js/bundle.js:118705:37\r\nTabGuardCompRef@http://localhost:3000/static-files/static/js/bundle.js:120742:18\r\ndiv\r\ndiv\r\nGridComp@http://localhost:3000/static-files/static/js/bundle.js:118950:17\r\ndiv\r\nAgGridReactUi@http://localhost:3000/static-files/static/js/bundle.js:117332:20\r\nAgGridReact@http://localhost:3000/static-files/static/js/bundle.js:116686:20\r\ndiv\r\nExperimentRunsTableMultiColumnView2@http://localhost:3000/static-files/static/js/bundle.js:17195:193\r\ndiv\r\nSpacer@http://localhost:3000/static-files/static/js/bundle.js:45732:193\r\ndiv\r\ndiv\r\nExperimentView@http://localhost:3000/static-files/static/js/bundle.js:18230:193\r\ninjectIntl(ExperimentView)\r\nConnectFunction@http://localhost:3000/static-files/static/js/bundle.js:423772:68\r\nC@http://localhost:3000/static-files/static/js/bundle.js:426980:31 react-dom.development.js:67\r\n```\r\n\r\nIt looks like this has been opened as a bug in ag-grid but closed without any activity: https://github.com/ag-grid/ag-grid/issues/4817 (if Databricks have a support contract with ag-grid, maybe you could get them to take a look?)\r\n\r\nThere's also currently a problem with nested runs where the parent run's row doesn't re-render when it is expanded or contracted, so the plus icon stays as a plus. Hopefully I can find a workaround for that but I thought I should open an issue before doing too much work on this.\r\n\r\nEdit: Also, the start time and model columns don't get re-rendered for in-progress runs when clicking \"Refresh\" (and other columns with custom renderers are probably affected too). I'm guessing this is because eg. the model column refers to a non-existent `models` field, and the `startTime` field value doesn't actually change, so ag-grid doesn't think these need re-rendering. It should be possible to make this work correctly by using fields that actually change when the rendered result should change.\r\n\r\nWould you be happy to consider a PR with these changes?\r\n\r\n### Code to reproduce issue\r\n\r\nNA\r\n\r\n### Other info / logs\r\n\r\nProfiling data from Firefox when going from 500 to 600 rows, building with `yarn run build --profile`: https://share.firefox.dev/3jjD11S\r\n\r\n### What component(s), interfaces, languages, and integrations does this bug affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [x] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterface \r\n- [x] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguage \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n","closed_by":{"login":"dbczumar","id":39497902,"node_id":"MDQ6VXNlcjM5NDk3OTAy","avatar_url":"https://avatars.githubusercontent.com/u/39497902?v=4","gravatar_id":"","url":"https://api.github.com/users/dbczumar","html_url":"https://github.com/dbczumar","followers_url":"https://api.github.com/users/dbczumar/followers","following_url":"https://api.github.com/users/dbczumar/following{/other_user}","gists_url":"https://api.github.com/users/dbczumar/gists{/gist_id}","starred_url":"https://api.github.com/users/dbczumar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dbczumar/subscriptions","organizations_url":"https://api.github.com/users/dbczumar/orgs","repos_url":"https://api.github.com/users/dbczumar/repos","events_url":"https://api.github.com/users/dbczumar/events{/privacy}","received_events_url":"https://api.github.com/users/dbczumar/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5653/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/5653/timeline","performed_via_github_app":null,"state_reason":"completed"}