{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5617","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/5617/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/5617/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/5617/events","html_url":"https://github.com/mlflow/mlflow/issues/5617","id":1194483050,"node_id":"I_kwDOCB5Jx85HMl1q","number":5617,"title":"Replace `all(list comprehension)` with `all(generator)` to lazily evaluate elements","user":{"login":"harupy","id":17039389,"node_id":"MDQ6VXNlcjE3MDM5Mzg5","avatar_url":"https://avatars.githubusercontent.com/u/17039389?v=4","gravatar_id":"","url":"https://api.github.com/users/harupy","html_url":"https://github.com/harupy","followers_url":"https://api.github.com/users/harupy/followers","following_url":"https://api.github.com/users/harupy/following{/other_user}","gists_url":"https://api.github.com/users/harupy/gists{/gist_id}","starred_url":"https://api.github.com/users/harupy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harupy/subscriptions","organizations_url":"https://api.github.com/users/harupy/orgs","repos_url":"https://api.github.com/users/harupy/repos","events_url":"https://api.github.com/users/harupy/events{/privacy}","received_events_url":"https://api.github.com/users/harupy/received_events","type":"User","site_admin":false},"labels":[{"id":955449436,"node_id":"MDU6TGFiZWw5NTU0NDk0MzY=","url":"https://api.github.com/repos/mlflow/mlflow/labels/good%20first%20issue","name":"good first issue","color":"7057ff","default":true,"description":"Good for newcomers"}],"state":"closed","locked":false,"assignee":{"login":"nchittela","id":71892286,"node_id":"MDQ6VXNlcjcxODkyMjg2","avatar_url":"https://avatars.githubusercontent.com/u/71892286?v=4","gravatar_id":"","url":"https://api.github.com/users/nchittela","html_url":"https://github.com/nchittela","followers_url":"https://api.github.com/users/nchittela/followers","following_url":"https://api.github.com/users/nchittela/following{/other_user}","gists_url":"https://api.github.com/users/nchittela/gists{/gist_id}","starred_url":"https://api.github.com/users/nchittela/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nchittela/subscriptions","organizations_url":"https://api.github.com/users/nchittela/orgs","repos_url":"https://api.github.com/users/nchittela/repos","events_url":"https://api.github.com/users/nchittela/events{/privacy}","received_events_url":"https://api.github.com/users/nchittela/received_events","type":"User","site_admin":false},"assignees":[{"login":"nchittela","id":71892286,"node_id":"MDQ6VXNlcjcxODkyMjg2","avatar_url":"https://avatars.githubusercontent.com/u/71892286?v=4","gravatar_id":"","url":"https://api.github.com/users/nchittela","html_url":"https://github.com/nchittela","followers_url":"https://api.github.com/users/nchittela/followers","following_url":"https://api.github.com/users/nchittela/following{/other_user}","gists_url":"https://api.github.com/users/nchittela/gists{/gist_id}","starred_url":"https://api.github.com/users/nchittela/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nchittela/subscriptions","organizations_url":"https://api.github.com/users/nchittela/orgs","repos_url":"https://api.github.com/users/nchittela/repos","events_url":"https://api.github.com/users/nchittela/events{/privacy}","received_events_url":"https://api.github.com/users/nchittela/received_events","type":"User","site_admin":false}],"milestone":null,"comments":5,"created_at":"2022-04-06T11:35:23Z","updated_at":"2022-04-08T17:16:32Z","closed_at":"2022-04-08T17:16:32Z","author_association":"MEMBER","active_lock_reason":null,"body":"Replace:\r\n\r\n```python\r\nall([i == 0 for in range(3)])\r\nany([i == 0 for in range(3)])\r\n```\r\n\r\nwith:\r\n\r\n```python\r\nall(i == 0 for in range(3))\r\nany(i == 0 for in range(3))\r\n```\r\n\r\n### Why do we need this change?\r\n\r\nhttps://eklitzke.org/generator-comprehensions-and-using-any-and-all-in-python\r\n\r\n### Instructions:\r\n\r\n1. Copy & save this script.\r\n\r\n```python\r\nimport os\r\nimport sys\r\nimport ast\r\nfrom pathlib import Path\r\nfrom typing import Iterable, List\r\n\r\n\r\ndef iter_python_scripts(root: str) -> Iterable[Path]:\r\n    for p in Path(root).rglob(\"*\"):\r\n        if p.name.endswith(\".py\"):\r\n            yield p\r\n\r\n\r\ndef read_file(path: Path) -> str:\r\n    return path.read_text()\r\n\r\n\r\ndef create_position_link(path: str, lineno: int, col_offset: int) -> str:\r\n    return f\"{path}:{lineno}:{col_offset}\"\r\n\r\n\r\ndef is_list_comp(n: ast.AST):\r\n    return isinstance(n, ast.ListComp)\r\n\r\n\r\nclass Visitor(ast.NodeVisitor):\r\n    def __init__(self) -> None:\r\n        super().__init__()\r\n        self.nodes: List[ast.Call] = []\r\n\r\n    def visit_Call(self, node: ast.Call) -> None:\r\n        if (\r\n            isinstance(node.func, ast.Name)\r\n            and node.func.id in [\"any\", \"all\"]\r\n            and any(map(is_list_comp, node.args))\r\n        ):\r\n            self.nodes.append(node)\r\n        self.generic_visit(node)\r\n\r\n\r\ndef main() -> None:\r\n    for d in [\"mlflow\", \"tests\"]:\r\n        for path in iter_python_scripts(d):\r\n            src = read_file(path)\r\n            root = ast.parse(src)\r\n            visitor = Visitor()\r\n            visitor.visit(root)\r\n\r\n            if len(visitor.nodes) == 0:\r\n                continue\r\n\r\n            print(\r\n                \"\\n\".join(create_position_link(path, n.lineno, n.col_offset) for n in visitor.nodes)\r\n            )\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n```\r\n\r\n2. Run the script in the repository root to list the lines containing `all(list comprehension)` or `any(list comprehension)`:\r\n\r\n```\r\n% python a.py\r\ntests/types/test_schema.py:231:11\r\ntests/sklearn/test_sklearn_model_export.py:532:11\r\ntests/sklearn/test_sklearn_model_export.py:562:15\r\ntests/tensorflow/test_tensorflow2_autolog.py:764:11\r\ntests/autologging/test_autologging_behaviors_unit.py:184:11\r\ntests/autologging/test_autologging_behaviors_unit.py:190:11\r\ntests/autologging/test_autologging_behaviors_integration.py:284:11\r\ntests/autologging/test_autologging_behaviors_integration.py:302:11\r\ntests/autologging/test_autologging_safety_unit.py:635:11\r\ntests/autologging/test_autologging_safety_unit.py:636:11\r\ntests/autologging/test_autologging_safety_unit.py:637:11\r\ntests/tracking/test_tracking.py:285:11\r\ntests/pytorch/test_pytorch_model_export.py:564:11\r\n...\r\n```\r\n\r\n3. Fix the listed lines.\r\n4. Run the script again and make sure it prints out nothing.","closed_by":{"login":"harupy","id":17039389,"node_id":"MDQ6VXNlcjE3MDM5Mzg5","avatar_url":"https://avatars.githubusercontent.com/u/17039389?v=4","gravatar_id":"","url":"https://api.github.com/users/harupy","html_url":"https://github.com/harupy","followers_url":"https://api.github.com/users/harupy/followers","following_url":"https://api.github.com/users/harupy/following{/other_user}","gists_url":"https://api.github.com/users/harupy/gists{/gist_id}","starred_url":"https://api.github.com/users/harupy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/harupy/subscriptions","organizations_url":"https://api.github.com/users/harupy/orgs","repos_url":"https://api.github.com/users/harupy/repos","events_url":"https://api.github.com/users/harupy/events{/privacy}","received_events_url":"https://api.github.com/users/harupy/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5617/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/5617/timeline","performed_via_github_app":null,"state_reason":"completed"}