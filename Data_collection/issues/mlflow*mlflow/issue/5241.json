{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5241","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/5241/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/5241/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/5241/events","html_url":"https://github.com/mlflow/mlflow/issues/5241","id":1097283926,"node_id":"I_kwDOCB5Jx85BZzlW","number":5241,"title":"Allow users to download all run artifacts from a model uri","user":{"login":"noahshpak","id":8050572,"node_id":"MDQ6VXNlcjgwNTA1NzI=","avatar_url":"https://avatars.githubusercontent.com/u/8050572?v=4","gravatar_id":"","url":"https://api.github.com/users/noahshpak","html_url":"https://github.com/noahshpak","followers_url":"https://api.github.com/users/noahshpak/followers","following_url":"https://api.github.com/users/noahshpak/following{/other_user}","gists_url":"https://api.github.com/users/noahshpak/gists{/gist_id}","starred_url":"https://api.github.com/users/noahshpak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/noahshpak/subscriptions","organizations_url":"https://api.github.com/users/noahshpak/orgs","repos_url":"https://api.github.com/users/noahshpak/repos","events_url":"https://api.github.com/users/noahshpak/events{/privacy}","received_events_url":"https://api.github.com/users/noahshpak/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022845866,"node_id":"MDU6TGFiZWwyMDIyODQ1ODY2","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/artifacts","name":"area/artifacts","color":"48eabc","default":false,"description":"Artifact stores and artifact logging"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-01-09T19:43:05Z","updated_at":"2022-02-07T09:30:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [x] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nAdding an `--include-all` flag to the `mlflow artifacts download` command would facilitate more flexible use MLFlow in CI/CD flows by linking relative model paths to run artifacts directly. \r\n\r\n## Motivation\r\n- What is the use case for this feature?\r\n\r\n  ML teams orchestrate regular retraining runs in a workflow manager. When adopting MLFlow for tracking these runs, there is a ton of flexibility for workable promotion processes that MLFlow's ModelRegistry and tagging system can facilitate.  \r\n  \r\n  For example, when running CI on a staging branch, we can include a make command that calls `mlflow artifacts download --artifact-uri models:/my_model/Staging --include-all` to grab any artifacts required for serving, testing, or reporting. \r\n\r\n- Why is this use case valuable to support for MLflow users in general?\r\n\r\n    It makes integrating the ModelRegistry with automated testing easier. \r\n\r\n- Why is this use case valuable to support for your project(s) or organization?\r\n\r\n    It makes integrating the ModelRegistry with automated testing easier. \r\n\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\n\r\n    Rather than being a component of the CLI, we write a script. While this is not difficult, having this feature in the CLI would better enable model testing.\r\n\r\n```Python\r\nfrom mlflow.store.artifact.models_artifact_repo import ModelsArtifactRepository\r\n\r\nmodel_uri = \"models:/my_model/Production\"\r\nmodel_path = ModelsArtifactRepository.get_underlying_uri(model_uri)\r\nartifacts_path = model_path.strip('/model')\r\n```\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [x] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, plotting, JavaScript, JavaScript dev server\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nThe `ArtifactRepositoryRegistry` interface is great and I wouldn't want to modify it for this small quality-of-life improvement. It would muddy the distinction between a `RunsArtifactRepository` and a `ModelsArtifactRepository`. \r\n\r\nOne implementation path would look like the following:\r\n\r\n**1.  Add the `include-all` flag to the `mlflow artifacts download` command**\r\n```Python\r\n@commands.command(\"download\")\r\n@click.option(\"--run-id\", \"-r\", help=\"Run ID from which to download\")\r\n@click.option(\r\n    \"--artifact-path\",\r\n    \"-a\",\r\n    help=\"For use with Run ID: if specified, a path relative to the run's root \"\r\n    \"directory to download\",\r\n)\r\n@click.option(\r\n    \"--artifact-uri\",\r\n    \"-u\",\r\n    help=\"URI pointing to the artifact file or artifacts directory; use as an \"\r\n    \"alternative to specifying --run_id and --artifact-path\",\r\n)\r\n@click.option(\"--include-all/--no-include-all\", default=False)\r\ndef download_artifacts(run_id, artifact_path, artifact_uri, include_all):\r\n    \"\"\"\r\n    Download an artifact file or directory to a local directory.\r\n    The output is the name of the file or directory on the local disk.\r\n\r\n    The ``include-all`` flag allows users to pull all artifacts from a\r\n    run using a relative model uri like models:/<model>/Staging\r\n\r\n    Either ``--run-id`` or ``--artifact-uri`` must be provided.\r\n    \"\"\"\r\n    if run_id is None and artifact_uri is None:\r\n        _logger.error(\"Either ``--run-id`` or ``--artifact-uri`` must be provided.\")\r\n        sys.exit(1)\r\n\r\n    if run_id is not None and not include_all:\r\n        _logger.error(\"The ``-no-include-all`` flag only works with ``--artifact-uri``\")\r\n        sys.exit(1)\r\n\r\n    if artifact_uri is not None:\r\n        print(_download_artifact_from_uri(artifact_uri, include_all=include_all))\r\n        return\r\n\r\n    artifact_path = artifact_path if artifact_path is not None else \"\"\r\n    store = _get_store()\r\n    artifact_uri = store.get_run(run_id).info.artifact_uri\r\n    artifact_repo = get_artifact_repository(artifact_uri)\r\n    artifact_location = artifact_repo.download_artifacts(artifact_path)\r\n    print(artifact_location)\r\n```\r\n\r\n**2.  Adjust how this flag is handled in `_download_artifact_from_uri`**\r\n```Python\r\ndef _download_artifact_from_uri(artifact_uri, output_path=None, include_all=False):\r\n    \"\"\"\r\n    :param artifact_uri: The *absolute* URI of the artifact to download.\r\n    :param output_path: The local filesystem path to which to download the artifact. If unspecified,\r\n                        a local output path will be created.\r\n    \"\"\"\r\n    if os.path.exists(artifact_uri):\r\n        if os.name != \"nt\":\r\n            # If we're dealing with local files, just reference the direct pathing.\r\n            # non-nt-based file systems can directly reference path information, while nt-based\r\n            # systems need to url-encode special characters in directory listings to be able to\r\n            # resolve them (i.e., spaces converted to %20 within a file name or path listing)\r\n            root_uri = os.path.dirname(artifact_uri)\r\n            artifact_path = os.path.basename(artifact_uri)\r\n            return get_artifact_repository(artifact_uri=root_uri).download_artifacts(\r\n                artifact_path=artifact_path, dst_path=output_path\r\n            )\r\n        else:  # if we're dealing with nt-based systems, we need to utilize pathname2url to encode.\r\n            artifact_uri = path_to_local_file_uri(artifact_uri)\r\n\r\n    parsed_uri = urllib.parse.urlparse(str(artifact_uri))\r\n    prefix = \"\"\r\n    if parsed_uri.scheme and not parsed_uri.path.startswith(\"/\"):\r\n        # relative path is a special case, urllib does not reconstruct it properly\r\n        prefix = parsed_uri.scheme + \":\"\r\n        parsed_uri = parsed_uri._replace(scheme=\"\")\r\n\r\n    # For models:/ URIs, it doesn't make sense to initialize a ModelsArtifactRepository with only\r\n    # the model name portion of the URI, then call download_artifacts with the version info.\r\n    if ModelsArtifactRepository.is_models_uri(artifact_uri):\r\n        # Prototyped change would be here\r\n        if include_all:\r\n            model_only_artifact_uri = ModelsArtifactRepository.get_underlying_uri(artifact_uri)\r\n            artifact_uri = model_only_artifact_uri.strip(\"/model\")\r\n        root_uri = artifact_uri\r\n        artifact_path = \"\"\r\n    else:\r\n        artifact_path = posixpath.basename(parsed_uri.path)\r\n        parsed_uri = parsed_uri._replace(path=posixpath.dirname(parsed_uri.path))\r\n        root_uri = prefix + urllib.parse.urlunparse(parsed_uri)\r\n\r\n    return get_artifact_repository(artifact_uri=root_uri).download_artifacts(\r\n        artifact_path=artifact_path, dst_path=output_path\r\n    )\r\n\r\n```\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5241/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/5241/timeline","performed_via_github_app":null,"state_reason":null}