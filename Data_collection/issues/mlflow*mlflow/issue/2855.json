{"url":"https://api.github.com/repos/mlflow/mlflow/issues/2855","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/2855/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/2855/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/2855/events","html_url":"https://github.com/mlflow/mlflow/issues/2855","id":620526084,"node_id":"MDU6SXNzdWU2MjA1MjYwODQ=","number":2855,"title":"[FR] Set content type and encoding on logged artifacts (s3)","user":{"login":"hajapy","id":21218230,"node_id":"MDQ6VXNlcjIxMjE4MjMw","avatar_url":"https://avatars.githubusercontent.com/u/21218230?v=4","gravatar_id":"","url":"https://api.github.com/users/hajapy","html_url":"https://github.com/hajapy","followers_url":"https://api.github.com/users/hajapy/followers","following_url":"https://api.github.com/users/hajapy/following{/other_user}","gists_url":"https://api.github.com/users/hajapy/gists{/gist_id}","starred_url":"https://api.github.com/users/hajapy/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hajapy/subscriptions","organizations_url":"https://api.github.com/users/hajapy/orgs","repos_url":"https://api.github.com/users/hajapy/repos","events_url":"https://api.github.com/users/hajapy/events{/privacy}","received_events_url":"https://api.github.com/users/hajapy/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1893057631,"node_id":"MDU6TGFiZWwxODkzMDU3NjMx","url":"https://api.github.com/repos/mlflow/mlflow/labels/Acknowledged","name":"Acknowledged","color":"f9d0c4","default":false,"description":"This issue has been read and acknowledged by the MLflow admins."},{"id":2022845866,"node_id":"MDU6TGFiZWwyMDIyODQ1ODY2","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/artifacts","name":"area/artifacts","color":"48eabc","default":false,"description":"Artifact stores and artifact logging"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-05-18T21:47:56Z","updated_at":"2020-06-05T22:57:50Z","closed_at":"2020-06-05T22:57:50Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\nAllow content metadata to be set (by caller) by log_artifact calls for the S3ArtifactRepository, and guess the type if not given.\r\n\r\n## Motivation\r\nCurrently, all artifacts are treated as binary/octet-stream in s3. This means our browsers are unable to help view the artifacts even if they are eg. images, or text files, or other files they can display nicely -- they will always just download. This applies to pre-signed urls generated for these objects, so generally including these in any web interfaces leads to a poor user experience. \r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [x] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for\r\nModel Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [x] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n\r\n## Details\r\nThere is a relatively simple solution if we only want to tackle s3, but there are potential design considerations if this would be extended beyond s3, so I would like some input before opening a PR. One approach to this would be:\r\n\r\n1. Extend log_artifact signature to allow extra, optional kwargs: content_type, content_encoding.\r\n2. If given, respect the given values, and set these in the ExtraArgs dict: https://github.com/mlflow/mlflow/blob/18eacdd9bde4e693942ff94882fb3da322b593c0/mlflow/store/artifact/s3_artifact_repo.py#L53-L57\r\n\r\nWe would merge these values with those given by `get_s3_file_upload_extra_args()`. \r\n\r\n3. If not given, use stdlib `mimetypes.guess_type` to guess these values, and set them:\r\n\r\n```\r\ncontent_type, content_encoding = guess_type(local_file)\r\nif content_type is not None:\r\n    extra_args['ContentType'] = content_type\r\nif content_encoding is not None:\r\n    extra_args['ContentEncoding'] = content_encoding\r\n```\r\n\r\nThe open questions are:\r\n\r\n- Is this change the log_artifact signature acceptable?\r\n- Can the behaviour be to always guess the content type (awscli does this for cp command)?\r\n- Would adding this to s3 necessitate doing so for other artifact repository types?","closed_by":{"login":"aarondav","id":1400247,"node_id":"MDQ6VXNlcjE0MDAyNDc=","avatar_url":"https://avatars.githubusercontent.com/u/1400247?v=4","gravatar_id":"","url":"https://api.github.com/users/aarondav","html_url":"https://github.com/aarondav","followers_url":"https://api.github.com/users/aarondav/followers","following_url":"https://api.github.com/users/aarondav/following{/other_user}","gists_url":"https://api.github.com/users/aarondav/gists{/gist_id}","starred_url":"https://api.github.com/users/aarondav/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aarondav/subscriptions","organizations_url":"https://api.github.com/users/aarondav/orgs","repos_url":"https://api.github.com/users/aarondav/repos","events_url":"https://api.github.com/users/aarondav/events{/privacy}","received_events_url":"https://api.github.com/users/aarondav/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/2855/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/2855/timeline","performed_via_github_app":null,"state_reason":"completed"}