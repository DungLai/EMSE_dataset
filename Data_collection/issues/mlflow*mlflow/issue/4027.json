{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4027","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/4027/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/4027/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/4027/events","html_url":"https://github.com/mlflow/mlflow/issues/4027","id":795208074,"node_id":"MDU6SXNzdWU3OTUyMDgwNzQ=","number":4027,"title":"[FR] Streaming/pre-signing artifacts","user":{"login":"htgislason","id":59838884,"node_id":"MDQ6VXNlcjU5ODM4ODg0","avatar_url":"https://avatars.githubusercontent.com/u/59838884?v=4","gravatar_id":"","url":"https://api.github.com/users/htgislason","html_url":"https://github.com/htgislason","followers_url":"https://api.github.com/users/htgislason/followers","following_url":"https://api.github.com/users/htgislason/following{/other_user}","gists_url":"https://api.github.com/users/htgislason/gists{/gist_id}","starred_url":"https://api.github.com/users/htgislason/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/htgislason/subscriptions","organizations_url":"https://api.github.com/users/htgislason/orgs","repos_url":"https://api.github.com/users/htgislason/repos","events_url":"https://api.github.com/users/htgislason/events{/privacy}","received_events_url":"https://api.github.com/users/htgislason/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022845866,"node_id":"MDU6TGFiZWwyMDIyODQ1ODY2","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/artifacts","name":"area/artifacts","color":"48eabc","default":false,"description":"Artifact stores and artifact logging"},{"id":2022849295,"node_id":"MDU6TGFiZWwyMDIyODQ5Mjk1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/tracking","name":"area/tracking","color":"48eabc","default":false,"description":"Tracking service, tracking client APIs, autologging"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-01-27T15:36:04Z","updated_at":"2021-01-27T15:36:21Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Thank you for submitting a feature request. **Before proceeding, please review MLflow's [Issue Policy for feature requests](https://www.github.com/mlflow/mlflow/blob/master/ISSUE_POLICY.md#feature-requests) and the [MLflow Contributing Guide](https://github.com/mlflow/mlflow/blob/master/CONTRIBUTING.rst)**.\r\n\r\n**Please fill in this feature request template to ensure a timely and thorough response.**\r\n\r\n## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nAllow for streaming an artifact or redirecting the browser downloading an artifact through the mlflow tracking ui using a pre-signed url to the resource.\r\n\r\n## Motivation\r\n\r\nCurrently, when downloading artifacts through the get-artifact api route on the MLFlow Tracking server, the artifact is first downloaded to the tracking server and stored as a temporary file. Then, it is sent as an attachment for download to the web browser.\r\n\r\nDue to this temporary storage, if the tracking server is run as a web server, the web server will eventually run out of disk space. \r\n\r\nIt is hard to go around this issue without patching mlflow, as there doesn't seem to be a way to configure mlflow to use pre-signed urls or to stream files from s3 to the user (without storing a temporary copy on the tracking server).\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [x] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [x] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nI was inspired by [this TODO](https://github.com/mlflow/mlflow/blob/v1.13.1/mlflow/store/artifact/artifact_repo.py#L81) in the code base to try to implement a pre-signed url solution. download_artifacts could return a dictionary of pre-signed urls for all items in a folder if a folder is requested for a download, or a single pre-signed url to the single resource being requested for download.\r\n\r\nHowever, changing download_artifacts in this way seems to break previewing artifacts on the tracking server. I am guessing this is due to the fact previewing an artifact in the UI normally downloads the file(s) using download_artifacts.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4027/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/4027/timeline","performed_via_github_app":null,"state_reason":null}