{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4484","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/4484/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/4484/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/4484/events","html_url":"https://github.com/mlflow/mlflow/issues/4484","id":925407532,"node_id":"MDU6SXNzdWU5MjU0MDc1MzI=","number":4484,"title":"[FR] Serve REST API endpoint under static prefix","user":{"login":"ciela","id":1794074,"node_id":"MDQ6VXNlcjE3OTQwNzQ=","avatar_url":"https://avatars.githubusercontent.com/u/1794074?v=4","gravatar_id":"","url":"https://api.github.com/users/ciela","html_url":"https://github.com/ciela","followers_url":"https://api.github.com/users/ciela/followers","following_url":"https://api.github.com/users/ciela/following{/other_user}","gists_url":"https://api.github.com/users/ciela/gists{/gist_id}","starred_url":"https://api.github.com/users/ciela/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ciela/subscriptions","organizations_url":"https://api.github.com/users/ciela/orgs","repos_url":"https://api.github.com/users/ciela/repos","events_url":"https://api.github.com/users/ciela/events{/privacy}","received_events_url":"https://api.github.com/users/ciela/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2237250735,"node_id":"MDU6TGFiZWwyMjM3MjUwNzM1","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/server-infra","name":"area/server-infra","color":"48eabc","default":false,"description":"MLflow Tracking server backend"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-06-19T14:40:19Z","updated_at":"2022-10-14T13:28:37Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [x] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nIs there any plan to serve rest api endpoints `/api` under static prefix? With the path of `/ajax-api` I can use the api under the static prefix (cf. https://github.com/mlflow/mlflow/pull/1413#pullrequestreview-252098403 ), but this path seems not called from mlflow client (because of [this const value](https://github.com/mlflow/mlflow/blob/1904e3631569b687dd3cde5e72b7d13685b4d490/mlflow/utils/rest_utils.py#L18)).\r\n\r\nSo I cannot specify tracking uri with static prefix in mlflow client, even though mlflow server is running with static prefix. For example, let mlflow server is running with this command: `mlflow server --static-prefix=/mlflow`.  I can open the web ui with this url `http://localhost:5000/mlflow` without any problems. But in order to send metrics to the mlflow server during the training routine, the tracking uri is needed to set to `http://localhost:5000/` without `/mlflow` but with just a root path `/` since the client internally calls `/api/2.0` endpoint under the root path (if with static prefix `/mlflow`, this causes 404 not found).\r\n\r\nIf root path is accessible directly, of course this is ok. But in the environment which is not allowed to access root context (e.g. behind web proxy or already used for the other services), some path rewrite processes will be needed to serve the api.\r\n\r\n## Motivation\r\n\r\n- What is the use case for this feature?\r\n    - When mlflow server is running with a static prefix.\r\n- Why is this use case valuable to support for MLflow users in general?\r\n    - They can send metrics to the mlflow server using the mlflow client even if the root path is inaccessible or already used.\r\n- Why is this use case valuable to support your project(s) or organization?\r\n    - We have been managing personal mlflow microservices behind of ingress for routing on GKE kubernetes, but GKE ingress has no functionality of path rewriting.\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\n    - Same as above.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [x] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nI think the rest api can be served with prefix by adding a command line option like `--restapi-prefix`. The implementation proposal and the command line example are as follows:\r\n\r\nProposal: [ciela@2ceecd8](https://github.com/ciela/mlflow/commit/2ceecd894c9f3ad220f953d9f15334e877426282)\r\nUse cases:\r\n\r\n```bash\r\n# web ui and rest api are accessible under same static prefix `/mlflow1` \r\nmlflow server --static-prefix=/mlflow1 --restapi-prefix=/mlflow1\r\n\r\n# web ui is accessible under prefix `/mlflow1` and rest api is accessible under `/mlflow2`\r\nmlflow server --static-prefix=/mlflow1 --restapi-prefix=/mlflow2\r\n\r\n# web ui is accessible under prefix `/mlflow1` and rest api is accessible under `/` (just as usual)\r\nmlflow server --static-prefix=/mlflow1\r\n```\r\n\r\nHere are the other possible ways:\r\n\r\n- Append rest api with static prefix to endpoints list (like as `/ajax-api`)\r\n  - append `_add_static_prefix(\"/api/2.0{}\".format(base_path))` to the following line\r\n  - https://github.com/mlflow/mlflow/blob/1904e3631569b687dd3cde5e72b7d13685b4d490/mlflow/server/handlers.py#L814\r\n- Make api endpoint selectable in mlflow client (maybe via environment variables?)\r\n  - `/api/2.0` or `/ajax-api/2.0`\r\n  - https://github.com/mlflow/mlflow/blob/1904e3631569b687dd3cde5e72b7d13685b4d490/mlflow/utils/rest_utils.py#L18","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4484/reactions","total_count":12,"+1":12,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/4484/timeline","performed_via_github_app":null,"state_reason":null}