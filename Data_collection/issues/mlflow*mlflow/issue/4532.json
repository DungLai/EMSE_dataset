{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4532","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/4532/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/4532/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/4532/events","html_url":"https://github.com/mlflow/mlflow/issues/4532","id":937319867,"node_id":"MDU6SXNzdWU5MzczMTk4Njc=","number":4532,"title":"[FR] MFlow log_model should accept functions for loader_module","user":{"login":"jamaliki","id":39654543,"node_id":"MDQ6VXNlcjM5NjU0NTQz","avatar_url":"https://avatars.githubusercontent.com/u/39654543?v=4","gravatar_id":"","url":"https://api.github.com/users/jamaliki","html_url":"https://github.com/jamaliki","followers_url":"https://api.github.com/users/jamaliki/followers","following_url":"https://api.github.com/users/jamaliki/following{/other_user}","gists_url":"https://api.github.com/users/jamaliki/gists{/gist_id}","starred_url":"https://api.github.com/users/jamaliki/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jamaliki/subscriptions","organizations_url":"https://api.github.com/users/jamaliki/orgs","repos_url":"https://api.github.com/users/jamaliki/repos","events_url":"https://api.github.com/users/jamaliki/events{/privacy}","received_events_url":"https://api.github.com/users/jamaliki/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022848043,"node_id":"MDU6TGFiZWwyMDIyODQ4MDQz","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/models","name":"area/models","color":"48eabc","default":false,"description":"MLmodel format, model serialization/deserialization, flavors"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-07-05T19:20:33Z","updated_at":"2021-07-05T19:20:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Please fill in this feature request template to ensure a timely and thorough response.**\r\n\r\n## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ ] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nI feel like the current solution for passing loader_module's as a string that importlib.importmodule is run on can be amended to also allow for directly adding the _load_pyfunc function as an object to the model as it is being saved. This way the loader_module is also more robust because it doesn't matter if the original function is changed or moved.\r\n\r\n## Motivation\r\n- What is the use case for this feature? The use case is for model logging.\r\n- Why is this use case valuable to support for MLflow users in general? It is safer and more robust.\r\n- Why is this use case valuable to support for your project(s) or organization? It allows us to log models with a more Pythonic and safe to change way.\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient) Because we must pass in a string with the exact path to the loader_module.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [x] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4532/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/4532/timeline","performed_via_github_app":null,"state_reason":null}