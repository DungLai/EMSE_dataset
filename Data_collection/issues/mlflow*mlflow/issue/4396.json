{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4396","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/4396/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/4396/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/4396/events","html_url":"https://github.com/mlflow/mlflow/issues/4396","id":902616283,"node_id":"MDU6SXNzdWU5MDI2MTYyODM=","number":4396,"title":"[FR] Allow a registered model to be both Staging and Production","user":{"login":"mackinleysmith","id":1738501,"node_id":"MDQ6VXNlcjE3Mzg1MDE=","avatar_url":"https://avatars.githubusercontent.com/u/1738501?v=4","gravatar_id":"","url":"https://api.github.com/users/mackinleysmith","html_url":"https://github.com/mackinleysmith","followers_url":"https://api.github.com/users/mackinleysmith/followers","following_url":"https://api.github.com/users/mackinleysmith/following{/other_user}","gists_url":"https://api.github.com/users/mackinleysmith/gists{/gist_id}","starred_url":"https://api.github.com/users/mackinleysmith/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mackinleysmith/subscriptions","organizations_url":"https://api.github.com/users/mackinleysmith/orgs","repos_url":"https://api.github.com/users/mackinleysmith/repos","events_url":"https://api.github.com/users/mackinleysmith/events{/privacy}","received_events_url":"https://api.github.com/users/mackinleysmith/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1470945519,"node_id":"MDU6TGFiZWwxNDcwOTQ1NTE5","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/uiux","name":"area/uiux","color":"ede978","default":false,"description":"Front-end, user experience, plotting, JavaScript, JavaScript dev server"},{"id":2022847714,"node_id":"MDU6TGFiZWwyMDIyODQ3NzE0","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/model-registry","name":"area/model-registry","color":"48eabc","default":false,"description":"Model registry, model registry APIs, and the fluent client calls for model registry"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-05-26T16:07:35Z","updated_at":"2022-04-07T07:13:10Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [x] Yes. I can contribute this feature independently.\r\n- [x] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\nTL;DR: transitioning a model from staging to production causes the URI `models:/x/Staging` to break. In my use case, ideally a model could remain in Staging when it is also in Production.\r\n\r\nHello MLflow team! I absolutely adore this project and am getting tons of utility out of it. One thing that feels a little funky to me is that in the model registry, a model can only be in one stage at a time, so if I promote a model to Production, it can no longer be Staging. I would like to open a discussion around the design of this single stage system, because it's quite possible that I am simply misunderstanding something and I certainly do not have the full context on the motivations behind the choices made by your team. If it turns out that we are in agreement, I would be happy to spend some effort on putting a PR together to enact the system I'm envisioning.\r\n\r\n\r\n## Motivation\r\nI would like to be able to use the stage feature in such a way that a new model can be tested as \"Staging\" and then transitioned to \"Production\", but still serve as \"Staging\". In my use case, we run Flask apps that load models from the MLflow model registry. For each model, there are two copies of the Flask app, `stg` and `prd`. Currently I use environment variables to pass a model URI to each instance of the Flask app, and then reboot it to pick up whatever model I specified. I am currently kind of limited to using version numbers, and would like to use the really cool stage system, but because transitioning from Staging to Production causes something like `mlflow.pyfunc.load_model('models:/x/Staging')` to throw an exception like `MlflowException: No versions of model with name 'x' and stage 'Staging' found`, I cannot do that without some error handling that would couple my applications to the specific error messaging patterns y'all are using in the current particular version.\r\n\r\nAnother reason this could be useful to the community at large is if we were to implement something like the feature request outlined in https://github.com/mlflow/mlflow/issues/4328. I believe these two features could be quite useful together.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [x] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [x] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [ ] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [ ] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nThinking back to my days of using Heroku, I really liked working with their pipeline promotion feature (for reference: https://devcenter.heroku.com/articles/pipelines#promoting-from-the-heroku-dashboard), and I think the ideology could be applied here. I haven't thought too far into what an implementation would look like, or how best to introduce this in a backwards compatible way. I think first it would be great to discuss it together. Cheers!","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4396/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/4396/timeline","performed_via_github_app":null,"state_reason":null}