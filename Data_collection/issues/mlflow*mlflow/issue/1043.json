{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1043","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/1043/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/1043/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/1043/events","html_url":"https://github.com/mlflow/mlflow/issues/1043","id":425444684,"node_id":"MDU6SXNzdWU0MjU0NDQ2ODQ=","number":1043,"title":"RFC: Proposal to make deleting/restoring experiments and runs idempotent","user":{"login":"acroz","id":1584318,"node_id":"MDQ6VXNlcjE1ODQzMTg=","avatar_url":"https://avatars.githubusercontent.com/u/1584318?v=4","gravatar_id":"","url":"https://api.github.com/users/acroz","html_url":"https://github.com/acroz","followers_url":"https://api.github.com/users/acroz/followers","following_url":"https://api.github.com/users/acroz/following{/other_user}","gists_url":"https://api.github.com/users/acroz/gists{/gist_id}","starred_url":"https://api.github.com/users/acroz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/acroz/subscriptions","organizations_url":"https://api.github.com/users/acroz/orgs","repos_url":"https://api.github.com/users/acroz/repos","events_url":"https://api.github.com/users/acroz/events{/privacy}","received_events_url":"https://api.github.com/users/acroz/received_events","type":"User","site_admin":false},"labels":[{"id":1554650079,"node_id":"MDU6TGFiZWwxNTU0NjUwMDc5","url":"https://api.github.com/repos/mlflow/mlflow/labels/stale","name":"stale","color":"828282","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-03-26T14:15:32Z","updated_at":"2019-11-12T22:50:12Z","closed_at":"2019-11-12T22:50:12Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Currently, attempting to delete an experiment or run will result in a failure if it's already in 'deleted' state. Similarly, restoring an experiment or run will fail if it's already in 'active' state.\r\n\r\nThe logic and resulting exception raised also differs slightly between experiments and runs. Attempting to delete an already-deleted experiment results in an exception with an 'experiment not found' message, while deleting runs disambiguates this case from the run not existing at all and results in an exception with a 'run already deleted' message. Similar behaviour exists for restoring experiments and runs.\r\n\r\nThe demonstrate this, see the logic below for deleting an experiment in the `FileStore`. Here we can see that the call to `_get_experiment_path` filters out deleted runs, and so will raise the 'not found' message exception if the experiment is already deleted:\r\n\r\n```python\r\n    def delete_experiment(self, experiment_id):\r\n        experiment_dir = self._get_experiment_path(experiment_id, ViewType.ACTIVE_ONLY)\r\n        if experiment_dir is None:\r\n            raise MlflowException(\"Could not find experiment with ID %s\" % experiment_id,\r\n                                  databricks_pb2.RESOURCE_DOES_NOT_EXIST)\r\n        mv(experiment_dir, self.trash_folder)\r\n```\r\n\r\nOn the other hand, the delete run method gets the run regardless of its deleted state and then calls `check_run_is_active`:\r\n\r\n```python\r\n    def delete_run(self, run_id):\r\n        run_info = self._get_run_info(run_id)\r\n        if run_info is None:\r\n            raise MlflowException(\"Run '%s' metadata is in invalid state.\" % run_id,\r\n                                  databricks_pb2.INVALID_STATE)\r\n        check_run_is_active(run_info)\r\n        new_info = run_info._copy_with_overrides(lifecycle_stage=LifecycleStage.DELETED)\r\n        self._overwrite_run_info(new_info)\r\n```\r\n\r\n`check_run_is_active` then raises an exception in the case the run is already deleted:\r\n\r\n```python\r\ndef check_run_is_active(run_info):\r\n    if run_info.lifecycle_stage != LifecycleStage.ACTIVE:\r\n        raise MlflowException(\"The run {} must be in 'active' lifecycle_stage.\"\r\n                              .format(run_info.run_uuid))\r\n```\r\n\r\n## Proposal\r\n\r\nImplementing logic to check if the run is already active/deleted and returning suitable conflict type messages adds complexity for seemingly little gain. I propose that the methods for deleting/restoring experiments and runs be made idempotent.\r\n\r\nFrom the user's perspective, this means that two calls to delete a run/experiment like:\r\n\r\n```python\r\nfrom mlflow.tracking.client import MlflowClient\r\nclient = MlflowClient()\r\nclient.delete_experiment(5)\r\nclient.delete_experiment(5)\r\n```\r\n\r\nwhich previously would raise an `MlflowException` on the second `delete_experiment` call, will now run successfully. The end result is also sensible from the user's perspective - the experiment will remain deleted.\r\n\r\nSimilarly, when deleting/restoring an experiment/run from the CLI, multiple calls to delete an experiment will be successful when before the second call would crash out:\r\n\r\n```bash\r\nmlflow experiments delete 5\r\nmlflow experiments delete 5\r\n```","closed_by":{"login":"stale[bot]","id":26384082,"node_id":"MDM6Qm90MjYzODQwODI=","avatar_url":"https://avatars.githubusercontent.com/in/1724?v=4","gravatar_id":"","url":"https://api.github.com/users/stale%5Bbot%5D","html_url":"https://github.com/apps/stale","followers_url":"https://api.github.com/users/stale%5Bbot%5D/followers","following_url":"https://api.github.com/users/stale%5Bbot%5D/following{/other_user}","gists_url":"https://api.github.com/users/stale%5Bbot%5D/gists{/gist_id}","starred_url":"https://api.github.com/users/stale%5Bbot%5D/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stale%5Bbot%5D/subscriptions","organizations_url":"https://api.github.com/users/stale%5Bbot%5D/orgs","repos_url":"https://api.github.com/users/stale%5Bbot%5D/repos","events_url":"https://api.github.com/users/stale%5Bbot%5D/events{/privacy}","received_events_url":"https://api.github.com/users/stale%5Bbot%5D/received_events","type":"Bot","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1043/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/1043/timeline","performed_via_github_app":null,"state_reason":"completed"}