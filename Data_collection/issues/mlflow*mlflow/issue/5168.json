{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5168","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/5168/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/5168/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/5168/events","html_url":"https://github.com/mlflow/mlflow/issues/5168","id":1080902898,"node_id":"I_kwDOCB5Jx85AbUTy","number":5168,"title":"[Question] Repository structure of model flavours","user":{"login":"ecm200","id":34489160,"node_id":"MDQ6VXNlcjM0NDg5MTYw","avatar_url":"https://avatars.githubusercontent.com/u/34489160?v=4","gravatar_id":"","url":"https://api.github.com/users/ecm200","html_url":"https://github.com/ecm200","followers_url":"https://api.github.com/users/ecm200/followers","following_url":"https://api.github.com/users/ecm200/following{/other_user}","gists_url":"https://api.github.com/users/ecm200/gists{/gist_id}","starred_url":"https://api.github.com/users/ecm200/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ecm200/subscriptions","organizations_url":"https://api.github.com/users/ecm200/orgs","repos_url":"https://api.github.com/users/ecm200/repos","events_url":"https://api.github.com/users/ecm200/events{/privacy}","received_events_url":"https://api.github.com/users/ecm200/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-12-15T11:07:16Z","updated_at":"2021-12-15T11:47:50Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Hi,\r\n\r\nThis is more of a question than a bug or a feature.\r\n\r\nOn browsing through the model \"flavour\" modules (e.g. pytorch, paddlepaddle etc.), I note that a majority of the code base is contained within the `__init__.py` file of each flavour module and I feel this is slightly unconventional.\r\n\r\n**Is there a reason for this being implemented this way?**\r\n\r\nIf shortening imports is the reason, then bringing all functions to the module level can be achieved by setting `__all__` attribute in the `__init__.py` file. For example, the pytorch model flavour `mlflow.pytorch` could be done this way, with all functions moved to a `pytorch.py` file in the `mflow/pytorch` folder, the `__init__.py` would look as follows:\r\n\r\n```python\r\nfrom .python import log_model, save_model, get_default_conda_env, get_default_pip_requirements\r\n\r\n__all__ = [log_model, save_model, get_default_conda_env, get_default_pip_requirements]\r\n```\r\n\r\nThis would result in the above functions being accessible through the import:\r\n\r\n`from mlflow.pytorch import log_model`\r\n\r\nJust as though the functions themselves were contained within the `__init__.py` as they currently are.\r\n\r\nFurthermore, breaking the functions out into even more files is possible, as the imports can be collected into the `__init__.py` namespace. If the functions were saved into two separate python file, `model.py` and `env.py`, then they can be called from the pytorch module with the following `__init__.py` structure:\r\n\r\n```python\r\nfrom .model import log_model, save_model\r\nfrom .env import get_default_conda_env, get_default_pip_requirements\r\n\r\n__all__ = [log_model, save_model, get_default_conda_env, get_default_pip_requirements]\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5168/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/5168/timeline","performed_via_github_app":null,"state_reason":null}