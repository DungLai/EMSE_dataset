{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5207","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/5207/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/5207/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/5207/events","html_url":"https://github.com/mlflow/mlflow/issues/5207","id":1090476488,"node_id":"I_kwDOCB5Jx85A_1nI","number":5207,"title":"[FR] Support for nullable numeric types for models with pandas-based signature","user":{"login":"krlng","id":1107509,"node_id":"MDQ6VXNlcjExMDc1MDk=","avatar_url":"https://avatars.githubusercontent.com/u/1107509?v=4","gravatar_id":"","url":"https://api.github.com/users/krlng","html_url":"https://github.com/krlng","followers_url":"https://api.github.com/users/krlng/followers","following_url":"https://api.github.com/users/krlng/following{/other_user}","gists_url":"https://api.github.com/users/krlng/gists{/gist_id}","starred_url":"https://api.github.com/users/krlng/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/krlng/subscriptions","organizations_url":"https://api.github.com/users/krlng/orgs","repos_url":"https://api.github.com/users/krlng/repos","events_url":"https://api.github.com/users/krlng/events{/privacy}","received_events_url":"https://api.github.com/users/krlng/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022847714,"node_id":"MDU6TGFiZWwyMDIyODQ3NzE0","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/model-registry","name":"area/model-registry","color":"48eabc","default":false,"description":"Model registry, model registry APIs, and the fluent client calls for model registry"},{"id":2022848043,"node_id":"MDU6TGFiZWwyMDIyODQ4MDQz","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/models","name":"area/models","color":"48eabc","default":false,"description":"MLmodel format, model serialization/deserialization, flavors"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-12-29T12:07:37Z","updated_at":"2021-12-29T12:08:27Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"**Please fill in this feature request template to ensure a timely and thorough response.**\r\n\r\n## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [ X ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nI am unsure if it is a feature request or a bug:\r\nA mlflow model loaded from the registry using `mlflow.pyfunc` that uses a model_signature based on pandas DataFrames does not accept None values for numeric data types (it works for strings). As pandas is supporting nullable numeric types these days, it would be very helpful if mlflow could also support these.\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [ ] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [x] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [x] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: MLflow Model server, model deployment tools, Spark UDFs\r\n- [ ] `area/server-infra`: MLflow Tracking server backend\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\n## code to show that this currently does not work:\r\n\r\n```\r\nimport mlflow\r\nmlflow.autolog(\r\n    log_model_signatures=True,\r\n    log_models=True\r\n)\r\n\r\nimport numpy as np\r\nfrom sklearn.ensemble import RandomForestClassifier\r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.pipeline import Pipeline \r\nimport pandas as pd\r\n\r\nX_train = pd.DataFrame([[0, 0, np.nan], [np.nan, 1, 1], [np.nan, 0, 0]], columns=[\"c1\", \"c2\", \"c3\"])\r\nY_train = pd.DataFrame([0, 1, 0], columns=[\"label\"])\r\nX_test = pd.DataFrame([[0, 0, np.nan], [0, np.nan, np.nan], [0, 1,0]], columns=[\"c1\", \"c2\", \"c3\"])\r\n\r\n# Create our imputer to replace missing values with the mean e.g.\r\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\r\nclf = RandomForestClassifier(n_estimators=10)\r\n\r\npipe = Pipeline(steps=[(\"prepare\",imp), (\"clr\",clf)])\r\npipe.fit(X_train, Y_train)\r\n\r\npipe.predict(X_test)\r\n# outputs: array([0, 0, 0])\r\n```\r\n\r\nThen go to the registry, register the model of the run and adapt the load_function below accordingly\r\n\r\n```\r\nfrom mlflow.pyfunc import load_model\r\nm = load_model(f\"models:/nan_problem/1\")\r\nprint(m.metadata.signature)\r\n# inputs: \r\n#   ['c1': double, 'c2': long, 'c3': double]\r\n# outputs: \r\n#   [Tensor('int64', (-1,))]\r\n\r\nm.predict(X_test)\r\n# >> MlflowException: Incompatible input types for column c1. Can not safely convert int64 to float64.\r\n\r\n```\r\n\r\n## Stacktrace:\r\n```\r\n\r\n---------------------------------------------------------------------------\r\nMlflowException                           Traceback (most recent call last)\r\n/var/folders/ym/_50l9__942705dh4x6gh9d9r0000gn/T/ipykernel_85093/2409685277.py in <module>\r\n      2 m = load_model(f\"models:/nan_problem/3\")\r\n      3 print(m.metadata.signature)\r\n----> 4 m.predict(X_test)\r\n\r\n~/.pyenv/versions/3.8.7/lib/python3.8/site-packages/mlflow/pyfunc/__init__.py in predict(self, data)\r\n    605         input_schema = self.metadata.get_input_schema()\r\n    606         if input_schema is not None:\r\n--> 607             data = _enforce_schema(data, input_schema)\r\n    608         return self._model_impl.predict(data)\r\n    609 \r\n\r\n~/.pyenv/versions/3.8.7/lib/python3.8/site-packages/mlflow/pyfunc/__init__.py in _enforce_schema(pfInput, input_schema)\r\n    563         _enforce_tensor_schema(pfInput, input_schema)\r\n    564         if input_schema.is_tensor_spec()\r\n--> 565         else _enforce_col_schema(pfInput, input_schema)\r\n    566     )\r\n    567 \r\n\r\n~/.pyenv/versions/3.8.7/lib/python3.8/site-packages/mlflow/pyfunc/__init__.py in _enforce_col_schema(pfInput, input_schema)\r\n    452     new_pfInput = pandas.DataFrame()\r\n    453     for i, x in enumerate(input_names):\r\n--> 454         new_pfInput[x] = _enforce_mlflow_datatype(x, pfInput[x], input_types[i])\r\n    455     return new_pfInput\r\n    456 \r\n\r\n~/.pyenv/versions/3.8.7/lib/python3.8/site-packages/mlflow/pyfunc/__init__.py in _enforce_mlflow_datatype(name, values, t)\r\n    407             )\r\n    408 \r\n--> 409         raise MlflowException(\r\n    410             \"Incompatible input types for column {0}. \"\r\n    411             \"Can not safely convert {1} to {2}.{3}\".format(name, values.dtype, numpy_type, hint)\r\n\r\nMlflowException: Incompatible input types for column c1. Can not safely convert int64 to float64.\r\n```\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/5207/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/5207/timeline","performed_via_github_app":null,"state_reason":null}