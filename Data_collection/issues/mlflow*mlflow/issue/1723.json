{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1723","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/1723/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/1723/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/1723/events","html_url":"https://github.com/mlflow/mlflow/issues/1723","id":479406571,"node_id":"MDU6SXNzdWU0Nzk0MDY1NzE=","number":1723,"title":"[FR] Managed artifacts","user":{"login":"mgbckr","id":1241516,"node_id":"MDQ6VXNlcjEyNDE1MTY=","avatar_url":"https://avatars.githubusercontent.com/u/1241516?v=4","gravatar_id":"","url":"https://api.github.com/users/mgbckr","html_url":"https://github.com/mgbckr","followers_url":"https://api.github.com/users/mgbckr/followers","following_url":"https://api.github.com/users/mgbckr/following{/other_user}","gists_url":"https://api.github.com/users/mgbckr/gists{/gist_id}","starred_url":"https://api.github.com/users/mgbckr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mgbckr/subscriptions","organizations_url":"https://api.github.com/users/mgbckr/orgs","repos_url":"https://api.github.com/users/mgbckr/repos","events_url":"https://api.github.com/users/mgbckr/events{/privacy}","received_events_url":"https://api.github.com/users/mgbckr/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":2022845866,"node_id":"MDU6TGFiZWwyMDIyODQ1ODY2","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/artifacts","name":"area/artifacts","color":"48eabc","default":false,"description":"Artifact stores and artifact logging"},{"id":2022866842,"node_id":"MDU6TGFiZWwyMDIyODY2ODQy","url":"https://api.github.com/repos/mlflow/mlflow/labels/priority/awaiting-more-evidence","name":"priority/awaiting-more-evidence","color":"534cb5","default":false,"description":"Lowest priority. Possibly useful, but not yet enough support to actually get it done."}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-08-11T20:15:16Z","updated_at":"2022-06-02T00:53:51Z","closed_at":"2022-06-02T00:53:51Z","author_association":"NONE","active_lock_reason":null,"body":"# Managed artifacts\r\n## Describe the proposal\r\nThe idea is to support \"managed artifacts\" that allow:\r\n* automatic artifact loading (load artifacts from a previous run replacing otherwise calculated artifacts (e.g., a sampled dataset or a trained neural network)\r\n* automatically handling temporary folders for artifacts during parallel runs (e.g., when you run your script multiple times on the same server)\r\n* central management of loading and logging\r\n* less biolerplate for saving artifacts\r\n\r\nPlease note that this proposal is a rough draft for now to gauge interest. I can go into more depth about specific API specifcations. For a more complete (but by all means not a final version), please see: [mlflowhelper](https://github.com/mgbckr/mlflowhelper)\r\n\r\n### Motivation\r\nI have written a lot of boilerplate code to log and load artifacts. This makes the code error prone and hard to maintain since it obfuscates the actual ML code by lot's of tracking code. The tracking API should be as unintrusive as possible while still giving as much control as necessary. \r\n\r\nIt is possible to implement the proposed functionality as a wrapper (see [mlflowhelper](https://github.com/mgbckr/mlflowhelper)) but I feel like this (or an improved version of this) should be part of the core API to improve the tracking experience.\r\n\r\n### Proposed Changes (Python API only)\r\nBasically, the idea is to introduce an `ArtifactManager`  that eases artifact management. However, I am only going to discuss the changes for the `fluent` API for now. Please note that this is a rough draft with quite a few missing details. For a more complete version please see: [mlflowhelper](https://github.com/mgbckr/mlflowhelper)\r\n\r\n#### Simple artifact management. \r\n\r\nTakes care of logging and deleting the artifact automatically.\r\n```python\r\nfrom matplotlib import pyplot as plt\r\nimport mlflow\r\n\r\nwith mlflow.start_run():\r\n    with mlflow.managed_artifact(\"plot.png\") as artifact:\r\n        fig = plt.figure()\r\n        plt.plot([1,2,3], [1,2,3])\r\n        fig.savefig(artifact.get_path())\r\n```\r\n\r\nSame works on the directory level:\r\n```python\r\nfrom matplotlib import pyplot as plt\r\nimport mlflow\r\n\r\nwith mlflow.start_run():\r\n    with mlflow.managed_artifact_dir(\"plots\") as artifact_dir:\r\n\r\n        # plot 1\r\n        fig = plt.figure()\r\n        plt.plot([1,2,3], [1,2,3])\r\n        fig.savefig(artifact_dir.get_path(\"plot1.png\"))\r\n\r\n        # plot 2\r\n        fig = plt.figure()\r\n        plt.plot([1,2,3], [1,2,3])\r\n        fig.savefig(artifact_dir.get_path(\"plot2.png\"))\r\n```\r\n\r\n#### Artifact loading\r\nArtifact loading allows to load artifacts from previous runs instead of recalcualting them.\r\n```python\r\nimport mlflow\r\nimport pandas as pd\r\n\r\nwith mlflow.start_run():\r\n    mlflow.set_load(run_id=\"e1363f760b1e4ab3a9e93f856f2e9341\", stages=[\"load_data\"]) # activate loading from previous run\r\n    with mlflow.managed_artifact_dir(\"data.csv\", stage=\"load_data\") as artifact:\r\n        if artifact.loaded:\r\n            # load artifact\r\n            data = pd.read_csv(artifact.get_path())\r\n        else:\r\n            # create and save artifact\r\n            data = pd.read_csv(\"/shared/dir/data.csv\").sample(frac=1)\r\n            data.to_csv(artifact.get_path())\r\n```\r\n\r\nSame for directories:\r\n```python\r\nimport mlflow\r\nimport pandas as pd\r\n\r\nmlflow.set_load(run_id=\"e1363f760b1e4ab3a9e93f856f2e9341\", stages=[\"load_data\"]) # activate loading from previous run\r\nwith mlflow.start_run():\r\n    with mlflow.managed_artifact_dir(\"data\", stage=\"load_data\") as artifact_dir:\r\n        train_path = artifact_dir.get_path(\"test.csv\")\r\n        test_path = artifact_dir.get_path(\"train.csv\")\r\n        if artifact_dir.loaded:\r\n            # load artifacts\r\n            train = pd.read_csv(train_path)\r\n            test = pd.read_csv(test_path)\r\n        else:\r\n            data = pd.read_csv(\"/shared/dir/data.csv\").sample(frac=1)\r\n            train = data.iloc[:100,:]\r\n            test = data.iloc[100:,:]\r\n            # save artifacts\r\n            train.to_csv(train_path)\r\n            test.to_csv(test_path)\r\n```\r\n\r\n#### Central logging behavior\r\n\r\n```python\r\nimport mlflow\r\nimport pandas as pd\r\n\r\nwith mlflow.start_run():\r\n\r\n    # activate loading the stage `load_data` from previous run `e1363f760b1e4ab3a9e93f856f2e9341`\r\n    mlflow.set_load(run_id=\"e1363f760b1e4ab3a9e93f856f2e9341\", stages=[\"load_data\"])\r\n\r\n    # deactivate logging the stage `load_data`, in this case for example because it was loaded from a previous run\r\n    mlflow.set_skip_log(stages=[\"load_data\"])\r\n\r\n    with mlflow.managed_artifact_dir(\"data\", stage=\"load_data\") as artifact_dir:\r\n        train_path = artifact_dir.get_path(\"test.csv\")\r\n        test_path = artifact_dir.get_path(\"train.csv\")\r\n        if artifact_dir.loaded:\r\n            # load artifacts\r\n            train = pd.read_csv(train_path)\r\n            test = pd.read_csv(test_path)\r\n        else:\r\n            data = pd.read_csv(\"/shared/dir/data.csv\").sample(frac=1)\r\n            train = data.iloc[:100,:]\r\n            test = data.iloc[100:,:]\r\n            # save artifacts\r\n            train.to_csv(train_path)\r\n            test.to_csv(test_path)\r\n```\r\n\r\n#### Notes\r\nThere are many things that are up for discussion and which can be improved in this proposal. Also some details are missing. Here are some pointers:\r\n* API simplifications for multiple artifacts by returning paths instead of a \"managed resource\" object\r\n* loading across experiments\r\n* loading from external sources\r\n* behavior for nested runs (at the moment this can be easily covered manually, but again, adds biolderplate code)\r\n* load different stages from more than one run\r\n* tracking loading behavior\r\n* and on and on ... ;) ","closed_by":{"login":"dbczumar","id":39497902,"node_id":"MDQ6VXNlcjM5NDk3OTAy","avatar_url":"https://avatars.githubusercontent.com/u/39497902?v=4","gravatar_id":"","url":"https://api.github.com/users/dbczumar","html_url":"https://github.com/dbczumar","followers_url":"https://api.github.com/users/dbczumar/followers","following_url":"https://api.github.com/users/dbczumar/following{/other_user}","gists_url":"https://api.github.com/users/dbczumar/gists{/gist_id}","starred_url":"https://api.github.com/users/dbczumar/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dbczumar/subscriptions","organizations_url":"https://api.github.com/users/dbczumar/orgs","repos_url":"https://api.github.com/users/dbczumar/repos","events_url":"https://api.github.com/users/dbczumar/events{/privacy}","received_events_url":"https://api.github.com/users/dbczumar/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/1723/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/1723/timeline","performed_via_github_app":null,"state_reason":"completed"}