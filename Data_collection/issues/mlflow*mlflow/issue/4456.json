{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4456","repository_url":"https://api.github.com/repos/mlflow/mlflow","labels_url":"https://api.github.com/repos/mlflow/mlflow/issues/4456/labels{/name}","comments_url":"https://api.github.com/repos/mlflow/mlflow/issues/4456/comments","events_url":"https://api.github.com/repos/mlflow/mlflow/issues/4456/events","html_url":"https://github.com/mlflow/mlflow/issues/4456","id":921201521,"node_id":"MDU6SXNzdWU5MjEyMDE1MjE=","number":4456,"title":"[FR] Native Java or REST support for downloading mlflow artifacts from Databricks","user":{"login":"Oduig","id":3661031,"node_id":"MDQ6VXNlcjM2NjEwMzE=","avatar_url":"https://avatars.githubusercontent.com/u/3661031?v=4","gravatar_id":"","url":"https://api.github.com/users/Oduig","html_url":"https://github.com/Oduig","followers_url":"https://api.github.com/users/Oduig/followers","following_url":"https://api.github.com/users/Oduig/following{/other_user}","gists_url":"https://api.github.com/users/Oduig/gists{/gist_id}","starred_url":"https://api.github.com/users/Oduig/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Oduig/subscriptions","organizations_url":"https://api.github.com/users/Oduig/orgs","repos_url":"https://api.github.com/users/Oduig/repos","events_url":"https://api.github.com/users/Oduig/events{/privacy}","received_events_url":"https://api.github.com/users/Oduig/received_events","type":"User","site_admin":false},"labels":[{"id":955449434,"node_id":"MDU6TGFiZWw5NTU0NDk0MzQ=","url":"https://api.github.com/repos/mlflow/mlflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"},{"id":1673521876,"node_id":"MDU6TGFiZWwxNjczNTIxODc2","url":"https://api.github.com/repos/mlflow/mlflow/labels/language/java","name":"language/java","color":"349cd8","default":false,"description":"Java APIs and clients"},{"id":2022845866,"node_id":"MDU6TGFiZWwyMDIyODQ1ODY2","url":"https://api.github.com/repos/mlflow/mlflow/labels/area/artifacts","name":"area/artifacts","color":"48eabc","default":false,"description":"Artifact stores and artifact logging"},{"id":2114036915,"node_id":"MDU6TGFiZWwyMTE0MDM2OTE1","url":"https://api.github.com/repos/mlflow/mlflow/labels/integrations/databricks","name":"integrations/databricks","color":"ffbce5","default":false,"description":"Databricks integrations"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-06-15T09:33:53Z","updated_at":"2021-07-16T14:10:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"## Willingness to contribute\r\nThe MLflow Community encourages new feature contributions. Would you or another member of your organization be willing to contribute an implementation of this feature (either as an MLflow Plugin or an enhancement to the MLflow code base)?\r\n\r\n- [X] Yes. I can contribute this feature independently.\r\n- [ ] Yes. I would be willing to contribute this feature with guidance from the MLflow community.\r\n- [ ] No. I cannot contribute this feature at this time.\r\n\r\n## Proposal Summary\r\n\r\nAs mentioned in #1515, there is a Java implementation for downloading artifacts. The current implementation invokes the python library which invokes the CLI. This mechanism forces anyone using this Java library to add Python to their runtime environment. Especially for production releases, this is suboptimal. It makes a Docker setup more complex and adds overhead.\r\n\r\nThe proposal is to provide native support for downloading models in either the Java library or as documented REST endpoints.\r\n\r\n## Motivation\r\n\r\n- What is the use case for this feature?\r\nA Java library that depends on python is not really a Java library! This feature eliminates a run-time dependency on the Python ecosystem for users looking to download MLflow artifacts from Databricks.\r\n\r\n- Why is this use case valuable to support for MLflow users in general?\r\nEliminating the need to have a container that hosts both a Java and a Python run-time environment makes containers more stable, easier to understand and analyze.\r\n\r\n- Why is this use case valuable to support for your project(s) or organization?\r\nAs an organization we try to follow best practices, common standards and make things easy to operate. Using the current Java library would involve a non-standard setup that is more difficult to operate. We feel like the addition of Python is unwarranted considering the purpose that it serves (i.e. firing two regular HTTP requests).\r\n\r\n- Why is it currently difficult to achieve this use case? (please be as specific as possible about why related MLflow features and components are insufficient)\r\nCompared to our current setup, which uses a basic Java container, we would need to install both Java and Python into the container that runs our production workload. Both of these use resources (CPU and memory) so they require additional tuning to make sure both have enough resources to work with while not taking too much that the other process runs out of resources. Monitoring also becomes more involved because we now have two processes to monitor inside that container.\r\n\r\n\r\n### What component(s), interfaces, languages, and integrations does this feature affect?\r\nComponents \r\n- [X] `area/artifacts`: Artifact stores and artifact logging\r\n- [ ] `area/build`: Build and test infrastructure for MLflow\r\n- [ ] `area/docs`: MLflow documentation pages\r\n- [ ] `area/examples`: Example code\r\n- [ ] `area/model-registry`: Model Registry service, APIs, and the fluent client calls for Model Registry\r\n- [ ] `area/models`: MLmodel format, model serialization/deserialization, flavors\r\n- [ ] `area/projects`: MLproject format, project running backends\r\n- [ ] `area/scoring`: Local serving, model deployment tools, spark UDFs\r\n- [ ] `area/server-infra`: MLflow server, JavaScript dev server\r\n- [ ] `area/tracking`: Tracking Service, tracking client APIs, autologging\r\n\r\nInterfaces\r\n- [ ] `area/uiux`: Front-end, user experience, JavaScript, plotting\r\n- [ ] `area/docker`: Docker use across MLflow's components, such as MLflow Projects and MLflow Models\r\n- [ ] `area/sqlalchemy`: Use of SQLAlchemy in the Tracking Service or Model Registry\r\n- [ ] `area/windows`: Windows support\r\n\r\nLanguages \r\n- [ ] `language/r`: R APIs and clients\r\n- [X] `language/java`: Java APIs and clients\r\n- [ ] `language/new`: Proposals for new client languages\r\n\r\nIntegrations\r\n- [ ] `integrations/azure`: Azure and Azure ML integrations\r\n- [ ] `integrations/sagemaker`: SageMaker integrations\r\n- [X] `integrations/databricks`: Databricks integrations\r\n\r\n## Details\r\n\r\nWe did some digging to figure out how the Python CLI actually downloads files from Databricks. Upon inspection, we found that it is very simple: it uses an undocumented REST endpoint at `/api/2.0/mlflow/artifacts/credentials-for-read` which returns a direct URL (including STS credentials) to the underlying S3 file.\r\n\r\nWe are willing to contribute a change to `mlflow` to invoke this particular endpoint directly from the Java library, rather than deferring to the Python CLI which in turn invokes the same endpoint.\r\n\r\nAn alternative option, perhaps easier, is to document the existence of the `credentials-for-read` endpoint and allow it to be used by REST clients. This would allow anyone to download mlflow models regardless of the language/library used.\r\n\r\nPlease let me know which option you prefer, and if you are willing to accept a contribution that solves this feature request.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/mlflow/mlflow/issues/4456/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mlflow/mlflow/issues/4456/timeline","performed_via_github_app":null,"state_reason":null}