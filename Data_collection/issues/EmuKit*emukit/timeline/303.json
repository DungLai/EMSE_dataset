[{"url":"https://api.github.com/repos/EmuKit/emukit/issues/comments/634674470","html_url":"https://github.com/EmuKit/emukit/issues/303#issuecomment-634674470","issue_url":"https://api.github.com/repos/EmuKit/emukit/issues/303","id":634674470,"node_id":"MDEyOklzc3VlQ29tbWVudDYzNDY3NDQ3MA==","user":{"login":"mmahsereci","id":42842079,"node_id":"MDQ6VXNlcjQyODQyMDc5","avatar_url":"https://avatars.githubusercontent.com/u/42842079?v=4","gravatar_id":"","url":"https://api.github.com/users/mmahsereci","html_url":"https://github.com/mmahsereci","followers_url":"https://api.github.com/users/mmahsereci/followers","following_url":"https://api.github.com/users/mmahsereci/following{/other_user}","gists_url":"https://api.github.com/users/mmahsereci/gists{/gist_id}","starred_url":"https://api.github.com/users/mmahsereci/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmahsereci/subscriptions","organizations_url":"https://api.github.com/users/mmahsereci/orgs","repos_url":"https://api.github.com/users/mmahsereci/repos","events_url":"https://api.github.com/users/mmahsereci/events{/privacy}","received_events_url":"https://api.github.com/users/mmahsereci/received_events","type":"User","site_admin":false},"created_at":"2020-05-27T13:49:56Z","updated_at":"2020-05-27T13:49:56Z","author_association":"CONTRIBUTOR","body":"Thanks for the question @KirillShmilovich ! \r\n@javiergonzalezh , @aaronkl has one of you BO experts thought about this and has some guidance?","reactions":{"url":"https://api.github.com/repos/EmuKit/emukit/issues/comments/634674470/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"mmahsereci","id":42842079,"node_id":"MDQ6VXNlcjQyODQyMDc5","avatar_url":"https://avatars.githubusercontent.com/u/42842079?v=4","gravatar_id":"","url":"https://api.github.com/users/mmahsereci","html_url":"https://github.com/mmahsereci","followers_url":"https://api.github.com/users/mmahsereci/followers","following_url":"https://api.github.com/users/mmahsereci/following{/other_user}","gists_url":"https://api.github.com/users/mmahsereci/gists{/gist_id}","starred_url":"https://api.github.com/users/mmahsereci/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmahsereci/subscriptions","organizations_url":"https://api.github.com/users/mmahsereci/orgs","repos_url":"https://api.github.com/users/mmahsereci/repos","events_url":"https://api.github.com/users/mmahsereci/events{/privacy}","received_events_url":"https://api.github.com/users/mmahsereci/received_events","type":"User","site_admin":false}},{"id":3378235192,"node_id":"MDE0Ok1lbnRpb25lZEV2ZW50MzM3ODIzNTE5Mg==","url":"https://api.github.com/repos/EmuKit/emukit/issues/events/3378235192","actor":{"login":"aaronkl","id":5735696,"node_id":"MDQ6VXNlcjU3MzU2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/5735696?v=4","gravatar_id":"","url":"https://api.github.com/users/aaronkl","html_url":"https://github.com/aaronkl","followers_url":"https://api.github.com/users/aaronkl/followers","following_url":"https://api.github.com/users/aaronkl/following{/other_user}","gists_url":"https://api.github.com/users/aaronkl/gists{/gist_id}","starred_url":"https://api.github.com/users/aaronkl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aaronkl/subscriptions","organizations_url":"https://api.github.com/users/aaronkl/orgs","repos_url":"https://api.github.com/users/aaronkl/repos","events_url":"https://api.github.com/users/aaronkl/events{/privacy}","received_events_url":"https://api.github.com/users/aaronkl/received_events","type":"User","site_admin":false},"event":"mentioned","commit_id":null,"commit_url":null,"created_at":"2020-05-27T13:49:56Z","performed_via_github_app":null},{"id":3378235199,"node_id":"MDE1OlN1YnNjcmliZWRFdmVudDMzNzgyMzUxOTk=","url":"https://api.github.com/repos/EmuKit/emukit/issues/events/3378235199","actor":{"login":"aaronkl","id":5735696,"node_id":"MDQ6VXNlcjU3MzU2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/5735696?v=4","gravatar_id":"","url":"https://api.github.com/users/aaronkl","html_url":"https://github.com/aaronkl","followers_url":"https://api.github.com/users/aaronkl/followers","following_url":"https://api.github.com/users/aaronkl/following{/other_user}","gists_url":"https://api.github.com/users/aaronkl/gists{/gist_id}","starred_url":"https://api.github.com/users/aaronkl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aaronkl/subscriptions","organizations_url":"https://api.github.com/users/aaronkl/orgs","repos_url":"https://api.github.com/users/aaronkl/repos","events_url":"https://api.github.com/users/aaronkl/events{/privacy}","received_events_url":"https://api.github.com/users/aaronkl/received_events","type":"User","site_admin":false},"event":"subscribed","commit_id":null,"commit_url":null,"created_at":"2020-05-27T13:49:56Z","performed_via_github_app":null},{"id":3378235207,"node_id":"MDE0Ok1lbnRpb25lZEV2ZW50MzM3ODIzNTIwNw==","url":"https://api.github.com/repos/EmuKit/emukit/issues/events/3378235207","actor":{"login":"javiergonzalezh","id":6853363,"node_id":"MDQ6VXNlcjY4NTMzNjM=","avatar_url":"https://avatars.githubusercontent.com/u/6853363?v=4","gravatar_id":"","url":"https://api.github.com/users/javiergonzalezh","html_url":"https://github.com/javiergonzalezh","followers_url":"https://api.github.com/users/javiergonzalezh/followers","following_url":"https://api.github.com/users/javiergonzalezh/following{/other_user}","gists_url":"https://api.github.com/users/javiergonzalezh/gists{/gist_id}","starred_url":"https://api.github.com/users/javiergonzalezh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javiergonzalezh/subscriptions","organizations_url":"https://api.github.com/users/javiergonzalezh/orgs","repos_url":"https://api.github.com/users/javiergonzalezh/repos","events_url":"https://api.github.com/users/javiergonzalezh/events{/privacy}","received_events_url":"https://api.github.com/users/javiergonzalezh/received_events","type":"User","site_admin":false},"event":"mentioned","commit_id":null,"commit_url":null,"created_at":"2020-05-27T13:49:56Z","performed_via_github_app":null},{"id":3378235212,"node_id":"MDE1OlN1YnNjcmliZWRFdmVudDMzNzgyMzUyMTI=","url":"https://api.github.com/repos/EmuKit/emukit/issues/events/3378235212","actor":{"login":"javiergonzalezh","id":6853363,"node_id":"MDQ6VXNlcjY4NTMzNjM=","avatar_url":"https://avatars.githubusercontent.com/u/6853363?v=4","gravatar_id":"","url":"https://api.github.com/users/javiergonzalezh","html_url":"https://github.com/javiergonzalezh","followers_url":"https://api.github.com/users/javiergonzalezh/followers","following_url":"https://api.github.com/users/javiergonzalezh/following{/other_user}","gists_url":"https://api.github.com/users/javiergonzalezh/gists{/gist_id}","starred_url":"https://api.github.com/users/javiergonzalezh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/javiergonzalezh/subscriptions","organizations_url":"https://api.github.com/users/javiergonzalezh/orgs","repos_url":"https://api.github.com/users/javiergonzalezh/repos","events_url":"https://api.github.com/users/javiergonzalezh/events{/privacy}","received_events_url":"https://api.github.com/users/javiergonzalezh/received_events","type":"User","site_admin":false},"event":"subscribed","commit_id":null,"commit_url":null,"created_at":"2020-05-27T13:49:56Z","performed_via_github_app":null},{"id":3378235225,"node_id":"MDE0Ok1lbnRpb25lZEV2ZW50MzM3ODIzNTIyNQ==","url":"https://api.github.com/repos/EmuKit/emukit/issues/events/3378235225","actor":{"login":"KirillShmilovich","id":40403472,"node_id":"MDQ6VXNlcjQwNDAzNDcy","avatar_url":"https://avatars.githubusercontent.com/u/40403472?v=4","gravatar_id":"","url":"https://api.github.com/users/KirillShmilovich","html_url":"https://github.com/KirillShmilovich","followers_url":"https://api.github.com/users/KirillShmilovich/followers","following_url":"https://api.github.com/users/KirillShmilovich/following{/other_user}","gists_url":"https://api.github.com/users/KirillShmilovich/gists{/gist_id}","starred_url":"https://api.github.com/users/KirillShmilovich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/KirillShmilovich/subscriptions","organizations_url":"https://api.github.com/users/KirillShmilovich/orgs","repos_url":"https://api.github.com/users/KirillShmilovich/repos","events_url":"https://api.github.com/users/KirillShmilovich/events{/privacy}","received_events_url":"https://api.github.com/users/KirillShmilovich/received_events","type":"User","site_admin":false},"event":"mentioned","commit_id":null,"commit_url":null,"created_at":"2020-05-27T13:49:56Z","performed_via_github_app":null},{"id":3378235231,"node_id":"MDE1OlN1YnNjcmliZWRFdmVudDMzNzgyMzUyMzE=","url":"https://api.github.com/repos/EmuKit/emukit/issues/events/3378235231","actor":{"login":"KirillShmilovich","id":40403472,"node_id":"MDQ6VXNlcjQwNDAzNDcy","avatar_url":"https://avatars.githubusercontent.com/u/40403472?v=4","gravatar_id":"","url":"https://api.github.com/users/KirillShmilovich","html_url":"https://github.com/KirillShmilovich","followers_url":"https://api.github.com/users/KirillShmilovich/followers","following_url":"https://api.github.com/users/KirillShmilovich/following{/other_user}","gists_url":"https://api.github.com/users/KirillShmilovich/gists{/gist_id}","starred_url":"https://api.github.com/users/KirillShmilovich/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/KirillShmilovich/subscriptions","organizations_url":"https://api.github.com/users/KirillShmilovich/orgs","repos_url":"https://api.github.com/users/KirillShmilovich/repos","events_url":"https://api.github.com/users/KirillShmilovich/events{/privacy}","received_events_url":"https://api.github.com/users/KirillShmilovich/received_events","type":"User","site_admin":false},"event":"subscribed","commit_id":null,"commit_url":null,"created_at":"2020-05-27T13:49:56Z","performed_via_github_app":null},{"url":"https://api.github.com/repos/EmuKit/emukit/issues/comments/1004588624","html_url":"https://github.com/EmuKit/emukit/issues/303#issuecomment-1004588624","issue_url":"https://api.github.com/repos/EmuKit/emukit/issues/303","id":1004588624,"node_id":"IC_kwDOCMd548474M5Q","user":{"login":"BrunoKM","id":22356384,"node_id":"MDQ6VXNlcjIyMzU2Mzg0","avatar_url":"https://avatars.githubusercontent.com/u/22356384?v=4","gravatar_id":"","url":"https://api.github.com/users/BrunoKM","html_url":"https://github.com/BrunoKM","followers_url":"https://api.github.com/users/BrunoKM/followers","following_url":"https://api.github.com/users/BrunoKM/following{/other_user}","gists_url":"https://api.github.com/users/BrunoKM/gists{/gist_id}","starred_url":"https://api.github.com/users/BrunoKM/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BrunoKM/subscriptions","organizations_url":"https://api.github.com/users/BrunoKM/orgs","repos_url":"https://api.github.com/users/BrunoKM/repos","events_url":"https://api.github.com/users/BrunoKM/events{/privacy}","received_events_url":"https://api.github.com/users/BrunoKM/received_events","type":"User","site_admin":false},"created_at":"2022-01-04T07:44:42Z","updated_at":"2022-01-04T07:44:42Z","author_association":"CONTRIBUTOR","body":"I'd be curious to hear how others approached this topic, but I can chime in with the approach I've been using.\r\n\r\nI've defined a new _batch_ candidate calculator, and a corresponding gradient-based optimizer, that can be used with an analytic batch acquisition function, such as multipoint expected improvement.\r\n\r\nAlso, I need to wrap `MultipointExpectedImprovement` in the below wrapper, since by default it returns the _negated_ expected improvement values, which is in contrast to the other acquisition functions in EmuKit (@apaleyes is this desired, or should there be an issue for this?).\r\n\r\n### Acquisition Wrapper:\r\n```python\r\nclass UnnegatedMultipointExpectedImprovement(MultipointExpectedImprovement):\r\n    \"\"\"\r\n    Multipoint Expected Improvement in EmuKit is negated for some reason.\r\n\r\n    This wrapper un-negates the negations of the multi-point expected improvement.\r\n    \"\"\"\r\n\r\n    def evaluate(self, x: np.ndarray) -> np.ndarray:\r\n        return -super().evaluate(x)\r\n\r\n    def evaluate_with_gradients(self, x: np.ndarray) -> np.ndarray:\r\n        f, f_dx = super().evaluate_with_gradients(x)\r\n        return -f, -f_dx\r\n```\r\n\r\n### Batch Candidate Calculator\r\n```python\r\nclass BatchCandidateCalculator(CandidatePointCalculator):\r\n    \"\"\"Simultaneous point calculator for batch acquisitions.\"\"\"\r\n\r\n    def __init__(\r\n        self,\r\n        acquisition_optimizer: AcquisitionOptimizerBase,\r\n        batch_acquisition: SimultaneousBatchAcquisitionBase,  # base class external to emukit\r\n    ) -> None:\r\n        \"\"\"\r\n\r\n        Args:\r\n            acquisition_optimizer: AcquisitionOptimizer object to optimize the batch acquisition\r\n            simultaneous_batch_acquisition: The batch acquisition function to use to sequentially select\r\n                each of the points for the batch.\r\n        \"\"\"\r\n        self.acquisition_optimizer = acquisition_optimizer\r\n        self.batch_acquisition = batch_acquisition\r\n\r\n    def compute_next_points(self, loop_state: LoopState, context: Optional[Dict] = None) -> np.ndarray:\r\n        \"\"\"Computes a batch of points using moment-matched approximation of q-EI.\r\n\r\n        Args:\r\n            loop_state: Object containing the current state of the loop\r\n            context: it is required to match Emukit's API, but currently ignored since the batch optimizer doesn't support it\r\n\r\n        Returns:\r\n            a batch of points\r\n        \"\"\"\r\n        x_batch, _ = self.acquisition_optimizer.optimize(self.batch_acquisition)\r\n        return x_batch\r\n```\r\n### Batch Optimizer:\r\n```python\r\nclass GradientBatchAcquisitionOptimizer(AcquisitionOptimizerBase):\r\n    \"\"\"\r\n    Optimizes a batch acquisition function using a quasi-Newton method (L-BFGS).\r\n    Can be used for continuous acquisition functions.\r\n\r\n    TODO: This currently doesn't integrate with EmuKit's categorical (context) variable optimization.\r\n    \"\"\"\r\n\r\n    def __init__(\r\n        self, space: ParameterSpace, batch_size: int, n_anchor_batches: int = 1, n_candidate_anchor_batches: int = 100\r\n    ) -> None:\r\n        \"\"\"\r\n        Args:\r\n            space: The parameter space spanning the search problem.\r\n            batch_size: number of points in the batch\r\n            n_anchor_batches: number of anchor batches, from which L-BFGS is started\r\n            n_candidate_anchor_batches: anchor batches are selected by sampling randomly this number of batches\r\n        \"\"\"\r\n        super().__init__(space=space)\r\n        self.batch_size = batch_size\r\n\r\n        if n_anchor_batches > n_candidate_anchor_batches:\r\n            raise ValueError(\r\n                f\"Number of random samples ({n_candidate_anchor_batches}) \"\r\n                f\"must be greater or equal to the number of \"\r\n                f\"anchor batches ({n_anchor_batches}) to be selected.\"\r\n            )\r\n\r\n        self.n_anchor_batches = n_anchor_batches\r\n        self.n_candidate_anchor_batches = n_candidate_anchor_batches\r\n        self._manual_anchor_batches: List[np.ndarray] = []\r\n\r\n    @property\r\n    def manual_anchor_batches(self) -> List[np.ndarray]:\r\n        return self._manual_anchor_batches.copy()\r\n\r\n    @manual_anchor_batches.setter\r\n    def manual_anchor_batches(self, anchor_batches: List[np.ndarray]) -> None:\r\n        self._manual_anchor_batches = anchor_batches\r\n\r\n    def _optimize(self, acquisition: Acquisition, context_manager: ContextManager) -> Tuple[np.ndarray, np.ndarray]:\r\n        \"\"\"\r\n        Implementation of abstract method.\r\n        Taking into account gradients if acquisition supports them.\r\n        See AcquisitionOptimizerBase._optimizer for parameter descriptions.\r\n        \"\"\"\r\n        if len(context_manager.context_space.parameters) != 0:\r\n            raise NotImplementedError\r\n\r\n        # This is only useful when empirical gradients allowed as well:\r\n        # def f(x: np.ndarray) -> float:\r\n        #     return -acquisition.evaluate(np.reshape(x, (self.batch_size, -1)))\r\n\r\n        bounds = context_manager.space.get_bounds() * self.batch_size\r\n\r\n        # Context validation\r\n        if len(context_manager.contextfree_space.parameters) == 0:\r\n            raise ValueError(\"All context variables cannot be fixed when using a batch acquisition.\")\r\n\r\n        if acquisition.has_gradients:\r\n\r\n            # Take negative of acquisition function because they are to be maximised and the optimizers minimise\r\n            # The scipy optimizer only takes flat arrays, so reshape to match the acqusition\r\n            def f_df(x):\r\n                x_reshaped = np.reshape(x, (self.batch_size, -1))\r\n                f_value, df_value = acquisition.evaluate_with_gradients(x_reshaped)\r\n                return -f_value, -df_value.ravel()\r\n\r\n        else:\r\n            raise NotImplementedError()\r\n            f_df = None\r\n\r\n        # Select the anchor points (initial points)\r\n        anchor_batches = _get_anchor_batches(\r\n            space=self.space,\r\n            acquisition=acquisition,\r\n            batch_size=self.batch_size,\r\n            num_samples=self.n_candidate_anchor_batches,\r\n            num_batches=self.n_anchor_batches,\r\n        )\r\n\r\n        _log.info(\"Starting gradient-based optimization of acquisition function {}\".format(type(acquisition)))\r\n\r\n        # Location of the minimum and the value. We will update this, as we have multiple anchor points\r\n        minimum_x, minimum_f = None, float(\"inf\")\r\n\r\n        for anchor_batch in anchor_batches:\r\n            # Find the minimum starting from a given anchor point\r\n            x_min_flat, fx_min, _ = scipy.optimize.fmin_l_bfgs_b(func=f_df, x0=anchor_batch.ravel(), bounds=bounds)\r\n            x_min = np.reshape(x_min_flat, (self.batch_size, -1))\r\n\r\n            # If the minimum is better than the observed so far, we update it\r\n            if fx_min < minimum_f:\r\n                minimum_f = fx_min\r\n                minimum_x = x_min\r\n\r\n        assert minimum_x is not None\r\n        return minimum_x, -minimum_f\r\n\r\n\r\ndef _get_anchor_batches(\r\n    space: ParameterSpace,\r\n    acquisition: Acquisition,\r\n    batch_size: int,\r\n    num_batches: int,\r\n    num_samples: int,\r\n) -> List[np.ndarray]:\r\n    \"\"\"Randomly sample batches of points, and return the batches that yields the highest acquisition scores.\r\n\r\n    Args:\r\n        space (ParameterSpace): parameter space\r\n        acquisition (Acquisition): acquisition function\r\n        batch_size (int): batch size\r\n        num_batches: number of batches to be returned\r\n        num_samples (int): number of samples\r\n\r\n    Returns:\r\n        list of np.ndarray of length `num_batches`\r\n    \"\"\"\r\n    if num_batches > num_samples:\r\n        raise ValueError(\r\n            f\"Number of samples ({num_samples}) must be greater or equal to the number of \"\r\n            f\"batches ({num_batches}) to be selected.\"\r\n        )\r\n\r\n    batch_candidates = [space.sample_uniform(batch_size) for _ in range(num_samples)]\r\n    # Pairs (batch index, score). We sort them by decreasing score, to take the points with the highest scores\r\n    scores = [(i, acquisition.evaluate(batch)) for i, batch in enumerate(batch_candidates)]\r\n    scores = sorted(scores, key=lambda x: x[1], reverse=True)\r\n    indices_to_take = [i for i, _ in scores[:num_batches]]\r\n\r\n    return [batch_candidates[i] for i in indices_to_take]\r\n```\r\n### Usage\r\nUsing these two should then just be as simple as:\r\n```python\r\ngradient_batch_acquisition_optimizer = GradientBatchAcquisitionOptimizer(\r\n        space=parameter_space,\r\n        batch_size=batch_size,\r\n)\r\ncandidate_calculator = BatchCandidateCalculator(\r\n            acquisition_optimizer=gradient_batch_acquisition_optimizer,\r\n            batch_acquisition=UnnegatedMultipointExpectedImprovement(model=model),\r\n )\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/EmuKit/emukit/issues/comments/1004588624/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"BrunoKM","id":22356384,"node_id":"MDQ6VXNlcjIyMzU2Mzg0","avatar_url":"https://avatars.githubusercontent.com/u/22356384?v=4","gravatar_id":"","url":"https://api.github.com/users/BrunoKM","html_url":"https://github.com/BrunoKM","followers_url":"https://api.github.com/users/BrunoKM/followers","following_url":"https://api.github.com/users/BrunoKM/following{/other_user}","gists_url":"https://api.github.com/users/BrunoKM/gists{/gist_id}","starred_url":"https://api.github.com/users/BrunoKM/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BrunoKM/subscriptions","organizations_url":"https://api.github.com/users/BrunoKM/orgs","repos_url":"https://api.github.com/users/BrunoKM/repos","events_url":"https://api.github.com/users/BrunoKM/events{/privacy}","received_events_url":"https://api.github.com/users/BrunoKM/received_events","type":"User","site_admin":false}},{"id":5838760625,"node_id":"MEE_lADOCMd5484lL8mczwAAAAFcBGqx","url":"https://api.github.com/repos/EmuKit/emukit/issues/events/5838760625","actor":{"login":"apaleyes","id":2852301,"node_id":"MDQ6VXNlcjI4NTIzMDE=","avatar_url":"https://avatars.githubusercontent.com/u/2852301?v=4","gravatar_id":"","url":"https://api.github.com/users/apaleyes","html_url":"https://github.com/apaleyes","followers_url":"https://api.github.com/users/apaleyes/followers","following_url":"https://api.github.com/users/apaleyes/following{/other_user}","gists_url":"https://api.github.com/users/apaleyes/gists{/gist_id}","starred_url":"https://api.github.com/users/apaleyes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apaleyes/subscriptions","organizations_url":"https://api.github.com/users/apaleyes/orgs","repos_url":"https://api.github.com/users/apaleyes/repos","events_url":"https://api.github.com/users/apaleyes/events{/privacy}","received_events_url":"https://api.github.com/users/apaleyes/received_events","type":"User","site_admin":false},"event":"mentioned","commit_id":null,"commit_url":null,"created_at":"2022-01-04T07:44:43Z","performed_via_github_app":null},{"id":5838760630,"node_id":"SE_lADOCMd5484lL8mczwAAAAFcBGq2","url":"https://api.github.com/repos/EmuKit/emukit/issues/events/5838760630","actor":{"login":"apaleyes","id":2852301,"node_id":"MDQ6VXNlcjI4NTIzMDE=","avatar_url":"https://avatars.githubusercontent.com/u/2852301?v=4","gravatar_id":"","url":"https://api.github.com/users/apaleyes","html_url":"https://github.com/apaleyes","followers_url":"https://api.github.com/users/apaleyes/followers","following_url":"https://api.github.com/users/apaleyes/following{/other_user}","gists_url":"https://api.github.com/users/apaleyes/gists{/gist_id}","starred_url":"https://api.github.com/users/apaleyes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apaleyes/subscriptions","organizations_url":"https://api.github.com/users/apaleyes/orgs","repos_url":"https://api.github.com/users/apaleyes/repos","events_url":"https://api.github.com/users/apaleyes/events{/privacy}","received_events_url":"https://api.github.com/users/apaleyes/received_events","type":"User","site_admin":false},"event":"subscribed","commit_id":null,"commit_url":null,"created_at":"2022-01-04T07:44:43Z","performed_via_github_app":null},{"url":"https://api.github.com/repos/EmuKit/emukit/issues/comments/1005560035","html_url":"https://github.com/EmuKit/emukit/issues/303#issuecomment-1005560035","issue_url":"https://api.github.com/repos/EmuKit/emukit/issues/303","id":1005560035,"node_id":"IC_kwDOCMd5484776Dj","user":{"login":"apaleyes","id":2852301,"node_id":"MDQ6VXNlcjI4NTIzMDE=","avatar_url":"https://avatars.githubusercontent.com/u/2852301?v=4","gravatar_id":"","url":"https://api.github.com/users/apaleyes","html_url":"https://github.com/apaleyes","followers_url":"https://api.github.com/users/apaleyes/followers","following_url":"https://api.github.com/users/apaleyes/following{/other_user}","gists_url":"https://api.github.com/users/apaleyes/gists{/gist_id}","starred_url":"https://api.github.com/users/apaleyes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apaleyes/subscriptions","organizations_url":"https://api.github.com/users/apaleyes/orgs","repos_url":"https://api.github.com/users/apaleyes/repos","events_url":"https://api.github.com/users/apaleyes/events{/privacy}","received_events_url":"https://api.github.com/users/apaleyes/received_events","type":"User","site_admin":false},"created_at":"2022-01-05T10:24:40Z","updated_at":"2022-01-05T10:24:40Z","author_association":"COLLABORATOR","body":"Thanks for chiming in, @BrunoKM ! The negated output does look a bit suspicious. Can you please create an issue to discuss it? Thanks! ","reactions":{"url":"https://api.github.com/repos/EmuKit/emukit/issues/comments/1005560035/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"apaleyes","id":2852301,"node_id":"MDQ6VXNlcjI4NTIzMDE=","avatar_url":"https://avatars.githubusercontent.com/u/2852301?v=4","gravatar_id":"","url":"https://api.github.com/users/apaleyes","html_url":"https://github.com/apaleyes","followers_url":"https://api.github.com/users/apaleyes/followers","following_url":"https://api.github.com/users/apaleyes/following{/other_user}","gists_url":"https://api.github.com/users/apaleyes/gists{/gist_id}","starred_url":"https://api.github.com/users/apaleyes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apaleyes/subscriptions","organizations_url":"https://api.github.com/users/apaleyes/orgs","repos_url":"https://api.github.com/users/apaleyes/repos","events_url":"https://api.github.com/users/apaleyes/events{/privacy}","received_events_url":"https://api.github.com/users/apaleyes/received_events","type":"User","site_admin":false}},{"id":5845520680,"node_id":"MEE_lADOCMd5484lL8mczwAAAAFca5Eo","url":"https://api.github.com/repos/EmuKit/emukit/issues/events/5845520680","actor":{"login":"BrunoKM","id":22356384,"node_id":"MDQ6VXNlcjIyMzU2Mzg0","avatar_url":"https://avatars.githubusercontent.com/u/22356384?v=4","gravatar_id":"","url":"https://api.github.com/users/BrunoKM","html_url":"https://github.com/BrunoKM","followers_url":"https://api.github.com/users/BrunoKM/followers","following_url":"https://api.github.com/users/BrunoKM/following{/other_user}","gists_url":"https://api.github.com/users/BrunoKM/gists{/gist_id}","starred_url":"https://api.github.com/users/BrunoKM/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BrunoKM/subscriptions","organizations_url":"https://api.github.com/users/BrunoKM/orgs","repos_url":"https://api.github.com/users/BrunoKM/repos","events_url":"https://api.github.com/users/BrunoKM/events{/privacy}","received_events_url":"https://api.github.com/users/BrunoKM/received_events","type":"User","site_admin":false},"event":"mentioned","commit_id":null,"commit_url":null,"created_at":"2022-01-05T10:24:40Z","performed_via_github_app":null},{"id":5845520684,"node_id":"SE_lADOCMd5484lL8mczwAAAAFca5Es","url":"https://api.github.com/repos/EmuKit/emukit/issues/events/5845520684","actor":{"login":"BrunoKM","id":22356384,"node_id":"MDQ6VXNlcjIyMzU2Mzg0","avatar_url":"https://avatars.githubusercontent.com/u/22356384?v=4","gravatar_id":"","url":"https://api.github.com/users/BrunoKM","html_url":"https://github.com/BrunoKM","followers_url":"https://api.github.com/users/BrunoKM/followers","following_url":"https://api.github.com/users/BrunoKM/following{/other_user}","gists_url":"https://api.github.com/users/BrunoKM/gists{/gist_id}","starred_url":"https://api.github.com/users/BrunoKM/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BrunoKM/subscriptions","organizations_url":"https://api.github.com/users/BrunoKM/orgs","repos_url":"https://api.github.com/users/BrunoKM/repos","events_url":"https://api.github.com/users/BrunoKM/events{/privacy}","received_events_url":"https://api.github.com/users/BrunoKM/received_events","type":"User","site_admin":false},"event":"subscribed","commit_id":null,"commit_url":null,"created_at":"2022-01-05T10:24:40Z","performed_via_github_app":null}]