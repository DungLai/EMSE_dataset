{"url":"https://api.github.com/repos/EmuKit/emukit/issues/313","repository_url":"https://api.github.com/repos/EmuKit/emukit","labels_url":"https://api.github.com/repos/EmuKit/emukit/issues/313/labels{/name}","comments_url":"https://api.github.com/repos/EmuKit/emukit/issues/313/comments","events_url":"https://api.github.com/repos/EmuKit/emukit/issues/313/events","html_url":"https://github.com/EmuKit/emukit/issues/313","id":663243277,"node_id":"MDU6SXNzdWU2NjMyNDMyNzc=","number":313,"title":"Curious behavior of `model.set_data()` and `control_loop.get_next_points()`","user":{"login":"ekalosak","id":6068321,"node_id":"MDQ6VXNlcjYwNjgzMjE=","avatar_url":"https://avatars.githubusercontent.com/u/6068321?v=4","gravatar_id":"","url":"https://api.github.com/users/ekalosak","html_url":"https://github.com/ekalosak","followers_url":"https://api.github.com/users/ekalosak/followers","following_url":"https://api.github.com/users/ekalosak/following{/other_user}","gists_url":"https://api.github.com/users/ekalosak/gists{/gist_id}","starred_url":"https://api.github.com/users/ekalosak/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ekalosak/subscriptions","organizations_url":"https://api.github.com/users/ekalosak/orgs","repos_url":"https://api.github.com/users/ekalosak/repos","events_url":"https://api.github.com/users/ekalosak/events{/privacy}","received_events_url":"https://api.github.com/users/ekalosak/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-07-21T19:08:25Z","updated_at":"2020-07-23T20:24:15Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Hi Emikit team,\r\n\r\nFirst, thank you for your work on this package - it's a joy to use.\r\n\r\nI'm writing with a question about some curious behavior I've observed when using the Bayesian optimization control loop. When I use the `IModel.set_data(X, Y)` class method to alter the model data followed by the `OuterLoop.get_next_points(results)`, the model's data is reset to what it was before the `set_data()` call with an extra row representing the contents of the `results` object.\r\n\r\nThe expected behavior is to see, after the `OuterLoop.get_next_points(results)` call, the model data constituted by the `X` passed to `set_data` concatenated with the contents of `results`.\r\n\r\n![untitled (1)](https://user-images.githubusercontent.com/6068321/88095910-b309be00-cb4a-11ea-9812-a6d0fde4e150.png)\r\n\r\nHere's a minimal example that reproduces the behavior:\r\n```\r\nimport numpy as np\r\n\r\nfrom GPy.models import GPRegression\r\nfrom GPy.kern import Matern52\r\n\r\nfrom emukit.bayesian_optimization.acquisitions import ExpectedImprovement\r\nfrom emukit.bayesian_optimization.loops import BayesianOptimizationLoop\r\nfrom emukit.core import (\r\n    ParameterSpace,\r\n    DiscreteParameter,\r\n)\r\nfrom emukit.core.loop import UserFunctionWrapper\r\nfrom emukit.model_wrappers import GPyModelWrapper\r\n\r\n# Initial observations\r\nX = np.array([[1,1,2],[2,1,2],[1,1,1]])\r\nY = np.array([[1],[2],[3]])\r\n\r\n# Surrogate optimization components\r\nkernel = Matern52(\r\n    input_dim=X.shape[1],\r\n    )\r\nmodel_gpy = GPRegression(\r\n    X=X,\r\n    Y=Y,\r\n    kernel=kernel,\r\n    normalizer=True,\r\n    )\r\nmodel_emukit = GPyModelWrapper(\r\n    gpy_model = model_gpy,\r\n    )\r\nparameters = [DiscreteParameter(f'param_{i}', range(10)) for i in range(X.shape[1])]\r\nparameter_space = ParameterSpace(parameters)\r\nacquisition_criterion = ExpectedImprovement(model = model_emukit)\r\nf = lambda x_row: np.array([[sum(sum(x_row))]])\r\nf_wrapped = UserFunctionWrapper(f)\r\n\r\ncontrol_loop = BayesianOptimizationLoop(\r\n    model = model_emukit,\r\n    space = parameter_space,\r\n    acquisition = acquisition_criterion,\r\n    )\r\n\r\n# Just make sure that the data is actually represented in the model\r\nassert model_emukit.model.X.shape[0] == X.shape[0]\r\n\r\n# Try to set the data using other matrices\r\nX2 = np.array([[3,3,3],[3,4,3]])\r\nY2 = np.array([[4],[5]])\r\nmodel_emukit.set_data(X=X2, Y=Y2)\r\n\r\n# The data is 'set' after running set_data()\r\nassert model_emukit.model.X.shape[0] == X2.shape[0]\r\n\r\n# Provide a result for some arbitrarily suggested point\r\nX_arbitrary_suggestion = np.array([[1,2,5]])\r\nresults = f_wrapped(X_arbitrary_suggestion)\r\nX_next = control_loop.get_next_points(\r\n    results = results,\r\n    )\r\n\r\n# As a side effect of control_loop.get_next_points(), the model data is reset.\r\nassert model_emukit.model.X.shape[0] == X.shape[0] + 1\r\nfor model_x_row, initial_x_row in zip(model_emukit.model.X, X):\r\n    assert all(model_x_row == initial_x_row)\r\n```\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/EmuKit/emukit/issues/313/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/EmuKit/emukit/issues/313/timeline","performed_via_github_app":null,"state_reason":null}