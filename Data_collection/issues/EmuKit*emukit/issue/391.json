{"url":"https://api.github.com/repos/EmuKit/emukit/issues/391","repository_url":"https://api.github.com/repos/EmuKit/emukit","labels_url":"https://api.github.com/repos/EmuKit/emukit/issues/391/labels{/name}","comments_url":"https://api.github.com/repos/EmuKit/emukit/issues/391/comments","events_url":"https://api.github.com/repos/EmuKit/emukit/issues/391/events","html_url":"https://github.com/EmuKit/emukit/issues/391","id":1049046831,"node_id":"I_kwDOCMd5484-hy8v","number":391,"title":"Compatibility issue between CONTEXT variable and parameter space CONSTRAINT","user":{"login":"AlbanMor","id":86852921,"node_id":"MDQ6VXNlcjg2ODUyOTIx","avatar_url":"https://avatars.githubusercontent.com/u/86852921?v=4","gravatar_id":"","url":"https://api.github.com/users/AlbanMor","html_url":"https://github.com/AlbanMor","followers_url":"https://api.github.com/users/AlbanMor/followers","following_url":"https://api.github.com/users/AlbanMor/following{/other_user}","gists_url":"https://api.github.com/users/AlbanMor/gists{/gist_id}","starred_url":"https://api.github.com/users/AlbanMor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/AlbanMor/subscriptions","organizations_url":"https://api.github.com/users/AlbanMor/orgs","repos_url":"https://api.github.com/users/AlbanMor/repos","events_url":"https://api.github.com/users/AlbanMor/events{/privacy}","received_events_url":"https://api.github.com/users/AlbanMor/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2021-11-09T19:53:58Z","updated_at":"2021-11-11T09:12:55Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi there!\r\n\r\nPython 3.8.8\r\nEmukit 0.4.9\r\n\r\nI've come across an issue when trying to get_next_points with a context variable for a constrained parameter space. My understanding is that the fact to use context variables passes an array of length n-x (for x context variable) to the constraint function. This function, which is expecting an array of length n, in turns causes it to bug. \r\n\r\nBelow is an exemple that will cause this issue (modifed from the \"Emukit - Bayesian Optimization with Non-Linear Constraints\" [tutorial)](https://nbviewer.org/github/emukit/emukit/blob/main/notebooks/Emukit-tutorial-constrained-optimization.ipynb)\r\n\r\n`FIG_SIZE = (12, 8)\r\n\r\nfrom emukit.test_functions import branin_function\r\nfcn, space = branin_function()\r\n\r\nimport numpy as np\r\nconstraint_radius = 4\r\nconstraint_fcn = lambda x: 10 * (-(x[0] - 3)**2 - (x[1] - 7)**2 + constraint_radius ** 2)\r\n\r\noptimum = np.array([[-np.pi, 12.275], [np.pi, 2.275], [9.42478, 2.475]])\r\n\r\n# evaluate objective on grid to plot\r\nx_1 = np.linspace(-5, 10, 50)\r\nx_2 = np.linspace(0, 15, 51)\r\nx_1_grid, x_2_grid = np.meshgrid(x_1, x_2)\r\nx_all = np.stack([x_1_grid.flatten(), x_2_grid.flatten()], axis=1)\r\ny_all = fcn(x_all)\r\ny_reshape = np.reshape(y_all, x_1_grid.shape)\r\n\r\n# evaluate constraint to plot\r\ntheta_constraint = np.linspace(0, 2*np.pi)\r\nx_0_constraint = 3 + np.sin(theta_constraint) * constraint_radius\r\nx_1_constraint = 7 + np.cos(theta_constraint) * constraint_radius\r\n\r\nimport matplotlib.pyplot as plt\r\nplt.figure(figsize=FIG_SIZE)\r\nplt.contourf(x_1, x_2, y_reshape)\r\nplt.title('Branin Function')\r\nplt.plot(x_0_constraint, x_1_constraint, linewidth=3, color='k')\r\nplt.plot(optimum[:, 0], optimum[:, 1], marker='x', color='r', linestyle='')\r\nplt.legend(['Constraint boundary', 'Unconstrained optima']);\r\n\r\nimport GPy\r\nfrom emukit.model_wrappers import GPyModelWrapper\r\n\r\nx_init = np.array([[0, 7], [1, 9], [6, 8]])\r\ny_init = fcn(x_init)\r\n\r\nmodel = GPy.models.GPRegression(x_init, y_init)\r\nemukit_model = GPyModelWrapper(model)\r\n\r\nfrom emukit.core.acquisition import Acquisition\r\nfrom emukit.core.constraints import NonlinearInequalityConstraint\r\nfrom scipy.special import expit # expit is scipy's sigmoid function\r\n\r\nconstraints = [NonlinearInequalityConstraint(constraint_fcn, 0, np.inf)]\r\nspace.constraints = constraints\r\n\r\nfrom emukit.bayesian_optimization.acquisitions import ExpectedImprovement\r\nei = ExpectedImprovement(model)\r\n\r\nfrom emukit.bayesian_optimization.loops import BayesianOptimizationLoop\r\nfrom emukit.core.optimization import GradientAcquisitionOptimizer\r\n\r\n# Create acquisition optimizer with constraints\r\nacquisition_optimizer = GradientAcquisitionOptimizer(space)\r\n\r\n# Make BO loop\r\nbo_loop = BayesianOptimizationLoop(space, emukit_model, ei, acquisition_optimizer=acquisition_optimizer)\r\n# append plot_progress function to iteration end event\r\nbo_loop.get_next_points(results=None,context={'x2': 3})`   \r\n\r\nBTW: I love this package! Good work :-)\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/EmuKit/emukit/issues/391/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/EmuKit/emukit/issues/391/timeline","performed_via_github_app":null,"state_reason":null}