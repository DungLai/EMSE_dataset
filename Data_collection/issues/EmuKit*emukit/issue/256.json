{"url":"https://api.github.com/repos/EmuKit/emukit/issues/256","repository_url":"https://api.github.com/repos/EmuKit/emukit","labels_url":"https://api.github.com/repos/EmuKit/emukit/issues/256/labels{/name}","comments_url":"https://api.github.com/repos/EmuKit/emukit/issues/256/comments","events_url":"https://api.github.com/repos/EmuKit/emukit/issues/256/events","html_url":"https://github.com/EmuKit/emukit/issues/256","id":514596715,"node_id":"MDU6SXNzdWU1MTQ1OTY3MTU=","number":256,"title":"2-stage acquisition optimization support","user":{"login":"apaleyes","id":2852301,"node_id":"MDQ6VXNlcjI4NTIzMDE=","avatar_url":"https://avatars.githubusercontent.com/u/2852301?v=4","gravatar_id":"","url":"https://api.github.com/users/apaleyes","html_url":"https://github.com/apaleyes","followers_url":"https://api.github.com/users/apaleyes/followers","following_url":"https://api.github.com/users/apaleyes/following{/other_user}","gists_url":"https://api.github.com/users/apaleyes/gists{/gist_id}","starred_url":"https://api.github.com/users/apaleyes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apaleyes/subscriptions","organizations_url":"https://api.github.com/users/apaleyes/orgs","repos_url":"https://api.github.com/users/apaleyes/repos","events_url":"https://api.github.com/users/apaleyes/events{/privacy}","received_events_url":"https://api.github.com/users/apaleyes/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-10-30T11:36:14Z","updated_at":"2019-10-30T11:49:21Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"This issue surfaced from conversation with @henrymoss .\r\n\r\nEmukit does not support 2-stage optimization procedures. For example, consider the following scenario: a multifidelity function f(x,z) where z is the fidelity, that is being optimized the following way:\r\nx* = argmax acq1(x)\r\nz* = argmax acq2(x*, z)\r\n\r\nA couple of multifidelity methods based on UCB are using this, and it is quite common to compare against them, so having their implementations might be useful.\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/EmuKit/emukit/issues/256/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/EmuKit/emukit/issues/256/timeline","performed_via_github_app":null,"state_reason":null}