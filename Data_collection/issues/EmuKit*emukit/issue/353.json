{"url":"https://api.github.com/repos/EmuKit/emukit/issues/353","repository_url":"https://api.github.com/repos/EmuKit/emukit","labels_url":"https://api.github.com/repos/EmuKit/emukit/issues/353/labels{/name}","comments_url":"https://api.github.com/repos/EmuKit/emukit/issues/353/comments","events_url":"https://api.github.com/repos/EmuKit/emukit/issues/353/events","html_url":"https://github.com/EmuKit/emukit/issues/353","id":820958474,"node_id":"MDU6SXNzdWU4MjA5NTg0NzQ=","number":353,"title":"Bayesian Optimization with noisy observations using Expected Improvement","user":{"login":"BrunoKM","id":22356384,"node_id":"MDQ6VXNlcjIyMzU2Mzg0","avatar_url":"https://avatars.githubusercontent.com/u/22356384?v=4","gravatar_id":"","url":"https://api.github.com/users/BrunoKM","html_url":"https://github.com/BrunoKM","followers_url":"https://api.github.com/users/BrunoKM/followers","following_url":"https://api.github.com/users/BrunoKM/following{/other_user}","gists_url":"https://api.github.com/users/BrunoKM/gists{/gist_id}","starred_url":"https://api.github.com/users/BrunoKM/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/BrunoKM/subscriptions","organizations_url":"https://api.github.com/users/BrunoKM/orgs","repos_url":"https://api.github.com/users/BrunoKM/repos","events_url":"https://api.github.com/users/BrunoKM/events{/privacy}","received_events_url":"https://api.github.com/users/BrunoKM/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-03-03T10:10:56Z","updated_at":"2021-06-16T08:15:42Z","closed_at":"2021-06-16T08:15:42Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"This issue is about what the proper way of dealing with noisy observations in Bayesian Optimization with EmuKit is at the moment? Specifically, how is the user expected to deal with noisy observations when using the Expected Improvement acquisition?\r\n\r\nCurrently, the `ExpectedImprovement` acquisition in EmuKit assumes noiseless observations of the function `Y`:\r\n\r\n```ExpectedImprovement(x) = Y_min - E[min(y(x), Y_min)]```\r\n\r\nThere are some common heuristics that allow Expected Improvement to be used with noisy observations, likely the most popular one being the one described in [Picheny et al. 2012](https://hal.archives-ouvertes.fr/hal-00658212/document) where the the Expected Improvement is calculated with respect to noiseless predictions from the model, and the previous minimum `Y_min` is taken as the smallest mean of the posterior GP predictions at the observed points.\r\n\r\nTo the best of my knowledge, there is currently no simple way to deal with noisy observations with the Expected Improvement acquisition function in EmuKit at present. Is this something that remains to be implemented, or are there some work-arounds that the user is expected to follow?","closed_by":{"login":"apaleyes","id":2852301,"node_id":"MDQ6VXNlcjI4NTIzMDE=","avatar_url":"https://avatars.githubusercontent.com/u/2852301?v=4","gravatar_id":"","url":"https://api.github.com/users/apaleyes","html_url":"https://github.com/apaleyes","followers_url":"https://api.github.com/users/apaleyes/followers","following_url":"https://api.github.com/users/apaleyes/following{/other_user}","gists_url":"https://api.github.com/users/apaleyes/gists{/gist_id}","starred_url":"https://api.github.com/users/apaleyes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apaleyes/subscriptions","organizations_url":"https://api.github.com/users/apaleyes/orgs","repos_url":"https://api.github.com/users/apaleyes/repos","events_url":"https://api.github.com/users/apaleyes/events{/privacy}","received_events_url":"https://api.github.com/users/apaleyes/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/EmuKit/emukit/issues/353/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/EmuKit/emukit/issues/353/timeline","performed_via_github_app":null,"state_reason":"completed"}