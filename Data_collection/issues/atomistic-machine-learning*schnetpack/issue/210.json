{"url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/210","repository_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack","labels_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/210/labels{/name}","comments_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/210/comments","events_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/210/events","html_url":"https://github.com/atomistic-machine-learning/schnetpack/issues/210","id":567792155,"node_id":"MDU6SXNzdWU1Njc3OTIxNTU=","number":210,"title":"training error with BehlerSFBlock","user":{"login":"neojie","id":44279474,"node_id":"MDQ6VXNlcjQ0Mjc5NDc0","avatar_url":"https://avatars.githubusercontent.com/u/44279474?v=4","gravatar_id":"","url":"https://api.github.com/users/neojie","html_url":"https://github.com/neojie","followers_url":"https://api.github.com/users/neojie/followers","following_url":"https://api.github.com/users/neojie/following{/other_user}","gists_url":"https://api.github.com/users/neojie/gists{/gist_id}","starred_url":"https://api.github.com/users/neojie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/neojie/subscriptions","organizations_url":"https://api.github.com/users/neojie/orgs","repos_url":"https://api.github.com/users/neojie/repos","events_url":"https://api.github.com/users/neojie/events{/privacy}","received_events_url":"https://api.github.com/users/neojie/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-02-19T19:28:10Z","updated_at":"2020-02-21T18:03:38Z","closed_at":"2020-02-21T18:03:38Z","author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\nI tried using  `BehlerSFBlock` representation as follows but did not succeed.\r\n\r\n```\r\nimport schnetpack as spk\r\nfrom schnetpack.datasets import MD17\r\nfrom torch.optim import Adam\r\nimport schnetpack.train as trn\r\nimport os\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport torch\r\n\r\ntrain_dir = './train'\r\nif not os.path.exists(train_dir):\r\n    os.makedirs(train_dir)\r\ncutoff_radius = 8\r\nfrom schnetpack.environment import AseEnvironmentProvider\r\ndata = MD17('../mydata.db',collect_triples=True,environment_provider= AseEnvironmentProvider(cutoff_radius))\r\n\r\natoms, properties = data.get_properties(0)\r\n\r\ntrain, val, test = spk.train_test_split(\r\n        data=data,\r\n        num_train=4000,\r\n        num_val=2000,\r\n        split_file= \"split.npz\",\r\n    )\r\n\r\ntrain_loader = spk.AtomsLoader(train, batch_size=10, shuffle=True)\r\nval_loader = spk.AtomsLoader(val, batch_size=10)\r\n\r\n\r\nmeans, stddevs = train_loader.get_statistics(\r\n    spk.datasets.MD17.energy, divide_by_atoms=True\r\n)\r\nn_features = 128\r\nn_radial = 4\r\nn_angular = 0\r\nmode = 'Behler'\r\n\r\nreps = spk.representation.BehlerSFBlock(n_radial =n_radial,\r\n                     n_angular=n_angular,\r\n                     elements=frozenset(np.array(data[0]['_atomic_numbers'])),\r\n                     cutoff_radius=cutoff_radius,\r\n                     mode = mode)\r\nreps = spk.representation.StandardizeSF(reps, train_loader)\r\n\r\nenergy_model = spk.atomistic.Atomwise(\r\n    n_in=n_features,\r\n    property=MD17.energy,\r\n    mean=means[MD17.energy],\r\n    stddev=stddevs[MD17.energy],\r\n    derivative=MD17.forces,\r\n    negative_dr=True\r\n)\r\n\r\nmodel = spk.AtomisticModel(representation=reps, output_modules=energy_model)\r\n\r\n\r\n# tradeoff\r\nrho_tradeoff = 0.1\r\n\r\n# loss function\r\ndef loss(batch, result):\r\n    # compute the mean squared error on the energies\r\n    diff_energy = batch[MD17.energy]-result[MD17.energy]\r\n    err_sq_energy = torch.mean(diff_energy ** 2)\r\n\r\n    # compute the mean squared error on the forces\r\n    diff_forces = batch[MD17.forces]-result[MD17.forces]\r\n    err_sq_forces = torch.mean(diff_forces ** 2)\r\n\r\n    # build the combined loss function\r\n    err_sq = rho_tradeoff*err_sq_energy + (1-rho_tradeoff)*err_sq_forces\r\n\r\n    return err_sq\r\n\r\n\r\n# build optimizer\r\noptimizer = Adam(model.parameters(), lr=1e-4)\r\n\r\n# set up metrics\r\nmetrics = [\r\n    spk.metrics.MeanAbsoluteError(MD17.energy),\r\n    spk.metrics.MeanAbsoluteError(MD17.forces)\r\n]\r\n\r\n# construct hooks\r\nhooks = [\r\n    trn.CSVHook(log_path=train_dir, metrics=metrics),\r\n    trn.ReduceLROnPlateauHook(\r\n        optimizer,\r\n        patience=5, factor=0.8, min_lr=1e-6,\r\n        stop_after_min=True\r\n    )\r\n]\r\n\r\n\r\ntrainer = trn.Trainer(\r\n    model_path=train_dir,\r\n    model=model,\r\n    hooks=hooks,\r\n    loss_fn=loss,\r\n    optimizer=optimizer,\r\n    train_loader=train_loader,\r\n    validation_loader=val_loader,\r\n)\r\n\r\n\r\n# check if a GPU is available and use a CPU otherwise\r\nif torch.cuda.is_available():\r\n    device = \"cuda\"\r\nelse:\r\n    device = \"cpu\"\r\n\r\n# determine number of epochs and train\r\nn_epochs = 2000\r\nprint('*****start to train******')\r\ntrainer.train(device=device, n_epochs=n_epochs)\r\nprint('*****end of train*****')\r\n\r\n```\r\nThe error message is as follows,\r\n\r\n```\r\n\r\nTraceback   (most recent call last):\r\n--\r\nFile   \"spk_train_bp.py\", line 139, in <module>\r\ntrainer.train(device=device, n_epochs=n_epochs)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/schnetpack/train/trainer.py\",   line 263, in train\r\nraise e\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/schnetpack/train/trainer.py\",   line 190, in train\r\nresult =   self._model(train_batch)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/torch/nn/modules/module.py\",   line 541, in __call__\r\nresult =   self.forward(*input, **kwargs)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/schnetpack/atomistic/model.py\",   line 64, in forward\r\nouts.update(output_model(inputs))\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/torch/nn/modules/module.py\",   line 541, in __call__\r\nresult =   self.forward(*input, **kwargs)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/schnetpack/atomistic/output_modules.py\",   line 138, in forward\r\nyi =   self.out_net(inputs)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/torch/nn/modules/module.py\",   line 541, in __call__\r\nresult =   self.forward(*input, **kwargs)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/torch/nn/modules/container.py\",   line 92, in forward\r\ninput =   module(input)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/torch/nn/modules/module.py\",   line 541, in __call__\r\nresult =   self.forward(*input, **kwargs)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/schnetpack/nn/blocks.py\",   line 67, in forward\r\nreturn   self.out_net(inputs)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/torch/nn/modules/module.py\",   line 541, in __call__\r\nresult =   self.forward(*input, **kwargs)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/torch/nn/modules/container.py\",   line 92, in forward\r\ninput =   module(input)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/torch/nn/modules/module.py\",   line 541, in __call__\r\nresult =   self.forward(*input, **kwargs)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/schnetpack/nn/base.py\",   line 59, in forward\r\ny = super(Dense,   self).forward(inputs)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/torch/nn/modules/linear.py\",   line 87, in forward\r\nreturn   F.linear(input, self.weight, self.bias)\r\nFile   \"/gpfs/loomis/project/kklee/jd848/conda_envs/jd37/lib/python3.7/site-packages/torch/nn/functional.py\",   line 1372, in linear\r\noutput =   input.matmul(weight.t())\r\nRuntimeError: size mismatch,   m1: [1600 x 12], m2: [128 x 64] at   /pytorch/aten/src/THC/generic/THCTensorMathBlas.cu:290\r\n\r\n\r\n```","closed_by":{"login":"neojie","id":44279474,"node_id":"MDQ6VXNlcjQ0Mjc5NDc0","avatar_url":"https://avatars.githubusercontent.com/u/44279474?v=4","gravatar_id":"","url":"https://api.github.com/users/neojie","html_url":"https://github.com/neojie","followers_url":"https://api.github.com/users/neojie/followers","following_url":"https://api.github.com/users/neojie/following{/other_user}","gists_url":"https://api.github.com/users/neojie/gists{/gist_id}","starred_url":"https://api.github.com/users/neojie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/neojie/subscriptions","organizations_url":"https://api.github.com/users/neojie/orgs","repos_url":"https://api.github.com/users/neojie/repos","events_url":"https://api.github.com/users/neojie/events{/privacy}","received_events_url":"https://api.github.com/users/neojie/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/210/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/210/timeline","performed_via_github_app":null,"state_reason":"completed"}