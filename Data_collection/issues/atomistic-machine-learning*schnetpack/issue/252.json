{"url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/252","repository_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack","labels_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/252/labels{/name}","comments_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/252/comments","events_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/252/events","html_url":"https://github.com/atomistic-machine-learning/schnetpack/issues/252","id":771216025,"node_id":"MDU6SXNzdWU3NzEyMTYwMjU=","number":252,"title":"Improved neighbor list","user":{"login":"peastman","id":4379786,"node_id":"MDQ6VXNlcjQzNzk3ODY=","avatar_url":"https://avatars.githubusercontent.com/u/4379786?v=4","gravatar_id":"","url":"https://api.github.com/users/peastman","html_url":"https://github.com/peastman","followers_url":"https://api.github.com/users/peastman/followers","following_url":"https://api.github.com/users/peastman/following{/other_user}","gists_url":"https://api.github.com/users/peastman/gists{/gist_id}","starred_url":"https://api.github.com/users/peastman/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/peastman/subscriptions","organizations_url":"https://api.github.com/users/peastman/orgs","repos_url":"https://api.github.com/users/peastman/repos","events_url":"https://api.github.com/users/peastman/events{/privacy}","received_events_url":"https://api.github.com/users/peastman/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-12-18T22:46:44Z","updated_at":"2021-02-26T15:31:14Z","closed_at":"2021-02-26T15:31:13Z","author_association":"NONE","active_lock_reason":null,"body":"SimpleNeighborList ignores the cutoff and computes interactions between all pairs of atoms, regardless of distance.  This limits it to very small numbers of atoms, not just because it's slow but also because it quickly runs out of memory.  I created an alternate neighbor list implementation to fix this.  If you want to include it in SchNetPack, you're welcome to it.\r\n\r\n```python\r\nimport torch\r\nimport schnetpack as spk\r\n\r\nclass NeighborList(spk.md.neighbor_lists.MDNeighborList):\r\n    def __init__(self, system, cutoff=None):\r\n        self.simple = spk.md.neighbor_lists.SimpleNeighborList(system, cutoff)\r\n        super(NeighborList, self).__init__(system, cutoff)\r\n\r\n    def _construct_neighbor_list(self):\r\n        self.simple._construct_neighbor_list()\r\n        neighbors = self.simple.neighbor_list.view(-1, self.system.max_n_atoms, self.system.max_n_atoms-1)\r\n        positions = self.system.positions.view(-1, self.system.max_n_atoms, 3)\r\n        n_copies = neighbors.shape[0]\r\n        n_atoms = neighbors.shape[1]\r\n        r_ij = spk.nn.neighbors.atom_distances(positions, neighbors, None)\r\n        mask = r_ij < self.cutoff\r\n        copy_index, atom_index, neighbor_index = torch.nonzero(mask, as_tuple=True)\r\n        cumsum = torch.cumsum(mask, dim=2)-1\r\n        target_index = cumsum[copy_index, atom_index, neighbor_index]\r\n        max_neighbors = int(cumsum[:, :, -1].max())+1\r\n        self.neighbor_list = torch.zeros(n_copies, n_atoms, max_neighbors, device=self.system.device, dtype=torch.int64)\r\n        self.neighbor_mask = torch.zeros(n_copies, n_atoms, max_neighbors, device=self.system.device)\r\n        self.neighbor_list[copy_index, atom_index, target_index] = neighbors[copy_index, atom_index, neighbor_index]\r\n        self.neighbor_mask[copy_index, atom_index, target_index] = 1\r\n        n_replicas = self.simple.neighbor_list.shape[0]\r\n        n_molecules = self.simple.neighbor_list.shape[1]\r\n        self.neighbor_list = self.neighbor_list.view(n_replicas, n_molecules, n_atoms, max_neighbors)\r\n        self.neighbor_mask = self.neighbor_mask.view(n_replicas, n_molecules, n_atoms, max_neighbors)\r\n\r\n    def update_neighbors(self):\r\n        self._construct_neighbor_list()\r\n```\r\n\r\nTo make it work, I had to fix the following lines, which incorrectly assume the shape of the neighbor list:\r\n\r\nhttps://github.com/atomistic-machine-learning/schnetpack/blob/9dabc3b6e3b28deb2fb3743ea1857c46b055efbf/src/schnetpack/md/calculators/basic_calculators.py#L130-L135\r\n\r\nI changed them to\r\n\r\n```python\r\n        n_neighbors = neighbor_list.shape[-1]\r\n        neighbor_list = neighbor_list.view(\r\n            -1, system.max_n_atoms, n_neighbors\r\n        )\r\n        neighbor_mask = neighbor_mask.view(\r\n            -1, system.max_n_atoms, n_neighbors\r\n        )\r\n```","closed_by":{"login":"ktschuett","id":6585114,"node_id":"MDQ6VXNlcjY1ODUxMTQ=","avatar_url":"https://avatars.githubusercontent.com/u/6585114?v=4","gravatar_id":"","url":"https://api.github.com/users/ktschuett","html_url":"https://github.com/ktschuett","followers_url":"https://api.github.com/users/ktschuett/followers","following_url":"https://api.github.com/users/ktschuett/following{/other_user}","gists_url":"https://api.github.com/users/ktschuett/gists{/gist_id}","starred_url":"https://api.github.com/users/ktschuett/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ktschuett/subscriptions","organizations_url":"https://api.github.com/users/ktschuett/orgs","repos_url":"https://api.github.com/users/ktschuett/repos","events_url":"https://api.github.com/users/ktschuett/events{/privacy}","received_events_url":"https://api.github.com/users/ktschuett/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/252/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/252/timeline","performed_via_github_app":null,"state_reason":"completed"}