{"url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/480","repository_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack","labels_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/480/labels{/name}","comments_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/480/comments","events_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/480/events","html_url":"https://github.com/atomistic-machine-learning/schnetpack/issues/480","id":1506462998,"node_id":"I_kwDOCMZ5Ls5Zys0W","number":480,"title":"BanGap Property and MultiGPU Error","user":{"login":"MiracAydin1","id":64257834,"node_id":"MDQ6VXNlcjY0MjU3ODM0","avatar_url":"https://avatars.githubusercontent.com/u/64257834?v=4","gravatar_id":"","url":"https://api.github.com/users/MiracAydin1","html_url":"https://github.com/MiracAydin1","followers_url":"https://api.github.com/users/MiracAydin1/followers","following_url":"https://api.github.com/users/MiracAydin1/following{/other_user}","gists_url":"https://api.github.com/users/MiracAydin1/gists{/gist_id}","starred_url":"https://api.github.com/users/MiracAydin1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MiracAydin1/subscriptions","organizations_url":"https://api.github.com/users/MiracAydin1/orgs","repos_url":"https://api.github.com/users/MiracAydin1/repos","events_url":"https://api.github.com/users/MiracAydin1/events{/privacy}","received_events_url":"https://api.github.com/users/MiracAydin1/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2022-12-21T15:16:06Z","updated_at":"2022-12-21T19:13:38Z","closed_at":"2022-12-21T19:13:38Z","author_association":"NONE","active_lock_reason":null,"body":"Dear All,\r\n\r\nI am trying to train new version of Schnetpack with OMDB dataset. I copied the tutorial of QM9 and changed necessary parts for OMDB. I am running codes on NVIDIA RTX A4500 GPUs. But when I try to run the code with 1 GPU, it gives the following error:\r\n\r\n```\r\n  File \"/opt/miniconda3/envs/schnetpack20/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py\", line 1284, in _call_setup_hook\r\n    self._call_lightning_datamodule_hook(\"setup\", stage=fn)\r\n  File \"/opt/miniconda3/envs/schnetpack20/lib/python3.8/site-packages/pytorch_lightning/trainer/trainer.py\", line 1361, in _call_lightning_datamodule_hook\r\n    return fn(*args, **kwargs)\r\n  File \"/opt/miniconda3/envs/schnetpack20/lib/python3.8/site-packages/schnetpack/data/datamodule.py\", line 190, in setup\r\n    self._setup_transforms()\r\n  File \"/opt/miniconda3/envs/schnetpack20/lib/python3.8/site-packages/schnetpack/data/datamodule.py\", line 315, in _setup_transforms\r\n    t.datamodule(self)\r\n  File \"/opt/miniconda3/envs/schnetpack20/lib/python3.8/site-packages/schnetpack/transform/atomistic.py\", line 123, in datamodule\r\n    self.atomref = atrefs[self._property].detach()\r\nKeyError: 'band_gap'\r\n```\r\n\r\nAs I understand, there is problem about the name of propery \"bandgap\".\r\n\r\nSecondly, when I try to use 2 GPUs with the parameter of \"devices2\" on the training step, it gives the following error. I have read the documentation of SchNet but I could not find how to distribute the model onto 2 GPUs. \r\n\r\n```\r\nFile \"/opt/miniconda3/envs/schnetpack20/lib/python3.8/multiprocessing/spawn.py\", line 134, in _check_not_importing_main\r\n    raise RuntimeError('''\r\nRuntimeError: \r\n        An attempt has been made to start a new process before the\r\n        current process has finished its bootstrapping phase.\r\n\r\n        This probably means that you are not using fork to start your\r\n        child processes and you have forgotten to use the proper idiom\r\n        in the main module:\r\n\r\n            if __name__ == '__main__':\r\n                freeze_support()\r\n                ...\r\n\r\n        The \"freeze_support()\" line can be omitted if the program\r\n        is not going to be frozen to produce an executable.\r\n```\r\n\r\nHere is my code to train the package for OMDB:\r\n\r\n```\r\nimport os\r\nimport schnetpack as spk\r\nfrom schnetpack.datasets import OrganicMaterialsDatabase as OMDB\r\nimport schnetpack.transform as trn\r\n\r\nimport torch\r\nimport torchmetrics\r\nimport pytorch_lightning as pl\r\n\r\nomdb_folder = './omdb_folder'\r\nif not os.path.exists('omdb_folder'):\r\n    os.makedirs(omdb_folder)\r\n\r\nomdbdata = OMDB(\r\n    datapath='./omdb_gap.db',\r\n    batch_size=32,\r\n    num_train=10000,\r\n    num_val=1000,\r\n    transforms=[\r\n        trn.ASENeighborList(cutoff=5.),\r\n        trn.RemoveOffsets(OMDB.BandGap, remove_mean=True, remove_atomrefs=True),\r\n        trn.CastTo32()\r\n    ],\r\n    property_units={OMDB.BandGap: 'eV'},\r\n    num_workers=1,\r\n    split_file=os.path.join(omdb_folder, \"split.npz\"),\r\n    pin_memory=True, # set to false, when not using a GPU\r\n    load_properties=[OMDB.BandGap], #only load BandGap property\r\n    raw_path='./OMDB-GAP1_v1.1.tar.gz'\r\n)\r\n\r\nomdbdata.prepare_data()\r\n\r\ncutoff = 5.\r\nn_atom_basis = 30\r\n\r\npairwise_distance = spk.atomistic.PairwiseDistances() # calculates pairwise distances between atoms\r\nradial_basis = spk.nn.GaussianRBF(n_rbf=20, cutoff=cutoff)\r\nschnet = spk.representation.SchNet(\r\n    n_atom_basis=n_atom_basis, n_interactions=3,\r\n    radial_basis=radial_basis,\r\n    cutoff_fn=spk.nn.CosineCutoff(cutoff)\r\n)\r\npred_gap = spk.atomistic.Atomwise(n_in=n_atom_basis, output_key=OMDB.BandGap)\r\n\r\nnnpot = spk.model.NeuralNetworkPotential(\r\n    representation=schnet,\r\n    input_modules=[pairwise_distance],\r\n    output_modules=[pred_gap],\r\n    postprocessors=[trn.CastTo64(), trn.AddOffsets(OMDB.BandGap, add_mean=True, add_atomrefs=True)]\r\n)\r\n\r\noutput_gap = spk.task.ModelOutput(\r\n    name=OMDB.BandGap,\r\n    loss_fn=torch.nn.MSELoss(),\r\n    loss_weight=1.,\r\n    metrics={\r\n        \"MAE\": torchmetrics.MeanAbsoluteError()\r\n    }\r\n)\r\n\r\ntask = spk.task.AtomisticTask(\r\n    model=nnpot,\r\n    outputs=[output_gap],\r\n    optimizer_cls=torch.optim.AdamW,\r\n    optimizer_args={\"lr\": 1e-4}\r\n)\r\n\r\nlogger = pl.loggers.TensorBoardLogger(save_dir=omdb_folder)\r\ncallbacks = [\r\n    spk.train.ModelCheckpoint(\r\n        model_path=os.path.join(omdb_folder, \"best_inference_model\"),\r\n        save_top_k=1,\r\n        monitor=\"val_loss\"\r\n    )\r\n]\r\n\r\ntrainer = pl.Trainer(\r\n    callbacks=callbacks,\r\n    logger=logger,\r\n    default_root_dir=omdb_folder,\r\n    max_epochs=10, # for testing, we restrict the number of epochs\r\n    accelerator='gpu',\r\n    devices=2\r\n)\r\ntrainer.fit(task, datamodule=omdbdata)\r\n```\r\n\r\nDo you have any suggestion to solve these problems?\r\n\r\nBest regards,\r\nMira√ß\r\n","closed_by":{"login":"Stefaanhess","id":23171261,"node_id":"MDQ6VXNlcjIzMTcxMjYx","avatar_url":"https://avatars.githubusercontent.com/u/23171261?v=4","gravatar_id":"","url":"https://api.github.com/users/Stefaanhess","html_url":"https://github.com/Stefaanhess","followers_url":"https://api.github.com/users/Stefaanhess/followers","following_url":"https://api.github.com/users/Stefaanhess/following{/other_user}","gists_url":"https://api.github.com/users/Stefaanhess/gists{/gist_id}","starred_url":"https://api.github.com/users/Stefaanhess/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Stefaanhess/subscriptions","organizations_url":"https://api.github.com/users/Stefaanhess/orgs","repos_url":"https://api.github.com/users/Stefaanhess/repos","events_url":"https://api.github.com/users/Stefaanhess/events{/privacy}","received_events_url":"https://api.github.com/users/Stefaanhess/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/480/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/atomistic-machine-learning/schnetpack/issues/480/timeline","performed_via_github_app":null,"state_reason":"completed"}