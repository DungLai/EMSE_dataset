[{"url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/comments/495254129","html_url":"https://github.com/songyouwei/ABSA-PyTorch/issues/55#issuecomment-495254129","issue_url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/55","id":495254129,"node_id":"MDEyOklzc3VlQ29tbWVudDQ5NTI1NDEyOQ==","user":{"login":"songyouwei","id":2573291,"node_id":"MDQ6VXNlcjI1NzMyOTE=","avatar_url":"https://avatars.githubusercontent.com/u/2573291?v=4","gravatar_id":"","url":"https://api.github.com/users/songyouwei","html_url":"https://github.com/songyouwei","followers_url":"https://api.github.com/users/songyouwei/followers","following_url":"https://api.github.com/users/songyouwei/following{/other_user}","gists_url":"https://api.github.com/users/songyouwei/gists{/gist_id}","starred_url":"https://api.github.com/users/songyouwei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/songyouwei/subscriptions","organizations_url":"https://api.github.com/users/songyouwei/orgs","repos_url":"https://api.github.com/users/songyouwei/repos","events_url":"https://api.github.com/users/songyouwei/events{/privacy}","received_events_url":"https://api.github.com/users/songyouwei/received_events","type":"User","site_admin":false},"created_at":"2019-05-23T14:55:33Z","updated_at":"2019-05-23T14:55:33Z","author_association":"OWNER","body":"It looks like you're using a non-BERT tokenizer.\r\nCurrently, `infer_example.py` only works for non-BERT-based models.\r\nYou should use `Tokenizer4Bert` in your `__init__`. Refer to the following code:\r\nhttps://github.com/songyouwei/ABSA-PyTorch/blob/a736bf1cc07e4509fe60e986dbe9b8658d153817/train.py#L35-L48\r\n\r\nIf you have this work done, feel free to make a pull request!","reactions":{"url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/comments/495254129/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"songyouwei","id":2573291,"node_id":"MDQ6VXNlcjI1NzMyOTE=","avatar_url":"https://avatars.githubusercontent.com/u/2573291?v=4","gravatar_id":"","url":"https://api.github.com/users/songyouwei","html_url":"https://github.com/songyouwei","followers_url":"https://api.github.com/users/songyouwei/followers","following_url":"https://api.github.com/users/songyouwei/following{/other_user}","gists_url":"https://api.github.com/users/songyouwei/gists{/gist_id}","starred_url":"https://api.github.com/users/songyouwei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/songyouwei/subscriptions","organizations_url":"https://api.github.com/users/songyouwei/orgs","repos_url":"https://api.github.com/users/songyouwei/repos","events_url":"https://api.github.com/users/songyouwei/events{/privacy}","received_events_url":"https://api.github.com/users/songyouwei/received_events","type":"User","site_admin":false}},{"id":2390206529,"node_id":"MDEyOkxhYmVsZWRFdmVudDIzOTAyMDY1Mjk=","url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/events/2390206529","actor":{"login":"songyouwei","id":2573291,"node_id":"MDQ6VXNlcjI1NzMyOTE=","avatar_url":"https://avatars.githubusercontent.com/u/2573291?v=4","gravatar_id":"","url":"https://api.github.com/users/songyouwei","html_url":"https://github.com/songyouwei","followers_url":"https://api.github.com/users/songyouwei/followers","following_url":"https://api.github.com/users/songyouwei/following{/other_user}","gists_url":"https://api.github.com/users/songyouwei/gists{/gist_id}","starred_url":"https://api.github.com/users/songyouwei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/songyouwei/subscriptions","organizations_url":"https://api.github.com/users/songyouwei/orgs","repos_url":"https://api.github.com/users/songyouwei/repos","events_url":"https://api.github.com/users/songyouwei/events{/privacy}","received_events_url":"https://api.github.com/users/songyouwei/received_events","type":"User","site_admin":false},"event":"labeled","commit_id":null,"commit_url":null,"created_at":"2019-06-05T06:20:48Z","label":{"name":"help wanted","color":"008672"},"performed_via_github_app":null},{"url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/comments/507692284","html_url":"https://github.com/songyouwei/ABSA-PyTorch/issues/55#issuecomment-507692284","issue_url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/55","id":507692284,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNzY5MjI4NA==","user":{"login":"MiniXC","id":3523501,"node_id":"MDQ6VXNlcjM1MjM1MDE=","avatar_url":"https://avatars.githubusercontent.com/u/3523501?v=4","gravatar_id":"","url":"https://api.github.com/users/MiniXC","html_url":"https://github.com/MiniXC","followers_url":"https://api.github.com/users/MiniXC/followers","following_url":"https://api.github.com/users/MiniXC/following{/other_user}","gists_url":"https://api.github.com/users/MiniXC/gists{/gist_id}","starred_url":"https://api.github.com/users/MiniXC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MiniXC/subscriptions","organizations_url":"https://api.github.com/users/MiniXC/orgs","repos_url":"https://api.github.com/users/MiniXC/repos","events_url":"https://api.github.com/users/MiniXC/events{/privacy}","received_events_url":"https://api.github.com/users/MiniXC/received_events","type":"User","site_admin":false},"created_at":"2019-07-02T14:05:41Z","updated_at":"2019-07-02T14:05:41Z","author_association":"NONE","body":"I changed above code to use ``Tokenizer4Bert`` but run into the following issue which was a dead end for me.\r\n````error\r\nloading model bert_spc ...\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n<ipython-input-2-30eeab93ee96> in <module>\r\n     87 \r\n     88     inf = Inferer(opt)\r\n---> 89     t_probs = inf.evaluate(['happy memory', 'the service is terrible', 'just normal food'])\r\n     90     print(t_probs.argmax(axis=-1) - 1)\r\n\r\n<ipython-input-2-30eeab93ee96> in evaluate(self, raw_texts)\r\n     43 \r\n     44         t_inputs = [context_indices, aspect_indices]\r\n---> 45         t_outputs = self.model(t_inputs)\r\n     46 \r\n     47         t_probs = F.softmax(t_outputs, dim=-1).cpu().numpy()\r\n\r\n~/.local/lib/python3.6/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    491             result = self._slow_forward(*input, **kwargs)\r\n    492         else:\r\n--> 493             result = self.forward(*input, **kwargs)\r\n    494         for hook in self._forward_hooks.values():\r\n    495             hook_result = hook(self, input, result)\r\n\r\n~/Research/ABSA-PyTorch/models/bert_spc.py in forward(self, inputs)\r\n     21         # text_bert_indices = self.squeeze_embedding(text_bert_indices, text_bert_len)\r\n     22         # bert_segments_ids = self.squeeze_embedding(bert_segments_ids, text_bert_len)\r\n---> 23         _, pooled_output = self.bert(text_bert_indices, bert_segments_ids, output_all_encoded_layers=False)\r\n     24         pooled_output = self.dropout(pooled_output)\r\n     25         logits = self.dense(pooled_output)\r\n\r\n~/.local/lib/python3.6/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    491             result = self._slow_forward(*input, **kwargs)\r\n    492         else:\r\n--> 493             result = self.forward(*input, **kwargs)\r\n    494         for hook in self._forward_hooks.values():\r\n    495             hook_result = hook(self, input, result)\r\n\r\n~/.local/lib/python3.6/site-packages/pytorch_pretrained_bert/modeling.py in forward(self, input_ids, token_type_ids, attention_mask, output_all_encoded_layers)\r\n    731         encoded_layers = self.encoder(embedding_output,\r\n    732                                       extended_attention_mask,\r\n--> 733                                       output_all_encoded_layers=output_all_encoded_layers)\r\n    734         sequence_output = encoded_layers[-1]\r\n    735         pooled_output = self.pooler(sequence_output)\r\n\r\n~/.local/lib/python3.6/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    491             result = self._slow_forward(*input, **kwargs)\r\n    492         else:\r\n--> 493             result = self.forward(*input, **kwargs)\r\n    494         for hook in self._forward_hooks.values():\r\n    495             hook_result = hook(self, input, result)\r\n\r\n~/.local/lib/python3.6/site-packages/pytorch_pretrained_bert/modeling.py in forward(self, hidden_states, attention_mask, output_all_encoded_layers)\r\n    404         all_encoder_layers = []\r\n    405         for layer_module in self.layer:\r\n--> 406             hidden_states = layer_module(hidden_states, attention_mask)\r\n    407             if output_all_encoded_layers:\r\n    408                 all_encoder_layers.append(hidden_states)\r\n\r\n~/.local/lib/python3.6/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    491             result = self._slow_forward(*input, **kwargs)\r\n    492         else:\r\n--> 493             result = self.forward(*input, **kwargs)\r\n    494         for hook in self._forward_hooks.values():\r\n    495             hook_result = hook(self, input, result)\r\n\r\n~/.local/lib/python3.6/site-packages/pytorch_pretrained_bert/modeling.py in forward(self, hidden_states, attention_mask)\r\n    389 \r\n    390     def forward(self, hidden_states, attention_mask):\r\n--> 391         attention_output = self.attention(hidden_states, attention_mask)\r\n    392         intermediate_output = self.intermediate(attention_output)\r\n    393         layer_output = self.output(intermediate_output, attention_output)\r\n\r\n~/.local/lib/python3.6/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    491             result = self._slow_forward(*input, **kwargs)\r\n    492         else:\r\n--> 493             result = self.forward(*input, **kwargs)\r\n    494         for hook in self._forward_hooks.values():\r\n    495             hook_result = hook(self, input, result)\r\n\r\n~/.local/lib/python3.6/site-packages/pytorch_pretrained_bert/modeling.py in forward(self, input_tensor, attention_mask)\r\n    347 \r\n    348     def forward(self, input_tensor, attention_mask):\r\n--> 349         self_output = self.self(input_tensor, attention_mask)\r\n    350         attention_output = self.output(self_output, input_tensor)\r\n    351         return attention_output\r\n\r\n~/.local/lib/python3.6/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    491             result = self._slow_forward(*input, **kwargs)\r\n    492         else:\r\n--> 493             result = self.forward(*input, **kwargs)\r\n    494         for hook in self._forward_hooks.values():\r\n    495             hook_result = hook(self, input, result)\r\n\r\n~/.local/lib/python3.6/site-packages/pytorch_pretrained_bert/modeling.py in forward(self, hidden_states, attention_mask)\r\n    298 \r\n    299     def forward(self, hidden_states, attention_mask):\r\n--> 300         mixed_query_layer = self.query(hidden_states)\r\n    301         mixed_key_layer = self.key(hidden_states)\r\n    302         mixed_value_layer = self.value(hidden_states)\r\n\r\n~/.local/lib/python3.6/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n    491             result = self._slow_forward(*input, **kwargs)\r\n    492         else:\r\n--> 493             result = self.forward(*input, **kwargs)\r\n    494         for hook in self._forward_hooks.values():\r\n    495             hook_result = hook(self, input, result)\r\n\r\n~/.local/lib/python3.6/site-packages/torch/nn/modules/linear.py in forward(self, input)\r\n     90     @weak_script_method\r\n     91     def forward(self, input):\r\n---> 92         return F.linear(input, self.weight, self.bias)\r\n     93 \r\n     94     def extra_repr(self):\r\n\r\n~/.local/lib/python3.6/site-packages/torch/nn/functional.py in linear(input, weight, bias)\r\n   1406         ret = torch.addmm(bias, input, weight.t())\r\n   1407     else:\r\n-> 1408         output = input.matmul(weight.t())\r\n   1409         if bias is not None:\r\n   1410             output += bias\r\n\r\nRuntimeError: cublas runtime error : resource allocation failed at /pytorch/aten/src/THC/THCGeneral.cpp:228\r\n````\r\n\r\n## My Code\r\n\r\n````python\r\n\r\nimport torch\r\nimport torch.nn.functional as F\r\nimport torch.nn as nn\r\nimport argparse\r\nfrom pytorch_pretrained_bert import BertModel\r\n\r\nfrom data_utils import build_tokenizer, build_embedding_matrix, Tokenizer4Bert\r\nfrom models import IAN, MemNet, ATAE_LSTM, AOA\r\nfrom models.bert_spc import BERT_SPC\r\n\r\n\r\nclass Inferer:\r\n    \"\"\"A simple inference example\"\"\"\r\n\r\n    def __init__(self, opt):\r\n        self.opt = opt\r\n        if 'bert' in opt.model_name:\r\n            self.tokenizer = Tokenizer4Bert(opt.max_seq_len, 'bert-base-uncased') \r\n            bert = BertModel.from_pretrained('bert-base-uncased') \r\n            self.model = opt.model_class(bert, self.opt)\r\n        else:\r\n            self.tokenizer = build_tokenizer(\r\n                fnames=[opt.dataset_file['train'], opt.dataset_file['test']],\r\n                max_seq_len=opt.max_seq_len,\r\n                dat_fname='{0}_tokenizer.dat'.format(opt.dataset))\r\n            embedding_matrix = build_embedding_matrix(\r\n                word2idx=self.tokenizer.word2idx,\r\n                embed_dim=opt.embed_dim,\r\n                dat_fname='{0}_{1}_embedding_matrix.dat'.format(str(opt.embed_dim), opt.dataset))\r\n            self.model = opt.model_class(embedding_matrix, opt)\r\n        print('loading model {0} ...'.format(opt.model_name))\r\n        self.model.load_state_dict(torch.load(opt.state_dict_path))\r\n        self.model = self.model.to(opt.device)\r\n        # switch model to evaluation mode\r\n        self.model.eval()\r\n        torch.autograd.set_grad_enabled(False)\r\n\r\n    def evaluate(self, raw_texts):\r\n        context_seqs = [self.tokenizer.text_to_sequence(raw_text.lower().strip()) for raw_text in raw_texts]\r\n        aspect_seqs = [self.tokenizer.text_to_sequence('null')] * len(raw_texts)\r\n        context_indices = torch.tensor(context_seqs, dtype=torch.int64).to(self.opt.device)\r\n        aspect_indices = torch.tensor(aspect_seqs, dtype=torch.int64).to(self.opt.device)\r\n\r\n        t_inputs = [context_indices, aspect_indices]\r\n        t_outputs = self.model(t_inputs)\r\n\r\n        t_probs = F.softmax(t_outputs, dim=-1).cpu().numpy()\r\n        return t_probs\r\n\r\n\r\nif __name__ == '__main__':\r\n    model_classes = {\r\n        'atae_lstm': ATAE_LSTM,\r\n        'ian': IAN,\r\n        'memnet': MemNet,\r\n        'aoa': AOA,\r\n        'bert_spc': BERT_SPC,\r\n    }\r\n    # set your trained models here\r\n    model_state_dict_paths = {\r\n        'atae_lstm': 'state_dict/atae_lstm_restaurant_acc0.7786',\r\n        'ian': 'state_dict/ian_restaurant_acc0.7911',\r\n        'memnet': 'state_dict/memnet_restaurant_acc0.7911',\r\n        'aoa': 'state_dict/aoa_restaurant_acc0.8063',\r\n        'bert_spc': 'state_dict/bert_spc_restaurant_val_acc0.8473',\r\n    }\r\n\r\n    class Option(object):\r\n        pass\r\n    opt = Option()\r\n    opt.model_name = 'bert_spc'\r\n    opt.model_class = model_classes[opt.model_name]\r\n    opt.dataset = 'restaurant'\r\n    opt.dataset_file = {\r\n        'train': './datasets/semeval14/Restaurants_Train.xml.seg',\r\n        'test': './datasets/semeval14/Restaurants_Test_Gold.xml.seg'\r\n    }\r\n    opt.state_dict_path = model_state_dict_paths[opt.model_name]\r\n    opt.embed_dim = 300\r\n    opt.hidden_dim = 300\r\n    opt.max_seq_len = 80\r\n    opt.polarities_dim = 3\r\n    opt.dropout = 0.1\r\n    opt.bert_dim = 768\r\n    opt.hops = 3\r\n    opt.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\r\n    \r\n    inf = Inferer(opt)\r\n    t_probs = inf.evaluate(['happy memory', 'the service is terrible', 'just normal food'])\r\n    print(t_probs.argmax(axis=-1) - 1)\r\n````","reactions":{"url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/comments/507692284/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"MiniXC","id":3523501,"node_id":"MDQ6VXNlcjM1MjM1MDE=","avatar_url":"https://avatars.githubusercontent.com/u/3523501?v=4","gravatar_id":"","url":"https://api.github.com/users/MiniXC","html_url":"https://github.com/MiniXC","followers_url":"https://api.github.com/users/MiniXC/followers","following_url":"https://api.github.com/users/MiniXC/following{/other_user}","gists_url":"https://api.github.com/users/MiniXC/gists{/gist_id}","starred_url":"https://api.github.com/users/MiniXC/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MiniXC/subscriptions","organizations_url":"https://api.github.com/users/MiniXC/orgs","repos_url":"https://api.github.com/users/MiniXC/repos","events_url":"https://api.github.com/users/MiniXC/events{/privacy}","received_events_url":"https://api.github.com/users/MiniXC/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/comments/513155921","html_url":"https://github.com/songyouwei/ABSA-PyTorch/issues/55#issuecomment-513155921","issue_url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/55","id":513155921,"node_id":"MDEyOklzc3VlQ29tbWVudDUxMzE1NTkyMQ==","user":{"login":"abhinandansrivastava","id":30800003,"node_id":"MDQ6VXNlcjMwODAwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/30800003?v=4","gravatar_id":"","url":"https://api.github.com/users/abhinandansrivastava","html_url":"https://github.com/abhinandansrivastava","followers_url":"https://api.github.com/users/abhinandansrivastava/followers","following_url":"https://api.github.com/users/abhinandansrivastava/following{/other_user}","gists_url":"https://api.github.com/users/abhinandansrivastava/gists{/gist_id}","starred_url":"https://api.github.com/users/abhinandansrivastava/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhinandansrivastava/subscriptions","organizations_url":"https://api.github.com/users/abhinandansrivastava/orgs","repos_url":"https://api.github.com/users/abhinandansrivastava/repos","events_url":"https://api.github.com/users/abhinandansrivastava/events{/privacy}","received_events_url":"https://api.github.com/users/abhinandansrivastava/received_events","type":"User","site_admin":false},"created_at":"2019-07-19T09:10:27Z","updated_at":"2019-07-19T09:10:27Z","author_association":"NONE","body":"Is there any update on this issue ?","reactions":{"url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/comments/513155921/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"abhinandansrivastava","id":30800003,"node_id":"MDQ6VXNlcjMwODAwMDAz","avatar_url":"https://avatars.githubusercontent.com/u/30800003?v=4","gravatar_id":"","url":"https://api.github.com/users/abhinandansrivastava","html_url":"https://github.com/abhinandansrivastava","followers_url":"https://api.github.com/users/abhinandansrivastava/followers","following_url":"https://api.github.com/users/abhinandansrivastava/following{/other_user}","gists_url":"https://api.github.com/users/abhinandansrivastava/gists{/gist_id}","starred_url":"https://api.github.com/users/abhinandansrivastava/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/abhinandansrivastava/subscriptions","organizations_url":"https://api.github.com/users/abhinandansrivastava/orgs","repos_url":"https://api.github.com/users/abhinandansrivastava/repos","events_url":"https://api.github.com/users/abhinandansrivastava/events{/privacy}","received_events_url":"https://api.github.com/users/abhinandansrivastava/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/comments/539279953","html_url":"https://github.com/songyouwei/ABSA-PyTorch/issues/55#issuecomment-539279953","issue_url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/55","id":539279953,"node_id":"MDEyOklzc3VlQ29tbWVudDUzOTI3OTk1Mw==","user":{"login":"rmarcacini","id":40037976,"node_id":"MDQ6VXNlcjQwMDM3OTc2","avatar_url":"https://avatars.githubusercontent.com/u/40037976?v=4","gravatar_id":"","url":"https://api.github.com/users/rmarcacini","html_url":"https://github.com/rmarcacini","followers_url":"https://api.github.com/users/rmarcacini/followers","following_url":"https://api.github.com/users/rmarcacini/following{/other_user}","gists_url":"https://api.github.com/users/rmarcacini/gists{/gist_id}","starred_url":"https://api.github.com/users/rmarcacini/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmarcacini/subscriptions","organizations_url":"https://api.github.com/users/rmarcacini/orgs","repos_url":"https://api.github.com/users/rmarcacini/repos","events_url":"https://api.github.com/users/rmarcacini/events{/privacy}","received_events_url":"https://api.github.com/users/rmarcacini/received_events","type":"User","site_admin":false},"created_at":"2019-10-08T02:03:07Z","updated_at":"2019-10-08T02:03:07Z","author_association":"CONTRIBUTOR","body":"> Is there any update on this issue ?\r\n\r\nThe 'infer_example.py' does not work for bert models because different preparation of input texts (tokenization) is required. Here, I wrote a prediction example for bert models and tested for bert_spc.\r\n\r\nhttps://github.com/rmarcacini/ABSA-PyTorch/blob/master/infer_example_bert_models.py","reactions":{"url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/comments/539279953/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"rmarcacini","id":40037976,"node_id":"MDQ6VXNlcjQwMDM3OTc2","avatar_url":"https://avatars.githubusercontent.com/u/40037976?v=4","gravatar_id":"","url":"https://api.github.com/users/rmarcacini","html_url":"https://github.com/rmarcacini","followers_url":"https://api.github.com/users/rmarcacini/followers","following_url":"https://api.github.com/users/rmarcacini/following{/other_user}","gists_url":"https://api.github.com/users/rmarcacini/gists{/gist_id}","starred_url":"https://api.github.com/users/rmarcacini/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rmarcacini/subscriptions","organizations_url":"https://api.github.com/users/rmarcacini/orgs","repos_url":"https://api.github.com/users/rmarcacini/repos","events_url":"https://api.github.com/users/rmarcacini/events{/privacy}","received_events_url":"https://api.github.com/users/rmarcacini/received_events","type":"User","site_admin":false}},{"id":2693841069,"node_id":"MDEyOkxhYmVsZWRFdmVudDI2OTM4NDEwNjk=","url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/events/2693841069","actor":{"login":"songyouwei","id":2573291,"node_id":"MDQ6VXNlcjI1NzMyOTE=","avatar_url":"https://avatars.githubusercontent.com/u/2573291?v=4","gravatar_id":"","url":"https://api.github.com/users/songyouwei","html_url":"https://github.com/songyouwei","followers_url":"https://api.github.com/users/songyouwei/followers","following_url":"https://api.github.com/users/songyouwei/following{/other_user}","gists_url":"https://api.github.com/users/songyouwei/gists{/gist_id}","starred_url":"https://api.github.com/users/songyouwei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/songyouwei/subscriptions","organizations_url":"https://api.github.com/users/songyouwei/orgs","repos_url":"https://api.github.com/users/songyouwei/repos","events_url":"https://api.github.com/users/songyouwei/events{/privacy}","received_events_url":"https://api.github.com/users/songyouwei/received_events","type":"User","site_admin":false},"event":"labeled","commit_id":null,"commit_url":null,"created_at":"2019-10-08T02:06:56Z","label":{"name":"good first issue","color":"7057ff"},"performed_via_github_app":null},{"id":2779531415,"node_id":"MDExOkNsb3NlZEV2ZW50Mjc3OTUzMTQxNQ==","url":"https://api.github.com/repos/songyouwei/ABSA-PyTorch/issues/events/2779531415","actor":{"login":"songyouwei","id":2573291,"node_id":"MDQ6VXNlcjI1NzMyOTE=","avatar_url":"https://avatars.githubusercontent.com/u/2573291?v=4","gravatar_id":"","url":"https://api.github.com/users/songyouwei","html_url":"https://github.com/songyouwei","followers_url":"https://api.github.com/users/songyouwei/followers","following_url":"https://api.github.com/users/songyouwei/following{/other_user}","gists_url":"https://api.github.com/users/songyouwei/gists{/gist_id}","starred_url":"https://api.github.com/users/songyouwei/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/songyouwei/subscriptions","organizations_url":"https://api.github.com/users/songyouwei/orgs","repos_url":"https://api.github.com/users/songyouwei/repos","events_url":"https://api.github.com/users/songyouwei/events{/privacy}","received_events_url":"https://api.github.com/users/songyouwei/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2019-11-07T14:27:53Z","state_reason":null,"performed_via_github_app":null}]