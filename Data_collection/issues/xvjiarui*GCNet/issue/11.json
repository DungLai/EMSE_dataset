{"url":"https://api.github.com/repos/xvjiarui/GCNet/issues/11","repository_url":"https://api.github.com/repos/xvjiarui/GCNet","labels_url":"https://api.github.com/repos/xvjiarui/GCNet/issues/11/labels{/name}","comments_url":"https://api.github.com/repos/xvjiarui/GCNet/issues/11/comments","events_url":"https://api.github.com/repos/xvjiarui/GCNet/issues/11/events","html_url":"https://github.com/xvjiarui/GCNet/issues/11","id":445332271,"node_id":"MDU6SXNzdWU0NDUzMzIyNzE=","number":11,"title":"Zero mAP without mask","user":{"login":"dereyly","id":5127675,"node_id":"MDQ6VXNlcjUxMjc2NzU=","avatar_url":"https://avatars.githubusercontent.com/u/5127675?v=4","gravatar_id":"","url":"https://api.github.com/users/dereyly","html_url":"https://github.com/dereyly","followers_url":"https://api.github.com/users/dereyly/followers","following_url":"https://api.github.com/users/dereyly/following{/other_user}","gists_url":"https://api.github.com/users/dereyly/gists{/gist_id}","starred_url":"https://api.github.com/users/dereyly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dereyly/subscriptions","organizations_url":"https://api.github.com/users/dereyly/orgs","repos_url":"https://api.github.com/users/dereyly/repos","events_url":"https://api.github.com/users/dereyly/events{/privacy}","received_events_url":"https://api.github.com/users/dereyly/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2019-05-17T08:46:52Z","updated_at":"2019-08-08T06:53:25Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hello.\r\nThank you for nice work, I try to use non local nets (GCNet) on practice\r\nThis config DCN + GCNet r4 + scale_augmentation and without mask -- faster RCNN (cascade)\r\nmAP =0 \r\nI read the log and its strange acc = 97.6621 from begining to end -- maybe it is trivial solution always 0\r\n``` python\r\n# model settings\r\nmodel = dict(\r\n    type='CascadeRCNN',\r\n    num_stages=3,\r\n    pretrained='modelzoo://resnet50',\r\n    backbone=dict(\r\n        type='ResNet',\r\n        depth=50,\r\n        num_stages=4,\r\n        out_indices=(0, 1, 2, 3),\r\n        frozen_stages=1,\r\n        style='pytorch',\r\n        ct=dict(\r\n            insert_pos='after_1x1',\r\n            ratio=1./4.,\r\n        ),\r\n        stage_with_ct=(False, True, True, True),\r\n        dcn=dict(\r\n            modulated=False,\r\n            groups=32,\r\n            deformable_groups=1,\r\n            fallback_on_stride=False),\r\n        stage_with_dcn=(False, True, True, True),\r\n        normalize=dict(type='SyncBN', frozen=False),\r\n        norm_eval=False,\r\n    ),\r\n    neck=dict(\r\n        type='FPN',\r\n        in_channels=[256, 512, 1024, 2048],\r\n        out_channels=256,\r\n        num_outs=5),\r\n    rpn_head=dict(\r\n        type='RPNHead',\r\n        in_channels=256,\r\n        feat_channels=256,\r\n        anchor_scales=[8],\r\n        anchor_ratios=[0.5, 1.0, 2.0],\r\n        anchor_strides=[4, 8, 16, 32, 64],\r\n        target_means=[.0, .0, .0, .0],\r\n        target_stds=[1.0, 1.0, 1.0, 1.0],\r\n        use_sigmoid_cls=True),\r\n    bbox_roi_extractor=dict(\r\n        type='SingleRoIExtractor',\r\n        roi_layer=dict(type='RoIAlign', out_size=7, sample_num=2),\r\n        out_channels=256,\r\n        featmap_strides=[4, 8, 16, 32]),\r\n    bbox_head=[\r\n        dict(\r\n            type='SharedFCBBoxHead',\r\n            num_fcs=2,\r\n            in_channels=256,\r\n            fc_out_channels=1024,\r\n            roi_feat_size=7,\r\n            num_classes=81,\r\n            target_means=[0., 0., 0., 0.],\r\n            target_stds=[0.1, 0.1, 0.2, 0.2],\r\n            reg_class_agnostic=True),\r\n        dict(\r\n            type='SharedFCBBoxHead',\r\n            num_fcs=2,\r\n            in_channels=256,\r\n            fc_out_channels=1024,\r\n            roi_feat_size=7,\r\n            num_classes=81,\r\n            target_means=[0., 0., 0., 0.],\r\n            target_stds=[0.05, 0.05, 0.1, 0.1],\r\n            reg_class_agnostic=True),\r\n        dict(\r\n            type='SharedFCBBoxHead',\r\n            num_fcs=2,\r\n            in_channels=256,\r\n            fc_out_channels=1024,\r\n            roi_feat_size=7,\r\n            num_classes=81,\r\n            target_means=[0., 0., 0., 0.],\r\n            target_stds=[0.033, 0.033, 0.067, 0.067],\r\n            reg_class_agnostic=True)\r\n    ])\r\n# model training and testing settings\r\ntrain_cfg = dict(\r\n    rpn=dict(\r\n        assigner=dict(\r\n            type='MaxIoUAssigner',\r\n            pos_iou_thr=0.7,\r\n            neg_iou_thr=0.3,\r\n            min_pos_iou=0.3,\r\n            ignore_iof_thr=-1),\r\n        sampler=dict(\r\n            type='RandomSampler',\r\n            num=256,\r\n            pos_fraction=0.5,\r\n            neg_pos_ub=-1,\r\n            add_gt_as_proposals=False),\r\n        allowed_border=0,\r\n        pos_weight=-1,\r\n        smoothl1_beta=1 / 9.0,\r\n        debug=False),\r\n    rcnn=[\r\n        dict(\r\n            assigner=dict(\r\n                type='MaxIoUAssigner',\r\n                pos_iou_thr=0.5,\r\n                neg_iou_thr=0.5,\r\n                min_pos_iou=0.5,\r\n                ignore_iof_thr=-1),\r\n            sampler=dict(\r\n                type='RandomSampler',\r\n                num=512,\r\n                pos_fraction=0.25,\r\n                neg_pos_ub=-1,\r\n                add_gt_as_proposals=True),\r\n            pos_weight=-1,\r\n            debug=False),\r\n        dict(\r\n            assigner=dict(\r\n                type='MaxIoUAssigner',\r\n                pos_iou_thr=0.6,\r\n                neg_iou_thr=0.6,\r\n                min_pos_iou=0.6,\r\n                ignore_iof_thr=-1),\r\n            sampler=dict(\r\n                type='RandomSampler',\r\n                num=512,\r\n                pos_fraction=0.25,\r\n                neg_pos_ub=-1,\r\n                add_gt_as_proposals=True),\r\n            pos_weight=-1,\r\n            debug=False),\r\n        dict(\r\n            assigner=dict(\r\n                type='MaxIoUAssigner',\r\n                pos_iou_thr=0.7,\r\n                neg_iou_thr=0.7,\r\n                min_pos_iou=0.7,\r\n                ignore_iof_thr=-1),\r\n            sampler=dict(\r\n                type='RandomSampler',\r\n                num=512,\r\n                pos_fraction=0.25,\r\n                neg_pos_ub=-1,\r\n                add_gt_as_proposals=True),\r\n            pos_weight=-1,\r\n            debug=False)\r\n    ],\r\n    stage_loss_weights=[1, 0.5, 0.25])\r\ntest_cfg = dict(\r\n    rpn=dict(\r\n        nms_across_levels=False,\r\n        nms_pre=2000,\r\n        nms_post=2000,\r\n        max_num=2000,\r\n        nms_thr=0.7,\r\n        min_bbox_size=0),\r\n    rcnn=dict(\r\n        score_thr=0.05, nms=dict(type='nms', iou_thr=0.5), max_per_img=100),\r\n    keep_all_stages=False)\r\n# dataset settings\r\ndataset_type = 'CocoDataset'\r\ndata_root = 'data/COCO/'\r\nimg_norm_cfg = dict(\r\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\r\ndata = dict(\r\n    imgs_per_gpu=2,\r\n    workers_per_gpu=2,\r\n    train=dict(\r\n        type=dataset_type,\r\n        ann_file=data_root + 'annotations/instances_train2017.json',\r\n        img_prefix=data_root + 'train2017/',\r\n        img_scale=[(1600, 400), (1600, 1400)],\r\n        img_norm_cfg=img_norm_cfg,\r\n        size_divisor=32,\r\n        flip_ratio=0.5,\r\n        with_mask=True,\r\n        with_crowd=True,\r\n        with_label=True),\r\n    val=dict(\r\n        type=dataset_type,\r\n        ann_file=data_root + 'annotations/instances_val2017.json',\r\n        img_prefix=data_root + 'val2017/',\r\n        img_scale=(1333, 800),\r\n        img_norm_cfg=img_norm_cfg,\r\n        size_divisor=32,\r\n        flip_ratio=0,\r\n        with_mask=True,\r\n        with_crowd=True,\r\n        with_label=True),\r\n    test=dict(\r\n        type=dataset_type,\r\n        ann_file=data_root + 'annotations/instances_val2017.json',\r\n        img_prefix=data_root + 'val2017/',\r\n        img_scale=(1333, 800),\r\n        img_norm_cfg=img_norm_cfg,\r\n        size_divisor=32,\r\n        flip_ratio=0,\r\n        with_mask=False,\r\n        with_label=False,\r\n        test_mode=True))\r\n# optimizer\r\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\r\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\r\n# learning policy\r\nlr_config = dict(\r\n    policy='step',\r\n    warmup='linear',\r\n    warmup_iters=500,\r\n    warmup_ratio=1.0 / 3,\r\n    step=[8, 11])\r\ncheckpoint_config = dict(interval=1)\r\n# yapf:disable\r\nlog_config = dict(\r\n    interval=50,\r\n    hooks=[\r\n        dict(type='TextLoggerHook'),\r\n        # dict(type='TensorboardLoggerHook')\r\n    ])\r\n# yapf:enable\r\n# runtime settings\r\ntotal_epochs = 12\r\ndist_params = dict(backend='nccl')\r\nlog_level = 'INFO'\r\nwork_dir = '/media/HD2/nsergievskiy/models/cascde_gcnet_r50'\r\nload_from = None\r\nresume_from = None\r\nworkflow = [('train', 1)]\r\n```\r\n[20190514_202710.log](https://github.com/xvjiarui/GCNet/files/3190661/20190514_202710.log)\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/xvjiarui/GCNet/issues/11/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/xvjiarui/GCNet/issues/11/timeline","performed_via_github_app":null,"state_reason":null}