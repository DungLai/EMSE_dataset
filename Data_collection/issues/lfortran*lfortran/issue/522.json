{"url":"https://api.github.com/repos/lfortran/lfortran/issues/522","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/522/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/522/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/522/events","html_url":"https://github.com/lfortran/lfortran/issues/522","id":1338782248,"node_id":"I_kwDOCpMuHc5PzDIo","number":522,"title":"Incorrect function in FunctionCall of `len` expr of Character type.","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:59:33Z","updated_at":"2022-08-15T09:59:33Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/679\n\n**Code**\n\nFile - `debug.f90`\n\n```fortran\nmodule string_module\nimplicit none\n    type :: string_type\n        sequence\n        private\n        character(len=:), allocatable :: raw\n    end type string_type\n\n    interface len\n        module procedure :: len_string\n    end interface\n\ncontains\n\n    elemental function len_string(string) result(length)\n            type(string_type), intent(in) :: string\n            integer :: length\n\n            if (allocated(string%raw)) then\n                length = len(string%raw)\n            else\n                length = 0\n            end if\n\n    end function len_string\n\n    pure function maybe(string) result(maybe_string)\n            type(string_type), intent(in) :: string\n            character(len=len(string)) :: maybe_string\n            if (allocated(string%raw)) then\n                maybe_string = string%raw\n            else\n                maybe_string = ''\n            end if\n    end function maybe\n\nend module\n```\n\n**Command**\n\n```bash\nlfortran --show-asr debug.f90  \n```\n\n**ASR**\n\nNotice that in symbol table of `maybe`, the intrinsic `len` is being used in character type of `maybe_string` variable. This is incorrect because what we need there is the generic procedure `len` defined in the code. The reason behind this is that generic procedure `len` is made available after `maybe` in the symbol table because all generic procedures (`interface` things I mean) are added to the symbol table after declaring all other symbols. Hence, the intrinsic `len` gets used instead.\n\n```python\n(TranslationUnit (SymbolTable 1 {lfortran_intrinsic_builtin: (IntrinsicModule lfortran_intrinsic_builtin), string_module: (Module (SymbolTable 2 {len: (GenericProcedure 2 len [2 len_string] Public), len_string: (Function (SymbolTable 4 {allocated: (ExternalSymbol 4 allocated 7 allocated lfortran_intrinsic_builtin [] allocated Private), length: (Variable 4 length ReturnVar () () Default (Integer 4 []) Source Private Required .false.), string: (Variable 4 string In () () Default (Derived 2 string_type []) Source Private Required .false.)}) len_string [(Var 4 string)] [(If (FunctionCall 4 allocated () [((DerivedRef (Var 4 string) 3 raw (Character 1 -2 () []) ()))] (Logical 4 []) () ()) [(= (Var 4 length) (FunctionCall 2 len_string 2 len [((DerivedRef (Var 4 string) 3 raw (Character 1 -2 () []) ()))] (Integer 4 []) () ()) ())] [(= (Var 4 length) (ConstantInteger 0 (Integer 4 [])) ())])] (Var 4 length) Source Private Implementation ()), maybe: (Function (SymbolTable 5 {allocated: (ExternalSymbol 5 allocated 7 allocated lfortran_intrinsic_builtin [] allocated Private), len: (ExternalSymbol 5 len 7 len lfortran_intrinsic_builtin [] len Private), maybe_string: (Variable 5 maybe_string ReturnVar () () Default (Character 1 -3 (FunctionCall 5 len () [((Var 5 string))] (Integer 4 []) () ()) []) Source Private Required .false.), string: (Variable 5 string In () () Default (Derived 2 string_type []) Source Private Required .false.)}) maybe [(Var 5 string)] [(If (FunctionCall 5 allocated () [((DerivedRef (Var 5 string) 3 raw (Character 1 -2 () []) ()))] (Logical 4 []) () ()) [(= (Var 5 maybe_string) (DerivedRef (Var 5 string) 3 raw (Character 1 -2 () []) ()) ())] [(= (Var 5 maybe_string) (ConstantString \"\" (Character 1 0 () [])) ())])] (Var 5 maybe_string) Source Private Implementation ()), string_type: (DerivedType (SymbolTable 3 {raw: (Variable 3 raw Local () () Allocatable (Character 1 -2 () []) Source Private Required .false.)}) string_type [raw] Source Private ())}) string_module [lfortran_intrinsic_builtin] .false. .false.)}) [])\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/522/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/522/timeline","performed_via_github_app":null,"state_reason":null}