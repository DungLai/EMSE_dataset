{"url":"https://api.github.com/repos/lfortran/lfortran/issues/802","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/802/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/802/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/802/events","html_url":"https://github.com/lfortran/lfortran/issues/802","id":1389743153,"node_id":"I_kwDOCpMuHc5S1cwx","number":802,"title":"ASR SymbolTable cannot handle variable dependencies","user":{"login":"lucifer1004","id":13583761,"node_id":"MDQ6VXNlcjEzNTgzNzYx","avatar_url":"https://avatars.githubusercontent.com/u/13583761?v=4","gravatar_id":"","url":"https://api.github.com/users/lucifer1004","html_url":"https://github.com/lucifer1004","followers_url":"https://api.github.com/users/lucifer1004/followers","following_url":"https://api.github.com/users/lucifer1004/following{/other_user}","gists_url":"https://api.github.com/users/lucifer1004/gists{/gist_id}","starred_url":"https://api.github.com/users/lucifer1004/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lucifer1004/subscriptions","organizations_url":"https://api.github.com/users/lucifer1004/orgs","repos_url":"https://api.github.com/users/lucifer1004/repos","events_url":"https://api.github.com/users/lucifer1004/events{/privacy}","received_events_url":"https://api.github.com/users/lucifer1004/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":19,"created_at":"2022-09-28T17:54:15Z","updated_at":"2022-12-06T04:24:55Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"The SymbolTable is a `map` under the hood and the variables are stored in ascending order. But when some of them depend on other variables to initialize, the correct order should be figured out, just as the module dependency case.\r\n\r\nFor example, `integration_tests/bits_02.f90`\r\n\r\n```fortran\r\nprogram bits_02\r\nuse iso_fortran_env, only: block_kind => int64, bits_kind  => int32\r\nimplicit none\r\n\r\n    integer(bits_kind), parameter :: block_size  = bit_size(0_block_kind)\r\n    integer(block_kind), parameter :: all_zeros  = 0_block_kind\r\n    integer(block_kind), parameter :: all_ones   = not(all_zeros)\r\n\r\n    print *, block_size\r\n    print *, all_zeros\r\n    print *, all_ones\r\n\r\nend program\r\n```\r\n\r\n`all_ones` depends on `all_zeros` to initialize, but it will be in front of `all_zeros` in the SymbolTable.\r\n\r\nSo the translated C/Cpp/Julia code cannot run.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/802/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/802/timeline","performed_via_github_app":null,"state_reason":null}