{"url":"https://api.github.com/repos/lfortran/lfortran/issues/237","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/237/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/237/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/237/events","html_url":"https://github.com/lfortran/lfortran/issues/237","id":1338687437,"node_id":"I_kwDOCpMuHc5Pyr_N","number":237,"title":"C++ AST TODO","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T08:21:54Z","updated_at":"2022-08-15T08:21:54Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/139\n\n* [ ] Add a visitor that raises an exception if a method is visited and not implemented. Test that the exception is raised.\n* [x] Generate the pickle visitor automatically (as a base class, then subclass it to provide customized shorter print for a few selected types)\n* [ ] Make Allocator allocate another chunk of memory and keep track of the chunks, and free them all at the end\n* [ ] Make Str and Vec more similar to std::string and std::vector, e.g., add operator[] to Vec, etc.\n* [x] Make `sep` part of a `statement`, possibly adjust location info & test that the location info is correct\n* [x] Parse `.eq.`\n* [ ] Parse some real Fortran into AST\n* [x] Implement location tracking + nice syntax error messages\n* [ ] Split the visitors to `ast_visitors.h` and `make_*` functions into `ast_make.h`, so that `ast.h` only contains the definitions but no code: make all headers only depend on `ast.h`, and the `ast_visitor.h` and `ast_make.h` will only be included in cpp files. To speedup compilation.\n* [ ] Generate Python wrappers\n* [ ] Switch ANTLR based parser to this C++ parser, make all (unmodified) tests pass","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/237/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/237/timeline","performed_via_github_app":null,"state_reason":null}