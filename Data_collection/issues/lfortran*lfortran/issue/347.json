{"url":"https://api.github.com/repos/lfortran/lfortran/issues/347","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/347/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/347/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/347/events","html_url":"https://github.com/lfortran/lfortran/issues/347","id":1338728202,"node_id":"I_kwDOCpMuHc5Py18K","number":347,"title":"Evaluating of constant expressions at compile time","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:05:59Z","updated_at":"2022-08-15T09:05:59Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/375\n\nA constant expression can have arithmetic operations, (almost?) any intrinsic function etc. Such expressions can be used in defining parameters, such as:\n```fortran\ninteger, parameter :: dp = kind(0.d0)\nreal(dp), parameter :: pi = 4 * atan(1.0_dp)\n```\nSuch expressions should be evaluated in `ast_to_src.cpp` when encountered. Intrinsic functions should be called from the runtime library (at compile time). One can have a higher accuracy versions of functions like `atan` (GFortran does it that way).\n\nThe evaluated version (possibly with the unevaluated version) should be stored in ASR. Then when it is referenced, say in `real(dp)`, one does not have to evaluate it anymore, and simply obtains the evaluated value right away from ASR.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/347/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/347/timeline","performed_via_github_app":null,"state_reason":null}