{"url":"https://api.github.com/repos/lfortran/lfortran/issues/575","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/575/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/575/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/575/events","html_url":"https://github.com/lfortran/lfortran/issues/575","id":1338787390,"node_id":"I_kwDOCpMuHc5PzEY-","number":575,"title":"Declaring an array `a(n)` and `a(0:n-1)` is unnecessarily complicated in ASR","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T10:04:33Z","updated_at":"2022-08-15T10:04:33Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/746\n\n`a(n)` is represented as:\n```\n                        (Variable \n                           3 \n                           a \n                           Local () () \n                           Default \n                           (Integer 4 [\n                              ((IntegerConstant 1 \n                                 (Integer 4 [])) \n                                 (IntegerBinOp \n                                    (IntegerBinOp \n                                       (Var 3 n) \n                                       Sub (IntegerConstant 1 \n                                       (Integer 4 [])) \n                                       (Integer 4 []) ()) \n                                    Add (IntegerConstant 1 \n                                    (Integer 4 [])) \n                                    (Integer 4 []) ()))]) \n                           Source \n                           Public \n                           Required .false.), \n```\n\nand `a(0:n-1)` is represented as:\n```\n                        (Variable \n                           2 \n                           a \n                           Local () () \n                           Default \n                           (Integer 4 [\n                              ((IntegerConstant 0 \n                                 (Integer 4 [])) \n                                 (IntegerBinOp \n                                    (IntegerBinOp \n                                       (IntegerBinOp \n                                          (Var 2 n) \n                                          Sub (IntegerConstant 1 \n                                          (Integer 4 [])) \n                                          (Integer 4 []) ()) \n                                       Sub (IntegerConstant 0 \n                                       (Integer 4 [])) \n                                       (Integer 4 []) ()) \n                                    Add (IntegerConstant 1 \n                                    (Integer 4 [])) \n                                    (Integer 4 []) ()))]) \n                           Source \n                           Public \n                           Required .false.), \n```\n\nBoth are correct, but complicated. Instead, the length of `a` should simply by stored as `(Var 3 n)` in both cases.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/575/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/575/timeline","performed_via_github_app":null,"state_reason":null}