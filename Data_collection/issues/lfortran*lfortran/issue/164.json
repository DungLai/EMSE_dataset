{"url":"https://api.github.com/repos/lfortran/lfortran/issues/164","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/164/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/164/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/164/events","html_url":"https://github.com/lfortran/lfortran/issues/164","id":1338680667,"node_id":"I_kwDOCpMuHc5PyqVb","number":164,"title":"Provide AST related functions similar to Julia","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T08:15:00Z","updated_at":"2022-08-15T08:15:00Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/28\n\nhttp://blog.leahhanson.us/post/julia/julia-introspects.html\n\nImplement an equivalent of:\n\n* Layer 1: `:` (our AST) --- we'll continue using `parse`, just like in Python\n* Layer 2: `code_lowered` (AST where for loops are converted to while loops, Julia also converts if/for and other things)\n* Layer 3: `code_typed` (our type annotated AST tree)\n* Layer 4: `code_llvm` (the LLVM IR code)\n* Layer 5: `code_native` (assembly code)\n\nLFort does exactly the same thing, but we seem to do `code_typed` before `code_lowered`.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/164/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/164/timeline","performed_via_github_app":null,"state_reason":null}