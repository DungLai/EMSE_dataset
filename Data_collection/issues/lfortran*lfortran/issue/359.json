{"url":"https://api.github.com/repos/lfortran/lfortran/issues/359","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/359/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/359/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/359/events","html_url":"https://github.com/lfortran/lfortran/issues/359","id":1338730052,"node_id":"I_kwDOCpMuHc5Py2ZE","number":359,"title":"Loop tiling","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:07:09Z","updated_at":"2022-08-15T09:07:09Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/428\n\n* https://en.wikipedia.org/wiki/Loop_nest_optimization\n\nExample:\n```fortran\ndo i = 1, n\n  A(i) = sin(B(i))\nend do\n```\ngets transformed into\n```fortran\ndo i = 1, n, 32\n  do j = 1, 32\n    A(i+j) = sin(B(i+j))\n  end do\nend do\ndo i = n-modulo(n,32), n ! roughly\n  A(i) = sin(B(i))\nend do\n```\nand\n```fortran\ndo i = 1, n, 32\n  A(i:i+32) = sin(B(i:i+32))\nend do\n```\nNow the `sin` operates on a vector, instead of a scalar.\n\nThere are two sources of speedup:\n\n* The tiling itself keeps the small size 32 array in L1 cache, thus faster access and operations\n* A special function implementations, such as `sin`, are always faster when operating on a vector, as one can use a more efficient implementation. So replacing scalar `sin` with a vector `sin` will be faster.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/359/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/359/timeline","performed_via_github_app":null,"state_reason":null}