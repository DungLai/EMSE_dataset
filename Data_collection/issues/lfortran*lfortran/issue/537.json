{"url":"https://api.github.com/repos/lfortran/lfortran/issues/537","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/537/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/537/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/537/events","html_url":"https://github.com/lfortran/lfortran/issues/537","id":1338783498,"node_id":"I_kwDOCpMuHc5PzDcK","number":537,"title":"Modernization workflow","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T10:00:58Z","updated_at":"2022-08-15T10:00:58Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/695\n\n[Here](https://github.com/fortran-lang/benchmarks/issues/35#issuecomment-1132078084) is an example of a Fortran code that is:\n\n* verbose and heavy\n* missing intent specifiers\n* purity attributes\n* real constants lack precision specifiers\n\nI think LFortran is a great platform to beautifully modernize such a code. Here is the workflow that I am imagining:\n\n* Use LFortran's compiler options to tell the compiler to promote constants to double precision (in this case) and other such things, perhaps some manual help here and there; \n* Keep compiling via LFortran's LLVM backend and run the code and ensure everything works correctly\n* Once the ASR is correct, print the ASR to modern Fortran (using configurable code conventions)\n* Additionally, tell LFortran to apply a couple ASR->ASR passes (before generating source code) with code modernization, such as:\n  * Create proper `intent(in/out/inout)` for arguments\n  * Add `pure` where possible\n  * Use `dp` instead of `kind=8`.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/537/timeline","performed_via_github_app":null,"state_reason":null}