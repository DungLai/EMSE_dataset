{"url":"https://api.github.com/repos/lfortran/lfortran/issues/318","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/318/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/318/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/318/events","html_url":"https://github.com/lfortran/lfortran/issues/318","id":1338724128,"node_id":"I_kwDOCpMuHc5Py08g","number":318,"title":"MVP: Roadmap to compile the SNAP project","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:03:09Z","updated_at":"2022-08-15T09:03:09Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/313\n\nThe roadmap at https://gitlab.com/lfortran/lfortran/-/issues/272 is a general roadmap. In this issue I am listing a specific roadmap to compile just one project:\n\nhttps://github.com/lanl/SNAP\n\nOnce we can compile it, we can release an MVP (minimum viable product) of LFortran. This project is a great target for MVP because it is not written by me, thus this will be useful to people, it uses Fortran 95, it's about 8000 lines of code, and the MPI can be turned off, it is a proxy app for a bigger production code. It is within reach. To compile it, we do not need to implement Fortran features in all generality, just enough to compile SNAP.\n\n# Roadmap\n\nParsing and AST now works. We are now working on ASR, see below.\n\n## Parsing\n\nThere are only 4 small issues, otherwise LFortran can parse everything.\n\nLFortran issues:\n\n* [x] Label after `cycle`: https://gitlab.com/lfortran/lfortran/-/issues/317\n* [x] More complicated generator expressions: https://gitlab.com/lfortran/lfortran/-/issues/315\n\nSNAP seems to be using two extensions, which might be fixed in SNAP itself, or we can implement them in LFortran:\n\n* [x] Missing comma after / in format specification (works in NAG, but seems not standard conforming): https://gitlab.com/lfortran/lfortran/-/issues/314 (we fixed it in LFortran), https://github.com/lanl/SNAP/pull/13\n* [ ] Missing comma between strings in format specification (fails in the NAG compiler also): https://gitlab.com/lfortran/lfortran/-/issues/316, https://github.com/lanl/SNAP/pull/17\n\n## AST\n\nWe can test that AST is correct file by file using `lfortran fmt -i analyze.f90` which overwrites the file by going from AST to source code. At this point the LFortran master can translate all files to AST and back and the result compiles with gfortran and SNAP gives identical results. This ensures that there are no major bugs in the parser and the AST representation (there might still be some minor bugs where we got the right result by accident). Here are all the files sorted from the largest to the smallest:\n\n* [x] setup.f90\n* [x] thrd_comm.f90\n* [x] input.f90\n  * [x] read (https://gitlab.com/lfortran/lfortran/-/merge_requests/821)\n  * [x] namelist declaration (https://gitlab.com/lfortran/lfortran/-/merge_requests/835)\n* [x] mms.f90\n* [x] mkba_sweep.f90\n* [x] dim3_sweep.f90\n  * [x] `continue` (https://gitlab.com/lfortran/lfortran/-/merge_requests/836)\n* [x] translv.f90\n  * [x] `use` inside subroutine (https://gitlab.com/lfortran/lfortran/-/merge_requests/828, https://gitlab.com/lfortran/lfortran/-/merge_requests/831)\n  * [x] implied do loop (https://gitlab.com/lfortran/lfortran/-/merge_requests/832)\n* [x] output.f90\n* [x] outer.f90\n* [x] inner.f90\n  * [x] write/format\n* [x] sweep.f90\n* [x] plib.f90\n  * [x] interface (https://gitlab.com/lfortran/lfortran/-/merge_requests/808)\n* [x] solvar.f90\n  * [x] allocate/deallocate (https://gitlab.com/lfortran/lfortran/-/merge_requests/807)\n* [x] geom.f90\n  * [x] derived type in fmt (https://gitlab.com/lfortran/lfortran/-/merge_requests/825)\n  * [x] derived type access in expressions (https://gitlab.com/lfortran/lfortran/-/merge_requests/826)\n* [x] snap_main.f90\n  * [x] write/format\n* [x] dim1_sweep.f90\n* [x] utils.f90\n  * [x] strings `'aa' // 'bb'` incorrectly printed (https://gitlab.com/lfortran/lfortran/-/merge_requests/808)\n  * [x] write\n  * [x] open (https://gitlab.com/lfortran/lfortran/-/merge_requests/824)\n  * [x] close (https://gitlab.com/lfortran/lfortran/-/merge_requests/823)\n* [x] octsweep.f90\n* [x] sn.f90\n  * [x] allocate/deallocate (https://gitlab.com/lfortran/lfortran/-/merge_requests/807)\n* [x] data.f90\n  * [x] allocate/deallocate (https://gitlab.com/lfortran/lfortran/-/merge_requests/807)\n* [x] control.f90\n  * [x] allocate/deallocate statements (https://gitlab.com/lfortran/lfortran/-/merge_requests/807)\n* [x] time.f90\n  * [x] write/format\n* [x] expxs.f90\n  * [x] interface (https://gitlab.com/lfortran/lfortran/-/merge_requests/808)\n* [x] analyze.f90\n  * [x] Dimension missing arguments (https://gitlab.com/lfortran/lfortran/-/merge_requests/806)\n* [x] version.f90\n  * [x] `write` prints as `print` (https://gitlab.com/lfortran/lfortran/-/merge_requests/814, https://gitlab.com/lfortran/lfortran/-/merge_requests/815, https://gitlab.com/lfortran/lfortran/-/merge_requests/820, https://gitlab.com/lfortran/lfortran/-/merge_requests/822)\n  * [x] `format` statements are skipped (https://gitlab.com/lfortran/lfortran/-/merge_requests/809, https://gitlab.com/lfortran/lfortran/-/merge_requests/811, https://gitlab.com/lfortran/lfortran/-/merge_requests/812, https://gitlab.com/lfortran/lfortran/-/merge_requests/813)\n* [x] dealloc.f90\n* [x] global.f90\n\n\n## ASR\n\nThe goal is to compile each module to the modfile using `lfortran -c global.f90 -o global.o`. Here is the first full dependency tree, we can take it from top to bottom:\n\n* [x] global.f90\n  * [x] Module `save` attribute (https://gitlab.com/lfortran/lfortran/-/merge_requests/884)\n  * [x] Intrinsic `kind` function, `SELECTED_INT_KIND` and `SELECTED_REAL_KIND` (https://gitlab.com/lfortran/lfortran/-/merge_requests/885, https://gitlab.com/lfortran/lfortran/-/merge_requests/888, https://gitlab.com/lfortran/lfortran/-/merge_requests/900) \n* [x] version.o : global.o\n  * [x] Issues with loading the `global` module (https://gitlab.com/lfortran/lfortran/-/merge_requests/901, https://gitlab.com/lfortran/lfortran/-/merge_requests/902, https://gitlab.com/lfortran/lfortran/-/merge_requests/903, https://gitlab.com/lfortran/lfortran/-/merge_requests/904)\n  * [x] Allow to use module variables in `use` (https://gitlab.com/lfortran/lfortran/-/merge_requests/906)\n  * [ ] Intrinsic subroutine `DATE_AND_TIME`\n  * [ ] Intrinsic `write`\n* [x] geom.o :    global.o\n* [x] sn.o :      global.o\n  * [x] `allocatable` attribute for array declarations (module variable)\n* [x] data.o :    global.o\n* [x] control.o : global.o\n* [x] time.o :    global.o\n* [x] plib.o :    global.o time.o\n* [x] thrd_comm.o:    global.o plib.o\n* [x] expxs.o :   global.o geom.o sn.o data.o\n* [x] solvar.o :  global.o plib.o geom.o sn.o data.o control.o\n* [x] mms.o:      global.o geom.o sn.o data.o control.o plib.o\n  * [x] Generic procedures from the plib module (https://gitlab.com/lfortran/lfortran/-/issues/358)\n  * [ ] \"LFortranException: read_string: String is too short for deserialization\", probably due to derived types\n* [x] dealloc.o : global.o sn.o data.o mms.o geom.o solvar.o control.o\n* [x] utils.o :   global.o dealloc.o plib.o control.o\n* [x] analyze.o:  global.o control.o geom.o data.o solvar.o plib.o\n* [x] input.o :   global.o plib.o geom.o sn.o data.o control.o utils.o time.o\n* [x] setup.o :   global.o geom.o sn.o data.o control.o mms.o utils.o time.o plib.o\n* [x] output.o :  global.o geom.o sn.o data.o control.o utils.o solvar.o mms.o time.o plib.o\n* [x] snap_main.o :   global.o utils.o version.o input.o setup.o output.o time.o dealloc.o plib.o control.o\n* [x] dim1_sweep.o :  global.o geom.o sn.o data.o control.o plib.o\n* [x] dim3_sweep.o :  global.o plib.o geom.o sn.o data.o control.o thrd_comm.o\n* [x] mkba_sweep.o :  global.o plib.o geom.o sn.o data.o control.o thrd_comm.o\n* [x] octsweep.o :    global.o geom.o sn.o data.o control.o solvar.o thrd_comm.o dim1_sweep.o dim3_sweep.o mkba_sweep.o\n* [x] sweep.o :   global.o data.o geom.o sn.o control.o octsweep.o solvar.o plib.o thrd_comm.o\n* [x] inner.o :   global.o geom.o sn.o data.o control.o solvar.o sweep.o time.o plib.o thrd_comm.o\n* [x] outer.o :   global.o geom.o sn.o data.o solvar.o control.o inner.o time.o plib.o expxs.o thrd_comm.o\n* [x] translv.o : global.o plib.o geom.o sn.o data.o control.o utils.o solvar.o expxs.o outer.o time.o thrd_comm.o analyze.o\n\nOther issues to resolve:\n\n* [x] Runtime library must be working\n\nThe LFortran and SNAP commits that together produce an ASR for `snap_main.f90`:\n\n* The latest master of LFortran (as of 93d2b868d986dbf7013ff4a811303b28f17fb126)\n* https://github.com/certik/SNAP/commit/c10d86d3c7970c0ff070360496797132fac0462f\n\nFortran features that were commented out in SNAP that we need to implement in LFortran:\n\n* [ ] format statement\n* [ ] do loops with no loop variable (just `do` / code / `end do`)\n* [ ] where statement\n* [ ] improve derived types: we have an initial implementation, but we need to improve it for SNAP\n* [ ] namelist\n* [ ] array initializer\n* [ ] case statement for strings\n* [ ] improve pointers: add nullify, fix bugs\n* [ ] improve open statement\n* [ ] runtime library functions: huge, all, mod, minloc, ceiling, maxloc, get_command_argument, adjustl, exit, date_and_time\n\nThe SNAP branch compiles with gfortran into an executable, and runs with an output:\n```console\n$ ./gsnap \n Aww SNAP. Program failed. Try again.\n```\nThe parts that were commented out make the code not run correctly, but it \"runs\".\n\n## Backends\n\n### C++\n\nThe C++ backend (as of the latest master 93d2b868d986dbf7013ff4a811303b28f17fb126) generates the following code:\n\n* https://gist.github.com/certik/bbfbffd6a247adb22f2fb9bc3d7b3a77\n\nIt does not compile with a C++ compiler yet. This is our main effort now.\n\n### LLVM\n\n## Other issues\n\n* [x] Figure out how to run a simple example without MPI: https://github.com/lanl/SNAP/issues/12, so that we can compare results against other Fortran compilers.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/318/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/318/timeline","performed_via_github_app":null,"state_reason":null}