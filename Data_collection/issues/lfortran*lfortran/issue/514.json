{"url":"https://api.github.com/repos/lfortran/lfortran/issues/514","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/514/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/514/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/514/events","html_url":"https://github.com/lfortran/lfortran/issues/514","id":1338781598,"node_id":"I_kwDOCpMuHc5PzC-e","number":514,"title":"Array representation in ASR","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:58:47Z","updated_at":"2022-08-15T09:58:47Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/666\n\nCurrently an array is represented as a `Variable` symbol with a type that has the `dimension* dim` argument set. Each `dimension` is defined as:\n```\ndimension = (expr? start, expr? end)\n```\n\nIt's not super well documented yet what it means, but I think it's similar to the AST:\n```\n-- Encoding of an array dimension declaration:\n--           start      end     end_star\n-- Declaration:\n-- X(n)       1          n       Expr   # Note: X(n) is equivalent to X(1:n)\n-- X(:)       ()         ()      Expr\n-- X(a:)      a          ()      Expr\n-- X(:b)      ()         b       Expr\n-- X(a:b)     a          b       Expr\n-- X(*)       ()         ()      Star\n-- X(a:*)     a          ()      Star\n```\n\nTaking https://github.com/lcompilers/lpython/wiki/Array-Types-Design into account, I think an array should always be represented by:\n```\ndimension = (expr start, expr end)\n```\nWhere both the `start` and `end` expressions are always present. For the `:` case the expression will link to `integer, dim :: n` local variables.\n\nFurthermore, I think it should actually be simplified further. The types should be changed from:\n```\n    = Integer(int kind, dimension* dims)\n```\nto\n```\n    = Integer(int kind, expr* shape, expr* lbound)\n```\nor\n```\n    = Integer(int kind, dimension* dims)\n\ndimension = (expr extent, expr lbound)\n```\nWhere the `shape` contains the sizes of each dimension, which currently have to be computed using `shape=start-end+1`. It is actually the `shape` that is the invariant:\n\n* It does not change when an array such as `x(3:5)` is passed into a subroutine into an argument declared as `x(:)` or `x(0:)` or `x(3:n)`; But both `start` and `end` do change.\n* It is independent of the lower bound, whether zero based (NumPy), or the default 1 based (Fortran) or arbitrary (Fortran)\n* In this sense it is the fundamental of an array, common to all frontend languages\n\nThe `lbound` (equal to the current `start`) can change as an array is passed into a subroutine, but often it is irrelevant to many of the operations such as runtime bounds checking (which mainly checks the sizes of the array; obviously the `lbound` is used for the function implementation indexing checking). In Fortran the `lbound` always has to be manually specified in each subroutine if different from 1. The exception is apparently `allocatable, intent(in)` arrays where the `lbound` is passed in implicitly.\n\nIf we later decided that we do not want to even represent `lbound` in ASR at all, it would be easier to do also.\n\nSee also:\n\n* ISO and GFortran array descriptors: https://gitlab.com/lfortran/lfortran/-/wikis/GFortran%20ABI\n* Zulip discussion: https://lfortran.zulipchat.com/#narrow/stream/197339-general/topic/Array.20representation.20in.20ASR","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/514/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/514/timeline","performed_via_github_app":null,"state_reason":null}