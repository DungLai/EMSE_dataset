{"url":"https://api.github.com/repos/lfortran/lfortran/issues/330","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/330/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/330/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/330/events","html_url":"https://github.com/lfortran/lfortran/issues/330","id":1338725555,"node_id":"I_kwDOCpMuHc5Py1Sz","number":330,"title":"Operators for linear algebra","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:04:19Z","updated_at":"2022-08-15T09:04:19Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/346\n\nOnce arrays are supported in LFortran, it would be nice if a module were created with abbreviations to make linear algebra operations more concise, which the user could import. For example, let the user write t(x) instead of transpose(x) and A .x. B instead of matmul(A,B). Matlab has left array division .\\ and right array division ./ that could be replicated. One could also look at the built-in operators for languages such as APL, J, and K and see if they can be emulated. If LFortran can have syntax as simple as Matlab and APL but still with Fortran speed, that would be an appealing combination.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/330/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/330/timeline","performed_via_github_app":null,"state_reason":null}