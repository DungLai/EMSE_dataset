{"url":"https://api.github.com/repos/lfortran/lfortran/issues/585","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/585/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/585/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/585/events","html_url":"https://github.com/lfortran/lfortran/issues/585","id":1338788328,"node_id":"I_kwDOCpMuHc5PzEno","number":585,"title":"WASM: std::bad_alloc after second compilation","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T10:05:30Z","updated_at":"2022-08-15T10:05:30Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/760\n\nWhen using the lfortran WASM jupyterlite kernel, we hit a `std::bad_alloc` with the _second_ compilation.\n\nWe wrote a small `.cpp` file to test this:\n\n```cpp\n#include <iostream>\n#include <sstream>\n\n#include <lfortran/fortran_evaluator.h>\n\nusing namespace LFortran;\n\nconst std::string code = R\"RAW(\nprogram expr2\n    implicit none\n\n    integer :: x\n\n    x = (2+3)*5\n    !print *, x\n\nend program\n)RAW\";\n\nint main() {\n    CompilerOptions copt;\n    FortranEvaluator e(copt);\n\n    std::cout << \"OK Running in Node?!\" << std::endl;\n    std::string code0 = code;\n    {\n        LocationManager lm;\n        diag::Diagnostics diagnostics;\n        auto res1 = e.get_wasm(code0, lm, diagnostics);\n        std::cout << \"RES is \" << res1.ok << std::endl;\n    }\n    {\n        try {\n            LocationManager lm;\n            diag::Diagnostics diagnostics;\n            auto res1 = e.get_wasm(code0, lm, diagnostics);\n            std::cout << \"RES is \" << res1.ok << std::endl;\n        } catch (std::exception& e) \n        {\n            std::cout << e.what() << std::endl;\n        }\n    }\n}\n```\n\nThis triggers the bug, however, _only_ when compiled with emscripten (we run it in node with `node --trace-uncaught wasmer.js`).\nFor compilation options we're using:\n\n```cmake\n    target_compile_options(wasmer PRIVATE\n        \"-fexceptions\"\n        \"SHELL: -s ENVIRONMENT='node'\"\n    )\n    target_link_libraries(wasmer lfortran_lib)\n    target_link_options(wasmer PRIVATE \"-fexceptions\")\n```\n\nAny help on this would be very much appreciated.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/585/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/585/timeline","performed_via_github_app":null,"state_reason":null}