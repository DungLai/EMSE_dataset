{"url":"https://api.github.com/repos/lfortran/lfortran/issues/173","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/173/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/173/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/173/events","html_url":"https://github.com/lfortran/lfortran/issues/173","id":1338681553,"node_id":"I_kwDOCpMuHc5PyqjR","number":173,"title":"Implement linking without depending on external binaries such as `ld`","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T08:15:51Z","updated_at":"2022-08-15T08:15:51Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/45\n\nCurrently we depend on either `gcc` and the standard `libc`, or with the `--ld-musl` flag on `ld` and `musl`. It would be nice to be able to compile executables without depending on any external package.\n\nTo do so, we have to link the `.o` files ourselves (see also https://github.com/numba/llvmlite/issues/311). One can use `link_in()` in `llvmlite` to link the LLVM modules together, then we have just one `.o` file. Then we need to convert it into an executable.\n\n1) The first step is to do it without linking against any other library (such as `libc`). Here are some initial pointers how to do get started on that:\nhttps://blogs.oracle.com/linux/hello-from-a-libc-free-world-part-1-v2  \nhttps://blogs.oracle.com/linux/hello-from-a-libc-free-world-part-2-v2  \nhttp://www.muppetlabs.com/~breadbox/software/tiny/teensy.html  \nhttps://stackoverflow.com/a/2548601/479532\n\n2) The second step is to figure out how to link in other libraries (such as `libc` and others).\n\nThe compiler will have several options:\n\na) use `gcc` to link (already implemented as default)\nb) use `ld` to link (already implemented as `--ld-musl`)\nc) or our own linking (to be implemented, see above)\n\nThe advantage of a) is that it works on all platforms easily, but one depends on `gcc`. The advantage of b) is that it doesn't require `gcc`, but it is more platform dependent. The advantage of c) is that it doesn't depend on any external package, and so the compiler is completely self-contained/self-sufficient to produce executables, but we have to implement the functionality of a linker, which is specific to each platform.\n\nI think a good plan for c) is to start with a simple proof of concept that works, and then keep improving it. It doesn't have to be feature complete right away, as one can use a) or b) for that.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/173/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/173/timeline","performed_via_github_app":null,"state_reason":null}