{"url":"https://api.github.com/repos/lfortran/lfortran/issues/320","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/320/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/320/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/320/events","html_url":"https://github.com/lfortran/lfortran/issues/320","id":1338724329,"node_id":"I_kwDOCpMuHc5Py0_p","number":320,"title":"Roadmap to compile `dftatom`","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:03:20Z","updated_at":"2022-08-15T09:03:20Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/319\n\nHere is a roadmap for `dftatom`: https://github.com/certik/dftatom\n\nSimilar to https://gitlab.com/lfortran/lfortran/-/issues/313, this issue is to keep track of things to fix to get LFortran to compile dftatom. In terms of MVP, the SNAP project (https://gitlab.com/lfortran/lfortran/-/issues/313) is sufficient, this issue is beyond MVP.\n\n# Parser\n\nIt seems to parse.\n\n# AST\n\nEverything parses to AST and back to source code and it seems to produce identical results when compiled with gfortran (all tests pass).\n\nOne can apply the src -> AST -> src transformation as follows:\n```\ncd src\nfind . -name \"*.f90\" -exec lfortran fmt -i {} \\;\n```\nMake sure to enable long lines:\n```diff\n--- a/cmake/UserOverride.cmake\n+++ b/cmake/UserOverride.cmake\n@@ -7,7 +7,7 @@\n # variables.\n if (CMAKE_Fortran_COMPILER_ID STREQUAL \"GNU\")\n     # gfortran\n-    set(common \"-std=f2003 -Wall -Wextra -Wimplicit-interface -fPIC -fmax-errors=1\")\n+    set(common \"-std=f2003 -ffree-line-length-none -Wall -Wextra -Wimplicit-interface -fPIC -fmax-errors=1\")\n     set(CMAKE_Fortran_FLAGS_RELEASE_INIT \"${common} -O3 -march=native -ffast-math -funroll-loops\")\n     set(CMAKE_Fortran_FLAGS_DEBUG_INIT   \"${common} -g -fbounds-check -fcheck-array-temporaries -fbacktrace\")\n elseif (CMAKE_Fortran_COMPILER_ID STREQUAL \"Intel\")\n```\n\nIssues:\n\n* [x] pure attribute in functions / subroutines not preserved (https://gitlab.com/lfortran/lfortran/-/merge_requests/839)\n* [x] recursive attribute in functions / subroutines not preserved (https://gitlab.com/lfortran/lfortran/-/merge_requests/839)\n* [x] `real(dp)` kind not preserved in function results (https://gitlab.com/lfortran/lfortran/-/merge_requests/839)\n* [x] `bind(C)` (https://gitlab.com/lfortran/lfortran/-/merge_requests/853)\n* [x] `inquire` (https://gitlab.com/lfortran/lfortran/-/merge_requests/847)\n* [x] `import` (https://gitlab.com/lfortran/lfortran/-/merge_requests/855, https://gitlab.com/lfortran/lfortran/-/merge_requests/856)\n* [x] `a(*)` vs `a(:)` (https://gitlab.com/lfortran/lfortran/-/merge_requests/857)\n* [x] `backspace` (https://gitlab.com/lfortran/lfortran/-/merge_requests/859)\n* [x] Parse more implicit statements (https://gitlab.com/lfortran/lfortran/-/merge_requests/860)\n* [x] Dimension without arguments (https://gitlab.com/lfortran/lfortran/-/merge_requests/861)\n* [x] Escape strings (https://gitlab.com/lfortran/lfortran/-/merge_requests/863)\n* [x] `go to` (https://gitlab.com/lfortran/lfortran/-/merge_requests/864, https://gitlab.com/lfortran/lfortran/-/merge_requests/868)\n* [x] `do 15 i=1,15` (https://gitlab.com/lfortran/lfortran/-/merge_requests/866)\n* [x] fmt: different implicit statements (https://gitlab.com/lfortran/lfortran/-/merge_requests/875)\n* [x] AST/fmt: labels in front of statements (https://gitlab.com/lfortran/lfortran/-/merge_requests/865, https://gitlab.com/lfortran/lfortran/-/merge_requests/871, https://gitlab.com/lfortran/lfortran/-/merge_requests/877, https://gitlab.com/lfortran/lfortran/-/merge_requests/869, https://gitlab.com/lfortran/lfortran/-/merge_requests/880, https://gitlab.com/lfortran/lfortran/-/merge_requests/882, https://gitlab.com/lfortran/lfortran/-/merge_requests/881)\n\n# ASR\nThis follows the same logic as https://gitlab.com/lfortran/lfortran/-/issues/313. Compile each module with `lfortran -c blah.f90 -o blah.o` and write out (manually) a dependency tree. A task made much easier with `fortdepend`.\n* [x] types.o\n* [x] lapack.o -- https://gitlab.com/lfortran/lfortran/-/merge_requests/997\n* [ ] utils.o :\ttypes.o -- https://gitlab.com/lfortran/lfortran/-/issues/374 \n* [x] constants.o :\ttypes.o\n* [x] dft_data.o : \ttypes.o\n* [ ] mesh.o : -- https://gitlab.com/lfortran/lfortran/-/issues/388\n  * [ ] types.o\n  * [ ] utils.o\n* [x] states.o : -- https://gitlab.com/lfortran/lfortran/-/issues/389\n  * [x] types.o\n  * [ ] utils.o\n* [ ] ode1d.o : -- https://gitlab.com/lfortran/lfortran/-/issues/390 \n  * [ ] types.o\n  * [ ] utils.o\n* [ ] energies.o :\n  * [ ] constants.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] interpolation.o :\n  * [ ] lapack.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] rschroed.o :\n  * [ ] ode1d.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] rdirac.o :\n  * [ ] ode1d.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] rpoisson.o :\n  * [ ] constants.o\n  * [ ] ode1d.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] ode1d_other.o :\n  * [ ] constants.o\n  * [ ] ode1d.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] rschroed_other.o :\n  * [ ] ode1d.o\n  * [ ] ode1d_other.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] rdirac_other.o :\n  * [ ] ode1d.o\n  * [ ] ode1d_other.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] rpoisson_other.o :\n  * [ ] constants.o\n  * [ ] ode1d.o\n  * [ ] ode1d_other.o\n  * [ ] types.o\n* [ ] reigen.o :\n  * [ ] ode1d.o\n  * [ ] rdirac.o\n  * [ ] rschroed.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] mixings.o :\n  * [ ] constants.o\n  * [ ] dft_data.o\n  * [ ] ode1d.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] dft.o :\n  * [ ] constants.o\n  * [ ] dft_data.o\n  * [ ] energies.o\n  * [ ] mixings.o\n  * [ ] ode1d.o\n  * [ ] reigen.o\n  * [ ] rpoisson.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] drivers.o :\n  * [ ] constants.o\n  * [ ] dft.o\n  * [ ] dft_data.o\n  * [ ] energies.o\n  * [ ] mesh.o\n  * [ ] mixings.o\n  * [ ] ode1d.o\n  * [ ] states.o\n  * [ ] types.o\n* [ ] dftatom.o :\n  * [ ] dft.o\n  * [ ] drivers.o\n  * [ ] energies.o\n  * [ ] mesh.o\n  * [ ] ode1d.o\n  * [ ] reigen.o\n  * [ ] rpoisson.o\n  * [ ] states.o\n  * [ ] types.o\n  * [ ] utils.o\n* [ ] c_dftatom.o :\n  * [ ] dft.o\n  * [ ] dft_data.o\n  * [ ] dftatom.o\n  * [ ] mixings.o\n# Backends\n\n## LLVM\n\n## C++","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/320/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/320/timeline","performed_via_github_app":null,"state_reason":null}