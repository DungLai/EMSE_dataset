{"url":"https://api.github.com/repos/lfortran/lfortran/issues/814","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/814/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/814/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/814/events","html_url":"https://github.com/lfortran/lfortran/issues/814","id":1391193613,"node_id":"I_kwDOCpMuHc5S6-4N","number":814,"title":"Implement statement functions","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-09-29T16:58:59Z","updated_at":"2022-09-29T16:58:59Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Here is an example of a statement function from SciPy sources in `scipy/stats/statlib/swilk.f`:\r\n```fortran\r\n      DOUBLE PRECISION FUNCTION ALNORM(X, UPPER)\r\n      DOUBLE PRECISION LTONE,UTZERO,ZERO,HALF,ONE,CON,\r\n     $ A1,A2,A3,A4,A5,A6,A7,B1,B2,\r\n     $ B3,B4,B5,B6,B7,B8,B9,B10,B11,B12,X,Y,Z,ZEXP\r\n      integer :: a\r\n...\r\n      ZEXP(Z,a,x,y) = a+x+y+DEXP(Z)\r\n```\r\nI modified it slightly to make the point clear. This statement function should be implemented as an internal/nested function in ASR:\r\n```\r\n          real(8) function ZEXP(Z,a,x,y)\r\n          real(8), intent(in) :: Z, x, y\r\n          integer :: a\r\n          zexp = a+x+y+DEXP(Z)\r\n          end function\r\n```\r\nWhen the statement function is encountered, the `zexp` as well as all arguments (`z`, `a`, `x`, `y`) must be declared (implicitly or explicitly), so we know all the types, and we just have to create an actual function, based on the example above.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/814/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/814/timeline","performed_via_github_app":null,"state_reason":null}