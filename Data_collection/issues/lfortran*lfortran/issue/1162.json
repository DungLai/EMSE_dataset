{"url":"https://api.github.com/repos/lfortran/lfortran/issues/1162","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/1162/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/1162/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/1162/events","html_url":"https://github.com/lfortran/lfortran/issues/1162","id":1520973582,"node_id":"I_kwDOCpMuHc5aqDcO","number":1162,"title":"ASR: Implement FunctionType node to represent a function signature","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2023-01-05T15:56:34Z","updated_at":"2023-01-10T19:02:29Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Use it to represent a function type, in callbacks like `procedure(my_funtion_type)`. Probably `Function` should just reference this `FunctionType` as well.\r\n\r\nSome details to figure out:\r\n\r\n* What should be part of FunctionType: probably arguments and return value (as well as type_params and restrictions ?)\r\n* What about side-effect-free / deterministic, and other flags like inline, static, abi, access, bindc, elemental, pure, module ?\r\n* When does a given function satisfy the type, say for a callback: arguments must exactly match. Does \"elemental\" have to match? What about other flags?\r\n* Name probably should not be part of it, so that FunctionType can be used for lambda functions as well (that do not have a name)\r\n* How to represent the name of the type ? I think FunctionType would be a `ttype`, like Integer. Then we need to add a \"symbol\", like Variable, that would represent the named function type as a variable that you can reference in `procedure(my_function_type)`, or something like that.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/1162/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/1162/timeline","performed_via_github_app":null,"state_reason":null}