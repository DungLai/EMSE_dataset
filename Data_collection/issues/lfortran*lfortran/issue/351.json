{"url":"https://api.github.com/repos/lfortran/lfortran/issues/351","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/351/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/351/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/351/events","html_url":"https://github.com/lfortran/lfortran/issues/351","id":1338728817,"node_id":"I_kwDOCpMuHc5Py2Fx","number":351,"title":"ODE1 Error","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:06:22Z","updated_at":"2022-08-15T09:06:22Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/390\n\n**TODO**: Debug and narrow down\n\n```bash\nTraceback (most recent call last):\n  Binary file \"/users/home/rog32/Git/Github/Fortran/mylf/inst/bin/lfortran\", in _start()\n  Binary file \"/lib64/libc.so.6\", in __libc_start_main()\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/bin/lfortran.cpp\", line 1194, in main()\n    return emit_asr(arg_file, !arg_no_color, passes, arg_indent);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/bin/lfortran.cpp\", line 443, in (anonymous namespace)::emit_asr(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, std::vector<(anonymous namespace)::ASRPass, std::allocator<(anonymous namespace)::ASRPass> > const&, bool)\n    asr = LFortran::ast_to_asr(al, *ast);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/semantics/ast_to_asr.cpp\", line 3091, in LFortran::ast_to_asr(Allocator&, LFortran::AST::TranslationUnit_t&, LFortran::SymbolTable*)\n    v.visit_TranslationUnit(ast);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/semantics/ast_to_asr.cpp\", line 698, in LFortran::SymbolTableVisitor::visit_TranslationUnit(LFortran::AST::TranslationUnit_t const&)\n    visit_ast(*x.m_items[i]);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3547, in LFortran::AST::BaseVisitor<LFortran::SymbolTableVisitor>::visit_ast(LFortran::AST::ast_t const&)\n    void visit_ast(const ast_t &b) { visit_ast_t(b, self()); }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3511, in void LFortran::AST::visit_ast_t<LFortran::SymbolTableVisitor>(LFortran::AST::ast_t const&, LFortran::SymbolTableVisitor&)\n    case astType::mod: { v.visit_mod((const mod_t &)x); return; }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3550, in LFortran::AST::BaseVisitor<LFortran::SymbolTableVisitor>::visit_mod(LFortran::AST::mod_t const&)\n    void visit_mod(const mod_t &b) { visit_mod_t(b, self()); }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3232, in void LFortran::AST::visit_mod_t<LFortran::SymbolTableVisitor>(LFortran::AST::mod_t const&, LFortran::SymbolTableVisitor&)\n    case modType::Module: { v.visit_Module((const Module_t &)x); return; }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/semantics/ast_to_asr.cpp\", line 718, in LFortran::SymbolTableVisitor::visit_Module(LFortran::AST::Module_t const&)\n    visit_program_unit(*x.m_contains[i]);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3555, in LFortran::AST::BaseVisitor<LFortran::SymbolTableVisitor>::visit_program_unit(LFortran::AST::program_unit_t const&)\n    void visit_program_unit(const program_unit_t &b) { visit_program_unit_t(b, self()); }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3245, in void LFortran::AST::visit_program_unit_t<LFortran::SymbolTableVisitor>(LFortran::AST::program_unit_t const&, LFortran::SymbolTableVisitor&)\n    case program_unitType::Function: { v.visit_Function((const Function_t &)x); return; }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/semantics/ast_to_asr.cpp\", line 857, in LFortran::SymbolTableVisitor::visit_Function(LFortran::AST::Function_t const&)\n    visit_unit_decl2(*x.m_decl[i]);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3561, in LFortran::AST::BaseVisitor<LFortran::SymbolTableVisitor>::visit_unit_decl2(LFortran::AST::unit_decl2_t const&)\n    void visit_unit_decl2(const unit_decl2_t &b) { visit_unit_decl2_t(b, self()); }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3261, in void LFortran::AST::visit_unit_decl2_t<LFortran::SymbolTableVisitor>(LFortran::AST::unit_decl2_t const&, LFortran::SymbolTableVisitor&)\n    case unit_decl2Type::Declaration: { v.visit_Declaration((const Declaration_t &)x); return; }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/semantics/ast_to_asr.cpp\", line 1267, in LFortran::SymbolTableVisitor::visit_Declaration(LFortran::AST::Declaration_t const&)\n    process_dims(al, dims, s.m_dim, s.n_dim);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/semantics/ast_to_asr.cpp\", line 1068, in LFortran::SymbolTableVisitor::process_dims(Allocator&, LFortran::Vec<LFortran::ASR::dimension_t>&, LFortran::AST::dimension_t*, unsigned long)\n    this->visit_expr(*m_dim[i].m_end);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3624, in LFortran::AST::BaseVisitor<LFortran::SymbolTableVisitor>::visit_expr(LFortran::AST::expr_t const&)\n    void visit_expr(const expr_t &b) { visit_expr_t(b, self()); }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3378, in void LFortran::AST::visit_expr_t<LFortran::SymbolTableVisitor>(LFortran::AST::expr_t const&, LFortran::SymbolTableVisitor&)\n    case exprType::FuncCallOrArray: { v.visit_FuncCallOrArray((const FuncCallOrArray_t &)x); return; }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/semantics/ast_to_asr.cpp\", line 1352, in LFortran::SymbolTableVisitor::visit_FuncCallOrArray(LFortran::AST::FuncCallOrArray_t const&)\n    ASR::Module_t *m = load_module(al, current_scope->parent,\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/asr_utils.cpp\", line 107, in LFortran::load_module(Allocator&, LFortran::SymbolTable*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, LFortran::Location const&, bool)\n    LFORTRAN_ASSERT(symtab->parent == nullptr);\nAssertFailed: symtab->parent == nullptr\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/351/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/351/timeline","performed_via_github_app":null,"state_reason":null}