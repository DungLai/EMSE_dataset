{"url":"https://api.github.com/repos/lfortran/lfortran/issues/200","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/200/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/200/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/200/events","html_url":"https://github.com/lfortran/lfortran/issues/200","id":1338684016,"node_id":"I_kwDOCpMuHc5PyrJw","number":200,"title":"Produce statistics of Fortran features used in a given code","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T08:18:23Z","updated_at":"2022-08-15T08:18:23Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/87\n\nIt could be really illuminating to compile statistics for a large sampling of production codes written in modern Fortran and see which features are actually used most, and which used least if at all. Things like:\n\n* OOP stuff\n* operator overloading\n* derived types\n* arrays (what type, ranks, etc.)\n* type of do loops (how many nesting, etc.)\n...\n\nSuch statistics could be most enlightening and helpful for the Fortran Standards Committee to establish the most genuinely helpful priorities going forward.\n\nLFortran should have an option to produce such a statistics for the given code.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/200/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/200/timeline","performed_via_github_app":null,"state_reason":null}