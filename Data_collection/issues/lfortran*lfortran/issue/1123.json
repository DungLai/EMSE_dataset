{"url":"https://api.github.com/repos/lfortran/lfortran/issues/1123","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/1123/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/1123/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/1123/events","html_url":"https://github.com/lfortran/lfortran/issues/1123","id":1508225216,"node_id":"I_kwDOCpMuHc5Z5bDA","number":1123,"title":"AssertFailed: symtab->parent == nullptr","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2022-12-22T16:58:02Z","updated_at":"2023-01-08T20:22:57Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Not a minimal example yet:\r\n\r\n```fortran\r\nmodule find_fit_module\r\n\r\n! This module contains a general function find_fit() for a nonlinear least\r\n! squares fitting. The function can fit any nonlinear expression to any data.\r\n\r\nimplicit none\r\ninteger, parameter :: dp=kind(0d0)\r\nprivate\r\npublic find_fit\r\n\r\ncontains\r\n\r\nsubroutine find_fit(data_x, data_y, expr, pars)\r\n! Fits the (data_x, data_y) arrays with the function expr(x, pars).\r\n! The user can provide any nonlinear function 'expr' depending on any number of\r\n! parameters 'pars' and it must return the evaluated expression on the\r\n! array 'x'. The arrays 'data_x' and 'data_y' must have the same\r\n! length.\r\nreal(dp), intent(in) :: data_x(:), data_y(:)\r\ninterface\r\n    function expr(x, pars) result(y)\r\n    use types, only: dp\r\n    implicit none\r\n    real(dp), intent(in) :: x(:), pars(:)\r\n    real(dp) :: y(size(x))\r\n    end function\r\nend interface\r\nreal(dp), intent(inout) :: pars(:)\r\n\r\nreal(dp) :: tol, fvec(size(data_x))\r\ninteger :: iwa(size(pars)), info, m, n\r\nreal(dp), allocatable :: wa(:)\r\n\r\ntol = sqrt(epsilon(1._dp))\r\nm = size(fvec)\r\nn = size(pars)\r\nallocate(wa(m*n + 5*n + m))\r\n!call lmdif1(fcn, m, n, pars, fvec, tol, info, iwa, wa, size(wa))\r\nif (info /= 1) stop \"failed to converge\"\r\n\r\ncontains\r\n\r\nsubroutine fcn(m, n, x, fvec, iflag)\r\ninteger, intent(in) :: m, n, iflag\r\nreal(dp), intent(in) :: x(n)\r\nreal(dp), intent(out) :: fvec(m)\r\n! Suppress compiler warning:\r\nfvec(1) = iflag\r\nfvec = data_y - expr(data_x, x)\r\nend subroutine\r\n\r\nend subroutine\r\n\r\nend module\r\n```\r\n\r\nGives:\r\n```console\r\n$ lfortran --show-asr examples/example_primes.f90\r\nInternal Compiler Error: Unhandled exception\r\nTraceback (most recent call last):\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/bin/lfortran.cpp\", line 1850\r\n    return emit_asr(arg_file, lfortran_pass_manager,\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/bin/lfortran.cpp\", line 612\r\n    r = fe.get_asr2(input, lm, diagnostics);\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/fortran_evaluator.cpp\", line 240\r\n    Result<ASR::TranslationUnit_t*> res2 = get_asr3(*ast, diagnostics);\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/fortran_evaluator.cpp\", line 262\r\n    compiler_options.symtab_only, compiler_options);\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/semantics/ast_to_asr.cpp\", line 47\r\n    auto res = symbol_table_visitor(al, ast, diagnostics, symbol_table,\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/semantics/ast_symboltable_visitor.cpp\", line 1663\r\n    SymbolTableVisitor v(al, symbol_table, diagnostics, compiler_options, implicit_mapping);\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/semantics/ast_symboltable_visitor.cpp\", line 113\r\n    visit_ast(*x.m_items[i]);\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4764\r\n    void visit_ast(const ast_t &b) { visit_ast_t(b, self()); }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4721\r\n    case astType::unit: { v.visit_unit((const unit_t &)x); return; }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4767\r\n    void visit_mod(const mod_t &b) { visit_mod_t(b, self()); }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4362\r\n    case modType::Module: { v.visit_Module((const Module_t &)x); return; }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/semantics/ast_symboltable_visitor.cpp\", line 273\r\n    visit_ModuleSubmoduleCommon<AST::Module_t, ASR::Module_t>(x);\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/semantics/ast_symboltable_visitor.cpp\", line 249\r\n    visit_program_unit(*x.m_contains[i]);\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4772\r\n    void visit_program_unit(const program_unit_t &b) { visit_program_unit_t(b, self()); }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4373\r\n    case program_unitType::Subroutine: { v.visit_Subroutine((const Subroutine_t &)x); return; }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/semantics/ast_symboltable_visitor.cpp\", line 448\r\n    visit_unit_decl2(*x.m_decl[i]);\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4778\r\n    void visit_unit_decl2(const unit_decl2_t &b) { visit_unit_decl2_t(b, self()); }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4391\r\n    case unit_decl2Type::Declaration: { v.visit_Declaration((const Declaration_t &)x); return; }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/semantics/ast_symboltable_visitor.cpp\", line 1023\r\n    visit_interface_item(*x.m_items[i]);\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4796\r\n    void visit_interface_item(const interface_item_t &b) { visit_interface_item_t(b, self()); }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4421\r\n    case interface_itemType::InterfaceProc: { v.visit_InterfaceProc((const InterfaceProc_t &)x); return; }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/semantics/ast_symboltable_visitor.cpp\", line 944\r\n    is_interface = true;\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4772\r\n    void visit_program_unit(const program_unit_t &b) { visit_program_unit_t(b, self()); }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4374\r\n    case program_unitType::Procedure: { v.visit_Procedure((const Procedure_t &)x); return; }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/semantics/ast_symboltable_visitor.cpp\", line 600\r\n    visit_unit_decl1(*x.m_use[i]);\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4776\r\n    void visit_unit_decl1(const unit_decl1_t &b) { visit_unit_decl1_t(b, self()); }\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4382\r\n    switch (x.type) {\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/lfortran/semantics/ast_symboltable_visitor.cpp\", line 1509\r\n    t = (ASR::symbol_t*)(ASRUtils::load_module(al, current_scope->parent,\r\n  File \"/Users/ondrej/repos/lfortran/lfortran/src/libasr/asr_utils.cpp\", line 147\r\n    LFORTRAN_ASSERT(symtab->parent == nullptr);\r\nAssertFailed: symtab->parent == nullptr\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/1123/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/1123/timeline","performed_via_github_app":null,"state_reason":null}