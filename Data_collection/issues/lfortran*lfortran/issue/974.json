{"url":"https://api.github.com/repos/lfortran/lfortran/issues/974","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/974/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/974/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/974/events","html_url":"https://github.com/lfortran/lfortran/issues/974","id":1432488202,"node_id":"I_kwDOCpMuHc5VYgkK","number":974,"title":"Var should point to Variable only","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-11-02T04:47:49Z","updated_at":"2022-11-02T04:47:49Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Currently verify() allows Variable, Function, EnumType and ExternalSymbol.\r\n\r\nBut it should only allow Variable (and ExternalSymbol, pointing to a Variable in another Module).\r\n\r\nOne can apply the following change:\r\n```diff\r\n--- a/src/libasr/asr_verify.cpp\r\n+++ b/src/libasr/asr_verify.cpp\r\n@@ -391,7 +391,7 @@ public:\r\n         require(x.m_v != nullptr,\r\n             \"Var_t::m_v cannot be nullptr\");\r\n         require(is_a<Variable_t>(*x.m_v) || is_a<ExternalSymbol_t>(*x.m_v)\r\n-                || is_a<Function_t>(*x.m_v) || is_a<ASR::EnumType_t>(*x.m_v),\r\n+                || is_a<ASR::EnumType_t>(*x.m_v),\r\n             \"Var_t::m_v \" + std::string(ASRUtils::symbol_name(x.m_v)) + \" does not point to a Variable_t, ExternalSymbol_t, \" \\\r\n             \"Function_t, Subroutine_t or EnumType_t\");\r\n         require(symtab_in_scope(current_symtab, x.m_v),\r\n```\r\nAnd some tests fail, mainly when we pass a function as a function argument, we currently use Var to point to Function.\r\n\r\nI think to fix this cleanly, we need to do something like:\r\n```diff\r\n--- a/src/libasr/ASR.asdl\r\n+++ b/src/libasr/ASR.asdl\r\n@@ -84,10 +84,11 @@ symbol\r\n         stmt* body)\r\n     | Module(symbol_table symtab, identifier name, identifier* dependencies,\r\n         bool loaded_from_mod, bool intrinsic)\r\n-    | Function(symbol_table symtab, identifier name, expr* args, stmt* body,\r\n+    | FunctionType(symbol_table symtab, identifier name, expr* args,\r\n         expr? return_var, abi abi, access access, deftype deftype,\r\n         string? bindc_name, bool elemental, bool pure, bool module, bool inline,\r\n         bool static, ttype* type_params, symbol* restrictions, bool is_restriction)\r\n+    | Function(symbol_table symtab, symbol function_type, stmt* body)\r\n     | GenericProcedure(symbol_table parent_symtab, identifier name,\r\n         symbol* procs, access access)\r\n     | CustomOperator(symbol_table parent_symtab, identifier name,\r\n@@ -339,6 +340,7 @@ ttype\r\n     | Enum(symbol enum_type, dimension *dims)\r\n     | Union(symbol union_type, dimension *dims)\r\n     | Class(symbol class_type, dimension* dims)\r\n+    | Procedure(symbol function_type, dimension* dims)\r\n     | Dict(ttype key_type, ttype value_type)\r\n     | Pointer(ttype type)\r\n     | CPtr()\r\n```\r\nEssentially we add a type Procedure (which contains a link to FunctionType), and Variable of type Procedure is an instance of some function. Analogous to Class -> ClassType or Struct -> StructType. This would also allow us to naturally implement the variable of type `procedure` (such as`procedure(some_function_type) :: p`) in Fortran.\r\n\r\nThe symbol table in `FunctionType` is used to hold variables needed to define the function. This can be reworked though. \r\n\r\nThe symbol table in `Function` contains the local variables (arguments are handled by `FunctionType`). We would have to figure out the symbol table scoping mechanism.\r\n\r\nCC @czgdp1807 and @rebcabin.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/974/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/974/timeline","performed_via_github_app":null,"state_reason":null}