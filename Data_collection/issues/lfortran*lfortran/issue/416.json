{"url":"https://api.github.com/repos/lfortran/lfortran/issues/416","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/416/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/416/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/416/events","html_url":"https://github.com/lfortran/lfortran/issues/416","id":1338735919,"node_id":"I_kwDOCpMuHc5Py30v","number":416,"title":"ASR passes refactoring","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:12:38Z","updated_at":"2022-08-15T09:12:38Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/552\n\nWe need to refactor our ASR->ASR passes. Here are some items:\n\n* [ ] Probably subclass them from a `Pass` base class\n* [ ] Split passes into `Analysis` and `Transformation` (use `const` for `Analysis`, but mutable arguments for `Transformation`)\n* [ ] Should we further distinguish Transformation into Optimization and Rewrite (for backends)?\n* [ ] Add a class `StatementTransformation` which takes care of the boilerplate and calls our functions for statements, allowing to transform them into multiple new statements; a lot of passes can simply subclass this, simplifying their code; An example in LLVM:\n  * https://github.com/llvm/llvm-project/blob/e57205b555e116588787af36b4a00ff1dc97bb04/llvm/include/llvm/Transforms/Scalar/LoopDeletion.h#L24\n  * https://github.com/llvm/llvm-project/blob/83dfa0d098f3176607aecea815eb87979953cdb5/llvm/lib/Transforms/Scalar/LoopDeletion.cpp#L493\n* [ ] Each pass provides some metadata:\n  * Short name: `array_op` (used in `lfortran --pass=array_op`)\n  * Full name: `Transform array operations to explicit loops`\n  * Documentation: At least a paragraph of documentation, explaining in detail what the pass does, when one should use it. With at least one Fortran example (before and after).\n* [ ] Expose the metadata in the driver: some nice list of passes, both short list (name+full name) and long list (name+full name+documentation)\n* [ ] Automatically create an html page documenting the passes (could be a command like `lfortran --create-passes-documentation`), and serve it in our online documentation\n* [ ] Create ASR diff (git style) of a pass before and after (allow to combine passes for the diff):\n  * Of the automatic ASR output (indented)\n  * Of the Fortran source code produced by ASR->AST->SRC\n* [ ] Better `--show-asr --indent`, print it more line by line (https://gitlab.com/lfortran/lfortran/-/issues/426)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/416/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/416/timeline","performed_via_github_app":null,"state_reason":null}