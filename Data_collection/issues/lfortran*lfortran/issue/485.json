{"url":"https://api.github.com/repos/lfortran/lfortran/issues/485","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/485/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/485/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/485/events","html_url":"https://github.com/lfortran/lfortran/issues/485","id":1338779274,"node_id":"I_kwDOCpMuHc5PzCaK","number":485,"title":"Variadic argument intrinsics","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:56:03Z","updated_at":"2022-08-15T09:56:03Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/634\n\nThis issue is for variadic intrinsics. It was first noticed in https://gitlab.com/lfortran/lfortran/-/merge_requests/1582. Quoting some comments from the MR,\n\n\n\n> There are two ways in my mind to deal with this (which I can do in a follow up MR),\n> 1. ASR Pass - Add an ASR pass to replace `variadic_min` with a loop calling `min`, `max` on the next argument and the current minimum value. In short, a simple loop to find the minimum/maximum value from a list of values.\n> 2. Define explicitly in the backend (CPP, Python, LLVM), just let `variadic_min` dummy function through ASR and then provide a definition for it according to the backend.\n\nQuoting https://gitlab.com/lfortran/lfortran/-/merge_requests/1582#note_732513946,\n\n> I think we need to allow variadic arguments at the ASR level in a general way. Let's design it well.\n> We should get rid of read/write/print ASR nodes, and rather they would just be regular subroutine calls into our runtime library, but with variadic arguments.\n> The min/max functions also fall into this category.\n> After ASR is designed, we need some way to handle variadic number of arguments from Fortran. One option is to introduce intrinsic functions like in C or C++:\n> https://en.cppreference.com/w/cpp/utility/variadic/va_arg\n\ncc: [@ certik](https://gitlab.com/certik)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/485/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/485/timeline","performed_via_github_app":null,"state_reason":null}