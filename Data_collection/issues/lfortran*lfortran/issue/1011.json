{"url":"https://api.github.com/repos/lfortran/lfortran/issues/1011","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/1011/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/1011/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/1011/events","html_url":"https://github.com/lfortran/lfortran/issues/1011","id":1446378891,"node_id":"I_kwDOCpMuHc5WNf2L","number":1011,"title":"Grammar railroad diagram","user":{"login":"mingodad","id":462618,"node_id":"MDQ6VXNlcjQ2MjYxOA==","avatar_url":"https://avatars.githubusercontent.com/u/462618?v=4","gravatar_id":"","url":"https://api.github.com/users/mingodad","html_url":"https://github.com/mingodad","followers_url":"https://api.github.com/users/mingodad/followers","following_url":"https://api.github.com/users/mingodad/following{/other_user}","gists_url":"https://api.github.com/users/mingodad/gists{/gist_id}","starred_url":"https://api.github.com/users/mingodad/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mingodad/subscriptions","organizations_url":"https://api.github.com/users/mingodad/orgs","repos_url":"https://api.github.com/users/mingodad/repos","events_url":"https://api.github.com/users/mingodad/events{/privacy}","received_events_url":"https://api.github.com/users/mingodad/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-11-12T10:12:36Z","updated_at":"2022-11-13T06:04:31Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Using this tool https://www.bottlecaps.de/convert/ to convert https://github.com/lfortran/lfortran/blob/main/src/lfortran/parser/parser.yy into an EBNF understood by https://www.bottlecaps.de/rr/ui and manually adding the tokens from https://github.com/lfortran/lfortran/blob/main/src/lfortran/parser/tokenizer.re we can have a navigable railroad diagram.\r\n\r\nCopy and paste the `EBNF` shown bellow on https://www.bottlecaps.de/rr/ui on the tab `Edit Grammar` then click the tab `View Diagram`:\r\n```\r\n/* converted on Sat Nov 12, 2022, 10:39 (UTC+01) by bison-to-w3c v0.61 which is Copyright (c) 2011-2022 by Gunther Rademacher <grd@gmx.net> */\r\n//From https://github.com/lfortran/lfortran/blob/main/src/lfortran/parser/parser.yy\r\nunits    ::= ( script_unit | sep ) script_unit*\r\nscript_unit\r\n         ::= module\r\n           | submodule\r\n           | block_data\r\n           | program\r\n           | subroutine\r\n           | procedure\r\n           | function\r\n           | use_statement\r\n           | implicit_statement\r\n           | var_decl\r\n           | statement\r\n           | expr sep\r\nmodule   ::= KW_MODULE id sep use_statement_star implicit_statement_star decl_star contains_block_opt end_module sep\r\nsubmodule\r\n         ::= KW_SUBMODULE '(' id ( ':' id )? ')' id sep use_statement_star implicit_statement_star decl_star contains_block_opt end_submodule sep\r\nblock_data\r\n         ::= KW_BLOCK KW_DATA id? sep use_statement_star implicit_statement_star decl_statements end_blockdata sep\r\ninterface_decl\r\n         ::= interface_stmt sep interface_item* endinterface sep\r\ninterface_stmt\r\n         ::= KW_INTERFACE ( id | ( KW_ASSIGNMENT '(' '=' | ( KW_WRITE | KW_READ ) '(' id ) ')' | KW_OPERATOR '(' ( ( operator_type | TK_DEF_OP ) ')' | '/)' ) )?\r\n           | KW_ABSTRACT KW_INTERFACE\r\nendinterface\r\n         ::= endinterface0 ( id | KW_ASSIGNMENT '(' '=' ')' | KW_OPERATOR '(' ( ( operator_type | TK_DEF_OP ) ')' | '/)' ) )?\r\nendinterface0\r\n         ::= KW_END_INTERFACE\r\n           | KW_ENDINTERFACE\r\ninterface_item\r\n         ::= fn_mod_plus? KW_PROCEDURE '::'? id_list sep\r\n           | subroutine\r\n           | function\r\nenum_decl\r\n         ::= KW_ENUM enum_var_modifiers sep var_decl_star endenum sep\r\nendenum  ::= KW_END_ENUM\r\n           | KW_ENDENUM\r\nenum_var_modifiers\r\n         ::= var_modifier_list?\r\nderived_type_decl\r\n         ::= KW_TYPE var_modifiers id ( '(' id_list ')' )? sep var_decl_star derived_type_contains_opt end_type sep\r\ntemplate_decl\r\n         ::= KW_TEMPLATE id '(' id_list ')' sep decl_star contains_block_opt KW_END KW_TEMPLATE sep\r\nrequirement_decl\r\n         ::= KW_REQUIREMENT id '(' id_list ')' sep decl_star sub_or_func_plus KW_END KW_REQUIREMENT sep\r\nrequires_decl\r\n         ::= KW_REQUIRES id '(' id_list ')' sep\r\ninstantiate\r\n         ::= KW_INSTANTIATE id '(' id_list ')' ',' KW_ONLY ':' use_symbol_list sep\r\nend_type ::= ( KW_END_TYPE | KW_ENDTYPE ) id_opt\r\nderived_type_contains_opt\r\n         ::= ( KW_CONTAINS sep procedure_decl+ )?\r\nprocedure_decl\r\n         ::= ( KW_PROCEDURE ( '(' id ')' )? proc_modifiers use_symbol_list | KW_FINAL '::' id | KW_PRIVATE | KW_GENERIC access_spec_list ( KW_OPERATOR '(' ( ( operator_type | TK_DEF_OP ) ')' | '/)' ) | ( KW_ASSIGNMENT '(' '=' | ( KW_WRITE | KW_READ ) '(' id ) ')' | id ) '=>' id_list ) sep\r\naccess_spec_list\r\n         ::= access_spec? '::'\r\naccess_spec\r\n         ::= ',' ( KW_PRIVATE | KW_PUBLIC )\r\noperator_type\r\n         ::= '+'\r\n           | '-'\r\n           | '*'\r\n           | '/'\r\n           | '**'\r\n           | '=='\r\n           | '/='\r\n           | '>'\r\n           | '>='\r\n           | '<'\r\n           | '<='\r\n           | '//'\r\n           | '.not.'\r\n           | '.and.'\r\n           | '.or.'\r\n           | '.xor.'\r\n           | '.eqv.'\r\n           | '.neqv.'\r\nproc_modifiers\r\n         ::= ( ( ',' proc_modifier )* '::' )?\r\nproc_modifier\r\n         ::= KW_PRIVATE\r\n           | KW_PUBLIC\r\n           | KW_PASS ( '(' id ')' )?\r\n           | KW_NOPASS\r\n           | KW_DEFERRED\r\n           | KW_NON_OVERRIDABLE\r\nprogram  ::= KW_PROGRAM id sep use_statement_star implicit_statement_star decl_statements contains_block_opt end_program sep\r\nend_program\r\n         ::= ( KW_END_PROGRAM | KW_ENDPROGRAM ) id_opt\r\n           | KW_END\r\nend_module\r\n         ::= ( KW_END_MODULE | KW_ENDMODULE ) id_opt\r\n           | KW_END\r\nend_submodule\r\n         ::= ( KW_END_SUBMODULE | KW_ENDSUBMODULE ) id_opt\r\n           | KW_END\r\nend_blockdata\r\n         ::= ( KW_END_BLOCK_DATA | KW_ENDBLOCKDATA ) id_opt\r\n           | KW_END\r\nend_subroutine\r\n         ::= ( KW_END_SUBROUTINE | KW_ENDSUBROUTINE ) id_opt\r\n           | KW_END\r\nend_procedure\r\n         ::= ( KW_END_PROCEDURE | KW_ENDPROCEDURE ) id_opt\r\n           | KW_END\r\nend_function\r\n         ::= ( KW_END_FUNCTION | KW_ENDFUNCTION ) id_opt\r\n           | KW_END\r\nend_associate\r\n         ::= KW_END_ASSOCIATE\r\n           | KW_ENDASSOCIATE\r\nend_block\r\n         ::= KW_END_BLOCK\r\n           | KW_ENDBLOCK\r\nend_select\r\n         ::= KW_END_SELECT\r\n           | KW_ENDSELECT\r\nend_critical\r\n         ::= KW_END_CRITICAL\r\n           | KW_ENDCRITICAL\r\nend_team ::= KW_END_TEAM\r\n           | KW_ENDTEAM\r\nsubroutine\r\n         ::= fn_mod_plus? KW_SUBROUTINE id sub_args bind_opt sep use_statement_star import_statement_star implicit_statement_star decl_statements contains_block_opt end_subroutine sep\r\nprocedure\r\n         ::= fn_mod_plus KW_PROCEDURE id sub_args sep use_statement_star import_statement_star implicit_statement_star decl_statements contains_block_opt end_procedure sep\r\nfunction ::= fn_mod_plus? KW_FUNCTION id '(' id_list_opt ')' ( bind result_opt | result bind_opt )? sep use_statement_star import_statement_star implicit_statement_star decl_statements contains_block_opt end_function sep\r\nfn_mod_plus\r\n         ::= fn_mod+\r\nfn_mod   ::= var_type\r\n           | KW_ELEMENTAL\r\n           | KW_IMPURE\r\n           | KW_MODULE\r\n           | KW_PURE\r\n           | KW_RECURSIVE\r\ndecl_star\r\n         ::= decl*\r\ndecl     ::= var_decl\r\n           | interface_decl\r\n           | derived_type_decl\r\n           | template_decl\r\n           | requirement_decl\r\n           | requires_decl\r\n           | enum_decl\r\ncontains_block_opt\r\n         ::= ( KW_CONTAINS sep sub_or_func_plus? )?\r\nsub_or_func_plus\r\n         ::= sub_or_func+\r\nsub_or_func\r\n         ::= subroutine\r\n           | function\r\n           | procedure\r\nsub_args ::= ( '(' id_list_opt ')' )?\r\nbind_opt ::= bind?\r\nbind     ::= KW_BIND '(' write_arg_list ')'\r\nresult_opt\r\n         ::= result?\r\nresult   ::= KW_RESULT '(' id ')'\r\nimplicit_statement_star\r\n         ::= implicit_statement*\r\nimplicit_statement\r\n         ::= KW_IMPLICIT ( KW_NONE ( '(' implicit_none_spec ( ',' implicit_none_spec )* ')' )? | ( KW_DOUBLE KW_PRECISION | ( KW_TYPE | KW_PROCEDURE | KW_CLASS ) '(' id ')' | ( KW_INTEGER | KW_CHARACTER | KW_REAL | KW_COMPLEX | KW_LOGICAL ) ( '(' ( letter_spec_list | TK_INTEGER ) ')' | '*' TK_INTEGER )? ) '(' letter_spec_list ')' ) sep\r\nimplicit_none_spec\r\n         ::= KW_EXTERNAL\r\n           | KW_TYPE\r\nletter_spec_list\r\n         ::= letter_spec ( ',' letter_spec )*\r\nletter_spec\r\n         ::= id ( '-' id )?\r\nuse_statement_star\r\n         ::= use_statement*\r\nuse_statement\r\n         ::= use_statement1 sep\r\nuse_statement1\r\n         ::= KW_USE use_modifiers id ( ',' ( KW_ONLY ':' use_symbol_list? | use_symbol_list ) )?\r\nimport_statement_star\r\n         ::= import_statement*\r\nimport_statement\r\n         ::= KW_IMPORT ( '::'? id_list | ',' ( KW_ONLY ':' id_list | KW_NONE | KW_ALL ) )? sep\r\nuse_symbol_list\r\n         ::= use_symbol ( ',' use_symbol )*\r\nuse_symbol\r\n         ::= id ( '=>' id )?\r\n           | ( KW_ASSIGNMENT '(' '=' | ( KW_WRITE | KW_READ ) '(' id ) ')'\r\n           | KW_OPERATOR '(' ( ( operator_type | TK_DEF_OP ( ')' '=>' KW_OPERATOR '(' TK_DEF_OP )? ) ')' | '/)' )\r\nuse_modifiers\r\n         ::= ( ( ',' use_modifier )* '::' )?\r\nuse_modifier\r\n         ::= KW_INTRINSIC\r\n           | KW_NON_INTRINSIC\r\nvar_decl_star\r\n         ::= var_decl*\r\nvar_decl ::= ( var_type var_modifiers var_sym_decl_list | KW_PARAMETER '(' named_constant_def ( ',' named_constant_def )* ')' | KW_NAMELIST '/' id '/' id_list | KW_COMMON common_block ( ',' common_block )* | KW_EQUIVALENCE equivalence_set ( ',' equivalence_set )* | var_modifier ( '::'? var_sym_decl_list )? ) sep\r\nequivalence_set\r\n         ::= '(' expr_list ')'\r\nnamed_constant_def\r\n         ::= id '=' expr\r\ncommon_block\r\n         ::= ( '/' id '/' )? expr\r\ndata_set ::= data_object_list '/' ( data_stmt_repeat '*' )? data_stmt_constant ( ',' ( data_stmt_repeat '*' )? data_stmt_constant )* '/'\r\ndata_object_list\r\n         ::= data_object ( ',' data_object )*\r\ndata_object\r\n         ::= id ( '(' fnarray_arg_list_opt ')' )?\r\n           | struct_member_star id\r\n           | '(' data_object_list ',' integer_type? id '=' expr ',' expr ( ',' expr )? ')'\r\ndata_stmt_repeat\r\n         ::= id\r\n           | TK_INTEGER\r\n           | TK_REAL\r\n           | TK_STRING\r\n           | TK_BOZ_CONSTANT\r\n           | '.true.'\r\n           | '.false.'\r\ndata_stmt_constant\r\n         ::= id\r\n           | TK_INTEGER\r\n           | TK_REAL\r\n           | TK_STRING\r\n           | TK_BOZ_CONSTANT\r\n           | '.true.'\r\n           | '.false.'\r\n           | '-' expr\r\ninteger_type\r\n         ::= KW_INTEGER '(' kind_arg_list ')' '::'\r\nkind_arg_list\r\n         ::= kind_arg2 ( ',' kind_arg2 )*\r\nkind_arg2\r\n         ::= ( id '=' )? ( expr | '*' | ':' )\r\nvar_modifiers\r\n         ::= ( var_modifier_list? '::' )?\r\nvar_modifier_list\r\n         ::= ( ',' var_modifier )+\r\nvar_modifier\r\n         ::= KW_PARAMETER\r\n           | KW_DIMENSION ( '(' array_comp_decl_list ')' )?\r\n           | KW_CODIMENSION '[' coarray_comp_decl_list ']'\r\n           | KW_ALLOCATABLE\r\n           | KW_ASYNCHRONOUS\r\n           | KW_POINTER\r\n           | KW_TARGET\r\n           | KW_OPTIONAL\r\n           | KW_PROTECTED\r\n           | KW_SAVE\r\n           | KW_SEQUENCE\r\n           | KW_CONTIGUOUS\r\n           | KW_NOPASS\r\n           | KW_PRIVATE\r\n           | KW_PUBLIC\r\n           | KW_ABSTRACT\r\n           | KW_ENUMERATOR\r\n           | KW_EXTERNAL\r\n           | ( KW_INTENT '(' ( KW_IN | KW_OUT | inout ) | KW_EXTENDS '(' id ) ')'\r\n           | KW_INTRINSIC\r\n           | KW_VALUE\r\n           | KW_VOLATILE\r\n           | bind\r\n           | KW_KIND\r\n           | KW_LEN\r\nvar_type ::= ( KW_INTEGER | KW_REAL | KW_COMPLEX | KW_LOGICAL ) ( '(' kind_arg_list ')' | '*' TK_INTEGER )?\r\n           | KW_CHARACTER ( '(' kind_arg_list ')' | '*' ( TK_INTEGER | '(' '*' ')' ) )?\r\n           | KW_DOUBLE ( KW_PRECISION | KW_COMPLEX )\r\n           | KW_DOUBLE_PRECISION\r\n           | KW_DOUBLE_COMPLEX\r\n           | ( ( KW_TYPE | KW_CLASS ) '(' ( id | '*' ) | KW_PROCEDURE '(' id ) ')'\r\nvar_sym_decl_list\r\n         ::= var_sym_decl ( ',' var_sym_decl )*\r\nvar_sym_decl\r\n         ::= id ( ( '=' | '=>' ) expr | '*' ( expr | '(' '*' ')' ) | '(' array_comp_decl_list ')' ( '*' TK_INTEGER | ( '=' | '=>' ) expr | '[' coarray_comp_decl_list ']' )? | '[' coarray_comp_decl_list ']' )?\r\n           | '/' id '/'\r\n           | decl_spec\r\ndecl_spec\r\n         ::= KW_OPERATOR '(' ( ( operator_type | TK_DEF_OP ) ')' | '/)' )\r\n           | KW_ASSIGNMENT '(' '=' ')'\r\narray_comp_decl_list\r\n         ::= array_comp_decl ( ',' array_comp_decl )*\r\narray_comp_decl\r\n         ::= expr ( ':' ( expr | '*' )? )?\r\n           | ':' expr?\r\n           | '*'\r\n           | TK_DBL_DOT\r\ncoarray_comp_decl_list\r\n         ::= coarray_comp_decl ( ',' coarray_comp_decl )*\r\ncoarray_comp_decl\r\n         ::= expr ( ':' ( expr | '*' )? )?\r\n           | ':' expr?\r\n           | '*'\r\nstatements\r\n         ::= statement*\r\nsep      ::= sep_one+\r\nsep_one  ::= TK_NEWLINE\r\n           | TK_COMMENT\r\n           | TK_EOLCOMMENT\r\n           | ';'\r\ndecl_statements\r\n         ::= decl_statement*\r\ndecl_statement\r\n         ::= var_decl\r\n           | interface_decl\r\n           | derived_type_decl\r\n           | template_decl\r\n           | enum_decl\r\n           | statement\r\n           | instantiate\r\nstatement\r\n         ::= TK_LABEL? statement1 sep\r\nstatement1\r\n         ::= single_line_statement\r\n           | multi_line_statement\r\nsingle_line_statement\r\n         ::= allocate_statement\r\n           | assign_statement\r\n           | assignment_statement\r\n           | associate_statement\r\n           | close_statement\r\n           | continue_statement\r\n           | cycle_statement\r\n           | deallocate_statement\r\n           | entry_statement\r\n           | error_stop_statement\r\n           | event_post_statement\r\n           | event_wait_statement\r\n           | exit_statement\r\n           | flush_statement\r\n           | forall_statement_single\r\n           | format_statement\r\n           | data_statement\r\n           | form_team_statement\r\n           | goto_statement\r\n           | if_statement_single\r\n           | include_statement\r\n           | inquire_statement\r\n           | nullify_statement\r\n           | open_statement\r\n           | print_statement\r\n           | read_statement\r\n           | return_statement\r\n           | rewind_statement\r\n           | backspace_statement\r\n           | endfile_statement\r\n           | stop_statement\r\n           | subroutine_call\r\n           | sync_all_statement\r\n           | sync_images_statement\r\n           | sync_memory_statement\r\n           | sync_team_statement\r\n           | where_statement_single\r\n           | write_statement\r\nmulti_line_statement\r\n         ::= multi_line_statement0\r\n           | id ':' multi_line_statement0 id\r\nmulti_line_statement0\r\n         ::= associate_block\r\n           | block_statement\r\n           | change_team_statement\r\n           | critical_statement\r\n           | do_statement\r\n           | forall_statement\r\n           | if_statement\r\n           | select_statement\r\n           | select_type_statement\r\n           | select_rank_statement\r\n           | where_statement\r\n           | while_statement\r\nassign_statement\r\n         ::= KW_ASSIGN TK_INTEGER KW_TO id\r\nassignment_statement\r\n         ::= expr '=' expr\r\ngoto_statement\r\n         ::= goto ( TK_INTEGER | '(' expr_list ')' ','? expr | id ( ','? '(' expr_list ')' )? )\r\ngoto     ::= KW_GO KW_TO\r\n           | KW_GOTO\r\nassociate_statement\r\n         ::= expr '=>' expr\r\nassociate_block\r\n         ::= KW_ASSOCIATE '(' var_sym_decl_list ')' sep statements end_associate\r\nblock_statement\r\n         ::= KW_BLOCK sep use_statement_star import_statement_star decl_statements end_block\r\nallocate_statement\r\n         ::= KW_ALLOCATE '(' fnarray_arg_list_opt ')'\r\ndeallocate_statement\r\n         ::= KW_DEALLOCATE '(' fnarray_arg_list_opt ')'\r\nsubroutine_call\r\n         ::= KW_CALL struct_member_star? id ( '(' fnarray_arg_list_opt ')' )?\r\nprint_statement\r\n         ::= KW_PRINT format ( ',' expr_list? )?\r\nformat   ::= expr\r\n           | '*'\r\nopen_statement\r\n         ::= KW_OPEN '(' write_arg_list ')'\r\nclose_statement\r\n         ::= KW_CLOSE '(' write_arg_list ')'\r\nwrite_arg_list\r\n         ::= write_arg2 ( ',' write_arg2 )*\r\nwrite_arg2\r\n         ::= ( id '=' )? write_arg\r\nwrite_arg\r\n         ::= expr\r\n           | '*'\r\nwrite_statement\r\n         ::= KW_WRITE '(' write_arg_list ')' ( ','? expr_list )?\r\nread_statement\r\n         ::= KW_READ ( '(' write_arg_list ')' ( ','? expr_list )? | TK_INTEGER ( ',' expr_list )? | '*' ',' expr_list )\r\nnullify_statement\r\n         ::= KW_NULLIFY '(' write_arg_list ')'\r\ninclude_statement\r\n         ::= KW_INCLUDE TK_STRING\r\ninquire_statement\r\n         ::= KW_INQUIRE '(' write_arg_list ')' expr_list?\r\nrewind_statement\r\n         ::= KW_REWIND ( '(' write_arg_list ')' | id ( '(' fnarray_arg_list_opt ')' )? | TK_INTEGER )\r\nbackspace_statement\r\n         ::= KW_BACKSPACE ( '(' write_arg_list ')' | id ( '(' fnarray_arg_list_opt ')' )? | TK_INTEGER )\r\nflush_statement\r\n         ::= KW_FLUSH ( '(' write_arg_list ')' | TK_INTEGER )\r\nendfile_statement\r\n         ::= end_file ( '(' write_arg_list ')' | id | TK_INTEGER )\r\nend_file ::= KW_END_FILE\r\n           | KW_ENDFILE\r\nif_statement\r\n         ::= KW_IF '(' expr ')' KW_THEN id_opt sep statements ( KW_ELSE KW_IF '(' expr ')' KW_THEN id_opt sep statements )* ( ( KW_ELSEIF '(' expr ')' KW_THEN id_opt sep statements )+ ( KW_ELSE KW_IF '(' expr ')' KW_THEN id_opt sep statements )+ )* ( KW_ELSEIF '(' expr ')' KW_THEN id_opt sep statements )* ( KW_ELSE id_opt sep statements )? endif\r\nif_statement_single\r\n         ::= KW_IF '(' expr ')' ( single_line_statement | TK_INTEGER ',' TK_INTEGER ',' TK_INTEGER )\r\nwhere_statement\r\n         ::= where_block endwhere\r\nwhere_statement_single\r\n         ::= KW_WHERE '(' expr ')' assignment_statement\r\nwhere_block\r\n         ::= KW_WHERE '(' expr ')' sep statements ( ( KW_ELSEWHERE | KW_ELSE KW_WHERE ) '(' expr ')' sep statements )* ( ( KW_ELSEWHERE | KW_ELSE KW_WHERE ) sep statements )?\r\nselect_statement\r\n         ::= ( KW_SELECT KW_CASE | KW_SELECT_CASE ) '(' expr ')' sep case_statements end_select\r\ncase_statements\r\n         ::= case_statement*\r\ncase_statement\r\n         ::= KW_CASE ( '(' case_condition ( ',' case_condition )* ')' | KW_DEFAULT ) sep statements\r\ncase_condition\r\n         ::= expr ( ':' expr? )?\r\n           | ':' expr\r\nselect_rank_statement\r\n         ::= select_rank '(' ( id '=>' )? expr ')' sep select_rank_case_stmts end_select\r\nselect_rank\r\n         ::= KW_SELECT KW_RANK\r\n           | KW_SELECT_RANK\r\nselect_rank_case_stmts\r\n         ::= select_rank_case_stmt*\r\nselect_rank_case_stmt\r\n         ::= KW_RANK ( '(' ( expr | '*' ) ')' | KW_DEFAULT ) id_opt sep statements\r\nselect_type_statement\r\n         ::= select_type '(' ( id '=>' )? expr ')' sep select_type_body_statements end_select\r\nselect_type\r\n         ::= KW_SELECT KW_TYPE\r\n           | KW_SELECT_TYPE\r\nselect_type_body_statements\r\n         ::= select_type_body_statement*\r\nselect_type_body_statement\r\n         ::= ( KW_TYPE KW_IS '(' ( TK_NAME | var_type ) ')' | KW_CLASS ( KW_IS '(' id ')' | KW_DEFAULT ) ) sep statements\r\nwhile_statement\r\n         ::= ( KW_DO comma_opt KW_WHILE | KW_DOWHILE ) '(' expr ')' sep statements enddo\r\ndo_statement\r\n         ::= KW_DO ( TK_INTEGER comma_opt id '=' expr ',' expr ( ',' expr )? | comma_opt ( id '=' expr ',' expr ( ',' expr )? | KW_CONCURRENT '(' concurrent_control_list ( ',' expr )? ')' concurrent_locality_star ) )? sep statements enddo\r\nconcurrent_control_list\r\n         ::= concurrent_control ( ',' concurrent_control )*\r\nconcurrent_control\r\n         ::= id '=' expr ':' expr ( ':' expr )?\r\nconcurrent_locality_star\r\n         ::= concurrent_locality*\r\nconcurrent_locality\r\n         ::= ( ( ( KW_LOCAL | KW_LOCAL_INIT | KW_SHARED ) '(' | KW_REDUCE '(' reduce_op ':' ) id_list | KW_DEFAULT '(' KW_NONE ) ')'\r\ncomma_opt\r\n         ::= ','?\r\nforall_statement\r\n         ::= KW_FORALL '(' concurrent_control_list ( ',' expr )? ')' concurrent_locality_star sep statements endforall\r\nforall_statement_single\r\n         ::= KW_FORALL '(' concurrent_control_list ( ',' expr )? ')' assignment_statement\r\nformat_statement\r\n         ::= TK_FORMAT\r\ndata_statement\r\n         ::= KW_DATA data_set ( ',' data_set )*\r\nform_team_statement\r\n         ::= form_team '(' expr ',' id sync_stat_list? ')'\r\nform_team\r\n         ::= KW_FORM KW_TEAM\r\n           | KW_FORM_TEAM\r\nreduce_op\r\n         ::= '+'\r\n           | '*'\r\n           | id\r\ninout    ::= KW_IN_OUT\r\n           | KW_INOUT\r\nenddo    ::= TK_LABEL? ( KW_END_DO | KW_ENDDO )\r\nendforall\r\n         ::= KW_END_FORALL\r\n           | KW_ENDFORALL\r\nendif    ::= KW_END_IF\r\n           | KW_ENDIF\r\nendwhere ::= KW_END_WHERE\r\n           | KW_ENDWHERE\r\nexit_statement\r\n         ::= KW_EXIT id?\r\nreturn_statement\r\n         ::= KW_RETURN expr?\r\ncycle_statement\r\n         ::= KW_CYCLE id?\r\ncontinue_statement\r\n         ::= KW_CONTINUE\r\nentry_statement\r\n         ::= KW_ENTRY id sub_args ( bind result_opt | result bind_opt )?\r\nstop_statement\r\n         ::= KW_STOP expr? ( ',' KW_QUIET '=' expr )?\r\nerror_stop_statement\r\n         ::= KW_ERROR KW_STOP expr? ( ',' KW_QUIET '=' expr )?\r\nevent_post_statement\r\n         ::= KW_EVENT KW_POST '(' expr ( ',' event_post_stat_list )? ')'\r\nevent_wait_statement\r\n         ::= KW_EVENT KW_WAIT '(' expr ( ',' event_wait_spec? ( ',' sync_stat )* )? ')'\r\nsync_all_statement\r\n         ::= sync_all ( '(' sync_stat_list? ')' )?\r\nsync_all ::= KW_SYNC KW_ALL\r\n           | KW_SYNC_ALL\r\nsync_images_statement\r\n         ::= sync_images '(' ( '*' | expr ) sync_stat_list? ')'\r\nsync_images\r\n         ::= KW_SYNC KW_IMAGES\r\n           | KW_SYNC_IMAGES\r\nsync_memory_statement\r\n         ::= sync_memory ( '(' sync_stat_list? ')' )?\r\nsync_memory\r\n         ::= KW_SYNC KW_MEMORY\r\n           | KW_SYNC_MEMORY\r\nsync_team_statement\r\n         ::= sync_team '(' expr sync_stat_list? ')'\r\nsync_team\r\n         ::= KW_SYNC KW_TEAM\r\n           | KW_SYNC_TEAM\r\nevent_wait_spec\r\n         ::= id '=' expr\r\nevent_post_stat_list\r\n         ::= sync_stat\r\nsync_stat_list\r\n         ::= ','? sync_stat ( ',' sync_stat )*\r\nsync_stat\r\n         ::= ( KW_STAT | KW_ERRMSG ) '=' id\r\n           | KW_NEW_INDEX '=' expr\r\ncritical_statement\r\n         ::= KW_CRITICAL ( '(' sync_stat_list? ')' )? sep statements end_critical\r\nchange_team_statement\r\n         ::= change_team '(' expr coarray_association_list sync_stat_list? ')' sep statements end_team ( '(' sync_stat_list ')' )?\r\ncoarray_association_list\r\n         ::= coarray_association? ( ',' coarray_association )*\r\ncoarray_association\r\n         ::= id '[' coarray_arg_list ']' '=>' expr\r\nchange_team\r\n         ::= KW_CHANGE KW_TEAM\r\n           | KW_CHANGE_TEAM\r\nexpr_list_opt\r\n         ::= expr_list?\r\nexpr_list\r\n         ::= expr ( ',' expr )*\r\nrbracket ::= ']'\r\n           | '/)'\r\nexpr     ::= struct_member_star? id ( '(' fnarray_arg_list_opt ')' ( '(' fnarray_arg_list_opt ')' | '[' coarray_arg_list ']' )? | '[' coarray_arg_list ']' )?\r\n           | TK_STRING ( '(' fnarray_arg_list_opt ')' )?\r\n           | '[' ( ( var_type | id ) '::' )? expr_list_opt rbracket\r\n           | TK_INTEGER\r\n           | TK_REAL\r\n           | TK_BOZ_CONSTANT\r\n           | '.true.'\r\n           | '.false.'\r\n           | '(' expr ( ',' ( ( expr ',' ( expr_list ',' )? )? id '=' expr ',' ( expr ',' )? )? expr )? ')'\r\n           | ( TK_DEF_OP | '-' | '+' | '.not.' | expr ( '+' | '-' | '*' | '/' | '**' | '//' | '==' | '/=' | '<' | '<=' | '>' | '>=' | '.and.' | '.or.' | '.xor.' | '.eqv.' | '.neqv.' | TK_DEF_OP ) ) expr\r\nstruct_member_star\r\n         ::= struct_member+\r\nstruct_member\r\n         ::= id ( '(' fnarray_arg_list_opt ')' )? '%'\r\nfnarray_arg_list_opt\r\n         ::= fnarray_arg? ( ',' fnarray_arg )*\r\nfnarray_arg\r\n         ::= expr ( ':' expr? ( ':' expr )? | '::' expr )?\r\n           | ':' expr? ( ':' expr )?\r\n           | ( '::' | id '=' ) expr\r\ncoarray_arg_list\r\n         ::= coarray_arg ( ',' coarray_arg )*\r\ncoarray_arg\r\n         ::= expr ( ':' expr? ( ':' expr )? | '::' expr )?\r\n           | ':' expr? ( ':' expr )?\r\n           | ( '::' | id '=' ) expr\r\n           | '*'\r\nid_list_opt\r\n         ::= id_list?\r\nid_list  ::= id ( ',' id )*\r\nid_opt   ::= id?\r\nid       ::= TK_NAME\r\n           | KW_ABSTRACT\r\n           | KW_ALL\r\n           | KW_ALLOCATABLE\r\n           | KW_ALLOCATE\r\n           | KW_ASSIGN\r\n           | KW_ASSIGNMENT\r\n           | KW_ASSOCIATE\r\n           | KW_ASYNCHRONOUS\r\n           | KW_BACKSPACE\r\n           | KW_BIND\r\n           | KW_BLOCK\r\n           | KW_CALL\r\n           | KW_CASE\r\n           | KW_CHANGE\r\n           | KW_CHARACTER\r\n           | KW_CLASS\r\n           | KW_CLOSE\r\n           | KW_CODIMENSION\r\n           | KW_COMMON\r\n           | KW_COMPLEX\r\n           | KW_CONCURRENT\r\n           | KW_CONTAINS\r\n           | KW_CONTIGUOUS\r\n           | KW_CONTINUE\r\n           | KW_CRITICAL\r\n           | KW_CYCLE\r\n           | KW_DATA\r\n           | KW_DEALLOCATE\r\n           | KW_DEFAULT\r\n           | KW_DEFERRED\r\n           | KW_DIMENSION\r\n           | KW_DO\r\n           | KW_DOWHILE\r\n           | KW_DOUBLE\r\n           | KW_DOUBLE_PRECISION\r\n           | KW_DOUBLE_COMPLEX\r\n           | KW_ELEMENTAL\r\n           | KW_ELSE\r\n           | KW_ELSEIF\r\n           | KW_ELSEWHERE\r\n           | KW_END\r\n           | KW_ENDDO\r\n           | KW_ENDIF\r\n           | KW_ENDINTERFACE\r\n           | KW_ENDTYPE\r\n           | KW_ENDPROGRAM\r\n           | KW_ENDMODULE\r\n           | KW_ENDSUBMODULE\r\n           | KW_ENDBLOCK\r\n           | KW_ENDBLOCKDATA\r\n           | KW_ENDSUBROUTINE\r\n           | KW_ENDFUNCTION\r\n           | KW_ENDPROCEDURE\r\n           | KW_ENDENUM\r\n           | KW_ENDSELECT\r\n           | KW_ENDASSOCIATE\r\n           | KW_ENDFORALL\r\n           | KW_ENDWHERE\r\n           | KW_ENDCRITICAL\r\n           | KW_ENDFILE\r\n           | KW_ENTRY\r\n           | KW_ENUM\r\n           | KW_ENUMERATOR\r\n           | KW_EQUIVALENCE\r\n           | KW_ERRMSG\r\n           | KW_ERROR\r\n           | KW_EVENT\r\n           | KW_EXIT\r\n           | KW_EXTENDS\r\n           | KW_EXTERNAL\r\n           | KW_FILE\r\n           | KW_FINAL\r\n           | KW_FLUSH\r\n           | KW_FORALL\r\n           | KW_FORMATTED\r\n           | KW_FORM\r\n           | KW_FORM_TEAM\r\n           | KW_FUNCTION\r\n           | KW_GENERIC\r\n           | KW_GO\r\n           | KW_GOTO\r\n           | KW_IF\r\n           | KW_IMAGES\r\n           | KW_IMPLICIT\r\n           | KW_IMPORT\r\n           | KW_IMPURE\r\n           | KW_IN\r\n           | KW_INCLUDE\r\n           | KW_INOUT\r\n           | KW_INQUIRE\r\n           | KW_INSTANTIATE\r\n           | KW_INTEGER\r\n           | KW_INTENT\r\n           | KW_INTERFACE\r\n           | KW_INTRINSIC\r\n           | KW_IS\r\n           | KW_KIND\r\n           | KW_LEN\r\n           | KW_LOCAL\r\n           | KW_LOCAL_INIT\r\n           | KW_LOGICAL\r\n           | KW_MEMORY\r\n           | KW_MODULE\r\n           | KW_MOLD\r\n           | KW_NAME\r\n           | KW_NAMELIST\r\n           | KW_NEW_INDEX\r\n           | KW_NOPASS\r\n           | KW_NON_INTRINSIC\r\n           | KW_NON_OVERRIDABLE\r\n           | KW_NON_RECURSIVE\r\n           | KW_NONE\r\n           | KW_NULLIFY\r\n           | KW_ONLY\r\n           | KW_OPEN\r\n           | KW_OPERATOR\r\n           | KW_OPTIONAL\r\n           | KW_OUT\r\n           | KW_PARAMETER\r\n           | KW_PASS\r\n           | KW_POINTER\r\n           | KW_POST\r\n           | KW_PRECISION\r\n           | KW_PRINT\r\n           | KW_PRIVATE\r\n           | KW_PROCEDURE\r\n           | KW_PROGRAM\r\n           | KW_PROTECTED\r\n           | KW_PUBLIC\r\n           | KW_PURE\r\n           | KW_QUIET\r\n           | KW_RANK\r\n           | KW_READ\r\n           | KW_REAL\r\n           | KW_RECURSIVE\r\n           | KW_REDUCE\r\n           | KW_REQUIREMENT\r\n           | KW_REQUIRES\r\n           | KW_RESULT\r\n           | KW_RETURN\r\n           | KW_REWIND\r\n           | KW_SAVE\r\n           | KW_SELECT\r\n           | KW_SELECT_CASE\r\n           | KW_SELECT_RANK\r\n           | KW_SELECT_TYPE\r\n           | KW_SEQUENCE\r\n           | KW_SHARED\r\n           | KW_SOURCE\r\n           | KW_STAT\r\n           | KW_STOP\r\n           | KW_SUBMODULE\r\n           | KW_SUBROUTINE\r\n           | KW_SYNC\r\n           | KW_TARGET\r\n           | KW_TEAM\r\n           | KW_TEAM_NUMBER\r\n           | KW_TEMPLATE\r\n           | KW_THEN\r\n           | KW_TO\r\n           | KW_TYPE\r\n           | KW_UNFORMATTED\r\n           | KW_USE\r\n           | KW_VALUE\r\n           | KW_VOLATILE\r\n           | KW_WAIT\r\n           | KW_WHERE\r\n           | KW_WHILE\r\n           | KW_WRITE\r\n\r\n//\r\n//Tokens\r\n//\\('[^']+'\\)\\s+{\\s*KW(\\([^)]+\\))\\s*} -> KW_\\2 ::= \\1\r\n//'end'\\s+whitespace\\s+'\\([^']+'\\)  -> 'end \\1\r\n//\\(['\"][^'\"]+['\"]\\)\\s+{\\s*RET(\\([^)]+\\))\\s*} -> \\2 ::= \\1\r\n// Keywords\r\nKW_ABSTRACT ::= 'abstract'\r\nKW_ALL ::= 'all'\r\nKW_ALLOCATABLE ::= 'allocatable'\r\nKW_ALLOCATE ::= 'allocate'\r\nKW_ASSIGN ::= 'assign'\r\nKW_ASSIGNMENT ::= 'assignment'\r\nKW_ASSOCIATE ::= 'associate'\r\nKW_ASYNCHRONOUS ::= 'asynchronous'\r\nKW_BACKSPACE ::= 'backspace'\r\nKW_BIND ::= 'bind'\r\nKW_BLOCK ::= 'block'\r\nKW_CALL ::= 'call'\r\nKW_CASE ::= 'case'\r\nKW_CHANGE ::= 'change'\r\nKW_CHANGE_TEAM ::= 'changeteam'\r\nKW_CHARACTER ::= 'character'\r\nKW_CLASS ::= 'class'\r\nKW_CLOSE ::= 'close'\r\nKW_CODIMENSION ::= 'codimension'\r\nKW_COMMON ::= 'common'\r\nKW_COMPLEX ::= 'complex'\r\nKW_CONCURRENT ::= 'concurrent'\r\nKW_CONTAINS ::= 'contains'\r\nKW_CONTIGUOUS ::= 'contiguous'\r\nKW_CONTINUE ::= 'continue'\r\nKW_CRITICAL ::= 'critical'\r\nKW_CYCLE ::= 'cycle'\r\nKW_DATA ::= 'data'\r\nKW_DEALLOCATE ::= 'deallocate'\r\nKW_DEFAULT ::= 'default'\r\nKW_DEFERRED ::= 'deferred'\r\nKW_DIMENSION ::= 'dimension'\r\n/*\r\n'do' / (whitespace digit+) {\r\n// This is a label do statement, we have to match the\r\n// corresponding continue base \"end do\".\r\nuint64_t n = parse_int(cur);\r\nenddo_label_stack.push_back(n);\r\nKW(DO);\r\n}\r\n*/\r\nKW_DO ::= 'do'\r\nKW_DOWHILE ::= 'dowhile'\r\nKW_DOUBLE ::= 'double'\r\nKW_DOUBLE_PRECISION ::= 'doubleprecision'\r\nKW_DOUBLE_COMPLEX ::= 'doublecomplex'\r\nKW_ELEMENTAL ::= 'elemental'\r\nKW_ELSE ::= 'else'\r\nKW_ELSEIF ::= 'elseif'\r\nKW_ELSEWHERE ::= 'elsewhere'\r\nKW_END ::= 'end'\r\nKW_END_PROGRAM ::= 'end program'\r\nKW_ENDPROGRAM ::= 'endprogram'\r\nKW_END_MODULE ::= 'end module'\r\nKW_ENDMODULE ::= 'endmodule'\r\nKW_END_SUBMODULE ::= 'end submodule'\r\nKW_ENDSUBMODULE ::= 'endsubmodule'\r\nKW_END_BLOCK ::= 'end block'\r\nKW_ENDBLOCK ::= 'endblock'\r\nKW_END_BLOCK_DATA ::= 'end block data'\r\nKW_END_BLOCK_DATA ::= 'endblock data'\r\nKW_END_BLOCK_DATA ::= 'end blockdata'\r\nKW_ENDBLOCKDATA ::= 'endblockdata'\r\nKW_END_SUBROUTINE ::= 'end subroutine'\r\nKW_ENDSUBROUTINE ::= 'endsubroutine'\r\nKW_END_FUNCTION ::= 'end function'\r\nKW_ENDFUNCTION ::= 'endfunction'\r\nKW_END_PROCEDURE ::= 'end procedure'\r\nKW_ENDPROCEDURE ::= 'endprocedure'\r\nKW_END_ENUM ::= 'end enum'\r\nKW_ENDENUM ::= 'endenum'\r\nKW_END_SELECT ::= 'end select'\r\nKW_ENDSELECT ::= 'endselect'\r\nKW_END_ASSOCIATE ::= 'end associate'\r\nKW_ENDASSOCIATE ::= 'endassociate'\r\nKW_END_CRITICAL ::= 'end critical'\r\nKW_ENDCRITICAL ::= 'endcritical'\r\nKW_END_TEAM ::= 'end team'\r\nKW_ENDTEAM ::= 'endteam'\r\nKW_END_FORALL ::= 'end forall'\r\nKW_ENDFORALL ::= 'endforall'\r\nKW_END_IF ::= 'end if'\r\nKW_ENDIF ::= 'endif'\r\nKW_END_INTERFACE ::= 'end interface'\r\nKW_ENDINTERFACE ::= 'endinterface'\r\nKW_END_TYPE ::= 'end type'\r\nKW_ENDTYPE ::= 'endtype'\r\n/*\r\n'end do' {\r\nif (enddo_newline_process) {\r\n    KW(CONTINUE)\r\n} else {\r\n    KW(END_DO)\r\n}\r\n}\r\n'enddo' {\r\nif (enddo_newline_process) {\r\n    KW(CONTINUE)\r\n} else {\r\n    KW(ENDDO)\r\n}\r\n}\r\n*/\r\nKW_END_WHERE ::= 'end where'\r\nKW_ENDWHERE ::= 'endwhere'\r\nKW_END_FILE ::= 'end file'\r\nKW_ENDFILE ::= 'endfile'\r\nKW_ENTRY ::= 'entry'\r\nKW_ENUM ::= 'enum'\r\nKW_ENUMERATOR ::= 'enumerator'\r\nKW_EQUIVALENCE ::= 'equivalence'\r\nKW_ERRMSG ::= 'errmsg'\r\nKW_ERROR ::= 'error'\r\nKW_EVENT ::= 'event'\r\nKW_EXIT ::= 'exit'\r\nKW_EXTENDS ::= 'extends'\r\nKW_EXTERNAL ::= 'external'\r\nKW_FILE ::= 'file'\r\nKW_FINAL ::= 'final'\r\nKW_FLUSH ::= 'flush'\r\nKW_FORALL ::= 'forall'\r\n/*\r\n'format' {\r\nif (last_token == yytokentype::TK_LABEL) {\r\n    unsigned char *start;\r\n    lex_format(cur, loc, start);\r\n    yylval.string.p = (char*) start;\r\n    yylval.string.n = cur-start-1;\r\n    RET(TK_FORMAT)\r\n} else {\r\n    token(yylval.string);\r\n    RET(TK_NAME)\r\n}\r\n}\r\n*/\r\nKW_FORMATTED ::= 'formatted'\r\nKW_FORM ::= 'form'\r\nKW_FORM_TEAM ::= 'formteam'\r\nKW_FUNCTION ::= 'function'\r\nKW_GENERIC ::= 'generic'\r\nKW_GO ::= 'go'\r\nKW_GOTO ::= 'goto'\r\nKW_IF ::= 'if'\r\nKW_IMAGES ::= 'images'\r\nKW_IMPLICIT ::= 'implicit'\r\nKW_IMPORT ::= 'import'\r\nKW_IMPURE ::= 'impure'\r\nKW_IN ::= 'in'\r\nKW_INCLUDE ::= 'include'\r\nKW_INOUT ::= 'inout' | 'in out'\r\nKW_INQUIRE ::= 'inquire'\r\nKW_INSTANTIATE ::= 'instantiate'\r\nKW_INTEGER ::= 'integer'\r\nKW_INTENT ::= 'intent'\r\nKW_INTERFACE ::= 'interface'\r\nKW_INTRINSIC ::= 'intrinsic'\r\nKW_IS ::= 'is'\r\nKW_KIND ::= 'kind'\r\nKW_LEN ::= 'len'\r\nKW_LOCAL ::= 'local'\r\nKW_LOCAL_INIT ::= 'local_init'\r\nKW_LOGICAL ::= 'logical'\r\nKW_MEMORY ::= 'memory'\r\nKW_MODULE ::= 'module'\r\nKW_MOLD ::= 'mold'\r\nKW_NAME ::= 'name'\r\nKW_NAMELIST ::= 'namelist'\r\nKW_NEW_INDEX ::= 'new_index'\r\nKW_NOPASS ::= 'nopass'\r\nKW_NON_INTRINSIC ::= 'non_intrinsic'\r\nKW_NON_OVERRIDABLE ::= 'non_overridable'\r\nKW_NON_RECURSIVE ::= 'non_recursive'\r\nKW_NONE ::= 'none'\r\nKW_NULLIFY ::= 'nullify'\r\nKW_ONLY ::= 'only'\r\nKW_OPEN ::= 'open'\r\nKW_OPERATOR ::= 'operator'\r\nKW_OPTIONAL ::= 'optional'\r\nKW_OUT ::= 'out'\r\nKW_PARAMETER ::= 'parameter'\r\nKW_PASS ::= 'pass'\r\nKW_POINTER ::= 'pointer'\r\nKW_POST ::= 'post'\r\nKW_PRECISION ::= 'precision'\r\nKW_PRINT ::= 'print'\r\nKW_PRIVATE ::= 'private'\r\nKW_PROCEDURE ::= 'procedure'\r\nKW_PROGRAM ::= 'program'\r\nKW_PROTECTED ::= 'protected'\r\nKW_PUBLIC ::= 'public'\r\nKW_PURE ::= 'pure'\r\nKW_QUIET ::= 'quiet'\r\nKW_RANK ::= 'rank'\r\nKW_READ ::= 'read'\r\nKW_REAL ::= 'real'\r\nKW_RECURSIVE ::= 'recursive'\r\nKW_REDUCE ::= 'reduce'\r\nKW_REQUIREMENT ::= 'requirement'\r\nKW_REQUIRES ::= 'requires'\r\nKW_RESULT ::= 'result'\r\nKW_RETURN ::= 'return'\r\nKW_REWIND ::= 'rewind'\r\nKW_SAVE ::= 'save'\r\nKW_SELECT ::= 'select'\r\nKW_SELECT_CASE ::= 'selectcase'\r\nKW_SELECT_RANK ::= 'selectrank'\r\nKW_SELECT_TYPE ::= 'selecttype'\r\nKW_SEQUENCE ::= 'sequence'\r\nKW_SHARED ::= 'shared'\r\nKW_SOURCE ::= 'source'\r\nKW_STAT ::= 'stat'\r\nKW_STOP ::= 'stop'\r\nKW_SUBMODULE ::= 'submodule'\r\nKW_SUBROUTINE ::= 'subroutine'\r\nKW_SYNC ::= 'sync'\r\nKW_SYNC_ALL ::= 'syncall'\r\nKW_SYNC_IMAGES ::= 'syncimages'\r\nKW_SYNC_MEMORY ::= 'syncmemory'\r\nKW_SYNC_TEAM ::= 'syncteam'\r\nKW_TARGET ::= 'target'\r\nKW_TEAM ::= 'team'\r\nKW_TEAM_NUMBER ::= 'team_number'\r\nKW_TEMPLATE ::= 'template'\r\nKW_THEN ::= 'then'\r\nKW_TO ::= 'to'\r\nKW_TYPE ::= 'type'\r\nKW_UNFORMATTED ::= 'unformatted'\r\nKW_USE ::= 'use'\r\nKW_VALUE ::= 'value'\r\nKW_VOLATILE ::= 'volatile'\r\nKW_WAIT ::= 'wait'\r\nKW_WHERE ::= 'where'\r\nKW_WHILE ::= 'while'\r\nKW_WRITE ::= 'write'\r\n\r\n// Single character symbols\r\n/*\r\nTK_LPAREN ::= \"(\"\r\n\"(\" / TK_LPAREN ::= \"/=\" // To parse \"operator(/=)\" correctly\r\n\"(\" / TK_LPAREN ::= \"/)\" // To parse \"operator(/)\" correctly\r\n// To parse \"operator(/ )\" correctly\r\n\"(\" / \"/\" whitespace TK_LPAREN ::= \")\"\r\n// To parse \"operator(// )\" correctly\r\n\"(\" / \"//\" whitespace TK_LPAREN ::= \")\"\r\n\"(\" / TK_LPAREN ::= \"//)\" // To parse \"operator(//)\" correctly\r\nTK_RPAREN ::= \")\"\r\nTK_LBRACKET ::= \"(/\" | \"[\"\r\nTK_RBRACKET ::= \"]\"\r\nTK_RBRACKET_OLD ::= \"/)\"\r\n*/\r\nTK_PLUS ::= \"+\"\r\nTK_MINUS ::= \"-\"\r\nTK_EQUAL ::= \"=\"\r\nTK_COLON ::= \":\"\r\nTK_SEMICOLON ::= \";\"\r\nTK_SLASH ::= \"/\"\r\nTK_PERCENT ::= \"%\"\r\nTK_COMMA ::= \",\"\r\nTK_STAR ::= \"*\"\r\nTK_VBAR ::= \"|\"\r\n// Multiple character symbols\r\nTK_DBL_DOT ::= \"..\"\r\nTK_DBL_COLON ::= \"::\"\r\nTK_POW ::= \"**\"\r\nTK_CONCAT ::= \"//\"\r\nTK_ARROW ::= \"=>\"\r\n// Relational operators\r\nTK_EQ ::= \"==\" | '.eq.'\r\nTK_NE ::= \"/=\" | '.ne.'\r\nTK_LT ::= \"<\" | '.lt.'\r\nTK_LE ::= \"<=\" | '.le.'\r\nTK_GT ::= \">\" | '.gt.'\r\nTK_GE ::= \">=\" | '.ge.'\r\n// Logical operators\r\nTK_NOT ::= '.not.'\r\nTK_AND ::= '.and.'\r\nTK_OR ::= '.or.'\r\nTK_XOR ::= '.xor.'\r\nTK_EQV ::= '.eqv.'\r\nTK_NEQV ::= '.neqv.'\r\n// True/False\r\nTK_TRUE ::= '.true.' //(\"_\" kind)? { RET(TK_TRUE) }\r\nTK_FALSE ::= '.false.' //(\"_\" kind)? { RET(TK_FALSE) }\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/1011/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/1011/timeline","performed_via_github_app":null,"state_reason":null}