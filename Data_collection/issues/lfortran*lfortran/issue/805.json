{"url":"https://api.github.com/repos/lfortran/lfortran/issues/805","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/805/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/805/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/805/events","html_url":"https://github.com/lfortran/lfortran/issues/805","id":1390200635,"node_id":"I_kwDOCpMuHc5S3Mc7","number":805,"title":"[Julia] Wrapping global environment in `function main()` causes variable not-found issues","user":{"login":"lucifer1004","id":13583761,"node_id":"MDQ6VXNlcjEzNTgzNzYx","avatar_url":"https://avatars.githubusercontent.com/u/13583761?v=4","gravatar_id":"","url":"https://api.github.com/users/lucifer1004","html_url":"https://github.com/lucifer1004","followers_url":"https://api.github.com/users/lucifer1004/followers","following_url":"https://api.github.com/users/lucifer1004/following{/other_user}","gists_url":"https://api.github.com/users/lucifer1004/gists{/gist_id}","starred_url":"https://api.github.com/users/lucifer1004/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lucifer1004/subscriptions","organizations_url":"https://api.github.com/users/lucifer1004/orgs","repos_url":"https://api.github.com/users/lucifer1004/repos","events_url":"https://api.github.com/users/lucifer1004/events{/privacy}","received_events_url":"https://api.github.com/users/lucifer1004/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-09-29T03:31:57Z","updated_at":"2022-09-30T05:01:03Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Currently, the Julia backend wraps the Fortran `program` into a `function main()`. This works in most cases, but when there are global variables, and some subroutines/functions use implicitly use it (instead of passing in as an argument), issue occurs.\r\n\r\n```fortran\r\nprogram case\r\n   implicit none\r\n   integer :: marks = 9\r\n\r\n   this_block: block\r\n      print *, \"HEE\"\r\n      call s()\r\n   end block this_block\r\ncontains\r\n   subroutine s()\r\n      select case (marks)\r\n       case (1:10)\r\n         print *, \"Pass\"\r\n       case default\r\n         print*, \"Hello\"\r\n         print*, \"Fail\"\r\n      end select\r\n   end subroutine\r\nend program\r\n```\r\n\r\nemits Julia code\r\n\r\n```julia\r\nfunction s()\r\n    if 1 ≤ marks ≤ 10\r\n        println(\"Pass\")\r\n    else\r\n        println(\"Hello\")\r\n        println(\"Fail\")\r\n    end\r\nend\r\n\r\nfunction main()\r\n    local marks::Int32 = 9\r\n    let\r\n        println(\"HEE\")\r\n        s()\r\n    end\r\nend\r\n\r\nmain()\r\n```\r\n\r\nwhich cannot run because `marks` cannot be found when `s()` is executed.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/805/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/805/timeline","performed_via_github_app":null,"state_reason":null}