{"url":"https://api.github.com/repos/lfortran/lfortran/issues/414","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/414/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/414/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/414/events","html_url":"https://github.com/lfortran/lfortran/issues/414","id":1338735717,"node_id":"I_kwDOCpMuHc5Py3xl","number":414,"title":"Generate serialization and deserialization routines for user-defined types","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:12:26Z","updated_at":"2022-08-15T09:12:26Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/550\n\nIt would be very useful to have a compiler subcommand to generate serialization and deserialization routines for any data type.\n\nAs a first thought, the interface could be:\n`lfortran gen-serialize [filename] [typename]` for derived types, or\n`lfortran gen-serialize --intrinsic [typename]` for intrinsic types or arrays of intrinsic types\n\nWe should also have a `--format=[whatever]` flag to let the user specify the serialization format. We could offer JSON, as well as some sort of binary format for faster IO (preferably one that is popular and has libraries for multiple languages).\n\nSince the resulting routines might need to be included inside an actual type definition, so they should probably be written to their own files for the user to `include` wherever they want.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/414/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/414/timeline","performed_via_github_app":null,"state_reason":null}