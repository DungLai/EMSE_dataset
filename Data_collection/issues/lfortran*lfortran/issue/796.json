{"url":"https://api.github.com/repos/lfortran/lfortran/issues/796","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/796/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/796/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/796/events","html_url":"https://github.com/lfortran/lfortran/issues/796","id":1389569461,"node_id":"I_kwDOCpMuHc5S0yW1","number":796,"title":"Add an option so that ASR only marks a function as intrinsic but does not change it","user":{"login":"lucifer1004","id":13583761,"node_id":"MDQ6VXNlcjEzNTgzNzYx","avatar_url":"https://avatars.githubusercontent.com/u/13583761?v=4","gravatar_id":"","url":"https://api.github.com/users/lucifer1004","html_url":"https://github.com/lucifer1004","followers_url":"https://api.github.com/users/lucifer1004/followers","following_url":"https://api.github.com/users/lucifer1004/following{/other_user}","gists_url":"https://api.github.com/users/lucifer1004/gists{/gist_id}","starred_url":"https://api.github.com/users/lucifer1004/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lucifer1004/subscriptions","organizations_url":"https://api.github.com/users/lucifer1004/orgs","repos_url":"https://api.github.com/users/lucifer1004/repos","events_url":"https://api.github.com/users/lucifer1004/events{/privacy}","received_events_url":"https://api.github.com/users/lucifer1004/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2022-09-28T15:34:31Z","updated_at":"2022-09-28T17:09:57Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Currently, the ASR tries to specify each intrinsic function. But in some cases, e.g., the Julia backend, it seems better to have an option where the ASR only marks a function intrinsic and lets the backend translate it to the equivalent function in its language.\r\n\r\nFor example, the ASR specifies `not` to `not32` or others, considering the type of the callee. However, in Julia, we can use `~x` directly and do not need to use kind-specific functions.\r\n\r\nBy adding this option (and disabling it by default so as not to break current logic), cleaner and neater code can be generated in many cases.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/796/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/796/timeline","performed_via_github_app":null,"state_reason":null}