{"url":"https://api.github.com/repos/lfortran/lfortran/issues/616","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/616/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/616/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/616/events","html_url":"https://github.com/lfortran/lfortran/issues/616","id":1342123621,"node_id":"I_kwDOCpMuHc5P_y5l","number":616,"title":"Constant value in ArrayItem","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2022-08-17T18:23:29Z","updated_at":"2022-08-24T09:11:10Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"I tried the following diff:\r\n```diff\r\ndiff --git a/integration_tests/intrinsics_45.f90 b/integration_tests/intrinsics_45.f90\r\nindex 3c537aacc..90c93af12 100644\r\n--- a/integration_tests/intrinsics_45.f90\r\n+++ b/integration_tests/intrinsics_45.f90\r\n@@ -2,5 +2,5 @@ program intrinsics_45\r\n use iso_fortran_env, only : real_kinds, integer_kinds, character_kinds, logical_kinds\r\n print *, size(real_kinds), size(integer_kinds), size(character_kinds), size(logical_kinds)\r\n ! Does not work yet\r\n-!print *, real_kinds\r\n+print *, real_kinds\r\n end program\r\ndiff --git a/src/libasr/pass/pass_utils.cpp b/src/libasr/pass/pass_utils.cpp\r\nindex 0a92ca2d4..fc0d67cde 100644\r\n--- a/src/libasr/pass/pass_utils.cpp\r\n+++ b/src/libasr/pass/pass_utils.cpp\r\n@@ -158,11 +158,13 @@ namespace LFortran {\r\n         ASR::expr_t* create_array_ref(ASR::expr_t* arr_expr, Vec<ASR::expr_t*>& idx_vars, Allocator& al) {\r\n             Vec<ASR::array_index_t> args;\r\n             args.reserve(al, 1);\r\n+            bool compile_time_idx = true;\r\n             for( size_t i = 0; i < idx_vars.size(); i++ ) {\r\n                 ASR::array_index_t ai;\r\n                 ai.loc = arr_expr->base.loc;\r\n                 ai.m_left = nullptr;\r\n                 ai.m_right = idx_vars[i];\r\n+                if (!ASRUtils::expr_value(idx_vars[i])) compile_time_idx = false;\r\n                 ai.m_step = nullptr;\r\n                 args.push_back(al, ai);\r\n             }\r\n@@ -170,10 +172,23 @@ namespace LFortran {\r\n             empty_dims.reserve(al, 1);\r\n             ASR::ttype_t* _type = ASRUtils::expr_type(arr_expr);\r\n             _type = ASRUtils::duplicate_type(al, _type, &empty_dims);\r\n+            ASR::expr_t *value = nullptr;\r\n+            ASR::expr_t *expr_value = ASRUtils::expr_value(arr_expr);\r\n+            if (expr_value && compile_time_idx) {\r\n+                ASR::ArrayConstant_t *ac = ASR::down_cast<ASR::ArrayConstant_t>(expr_value);\r\n+                std::cout << \"XXX\" << std::endl;\r\n+                if (args.size() == 1) {\r\n+                    std::cout << \"YYY\" << std::endl;\r\n+                    ASR::IntegerConstant_t *ic = ASR::down_cast<ASR::IntegerConstant_t>(\r\n+                        ASRUtils::expr_value(args[0].m_right)\r\n+                    );\r\n+                }\r\n+                value = nullptr; // FIXME\r\n+            }\r\n             ASR::expr_t* array_ref = LFortran::ASRUtils::EXPR(ASR::make_ArrayItem_t(al,\r\n                                                               arr_expr->base.loc, arr_expr,\r\n                                                               args.p, args.size(),\r\n-                                                              _type, nullptr));\r\n+                                                              _type, value));\r\n             return array_ref;\r\n         }\r\n \r\n```\r\nUntil I realized that it won't fix this particular print problem, because there the print generates\r\n```fortran\r\ndo i = 1, 4\r\n    print *, A(i)\r\nend do\r\n```\r\nWhere `A` is compile time, but `i` is not --- we would have to unroll the `do` loop at compile time, which we probably should, but that's a separate issue.\r\n\r\nIn fact, the print pass is incorrect, it should not transform `print *, A` to the above loop, but rather to:\r\n```\r\nprint *, A(1), A(2), A(3), A(4)\r\n```\r\nand *then* the above diff should fix this problem.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/616/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/616/timeline","performed_via_github_app":null,"state_reason":null}