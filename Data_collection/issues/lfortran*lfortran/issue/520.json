{"url":"https://api.github.com/repos/lfortran/lfortran/issues/520","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/520/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/520/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/520/events","html_url":"https://github.com/lfortran/lfortran/issues/520","id":1338782092,"node_id":"I_kwDOCpMuHc5PzDGM","number":520,"title":"Extend ASR with metadata","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:59:21Z","updated_at":"2022-08-15T09:59:21Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/674\n\nInitially every `symbol` and every `stmt` will have a metadata member, something along these lines:\n```diff\n--- a/grammar/ASR.asdl\n+++ b/grammar/ASR.asdl\n@@ -81,7 +81,7 @@ unit\n \n symbol\n     = Program(symbol_table symtab, identifier name, identifier* dependencies,\n-        stmt* body)\n+        stmt* body, metadata? metadata)\n     | Module(symbol_table symtab, identifier name, identifier* dependencies,\n         bool loaded_from_mod, bool intrinsic)\n     | Subroutine(symbol_table symtab, identifier name, expr* args, stmt* body,\n@@ -152,7 +152,7 @@ abi                   -- External     ABI\n \n \n stmt\n-    = Allocate(alloc_arg* args, expr? stat, expr? errmsg)\n+    = Allocate(alloc_arg* args, expr? stat, expr? errmsg, metadata? metadata)\n     | Assign(int label, identifier variable)\n     | Assignment(expr target, expr value, stmt? overloaded)\n     | Associate(expr target, expr value)\n@@ -291,4 +291,10 @@ do_loop_head = (expr? v, expr? start, expr? end, expr? increment)\n \n case_stmt = CaseStmt(expr* test, stmt* body) | CaseStmt_Range(expr? start, expr? end, stmt* body)\n \n+metadata\n+    = MetadataGeneralPragma(string text)\n+    | MetadataOpenMPPragma(...)\n+    | MetadataComment(string comment)\n+    | MetadataOptimization(...)\n+    | MetadataDeclaration(bool device) # does the array live on a device or host\n+\n }\n```\nSo that the frontend can parse things like OpenMP pragmas as well as general (LFortran/LPython) pragmas and any other extensions, such as optimization directives to choose which ASR passes to apply for the given function or loop. \n\nEffectively this would allow a simple way to extend the ASR without having to modify any code, so that we can experiment with some feature first, and later decide whether to keep it as metadata, or put it into ASR proper.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/520/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/520/timeline","performed_via_github_app":null,"state_reason":null}