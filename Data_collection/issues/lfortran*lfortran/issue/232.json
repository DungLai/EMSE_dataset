{"url":"https://api.github.com/repos/lfortran/lfortran/issues/232","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/232/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/232/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/232/events","html_url":"https://github.com/lfortran/lfortran/issues/232","id":1338687286,"node_id":"I_kwDOCpMuHc5Pyr82","number":232,"title":"Better feedback from the compiler how it optimizes things","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T08:21:45Z","updated_at":"2022-08-15T08:21:45Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/134\n\n# Problem statement\n\nSome compilers compile array based expressions into slower code than explicit loops. Sometimes compilers do not vectorize loops, but do not provide very detailed information why the loop was not vectorized.\n\n# Solution\n\nThe solution to these and many other similar issues is for the compiler to provide high quality feedback to the develop about how it optimizes things or why things cannot be optimized.\n\n## Details\n\nLFortran first transforms the code to an [ASR](https://docs.lfortran.org/design/). In the future it will transform the ASR to a simpler ASR, for example it will rewrite array expressions into explicit loops, and even try to rewrite the loops to vectorized form. Then with a proper compiler option it will be able to tell the developer exactly how the ASR looks like after optimizations (and it can print it either in the ASR specific language, or transform back to Fortran code). If the compiler cannot optimize something that it should, the developer can file a bug report.\n\nThis will be a much nice report, than looking at the assembly code that the compiler generates, because many times developers just want to make sure that the compiler understands the array expression and transforms it into the expected loop structure. The same with transforming the loop structure into a vectorized form. How the final loop gets transformed to LLVM and eventually to machine code is another problem, and feedback there would also be helpful, but there is a lot of useful feedback that should happen on the ASR level itself, before things get transformed to LLVM.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/232/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/232/timeline","performed_via_github_app":null,"state_reason":null}