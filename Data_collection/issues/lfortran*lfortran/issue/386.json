{"url":"https://api.github.com/repos/lfortran/lfortran/issues/386","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/386/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/386/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/386/events","html_url":"https://github.com/lfortran/lfortran/issues/386","id":1338732941,"node_id":"I_kwDOCpMuHc5Py3GN","number":386,"title":"[RFC] Compile Time Intrinsic Design","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:09:48Z","updated_at":"2022-08-15T09:09:48Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/501\n\nI have been thinking about the optimal manner in which we can work with implementing the intrinsic functions at compile time. This is a preliminary RFC (request for comments) which might be of interest to all the recent contributors as well; pinging [@ certik](https://gitlab.com/certik), [@ Thirumalai-Shaktivel](https://gitlab.com/Thirumalai-Shaktivel), [@ czgdp18071](https://gitlab.com/czgdp18071) and [@ dpoe](https://gitlab.com/dpoe) (apologies if I missed anyone).\n\nCurrently we have two implementations; a `switch` statement on the number of arguments (`symboltable`) and an `ifelse` setup (`body visitor`).\n\nMoving forward I would prefer the `ifelse` since many of the functions take an optional set of arguments. This will then live inside the `CommonVisitor` and use `unordered_map` to lookup which one should be called. So far so good.\n\nHowever, more importantly, there are two ways moving forward, with classes or with partial functions.\n\n## Classes\nIn this approach we'd have a base virtual class with: \n- `name` Function name\n- `n_rargs` Required arguments\n- `n_oargs` Optional arguments\n- `implementation` This is the name of the implementation (pure `fortran`, `openlibm` etc.) and is used to resolve the symbol at runtime\n\nDerived classes would simply implement (an overloaded) `operator()` with the implementation.\n\n### Pros\n- Conceptually simple\n- Flexible\n- RAII\n\n### Cons\n- Slow??\n- Overkill??\n\n## Partial Function\nIn this approach, we would use `std::bind` to simplify which one of the functions would be used (based on the number of arguments) and the appropriate function pointer will be called out of the map.\n\n### Pros\n- Shorter?\n- Easier to inline implementations\n\n### Cons\n- Not very C++ like perhaps?\n\n# Thoughts\nAs can be seen; this is a very rough draft, comments are welcome and appreciated.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/386/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/386/timeline","performed_via_github_app":null,"state_reason":null}