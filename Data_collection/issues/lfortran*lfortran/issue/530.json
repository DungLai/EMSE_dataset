{"url":"https://api.github.com/repos/lfortran/lfortran/issues/530","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/530/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/530/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/530/events","html_url":"https://github.com/lfortran/lfortran/issues/530","id":1338782835,"node_id":"I_kwDOCpMuHc5PzDRz","number":530,"title":"Loop Optimizations","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T10:00:18Z","updated_at":"2022-08-15T10:00:18Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/688\n\nSo, I came cross a bunch of loop optimisations and I think we should implement these in LFortran/LPython. I am listing them below. Please feel free to add more,\n\n1. Frequency Reduction - In this optimization we take out all the expressions which depend on iteration variables in any way. Consider for example the following,\n\n```\nwhile(i<100)\n{\n a = sin(x)/cos(x) + i;\n i++;\n}\n```\n\nsin(x)/cos(x) is a binop and it doesn't depend on any iteration variable, so safely can be taken out.\n\n2. Loop Unrolling - This is already done. Though there is an interesting part to it. Grouping together all similar statements after unrolling. However, we should make sure that any iteration doesn't depend on previous iteration (a bit tricky to figure out). For example,\n\n```\nwhile(i < 100)\n{\na(i) = i + 1;\nb(i) = i + 2;\n}\n```\nSo the above can be unrolled and re-arranged because no iteration depends on the previous,\n\n```\nwhile(i < 50)\n{\na(i) = i + 1;\na(i + 1) = i + 2;\nb(i) = i + 2;\nb(i + 1) = i + 3;\n}\n```\n\n3. Loop fusion - Here we fuse two loops together. However, there are two conditions two loops have to satisfy before getting fused.\nSay the following are the loops,\n```\nLoop 1\nLoop 2\n```\nNow Loop 2 shouldn't depend on completion of Loop 1 and, Loop 1 and Loop 2 should have same start, stop and step. For simplicity I am considering exactly same start, stop and step. Later we can relax it to same step I think. \n\nNow, to check if the body of Loop 2 is independent of Loop 1. Following is the condition,\nSay, LHS of all the assignment statements in Loop 1 as LHS1, and RHS as RHS1. Similarly for assignment statements in Loop 2. LHS2 and RHS2.\n\nNow, LHS1 and RHS2 shouldn't have any common symbol.\n\nTake the following example,\n```\nfor(int i=0; i<5; i++)\n    a = i + 5;\nfor(int i=0; i<5; i++)\n    b = i + 10;\n```\nLHS1 = [a], RHS1 = [i], LHS2 = [b], RHS2 = i. Then LHS1 intersection RHS2 is empty, so both loops can be fused together.\n\nLet's ignore loops having subroutine calls for now.\n\nBut for the following case,\n```\nfor(int i=0; i<5; i++)\n    a = i + 5;\nfor(int i=0; i<5; i++)\n    b = i + a;\n```\nLHS1 = [a], RHS1 = [i], LHS2 = [b], RHS2 = [a], so here LHS1 intersection RHS2 is [a], not empty so these two loops cannot be fused.\n\nReferences - https://www.geeksforgeeks.org/loop-optimization-in-compiler-design/","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/530/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/530/timeline","performed_via_github_app":null,"state_reason":null}