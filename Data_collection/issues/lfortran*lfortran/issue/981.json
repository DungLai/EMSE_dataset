{"url":"https://api.github.com/repos/lfortran/lfortran/issues/981","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/981/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/981/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/981/events","html_url":"https://github.com/lfortran/lfortran/issues/981","id":1434891959,"node_id":"I_kwDOCpMuHc5Vhra3","number":981,"title":"Implied do loops","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":{"login":"Pranavchiku","id":85227306,"node_id":"MDQ6VXNlcjg1MjI3MzA2","avatar_url":"https://avatars.githubusercontent.com/u/85227306?v=4","gravatar_id":"","url":"https://api.github.com/users/Pranavchiku","html_url":"https://github.com/Pranavchiku","followers_url":"https://api.github.com/users/Pranavchiku/followers","following_url":"https://api.github.com/users/Pranavchiku/following{/other_user}","gists_url":"https://api.github.com/users/Pranavchiku/gists{/gist_id}","starred_url":"https://api.github.com/users/Pranavchiku/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pranavchiku/subscriptions","organizations_url":"https://api.github.com/users/Pranavchiku/orgs","repos_url":"https://api.github.com/users/Pranavchiku/repos","events_url":"https://api.github.com/users/Pranavchiku/events{/privacy}","received_events_url":"https://api.github.com/users/Pranavchiku/received_events","type":"User","site_admin":false},"assignees":[{"login":"Pranavchiku","id":85227306,"node_id":"MDQ6VXNlcjg1MjI3MzA2","avatar_url":"https://avatars.githubusercontent.com/u/85227306?v=4","gravatar_id":"","url":"https://api.github.com/users/Pranavchiku","html_url":"https://github.com/Pranavchiku","followers_url":"https://api.github.com/users/Pranavchiku/followers","following_url":"https://api.github.com/users/Pranavchiku/following{/other_user}","gists_url":"https://api.github.com/users/Pranavchiku/gists{/gist_id}","starred_url":"https://api.github.com/users/Pranavchiku/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Pranavchiku/subscriptions","organizations_url":"https://api.github.com/users/Pranavchiku/orgs","repos_url":"https://api.github.com/users/Pranavchiku/repos","events_url":"https://api.github.com/users/Pranavchiku/events{/privacy}","received_events_url":"https://api.github.com/users/Pranavchiku/received_events","type":"User","site_admin":false}],"milestone":null,"comments":22,"created_at":"2022-11-03T15:51:16Z","updated_at":"2022-11-09T19:53:47Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The implied do loop in Fortran is kind of like a generator expression in Python. It is a loop that is an expression, so it returns an expression, typically an array (or a list in Python).\r\n\r\nJust like we have `If` (statement) and `IfExp` which is an expression, and we have `DoLoop` (statement), we could have `DoLoopExpr` (which would be an expression):\r\n```diff\r\n--- a/src/libasr/ASR.asdl\r\n+++ b/src/libasr/ASR.asdl\r\n@@ -219,6 +219,7 @@ expr\r\n         -- Such as: (x, y+z), (3.0, 2.0) generally not known at compile time\r\n     | ComplexConstructor(expr re, expr im, ttype type, expr? value)\r\n     | NamedExpr(expr target, expr value, ttype type)\r\n+    | DoLoopExpr(do_loop_head head, expr body, expr type, expr? value)\r\n     | FunctionCall(symbol name, symbol? original_name, call_arg* args,\r\n             ttype type, expr? value, expr? dt)\r\n     | StructTypeConstructor(symbol dt_sym, expr* args, ttype type, expr? value)\r\n```\r\nSo nested implied do loops would simply be nested `DoLoopExpr` nodes.\r\n\r\nNote: It seems `IfExp` should be renamed to `IfExpr`, just like `NamedExpr`.\r\n\r\nSome examples of implied do loops: http://rsusu1.rnd.runnet.ru/develop/fortran/prof77/node204.html\r\n\r\nIt seems an implied do loop is ` ( data-list, loop-variable = start, limit, step ) `, so the `data-list` is an `expr`, and it is either a tuple if it is more than one item, or the expression directly if it is just one item (no tuple).","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/981/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/981/timeline","performed_via_github_app":null,"state_reason":null}