{"url":"https://api.github.com/repos/lfortran/lfortran/issues/326","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/326/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/326/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/326/events","html_url":"https://github.com/lfortran/lfortran/issues/326","id":1338725019,"node_id":"I_kwDOCpMuHc5Py1Kb","number":326,"title":"Check for validity of stated intent","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:03:56Z","updated_at":"2022-08-15T09:03:56Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/334\n\nAs discussed in https://gitlab.com/lfortran/lfortran/-/issues/324, we need to check the validity of the stated intent. For instance, Lfortran currently compiles this program (incorrectly):\n\n```fortran\nmodule callback\n\ncontains\n\nsubroutine foo(c, d)\nreal, intent(inout) :: c, d\nprint *, f(d)\n\ncontains\n\n    real function f(x)\n    real, intent(in) :: x\n    f = 2*x\n    end function f\n\nend subroutine foo\n\nend module\n\nprogram main\n  use callback\n  call foo(0.0, 2.0)\nend program\n```\n\nSince the intent on `c` and `d` is `InOut`, they must be definable, but they are not in this case because they are constants. Note that this program would be completely valid if the `InOut` intent is removed, as the intent would then be the default, ambiguous intent.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/326/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/326/timeline","performed_via_github_app":null,"state_reason":null}