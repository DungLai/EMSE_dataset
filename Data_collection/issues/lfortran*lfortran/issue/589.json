{"url":"https://api.github.com/repos/lfortran/lfortran/issues/589","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/589/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/589/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/589/events","html_url":"https://github.com/lfortran/lfortran/issues/589","id":1338788637,"node_id":"I_kwDOCpMuHc5PzEsd","number":589,"title":"Simplify WASM assembler","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T10:05:47Z","updated_at":"2022-08-15T10:05:47Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/765\n\nWe want back and forth on this, but I think a good division of labor is to have some class to create the \"binary format\" such as ELF, or WASM. But the assembly itself I think can be handled by a WASMAssembler class, so instead of:\n```c++\nVec<uint8_t> m_code_section;\nAllocator &m_al;\n...\nwasm::emit_i32_const(m_code_section,m_al, 0 /* zero exit code */);\nwasm::emit_call(m_code_section, m_al, m_func_name_idx_map[get_hash(m_import_func_asr_map[\"set_exit_code\"])]->index);\n...\n// Use `m_code_section` somewhere\n```\nyou would do:\n```c++\nWASMAssembler wasm(m_al);\n...\nwasm.emit_i32_const(0 /* zero exit code */);\nwasm.emit_call(m_func_name_idx_map[get_hash(m_import_func_asr_map[\"set_exit_code\"])]->index);\n...\n// Use `wasm.m_code_section` somewhere\n```\n\nIt might be slightly easier.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/589/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/589/timeline","performed_via_github_app":null,"state_reason":null}