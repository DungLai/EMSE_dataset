{"url":"https://api.github.com/repos/lfortran/lfortran/issues/314","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/314/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/314/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/314/events","html_url":"https://github.com/lfortran/lfortran/issues/314","id":1338723698,"node_id":"I_kwDOCpMuHc5Py01y","number":314,"title":"LLVM: integer(4) should be represented as i32 not i64","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:02:45Z","updated_at":"2022-08-15T09:02:45Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/298\n\nExample:\n```fortran\nprogram test\ninteger :: a\ninteger(8) :: b\na = 4\nb = 4\nend program\n```\nThe ASR seems correct:\n```\n(TranslationUnit (SymbolTable 1 {test: (Program (SymbolTable 2 {a: (Variable 2 a Local () Default (Integer 4 []) Source Public), b: (Variable 2 b Local () Default (Integer 8 []) Source Public)}) test [(= (Var 2 a) (ConstantInteger 4 (Integer 4 []))) (= (Var 2 b) (ImplicitCast (ConstantInteger 4 (Integer 4 [])) IntegerToInteger (Integer 8 [])))])}) [])\n```\nThe first integer `a` is kind 4, the integer `b` is kind 8. But in LLVM they are both represented as `i64`:\n```llvm\n; ModuleID = 'LFortran'\nsource_filename = \"LFortran\"\n\ndefine i64 [@ main](https://gitlab.com/main)() {\n.entry:\n  %a = alloca i64, align 8\n  %b = alloca i64, align 8\n  store i64 4, i64* %a, align 4\n  store i64 4, i64* %b, align 4\n  ret i64 0\n}\n```\nRather, the integer `a` should be represented using `i32`.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/314/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/314/timeline","performed_via_github_app":null,"state_reason":null}