{"url":"https://api.github.com/repos/lfortran/lfortran/issues/698","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/698/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/698/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/698/events","html_url":"https://github.com/lfortran/lfortran/issues/698","id":1360855457,"node_id":"I_kwDOCpMuHc5RHQGh","number":698,"title":"Short-circuit expression diagnostic message","user":{"login":"gnikit","id":16143716,"node_id":"MDQ6VXNlcjE2MTQzNzE2","avatar_url":"https://avatars.githubusercontent.com/u/16143716?v=4","gravatar_id":"","url":"https://api.github.com/users/gnikit","html_url":"https://github.com/gnikit","followers_url":"https://api.github.com/users/gnikit/followers","following_url":"https://api.github.com/users/gnikit/following{/other_user}","gists_url":"https://api.github.com/users/gnikit/gists{/gist_id}","starred_url":"https://api.github.com/users/gnikit/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gnikit/subscriptions","organizations_url":"https://api.github.com/users/gnikit/orgs","repos_url":"https://api.github.com/users/gnikit/repos","events_url":"https://api.github.com/users/gnikit/events{/privacy}","received_events_url":"https://api.github.com/users/gnikit/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-09-03T13:16:27Z","updated_at":"2022-09-03T13:16:27Z","closed_at":null,"author_association":"MEMBER","active_lock_reason":null,"body":"Fortran does not allow for short-circuit expressions in contrast to many other programming languages. This can often lead to bugs that are hard to detect. It would be great if lfortran could have a diagnostic check to try and detect that and raise a warning.\r\n\r\n## MWE\r\nThis examples should both break, they do not because I think short-circuiting is implemented in LFortran, but that is not considered standard and some indication should be displayed to the user.\r\n\r\nTo keep this simple let's ignore `lbound` and `ubound` cases for now and just focus on `size`.\r\n\r\n### Statically defined array\r\n\r\n```fortran\r\nprogram main\r\nimplicit none\r\ninteger :: array(1)\r\nif (size(array) > 0 .and. array(1) == 1) then\r\n  print*, \"success\"\r\nend if\r\nend program main\r\n```\r\n\r\n### Dynamically defined array\r\n\r\n```fortran\r\nprogram main\r\nimplicit none\r\ninteger, allocatable :: array(:)\r\nallocate(array(2))\r\narray = 1\r\nif (size(array) > 8 .and. array(9) == 1) then\r\n  print*, \"success\"\r\nend if\r\nend program main\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/698/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/698/timeline","performed_via_github_app":null,"state_reason":null}