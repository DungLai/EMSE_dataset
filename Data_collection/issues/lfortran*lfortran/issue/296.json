{"url":"https://api.github.com/repos/lfortran/lfortran/issues/296","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/296/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/296/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/296/events","html_url":"https://github.com/lfortran/lfortran/issues/296","id":1338693225,"node_id":"I_kwDOCpMuHc5PytZp","number":296,"title":"Issues with number of arguments in size","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T08:27:39Z","updated_at":"2022-08-15T08:27:39Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/270\n\nCode\n```fortran\nsubroutine triad(a, b, scalar, c)\nreal, intent(in) :: a(:), b(:), scalar\nreal, intent(out) :: c(:)\ninteger :: N, i\nN = size(a)\ndo concurrent (i = 1:N)\n    c(i) = a(i) + scalar * b(i)\nend do\nend subroutine\n```\n\nOutput\n```bash\nlfortran: /home/czgdp1807ssd/lfortran_project/deps/llvm-project-llvmorg-11.0.1/llvm/lib/IR/Instructions.cpp:450: void llvm::CallInst::init(llvm::FunctionType*, llvm::Value*, llvm::ArrayRef<llvm::Value*>, llvm::ArrayRef<llvm::OperandBundleDefT<llvm::Value*> >, const llvm::Twine&): Assertion `(Args.size() == FTy->getNumParams() || (FTy->isVarArg() && Args.size() > FTy->getNumParams())) && \"Calling a function with bad signature!\"' failed.\nTraceback (most recent call last):\n  Binary file \"/home/czgdp1807ssd/lfortran_project/lfortran/src/bin/lfortran\", in _start()\n  File \"/build/glibc-S9d2JN/glibc-2.27/csu/../csu/libc-start.c\", line 310, in __libc_start_main()\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/bin/lfortran.cpp\", line 1184, in main()\n    err = compile_to_object_file(arg_file, tmp_o, false,\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/bin/lfortran.cpp\", line 577, in compile_to_object_file()\n    m = LFortran::asr_to_llvm(*asr, e.get_context(), al);\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/codegen/asr_to_llvm.cpp\", line 1293, in LFortran::asr_to_llvm(LFortran::ASR::TranslationUnit_t&, llvm::LLVMContext&, Allocator&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)\n    v.visit_asr((ASR::asr_t&)asr);\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/asr.h\", line 1316, in LFortran::ASR::BaseVisitor<LFortran::ASRToLLVMVisitor>::visit_asr(LFortran::ASR::asr_t const&)\n    void visit_asr(const asr_t &b) { visit_asr_t(b, self()); }\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/asr.h\", line 1295, in visit_asr_t<LFortran::ASRToLLVMVisitor>()\n    case asrType::unit: { v.visit_unit((const unit_t &)x); return; }\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/asr.h\", line 1317, in LFortran::ASR::BaseVisitor<LFortran::ASRToLLVMVisitor>::visit_unit(LFortran::ASR::unit_t const&)\n    void visit_unit(const unit_t &b) { visit_unit_t(b, self()); }\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/asr.h\", line 1200, in visit_unit_t<LFortran::ASRToLLVMVisitor>()\n    case unitType::TranslationUnit: { v.visit_TranslationUnit((const TranslationUnit_t &)x); return; }\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/codegen/asr_to_llvm.cpp\", line 260, in LFortran::ASRToLLVMVisitor::visit_TranslationUnit(LFortran::ASR::TranslationUnit_t const&)\n    visit_symbol(*item.second);\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/asr.h\", line 1319, in LFortran::ASR::BaseVisitor<LFortran::ASRToLLVMVisitor>::visit_symbol(LFortran::ASR::symbol_t const&)\n    void visit_symbol(const symbol_t &b) { visit_symbol_t(b, self()); }\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/asr.h\", line 1210, in visit_symbol_t<LFortran::ASRToLLVMVisitor>()\n    case symbolType::Subroutine: { v.visit_Subroutine((const Subroutine_t &)x); return; }\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/codegen/asr_to_llvm.cpp\", line 595, in LFortran::ASRToLLVMVisitor::visit_Subroutine(LFortran::ASR::Subroutine_t const&)\n    this->visit_stmt(*x.m_body[i]);\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/asr.h\", line 1327, in LFortran::ASR::BaseVisitor<LFortran::ASRToLLVMVisitor>::visit_stmt(LFortran::ASR::stmt_t const&)\n    void visit_stmt(const stmt_t &b) { visit_stmt_t(b, self()); }\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/asr.h\", line 1222, in visit_stmt_t<LFortran::ASRToLLVMVisitor>()\n    case stmtType::Assignment: { v.visit_Assignment((const Assignment_t &)x); return; }\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/codegen/asr_to_llvm.cpp\", line 608, in LFortran::ASRToLLVMVisitor::visit_Assignment(LFortran::ASR::Assignment_t const&)\n    this->visit_expr(*x.m_value);\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/asr.h\", line 1342, in LFortran::ASR::BaseVisitor<LFortran::ASRToLLVMVisitor>::visit_expr(LFortran::ASR::expr_t const&)\n    void visit_expr(const expr_t &b) { visit_expr_t(b, self()); }\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/asr.h\", line 1247, in visit_expr_t<LFortran::ASRToLLVMVisitor>()\n    case exprType::FuncCall: { v.visit_FuncCall((const FuncCall_t &)x); return; }\n  File \"/home/czgdp1807ssd/lfortran_project/lfortran/src/lfortran/codegen/asr_to_llvm.cpp\", line 1276, in LFortran::ASRToLLVMVisitor::visit_FuncCall(LFortran::ASR::FuncCall_t const&)\n    tmp = builder->CreateCall(fn, args);\n  File \"/home/czgdp1807ssd/lfortran_project/deps/llvm-project-llvmorg-11.0.1/llvm/include/llvm/IR/IRBuilder.h\", line 2357, in llvm::IRBuilderBase::CreateCall(llvm::FunctionCallee, llvm::ArrayRef<llvm::Value*>, llvm::Twine const&, llvm::MDNode*)\n    FPMathTag);\n  File \"/home/czgdp1807ssd/lfortran_project/deps/llvm-project-llvmorg-11.0.1/llvm/include/llvm/IR/IRBuilder.h\", line 2335, in llvm::IRBuilderBase::CreateCall(llvm::FunctionType*, llvm::Value*, llvm::ArrayRef<llvm::Value*>, llvm::Twine const&, llvm::MDNode*)\n    CallInst *CI = CallInst::Create(FTy, Callee, Args, DefaultOperandBundles);\n  File \"/home/czgdp1807ssd/lfortran_project/deps/llvm-project-llvmorg-11.0.1/llvm/include/llvm/IR/Instructions.h\", line 1489, in llvm::CallInst::Create(llvm::FunctionType*, llvm::Value*, llvm::ArrayRef<llvm::Value*>, llvm::ArrayRef<llvm::OperandBundleDefT<llvm::Value*> >, llvm::Twine const&, llvm::Instruction*)\n    CallInst(Ty, Func, Args, Bundles, NameStr, InsertBefore);\n  File \"/home/czgdp1807ssd/lfortran_project/deps/llvm-project-llvmorg-11.0.1/llvm/include/llvm/IR/Instructions.h\", line 1681, in llvm::CallInst::CallInst(llvm::FunctionType*, llvm::Value*, llvm::ArrayRef<llvm::Value*>, llvm::ArrayRef<llvm::OperandBundleDefT<llvm::Value*> >, llvm::Twine const&, llvm::Instruction*)\n    init(Ty, Func, Args, Bundles, NameStr);\n  File \"/home/czgdp1807ssd/lfortran_project/deps/llvm-project-llvmorg-11.0.1/llvm/lib/IR/Instructions.cpp\", line 448, in llvm::CallInst::init(llvm::FunctionType*, llvm::Value*, llvm::ArrayRef<llvm::Value*>, llvm::ArrayRef<llvm::OperandBundleDefT<llvm::Value*> >, llvm::Twine const&)\n    assert((Args.size() == FTy->getNumParams() ||\n  File \"/build/glibc-S9d2JN/glibc-2.27/assert/assert.c\", line 101, in __GI___assert_fail()\n  File \"/build/glibc-S9d2JN/glibc-2.27/assert/assert.c\", line 92, in __assert_fail_base()\n  File \"/build/glibc-S9d2JN/glibc-2.27/stdlib/abort.c\", line 79, in __GI_abort()\n  File \"/build/glibc-S9d2JN/glibc-2.27/signal/../sysdeps/unix/sysv/linux/nptl-signals.h\", line 80, in __libc_signal_restore_set()\n  Binary file \"/lib/x86_64-linux-gnu/libc.so.6\", in killpg()\nAbort: Signal SIGABRT (abort) received\n\nAborted (core dumped)\n```\n\nAST\n```bash\n(TranslationUnit [(Subroutine triad [(a) (b) (scalar) (c)] [] [(Declaration [(a \"real\" [] [(() ())] [(Attribute intent [(in)] [])] ()) (b \"real\" [] [(() ())] [(Attribute intent [(in)] [])] ()) (scalar \"real\" [] [] [(Attribute intent [(in)] [])] ())]) (Declaration [(c \"real\" [] [(() ())] [(Attribute intent [(out)] [])] ())]) (Declaration [(N \"integer\" [] [] [] ()) (i \"integer\" [] [] [] ())])] [(= N (FuncCallOrArray size [(() a ())] [])) (DoConcurrentLoop [(ConcurrentControl i 1 N ())] () [] [(= (FuncCallOrArray c [(() i ())] []) (+ (FuncCallOrArray a [(() i ())] []) (* scalar (FuncCallOrArray b [(() i ())] []))))])] [])])\n```\n\nASR\n```bash\n(TranslationUnit (SymbolTable 1 {size: (Function (SymbolTable 3 {size: (Variable 3 size ReturnVar (Integer 4 []))}) size [] [] () (Var 3 size) ()), triad: (Subroutine (SymbolTable 2 {N: (Variable 2 N Local (Integer 4 [])), a: (Variable 2 a In (Real 4 [(() ())])), b: (Variable 2 b In (Real 4 [(() ())])), c: (Variable 2 c Out (Real 4 [(() ())])), i: (Variable 2 i Local (Integer 4 [])), scalar: (Variable 2 scalar In (Real 4 []))}) triad [(Var 2 a) (Var 2 b) (Var 2 scalar) (Var 2 c)] [(= (Var 2 N) (FuncCall 1 size [(Var 2 a)] [] (Integer 4 []))) (DoConcurrentLoop ((Var 2 i) (ConstantInteger 1 (Integer 4 [])) (Var 2 N) ()) [(= (ArrayRef (Variable 2 c Out (Real 4 [(() ())])) [(() (Var 2 i) ())] (Real 4 [(() ())])) (BinOp (ArrayRef (Variable 2 a In (Real 4 [(() ())])) [(() (Var 2 i) ())] (Real 4 [(() ())])) Add (BinOp (Var 2 scalar) Mul (ArrayRef (Variable 2 b In (Real 4 [(() ())])) [(() (Var 2 i) ())] (Real 4 [(() ())])) (Real 4 [])) (Real 4 [(() ())])))])] () ())}) [])\n```\n\nIt seems like the number of arguments are set to 0 [here](https://gitlab.com/lfortran/lfortran/-/blob/master/src/lfortran/semantics/ast_to_asr.cpp#L1154) by default and the arguments are not processed. I will try to fix this in https://gitlab.com/lfortran/lfortran/-/merge_requests/698 after the existence of this bug is verified. ping [@ certik](https://gitlab.com/certik)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/296/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/296/timeline","performed_via_github_app":null,"state_reason":null}