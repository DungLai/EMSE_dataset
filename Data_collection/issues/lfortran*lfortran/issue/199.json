{"url":"https://api.github.com/repos/lfortran/lfortran/issues/199","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/199/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/199/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/199/events","html_url":"https://github.com/lfortran/lfortran/issues/199","id":1338683914,"node_id":"I_kwDOCpMuHc5PyrIK","number":199,"title":"Idea: Support dot (`.`) as an alternative to the `%` operator","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T08:18:17Z","updated_at":"2022-08-15T08:18:17Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/84\n\nThis is an idea to consider:\n\nThe `.` is a lot more readable, consider `os.path.join()` vs. `os%path%join()`. The reason it's more readable is because the `.` has more vertical space, and thus the words are visually more divided, while the `%` character is filling up all the space, and thus visually it is much harder to immediately see where one word ends and another begins.\n\nBesides `.` being more readable, it is also way more common, e.g. in Python, C++, Julia and many other languages.\n\nAnd Intel Fortran actually seems to support it in some cases. \n\nIt makes the parsing ambiguous, since `a.not.b` can be an operator `.not.`, or derived type access. In addition, Fortran allows to have user defined operators, so any word of the type `.something.` can be an operator. However, there might be a way to parse things properly and to disambiguate this.\n\nFor example one way to do that would be that `a.not.b` would mean `.not.` as an operator. One should not use derived types with names like `not`. Regarding user defined operators, I would say user defined operators will take precedence, and so if one imports a user defined operator, say `.path.`, then `os.path.join()` will mean `.path.` as an operator. One would need to use `%` in such a case then. This will be very rare, so shouldn't be a problem.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/199/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/199/timeline","performed_via_github_app":null,"state_reason":null}