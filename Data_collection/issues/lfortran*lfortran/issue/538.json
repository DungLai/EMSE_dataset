{"url":"https://api.github.com/repos/lfortran/lfortran/issues/538","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/538/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/538/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/538/events","html_url":"https://github.com/lfortran/lfortran/issues/538","id":1338783587,"node_id":"I_kwDOCpMuHc5PzDdj","number":538,"title":"Optimize the if statement style such as in the floor function","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T10:01:04Z","updated_at":"2022-08-15T10:01:04Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/697\n\nThis is a very common pattern:\n```fortran\nelemental integer(i32) function dfloor_i32(x) result(r)\nreal(dp), intent(in) :: x\nif (x >= 0) then\n    r = x\nelse\n    r = x-1\nend if\nend function\n```\nThe if statement can be replaced with:\n```fortran\nr = x - (1-sign(x))/2\n```\nWhere the expression `(1-sign(x))/2` is equal to `0` for `x>0` and to `1` for `x<0` (the `x=0` case must also be handled, I am skipping it here). This can be obtained from the sign bit, so I think `(1-sign(x))/2 = (x >> 63)`, so the above if statement can be replaced by just:\n```fortran\nr = x - (x >> 63)\n```\nThe `x` in `x >> 63` might be needed to cast to integer first, and then back to float to subtract.\n\nThis is a general approach, that should work for cases like:\n```\nif (x >= 0) then\n    r = x\nelse\n    r = x-10\nend if\n```\nwhere `r` is a real number (`r = x - 10*(x >> 63)`).\n\nIn the case above, it is also cast to integer (`r` is an integer) and I think there might be LLVM or assembly instructions for that directly, so the optimizer should also recognize the above special case as a floor operation and just replace it with a `floor` intrinsic function, just like we do with `fma` or `flip_sign` (all these the user can't enter directly, they are inserted by the optimizer).","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/538/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/538/timeline","performed_via_github_app":null,"state_reason":null}