{"url":"https://api.github.com/repos/lfortran/lfortran/issues/372","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/372/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/372/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/372/events","html_url":"https://github.com/lfortran/lfortran/issues/372","id":1338731529,"node_id":"I_kwDOCpMuHc5Py2wJ","number":372,"title":"[Potential Bug] Parsing ``allocate(character(len=25) :: var_name)``","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:08:26Z","updated_at":"2022-08-15T09:08:26Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/479\n\n**Code**\n```fortran\nprogram character1\nimplicit none\n\n   character(len = :), allocatable :: greetings\n\n   allocate(character(len = 25) :: greetings)\n   greetings = 'A big hello from Mr. Bean'\n   print *, greetings\n\nend program character1\n```\n\n**AST**\n```bash\n(TranslationUnit \n   [\n   (Program \n      character1 [] [\n      (ImplicitNone [])] [\n      (Declaration \n         (AttrType \n            TypeCharacter [\n            (len () \n               Colon)] () \n            None) [\n         (SimpleAttribute \n            AttrAllocatable)] [\n         (greetings [] [] () \n            None ())])] [\n      (Allocate 0 [\n         (\n            (FuncCallOrArray \n               character [] [] [\n               (\n                  len 25)] []) () greetings)] []) \n      (= 0 greetings \n         (String \"A big hello from Mr. Bean\")) \n      (Print 0 () [greetings])] [])])\n```\nArgument of `allocate(character(len = 25) :: greetings)` is parsed as `FuncCallOrArray`. IMHO, this may not be the right way to represent things at AST level. If possible, `character(len = 25) :: greetings` should be somehow converted into `greetings(25)` (so that arguments of `allocate` are represented uniformly for all types at AST level).\n\ncc [@ certik](https://gitlab.com/certik) [@ Thirumalai-Shaktivel](https://gitlab.com/Thirumalai-Shaktivel)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/372/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/372/timeline","performed_via_github_app":null,"state_reason":null}