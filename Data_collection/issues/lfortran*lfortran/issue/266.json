{"url":"https://api.github.com/repos/lfortran/lfortran/issues/266","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/266/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/266/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/266/events","html_url":"https://github.com/lfortran/lfortran/issues/266","id":1338690969,"node_id":"I_kwDOCpMuHc5Pys2Z","number":266,"title":"Cross platform stacktrace functionality","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T08:25:20Z","updated_at":"2022-08-15T08:25:20Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/199\n\nThis is needed both for the compiler as well as the compiled Fortran programs (for `error stop`). Available options so far:\n\nLinux:\n\n* https://gitlab.com/lfortran/lfortran/-/blob/e3795ea1df8a13c2e3d91eef2995ae1eceaf43e4/src/lfortran/stacktrace.cpp works well, but requires `glibc` for the `backtrace` function. To make it compile with `musl`, one must use the `unwind` option, which seems to work to obtain the addresses. But the conversion from the address to filename, line number and function name seems to fail in `musl` (https://gitlab.com/lfortran/lfortran/-/merge_requests/521#note_401375987), and it requires the BFD library which seems to have issues in alpine linux. It works excellent in Ubuntu + glibc.\n\nLinux / macOS:\n\n* https://github.com/ianlancetaylor/libbacktrace, conda package: https://github.com/conda-forge/backtrace-feedstock. It seems to work on Linux and macOS and in both glibc and musl, but we have to actually try it.\n\n* Rust seems to have packages to do that: https://github.com/rust-lang/rust/commit/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b and https://github.com/rust-lang/rust/pull/73441 and https://github.com/gimli-rs/addr2line.\n\nWindows:\n\n* https://github.com/JochenKalmbach/StackWalker\n\n* https://docs.microsoft.com/en-us/windows/win32/api/dbghelp/nf-dbghelp-stackwalk64","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/266/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/266/timeline","performed_via_github_app":null,"state_reason":null}