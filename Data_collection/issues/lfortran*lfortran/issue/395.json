{"url":"https://api.github.com/repos/lfortran/lfortran/issues/395","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/395/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/395/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/395/events","html_url":"https://github.com/lfortran/lfortran/issues/395","id":1338733873,"node_id":"I_kwDOCpMuHc5Py3Ux","number":395,"title":"Indentation of comments is not preserved","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:10:41Z","updated_at":"2022-08-15T09:10:41Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/519\n\nUsing LFortran 0.12.0 from conda-forge.\n\nWhen formatting a file with indented comments the indentation is unconditionally removed from the comments:\n\n```diff\n@@ -197,65 +201,80 @@ contains\n          stat = merge(0, info, is_iostat_end(info))\n       end if\n-   end subroutine get_response_file\n-\n-   !> Consume a whole line from a formatted unit\n-   subroutine getline(unit, line, iostat, iomsg)\n-      !> Formatted IO unit\n-      integer, intent(in) :: unit\n-      !> Line to read\n-      character(len=:), allocatable, intent(out) :: line\n-      !> Status of operation\n-      integer, intent(out) :: iostat\n-      !> Error message\n-      character(len=:), allocatable, optional :: iomsg\n+   end subroutine get_response_file \n+\n+!> Consume a whole line from a formatted unit\n+\n+   subroutine getline(unit, line, iostat, iomsg) \n+\n+!> Formatted IO unit\n+      integer, intent(in) :: unit \n+!> Line to read\n+      character(len=:), allocatable, intent(out) :: line \n+!> Status of operation\n+      integer, intent(out) :: iostat \n+!> Error message\n+      character(len=:), allocatable, optional :: iomsg \n \n       integer, parameter :: bufsize = 512\n       character(len=bufsize) :: buffer, msg\n       integer :: size, stat\n-      intrinsic :: is_iostat_eor, present, trim\n+      intrinsic :: is_iostat_eor, present, trim \n \n-      allocate(character(len=0) :: line)\n+      allocate(character(len=0)::line)\n       do\n-         read(unit, '(a)', advance='no', iostat=stat, iomsg=msg, size=size) &\n-            & buffer\n-         if (stat > 0) exit\n+         read(unit, \"(a)\", advance=\"no\", iostat=stat, iomsg=msg, size=size) buffer\n+         if (stat > 0) then\n+            exit\n+         end if\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/395/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/395/timeline","performed_via_github_app":null,"state_reason":null}