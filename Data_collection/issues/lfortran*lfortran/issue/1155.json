{"url":"https://api.github.com/repos/lfortran/lfortran/issues/1155","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/1155/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/1155/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/1155/events","html_url":"https://github.com/lfortran/lfortran/issues/1155","id":1517751134,"node_id":"I_kwDOCpMuHc5adwte","number":1155,"title":"Arbitrary precision integer implementation","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2023-01-03T18:12:00Z","updated_at":"2023-01-03T18:12:00Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Currently our big integer implementation in `src/libasr/bigint.h` is using a tagged pointer approach which is usually the fastest for smaller integers. For bigger integers we currently store them as string of decimal digits in memory. Instead we want to use some very fast arbitrary precision implementation. Here are the requirements:\r\n\r\n* It should be implemented in C so that we can call it from our runtime library (for the arbitrary precision integer type in LPython and possibly in LFortran as an extension)\r\n* We should not close doors to use any fast integer library out there, such as `gmp`\r\n* By default we should have our own implementation that is fast (faster than CPython)\r\n* We have to see how much work it is to make it as fast as other libraries, at least for an intermediate size integers range. If it is doable, then we should do it, otherwise we'll recommend linking libasr with some external library","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/1155/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/1155/timeline","performed_via_github_app":null,"state_reason":null}