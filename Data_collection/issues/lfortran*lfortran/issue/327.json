{"url":"https://api.github.com/repos/lfortran/lfortran/issues/327","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/327/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/327/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/327/events","html_url":"https://github.com/lfortran/lfortran/issues/327","id":1338725113,"node_id":"I_kwDOCpMuHc5Py1L5","number":327,"title":"`lfortran fmt` should use line continuation for long lines","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:04:02Z","updated_at":"2022-08-15T09:04:02Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/340\n\nA user defined maximum line length (say 80) should be respected by correctly inserting line continuation `&` character. A quick way to achieve that is by:\n```diff\ndiff --git a/src/lfortran/ast_to_src.cpp b/src/lfortran/ast_to_src.cpp\nindex 27452f23..3a4805e4 100644\n--- a/src/lfortran/ast_to_src.cpp\n+++ b/src/lfortran/ast_to_src.cpp\n@@ -877,10 +877,20 @@ public:\n             }\n             if (x.n_syms > 0) {\n                 r.append(\" :: \");\n+                int column = r.size();\n                 for (size_t i=0; i<x.n_syms; i++) {\n                     visit_var_sym(x.m_syms[i]);\n+                    if (column + s.size() > 75) {\n+                        r += \" &\\n\";\n+                        r += indent + \"    \";\n+                        column = indent.size() + 4;\n+                    }\n                     r += s;\n-                    if (i < x.n_syms-1) r.append(\", \");\n+                    column += s.size();\n+                    if (i < x.n_syms-1) {\n+                        r.append(\", \");\n+                        column += 2;\n+                    }\n                 }\n             }\n         }\n```\n\nBut it seems quite messy and error prone. A cleaner (perhaps a bit slower) approach would be for the visit methods to not return a string in `s` but rather a list of tokens (a list of strings), a token can be a new line and an indentation also. Then could have a class that handles converting this list of tokens into a string, which would keep track of indentation and the current column and insert continuation character `&` appropriately.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/327/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/327/timeline","performed_via_github_app":null,"state_reason":null}