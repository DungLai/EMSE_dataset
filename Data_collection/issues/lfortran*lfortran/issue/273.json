{"url":"https://api.github.com/repos/lfortran/lfortran/issues/273","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/273/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/273/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/273/events","html_url":"https://github.com/lfortran/lfortran/issues/273","id":1338691510,"node_id":"I_kwDOCpMuHc5Pys-2","number":273,"title":"Design plotting from Fortran","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T08:25:52Z","updated_at":"2022-08-15T08:25:52Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/209\n\nThe [original](https://nbviewer.jupyter.org/gist/certik/f1d28a486510810d824869ab0c491b1c#Plotting) notebook from the Python prototype of LFortran has simple plotting as a proof of concept that it can be done. Now it is time to design it properly.\n\nThe best approach seems to be the one taken by [xeus-cling](https://github.com/jupyter-xeus/xeus-cling) and it is described [here](https://xeus-cling.readthedocs.io/en/latest/rich_display.html#providing-custom-mime-representations-for-user-defined-types).\n\nUsing the same approach for Fortran would be:\n\n* User will create a custom derived type `type(image)` (where `image` is just an example)\n* Function can return it, or a variable of type `type(image)` is left to \"display\" it in the interpreter\n* The Fortran kernel looks into the module that defines `type(image)` and looks for a function `mime_bundle_repr`. If it exists, it will be called like this:\n`json = mime_bundle_repr(x)` where `x` is of type `type(image)`. The user implements the correct JSON representation for the custom type `type(image)` in the `mime_bundle_repr` function.\n* Jupyter shows the correct representation\n\nA sample `mime_bundle_repr` function in C++ is:\n```c++\n    nlohmann::json mime_bundle_repr(const image& i)\n    {\n        auto bundle = nlohmann::json::object();\n        bundle[\"image/png\"] = xtl::base64encode(i.m_buffer.str());\n        return bundle;\n    }\n```\n\n\nThe advantage of this approach is that there are no LFortran specific APIs here. This is all completely general and can be implemented by other Fortran compilers also.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/273/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/273/timeline","performed_via_github_app":null,"state_reason":null}