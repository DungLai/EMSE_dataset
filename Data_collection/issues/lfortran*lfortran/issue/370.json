{"url":"https://api.github.com/repos/lfortran/lfortran/issues/370","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/370/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/370/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/370/events","html_url":"https://github.com/lfortran/lfortran/issues/370","id":1338731295,"node_id":"I_kwDOCpMuHc5Py2sf","number":370,"title":"Implement 'Where'","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:08:15Z","updated_at":"2022-08-15T09:08:15Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/475\n\nFollow `1 10.2.3 Masked array assignment â€“ WHERE` on pg. 184.\n## Example\n\n```fortran\nprogram main\n  real :: x(10)\n  x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  where (x/=5)\n     x = 32.0\n  elsewhere\n     x = 0.0\n  end where\n  print *, x\nend program\n```\n### Stacktrace\n```bash\nTraceback (most recent call last):\n  Binary file \"/users/home/rog32/Git/Github/Fortran/mylf/inst/bin/lfortran\", in _start()\n  Binary file \"/lib64/libc.so.6\", in __libc_start_main()\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/bin/lfortran.cpp\", line 1219, in main()\n    return compile_to_object_file(arg_file, outfile, false,\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/bin/lfortran.cpp\", line 594, in compile_to_object_file()\n    result = fe.get_asr2(input);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/codegen/evaluator.cpp\", line 478, in LFortran::FortranEvaluator::get_asr2(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)\n    asr = ast_to_asr(al, *ast, symbol_table);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/semantics/ast_to_asr.cpp\", line 35, in LFortran::ast_to_asr(Allocator&, LFortran::AST::TranslationUnit_t&, LFortran::SymbolTable*)\n    b.visit_TranslationUnit(ast);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/semantics/asr_body_visitor.cpp\", line 28, in LFortran::BodyVisitor::visit_TranslationUnit(LFortran::AST::TranslationUnit_t const&)\n    visit_ast(*x.m_items[i]);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 4006, in LFortran::AST::BaseVisitor<LFortran::BodyVisitor>::visit_ast(LFortran::AST::ast_t const&)\n    void visit_ast(const ast_t &b) { visit_ast_t(b, self()); }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3968, in void LFortran::AST::visit_ast_t<LFortran::BodyVisitor>(LFortran::AST::ast_t const&, LFortran::BodyVisitor&)\n    case astType::mod: { v.visit_mod((const mod_t &)x); return; }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 4009, in LFortran::AST::BaseVisitor<LFortran::BodyVisitor>::visit_mod(LFortran::AST::mod_t const&)\n    void visit_mod(const mod_t &b) { visit_mod_t(b, self()); }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3660, in void LFortran::AST::visit_mod_t<LFortran::BodyVisitor>(LFortran::AST::mod_t const&, LFortran::BodyVisitor&)\n    case modType::Program: { v.visit_Program((const Program_t &)x); return; }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/semantics/asr_body_visitor.cpp\", line 575, in LFortran::BodyVisitor::visit_Program(LFortran::AST::Program_t const&)\n    this->visit_stmt(*x.m_body[i]);\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 4047, in LFortran::AST::BaseVisitor<LFortran::BodyVisitor>::visit_stmt(LFortran::AST::stmt_t const&)\n    void visit_stmt(const stmt_t &b) { visit_stmt_t(b, self()); }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 3795, in void LFortran::AST::visit_stmt_t<LFortran::BodyVisitor>(LFortran::AST::stmt_t const&, LFortran::BodyVisitor&)\n    case stmtType::Where: { v.visit_Where((const Where_t &)x); return; }\n  File \"/users/home/rog32/Git/Github/Fortran/mylf/src/lfortran/ast.h\", line 4088, in LFortran::AST::BaseVisitor<LFortran::BodyVisitor>::visit_Where(LFortran::AST::Where_t const&)\n    void visit_Where(const Where_t & /* x */) { throw LFortran::LFortranException(\"visit_Where() not implemented\"); }\nLFortranException: visit_Where() not implemented\n```\n## Standard\nNote that the relevant standard can be found here: [18-007r1.pdf](/uploads/973db2bfcc64cd2a397f823c32718b39/18-007r1.pdf)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/370/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/370/timeline","performed_via_github_app":null,"state_reason":null}