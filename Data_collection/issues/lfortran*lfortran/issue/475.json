{"url":"https://api.github.com/repos/lfortran/lfortran/issues/475","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/475/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/475/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/475/events","html_url":"https://github.com/lfortran/lfortran/issues/475","id":1338778472,"node_id":"I_kwDOCpMuHc5PzCNo","number":475,"title":"abs not working for arrays","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:55:06Z","updated_at":"2022-08-15T09:55:06Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/622\n\n`(base) /mnt/c/fortran/public_domain$ lfortran --version`\n```\nLFortran version: 0.14.0-678-g95c94e7e\nPlatform: Linux\nDefault target: x86_64-unknown-linux-gnu\n```\n`(base) /mnt/c/fortran/public_domain$ cat abs1.f90`\n```\nprogram main\nimplicit none\nreal :: a(1)\na = -1.4\na = abs(a)\nprint*,a(1)\nend program main\n```\n`(base) /mnt/c/fortran/public_domain$ lfortran -c abs1.f90`\n```\n; ModuleID = 'LFortran'\nsource_filename = \"LFortran\"\n\n%dimension_descriptor = type { i32, i32, i32, i32 }\n%c_ptr = type { i32 }\n%array.0 = type { [1 x float], i32, [1 x %dimension_descriptor], i1 }\n\n[@ 0](https://gitlab.com/0) = private unnamed_addr constant [1 x i8] zeroinitializer, align 1\n[@ 1](https://gitlab.com/1) = private unnamed_addr constant [4 x i8] c\"%f\\0A\\00\", align 1\n\ndeclare i8* [@ __module_lfortran_intrinsic_builtin_char](https://gitlab.com/__module_lfortran_intrinsic_builtin_char)(i32*)\n\ndefine i32 [@ __module_lfortran_intrinsic_builtin_lbound](https://gitlab.com/__module_lfortran_intrinsic_builtin_lbound)(%dimension_descriptor** %x, i32* %dim) {\n.entry:\n  %lbound = alloca i32, align 4\n  %0 = load %dimension_descriptor*, %dimension_descriptor** %x, align 8\n  %1 = load i32, i32* %dim, align 4\n  %2 = sub i32 %1, 1\n  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %0, i32 %2\n  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 1\n  %5 = load i32, i32* %4, align 4\n  store i32 %5, i32* %lbound, align 4\n  br label %return\n\nreturn:                                           ; preds = %.entry\n  %6 = load i32, i32* %lbound, align 4\n  ret i32 %6\n}\n\ndefine i32 [@ __module_lfortran_intrinsic_builtin_ubound](https://gitlab.com/__module_lfortran_intrinsic_builtin_ubound)(%dimension_descriptor** %x, i32* %dim) {\n.entry:\n  %ubound = alloca i32, align 4\n  %0 = load %dimension_descriptor*, %dimension_descriptor** %x, align 8\n  %1 = load i32, i32* %dim, align 4\n  %2 = sub i32 %1, 1\n  %3 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %0, i32 %2\n  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %3, i32 0, i32 2\n  %5 = load i32, i32* %4, align 4\n  store i32 %5, i32* %ubound, align 4\n  br label %return\n\nreturn:                                           ; preds = %.entry\n  %6 = load i32, i32* %ubound, align 4\n  ret i32 %6\n}\n\ndeclare void [@ __module_lfortran_intrinsic_iso_c_binding_c_f_pointer](https://gitlab.com/__module_lfortran_intrinsic_iso_c_binding_c_f_pointer)(%c_ptr*, i32*)\n\ndefine void [@ __module_lfortran_intrinsic_math_cpu_time](https://gitlab.com/__module_lfortran_intrinsic_math_cpu_time)(double* %t) {\n.entry:\n  call void [@ _lfortran_cpu_time](https://gitlab.com/_lfortran_cpu_time)(double* %t)\n  br label %return\n\nreturn:                                           ; preds = %.entry\n  ret void\n}\n\ndeclare void [@ _lfortran_cpu_time](https://gitlab.com/_lfortran_cpu_time)(double*)\n\ndefine float [@ __module_lfortran_intrinsic_math_sabs](https://gitlab.com/__module_lfortran_intrinsic_math_sabs)(float* %x) {\n.entry:\n  %r = alloca float, align 4\n  %0 = load float, float* %x, align 4\n  %1 = fcmp uge float %0, 0.000000e+00\n  br i1 %1, label %then, label %else\n\nthen:                                             ; preds = %.entry\n  %2 = load float, float* %x, align 4\n  store float %2, float* %r, align 4\n  br label %ifcont\n\nelse:                                             ; preds = %.entry\n  %3 = load float, float* %x, align 4\n  %4 = fsub float 0.000000e+00, %3\n  store float %4, float* %r, align 4\n  br label %ifcont\n\nifcont:                                           ; preds = %else, %then\n  br label %return\n\nreturn:                                           ; preds = %ifcont\n  %5 = load float, float* %r, align 4\n  ret float %5\n}\n\ndefine i32 [@ main](https://gitlab.com/main)() {\n.entry:\n  %\"1_k\" = alloca i32, align 4\n  %a = alloca %array.0, align 8\n  %0 = getelementptr %array.0, %array.0* %a, i32 0, i32 1\n  store i32 0, i32* %0, align 4\n  %1 = getelementptr %array.0, %array.0* %a, i32 0, i32 2\n  %2 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %1, i32 0, i32 0\n  %3 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 0\n  %4 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 1\n  %5 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 2\n  %6 = getelementptr %dimension_descriptor, %dimension_descriptor* %2, i32 0, i32 3\n  store i32 1, i32* %3, align 4\n  store i32 1, i32* %4, align 4\n  store i32 1, i32* %5, align 4\n  %7 = load i32, i32* %5, align 4\n  %8 = load i32, i32* %4, align 4\n  %9 = sub i32 %7, %8\n  %10 = add i32 %9, 1\n  store i32 %10, i32* %6, align 4\n  %11 = alloca %dimension_descriptor*, align 8\n  %12 = getelementptr %array.0, %array.0* %a, i32 0, i32 2\n  %13 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %12, i32 0, i32 0\n  store %dimension_descriptor* %13, %dimension_descriptor** %11, align 8\n  %14 = alloca i32, align 4\n  store i32 1, i32* %14, align 4\n  %15 = call i32 [@ __module_lfortran_intrinsic_builtin_lbound](https://gitlab.com/__module_lfortran_intrinsic_builtin_lbound)(%dimension_descriptor** %11, i32* %14)\n  %16 = sub i32 %15, 1\n  store i32 %16, i32* %\"1_k\", align 4\n  br label %loop.head\n\nloop.head:                                        ; preds = %loop.body, %.entry\n  %17 = load i32, i32* %\"1_k\", align 4\n  %18 = add i32 %17, 1\n  %19 = alloca %dimension_descriptor*, align 8\n  %20 = getelementptr %array.0, %array.0* %a, i32 0, i32 2\n  %21 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %20, i32 0, i32 0\n  store %dimension_descriptor* %21, %dimension_descriptor** %19, align 8\n  %22 = alloca i32, align 4\n  store i32 1, i32* %22, align 4\n  %23 = call i32 [@ __module_lfortran_intrinsic_builtin_ubound](https://gitlab.com/__module_lfortran_intrinsic_builtin_ubound)(%dimension_descriptor** %19, i32* %22)\n  %24 = icmp sle i32 %18, %23\n  br i1 %24, label %loop.body, label %loop.end\n\nloop.body:                                        ; preds = %loop.head\n  %25 = load i32, i32* %\"1_k\", align 4\n  %26 = add i32 %25, 1\n  store i32 %26, i32* %\"1_k\", align 4\n  %27 = load i32, i32* %\"1_k\", align 4\n  %28 = getelementptr %array.0, %array.0* %a, i32 0, i32 2\n  %29 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %28, i32 0, i32 0\n  %30 = getelementptr %dimension_descriptor, %dimension_descriptor* %29, i32 0, i32 1\n  %31 = load i32, i32* %30, align 4\n  %32 = sub i32 %27, %31\n  %33 = mul i32 1, %32\n  %34 = add i32 0, %33\n  %35 = getelementptr %dimension_descriptor, %dimension_descriptor* %29, i32 0, i32 3\n  %36 = load i32, i32* %35, align 4\n  %37 = mul i32 1, %36\n  %38 = getelementptr %array.0, %array.0* %a, i32 0, i32 0\n  %39 = getelementptr [1 x float], [1 x float]* %38, i32 0, i32 %34\n  store float 0xBFF6666660000000, float* %39, align 4\n  br label %loop.head\n\nloop.end:                                         ; preds = %loop.head\n  %40 = call float [@ __module_lfortran_intrinsic_math_sabs](https://gitlab.com/__module_lfortran_intrinsic_math_sabs)(%array.0* %a)\n  store float %40, %array.0* %a, align 4\n  %41 = getelementptr %array.0, %array.0* %a, i32 0, i32 2\n  %42 = getelementptr [1 x %dimension_descriptor], [1 x %dimension_descriptor]* %41, i32 0, i32 0\n  %43 = getelementptr %dimension_descriptor, %dimension_descriptor* %42, i32 0, i32 1\n  %44 = load i32, i32* %43, align 4\n  %45 = sub i32 1, %44\n  %46 = mul i32 1, %45\n  %47 = add i32 0, %46\n  %48 = getelementptr %dimension_descriptor, %dimension_descriptor* %42, i32 0, i32 3\n  %49 = load i32, i32* %48, align 4\n  %50 = mul i32 1, %49\n  %51 = getelementptr %array.0, %array.0* %a, i32 0, i32 0\n  %52 = getelementptr [1 x float], [1 x float]* %51, i32 0, i32 %47\n  %53 = load float, float* %52, align 4\n  %54 = fpext float %53 to double\n  call void (i8*, ...) [@ _lfortran_printf](https://gitlab.com/_lfortran_printf)(i8* getelementptr inbounds ([4 x i8], [4 x i8]* [@ 1](https://gitlab.com/1), i32 0, i32 0), double %54)\n  ret i32 0\n}\n\ndeclare void [@ _lfortran_printf](https://gitlab.com/_lfortran_printf)(i8*, ...)\nCode generation error: asr_to_llvm: module failed verification. Error:\nCall parameter type does not match function signature!\n  %a = alloca %array.0, align 8\n float*  %40 = call float [@ __module_lfortran_intrinsic_math_sabs](https://gitlab.com/__module_lfortran_intrinsic_math_sabs)(%array.0* %a)\nStored value type does not match pointer operand type!\n  store float %40, %array.0* %a, align 4\n %array.0 = type { [1 x float], i32, [1 x %dimension_descriptor], i1 }\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/475/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/475/timeline","performed_via_github_app":null,"state_reason":null}