{"url":"https://api.github.com/repos/lfortran/lfortran/issues/971","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/971/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/971/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/971/events","html_url":"https://github.com/lfortran/lfortran/issues/971","id":1432197729,"node_id":"I_kwDOCpMuHc5VXZph","number":971,"title":"Bug in implicit callback","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[{"id":4432142216,"node_id":"LA_kwDOCpMuHc8AAAABCC0fiA","url":"https://api.github.com/repos/lfortran/lfortran/labels/SciPy","name":"SciPy","color":"d4c5f9","default":false,"description":"issues related to enable LFortran to compile the entire FORTRAN codebase in SciPy"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2022-11-01T22:43:58Z","updated_at":"2022-11-02T23:16:26Z","closed_at":"2022-11-02T23:16:26Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"The following minimal example:\r\n```fortran\r\nsubroutine hybrd(fcn, n)\r\ninteger, intent(in) :: n\r\nexternal fcn\r\nprint *, \"in hybrd, calling fcn\"\r\ncall fcn(n)\r\nprint *, \"done\"\r\nend\r\n\r\nprogram example_hybrd\r\ninterface\r\n    subroutine hybrd(fcn, n)\r\n        integer, intent(in) :: n\r\n        interface\r\n            subroutine fcn(n)\r\n                integer, intent(in) :: n\r\n            end subroutine fcn\r\n        end interface\r\n    end subroutine hybrd\r\nend interface\r\ninteger :: n\r\nn = 9\r\nprint *, \"Calling the driver with n =\", n\r\ncall hybrd(fcn, n)\r\nprint *, \"Done\"\r\n\r\ncontains\r\n\r\n    subroutine fcn(i)\r\n    integer, intent(in) :: i\r\n    print *, \"fnc called\", i\r\n    end subroutine\r\n\r\nend program example_hybrd\r\n```\r\nWorks with GFortran:\r\n```console\r\n$ gfortran example_hybrd.f90 \r\n$ ./a.out \r\n Calling the driver with n =           9\r\n in hybrd, calling fcn\r\n fnc called           9\r\n done\r\n Done\r\n```\r\nBut fails with LFortran:\r\n```console\r\n$ lfortran --implicit-typing --allow-implicit-interface example_hybrd.f90\r\n; ModuleID = 'LFortran'\r\nsource_filename = \"LFortran\"\r\n\r\n@0 = private unnamed_addr constant [2 x i8] c\" \\00\", align 1\r\n@1 = private unnamed_addr constant [2 x i8] c\"\\0A\\00\", align 1\r\n@2 = private unnamed_addr constant [22 x i8] c\"in hybrd, calling fcn\\00\", align 1\r\n@3 = private unnamed_addr constant [5 x i8] c\"%s%s\\00\", align 1\r\n@4 = private unnamed_addr constant [2 x i8] c\" \\00\", align 1\r\n@5 = private unnamed_addr constant [2 x i8] c\"\\0A\\00\", align 1\r\n@6 = private unnamed_addr constant [5 x i8] c\"done\\00\", align 1\r\n@7 = private unnamed_addr constant [5 x i8] c\"%s%s\\00\", align 1\r\n@8 = private unnamed_addr constant [2 x i8] c\" \\00\", align 1\r\n@9 = private unnamed_addr constant [2 x i8] c\"\\0A\\00\", align 1\r\n@10 = private unnamed_addr constant [11 x i8] c\"fnc called\\00\", align 1\r\n@11 = private unnamed_addr constant [9 x i8] c\"%s%s%d%s\\00\", align 1\r\n@12 = private unnamed_addr constant [2 x i8] c\" \\00\", align 1\r\n@13 = private unnamed_addr constant [2 x i8] c\"\\0A\\00\", align 1\r\n@14 = private unnamed_addr constant [28 x i8] c\"Calling the driver with n =\\00\", align 1\r\n@15 = private unnamed_addr constant [9 x i8] c\"%s%s%d%s\\00\", align 1\r\n@16 = private unnamed_addr constant [2 x i8] c\" \\00\", align 1\r\n@17 = private unnamed_addr constant [2 x i8] c\"\\0A\\00\", align 1\r\n@18 = private unnamed_addr constant [5 x i8] c\"Done\\00\", align 1\r\n@19 = private unnamed_addr constant [5 x i8] c\"%s%s\\00\", align 1\r\n\r\ndefine void @hybrd(float* %fcn, i32* %n) {\r\n.entry:\r\n  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))\r\n  call void @\"fcn@change_by_implicit_interface\"(i32* %n)\r\n  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))\r\n  br label %return\r\n\r\nreturn:                                           ; preds = %.entry\r\n  ret void\r\n\r\n.entry1:                                          ; No predecessors!\r\n  br label %return2\r\n\r\nreturn2:                                          ; preds = %.entry1\r\n  ret void\r\n}\r\n\r\ndeclare void @\"fcn@change_by_implicit_interface\"(i32*)\r\n\r\ndeclare void @_lfortran_printf(i8*, ...)\r\n\r\ndefine void @fcn(i32* %i) {\r\n.entry:\r\n  %0 = load i32, i32* %i, align 4\r\n  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @11, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @10, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0), i32 %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))\r\n  br label %return\r\n\r\nreturn:                                           ; preds = %.entry\r\n  ret void\r\n}\r\n\r\ndefine i32 @main() {\r\n.entry:\r\n  %n = alloca i32, align 4\r\n  store i32 9, i32* %n, align 4\r\n  %0 = load i32, i32* %n, align 4\r\n  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @15, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @14, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0), i32 %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @13, i32 0, i32 0))\r\n  call void @hybrd(void (i32*)* @fcn, i32* %n)\r\n  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @19, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @18, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @17, i32 0, i32 0))\r\n  ret i32 0\r\n}\r\ncode generation error: asr_to_llvm: module failed verification. Error:\r\nCall parameter type does not match function signature!\r\nvoid (i32*)* @fcn\r\n float*  call void @hybrd(void (i32*)* @fcn, i32* %n)\r\n\r\n\r\n\r\nNote: if any of the above error or warning messages are not clear or are lacking\r\ncontext please report it to us (we consider that a bug that needs to be fixed).\r\n```\r\n\r\nWhen compiled in separate translation units and generating code right away, it then at runtime the callback is not called, but it is most likely the same problem.","closed_by":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/971/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/971/timeline","performed_via_github_app":null,"state_reason":"completed"}