{"url":"https://api.github.com/repos/lfortran/lfortran/issues/172","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/172/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/172/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/172/events","html_url":"https://github.com/lfortran/lfortran/issues/172","id":1338681440,"node_id":"I_kwDOCpMuHc5Pyqhg","number":172,"title":"Bridge to Python and other languages","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T08:15:45Z","updated_at":"2022-08-15T08:15:45Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/44\n\nUse the approach explained here: https://eli.thegreenplace.net/2015/calling-back-into-python-from-llvmlite-jited-code/ to bridge with Python.\n\nThe syntax from Fortran side should be (thanks to [@ nncarlson](https://gitlab.com/nncarlson) for the suggestion):\n```fortran\nuse, external(python) :: numpy, only: sin\nprint *, sin(5)\n```\n\nFor plotting, without `lfortran` knowing anything about matplotlib:\n```fortran\nuse, external(python) :: pylab, only: plot, savefig\ncall plot([1, 2, 3], [1, 2, 1])\ncall savefig(\"someplot.pdf\")\n```\n\nFor nested Python modules, we need some syntax to do that, here are three suggestions:\n```fortran\nuse, external(python) :: numpy.linalg, only: cholesky\nuse, external(python) :: numpy:linalg, only: cholesky\nuse, external(python) :: numpy%linalg, only: cholesky\n```\nEssentially this boils down to allowing Fortran modules to be nested (by convincing the Fortran committee to), and then reuse the syntax for that (whatever syntax the committee agrees upon).\n\nCalling C++ could be something along the lines:\n```fortran\nuse, external(cpp) :: xtensor, only: sin\n```\n\nCalling C would be (see https://gitlab.com/lfortran/lfortran/-/issues/48 for details):\n```fortran\nuse, external(c) :: math, only: sin\nprint *, sin(5._dp)\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/172/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/172/timeline","performed_via_github_app":null,"state_reason":null}