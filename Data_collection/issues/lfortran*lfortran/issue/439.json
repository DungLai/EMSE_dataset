{"url":"https://api.github.com/repos/lfortran/lfortran/issues/439","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/439/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/439/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/439/events","html_url":"https://github.com/lfortran/lfortran/issues/439","id":1338738123,"node_id":"I_kwDOCpMuHc5Py4XL","number":439,"title":"Compiling SciPy's stats/statlib","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[{"id":4432142216,"node_id":"LA_kwDOCpMuHc8AAAABCC0fiA","url":"https://api.github.com/repos/lfortran/lfortran/labels/SciPy","name":"SciPy","color":"d4c5f9","default":false,"description":"issues related to enable LFortran to compile the entire FORTRAN codebase in SciPy"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T09:14:46Z","updated_at":"2022-09-14T13:06:21Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/581\n\n[There are](https://github.com/scipy/scipy/tree/a6124626bb99d73aa7f99bf8e3da7d9e2c670aa8/scipy/stats/statlib) just three relatively small files. See https://gitlab.com/lfortran/lfortran/-/issues/582 for compiling all of SciPy.\n\n### ansari.f\n\n```diff\n--- a/scipy/stats/statlib/ansari.f\n+++ b/scipy/stats/statlib/ansari.f\n@@ -18,7 +18,7 @@ C       CHECK PROBLEM SIZE AND DEFINE BASE VALUE OF THE DISTRIBUTION.\n C\n       M = MIN0(TEST, OTHER)\n       IFAULT = 2\n-      IF (M. LT. 0) RETURN\n+      IF (M .LT. 0) RETURN\n       ASTART = FPOINT((TEST + 1) / 2) * FPOINT(1 + TEST / 2)\n       N = MAX0(TEST, OTHER)\n C\n```\nThen it parses:\n```console\n$ lfortran --show-ast --fixed-form ansari.f\n```\n\nASR: \n\n* [x] We need implicit typing (https://gitlab.com/lfortran/lfortran/-/issues/737).\n* [x] data statement (`DATA ONE /1.0/`)\n* [ ] arithmetic if (`IF (MM1) 1, 2, 3`)\n* [ ] `min0`, `max0` intrinsic functions missing\n* [ ] statement functions (`FPOINT(I) = I`)\n\nLLVM:\n\n* [x] https://gitlab.com/lfortran/lfortran/-/issues/748\n\nBy commenting out the above unimplemented ASR features, it compiles to LLVM!\n\nFor use with SciPy:\n\n* [x] we must generate an object file from this LLVM code (https://gitlab.com/lfortran/lfortran/-/issues/749)\n* [ ] we must link multiple object files together with the runtime library correctly (https://gitlab.com/lfortran/lfortran/-/issues/751)\n* [ ] the ABI must be the same as with GFortran, e.g., this `define void [@ frqadd](https://gitlab.com/frqadd)(%array* %f1, i32* %l1in, i32* %l1out, i32* %l1, %array* %f2, i32* %l2, i32* %nstart)` must be the same (it looks like `%array*` is a double pointer to data, while GFortran would use a single pointer)\n\n### spearman.f\n\nIt parses:\n```\nlfortran --fixed-form --show-ast spearman.f\n```\nFor ASR, we need to implement `data`, sole `dimension` attribute, `double precision` function return value, and implicit typing. For now we can workaround with:\n```diff\n--- a/scipy/stats/statlib/spearman.f\n+++ b/scipy/stats/statlib/spearman.f\n@@ -1,4 +1,4 @@\n-      double precision function prho(n, is, ifault)\n+      real(8) function prho(n, is, ifault)\n c\n c        Algorithm AS 89   Appl. Statist. (1975) Vol.24, No. 3, P377.\n c       \n@@ -8,14 +8,17 @@ c        must be greater than 1\n c\n c     Auxiliary function required: ALNORM = algorithm AS66\n c\n-      dimension l(6)\n-      double precision zero, one, two, b, x, y, z, u, six,\n-     $  c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12\n-      data zero, one, two, six /0.0d0, 1.0d0, 2.0d0, 6.0d0/\n-      data        c1,     c2,     c3,     c4,     c5,     c6,\n-     $          c7,     c8,     c9,    c10,    c11,    c12/\n-     $  0.2274d0, 0.2531d0, 0.1745d0, 0.0758d0, 0.1033d0, 0.3932d0,\n-     $  0.0879d0, 0.0151d0, 0.0072d0, 0.0831d0, 0.0131d0, 0.00046d0/\n+      integer, intent(in) :: n, is\n+      integer, intent(out) :: ifault\n+      integer :: l(6)\n+      double precision b, x, y, z, u\n+      double precision, parameter :: zero = 0.0d0, one=1.0d0,\n+     $    two=2.0d0, six=6.0d0\n+      double precision, parameter :: c1=0.2274d0, c2 =0.2531d0,\n+     $  c3 =0.1745d0, c4 =0.0758d0, c5 =0.1033d0, c6 =0.3932d0,\n+     $  c7 =0.0879d0, c8 =0.0151d0, c9 =0.0072d0, c10=0.0831d0,\n+     $  c11=0.0131d0, c12=0.00046d0\n+      integer :: js\n c\n c        Test admissibility of arguments and initialize\n c\n```\nThen it fails with:\n```\n$ lfortran --fixed-form -c spearman.f -o a.o\nTraceback (most recent call last):\n  File \"/Users/certik/repos/lfortran/lfortran/src/bin/lfortran.cpp\", line 1425\n    return compile_to_object_file(arg_file, outfile, platform, false,\n  File \"/Users/certik/repos/lfortran/lfortran/src/bin/lfortran.cpp\", line 692\n    if (result.ok) {\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/codegen/fortran_evaluator.cpp\", line 250\n    asr = ast_to_asr(al, *ast, symbol_table);\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/semantics/ast_to_asr.cpp\", line 36\n    ASR::TranslationUnit_t *tu = body_visitor(al, ast, unit);\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/semantics/ast_body_visitor.cpp\", line 2160\n    b.visit_TranslationUnit(ast);\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/semantics/ast_body_visitor.cpp\", line 89\n    visit_ast(*x.m_items[i]);\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4572\n    void visit_ast(const ast_t &b) { visit_ast_t(b, self()); }\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4532\n    case astType::program_unit: { v.visit_program_unit((const program_unit_t &)x); return; }\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4580\n    void visit_program_unit(const program_unit_t &b) { visit_program_unit_t(b, self()); }\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4198\n    case program_unitType::Function: { v.visit_Function((const Function_t &)x); return; }\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/semantics/ast_body_visitor.cpp\", line 778\n    this->visit_stmt(*x.m_body[i]);\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4613\n    void visit_stmt(const stmt_t &b) { visit_stmt_t(b, self()); }\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4324\n    case stmtType::If: { v.visit_If((const If_t &)x); return; }\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/semantics/ast_body_visitor.cpp\", line 1950\n    visit_stmt(*x.m_body[i]);\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4613\n    void visit_stmt(const stmt_t &b) { visit_stmt_t(b, self()); }\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4302\n    case stmtType::GoTo: { v.visit_GoTo((const GoTo_t &)x); return; }\n  File \"/Users/certik/repos/lfortran/lfortran/src/lfortran/ast.h\", line 4633\n    void visit_GoTo(const GoTo_t & /* x */) { throw LFortran::LFortranException(\"visit_GoTo() not implemented\"); }\nLFortranException: visit_GoTo() not implemented\n```\n\nWe need to implement goto in AST->ASR.\n\nUpdate: GoTo has been implemented.\n\n### swilk.f\n\nIt parses:\n```\n$ lfortran --fixed-form --show-ast swilk.f\n```\n\nIt seems the ASR failure is on `dimension :: l(6)`, \"Attribute declaration not supported\"","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/439/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/439/timeline","performed_via_github_app":null,"state_reason":null}