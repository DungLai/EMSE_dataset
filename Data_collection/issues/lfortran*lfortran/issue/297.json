{"url":"https://api.github.com/repos/lfortran/lfortran/issues/297","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/297/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/297/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/297/events","html_url":"https://github.com/lfortran/lfortran/issues/297","id":1338693310,"node_id":"I_kwDOCpMuHc5Pyta-","number":297,"title":"Fortran Features Roadmap","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-08-15T08:27:44Z","updated_at":"2022-08-15T08:27:44Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"*Original issue*: https://gitlab.com/lfortran/lfortran/-/issues/272\n\nThis is an LFortran roadmap of Fortran features to implement. This is a general roadmap. See https://gitlab.com/lfortran/lfortran/-/issues/313 for a roadmap for MVP (minimum viable product).\n\nThe parser [parser.yy](https://gitlab.com/lfortran/lfortran/-/blob/master/src/lfortran/parser/parser.yy) is nearly complete, but not everything from it is converted yet to AST, ASR and LLVM. Below we list all such features. This list is not comprehensive, but it covers most features to start compiling a lot of production codes.\n\nEach feature should be defined by adding a test (https://gitlab.com/lfortran/lfortran/-/issues/276), and if that test works (AST, ASR and LLVM), it is marked as implemented. We mark a feature below as complete (we check the box) if the main part of the feature works (in LLVM), but not necessarily all the corner cases. As more corner cases are discovered or reported, we will open new issues and link them here to the particular feature as needed.\n\n# Fortran Features\n\n* Intrinsic functions (blocker: https://gitlab.com/lfortran/lfortran/-/issues/247): see https://gitlab.com/lfortran/lfortran/-/wikis/Implementation%20Status%20of%20Intrinsic%20Functions for a comprehensive list\n  * [x] basic (exp, abs)\n  * [x] trigonometric (sin, cos, tan) (https://gitlab.com/lfortran/lfortran/-/merge_requests/717)\n  * [ ] special (bessel)\n  * [x] kind\n  * [x] real\n  * [x] int\n  * [] character\n  * [x] achar\n  * [x] len\n  * [x] trim\n  * [x] len_trim\n  * [x] aimag\n  * [ ] ichar\n  * [x] ishft(https://gitlab.com/lfortran/lfortran/-/merge_requests/1563)\n  * [x] ieor(https://gitlab.com/lfortran/lfortran/-/merge_requests/1531)\n  * [ ] epsilon\n  * [ ] index\n  * [ ] adjustl\n  * [ ] random_seed, random_number\n  * [x] system_clock (https://gitlab.com/lfortran/lfortran/-/merge_requests/1562)\n  * [ ] open, close, read, write (https://gitlab.com/lfortran/lfortran/-/issues/563)\n  * [ ] get_environment_variable\n  * [ ] merge\n  * [ ] pack\n* Arrays\n  * [x] Declaring 1D arrays\n  * [x] Passing 1D arrays to / from procedures\n  * [ ] N-dimensional arrays\n  * Array operations\n    * [ ] Slicing (`A(1:3) = 5`)\n    * [ ] Array arithmetics (`a = x + y` where `a`, `x`, `y` are arrays)\n  * [x] Allocatable arrays\n  * [ ] assumed-shape (https://gitlab.com/lfortran/lfortran/-/issues/50)\n  * [ ] explicit-shape (https://gitlab.com/lfortran/lfortran/-/issues/51)\n  * [ ] elemental procedures\n  * [ ] array initializers\n  * Array intrinsic functions\n    * [x] size\n    * [ ] sum\n    * [ ] matmul\n    * [ ] dot_product\n    * [ ] minval, maxval\n    * [ ] all, any\n* Statements\n  * [x] Select Case (https://gitlab.com/lfortran/lfortran/-/merge_requests/703)\n  * [x] Associate construct\n  * [ ] Open/close/read/write/inquire/rewind statement\n  * [ ] Where statement\n  * [ ] Forall\n  * [ ] Infinite do loop\n  * [ ] do concurrent\n  * [ ] format\n  * [ ] Block statement\n* Expressions\n  * [ ] Generator expression\n  * [x] BOZ constants\n  * [x] String concatenation (https://gitlab.com/lfortran/lfortran/-/merge_requests/716, https://gitlab.com/lfortran/lfortran/-/merge_requests/735)\n* Declarations and types:\n  * [x] iso_c_binding\n  * [x] real and complex kinds (single, double, quadruple) (https://gitlab.com/lfortran/lfortran/-/issues/96)\n  * [x] interface blocks (https://gitlab.com/lfortran/lfortran/-/issues/252)\n  * [x] parameters\n  * [ ] Derived types (https://gitlab.com/lfortran/lfortran/-/issues/273)\n  * [x] Strings (`character`) (https://gitlab.com/lfortran/lfortran/-/merge_requests/712, https://gitlab.com/lfortran/lfortran/-/merge_requests/713, https://gitlab.com/lfortran/lfortran/-/merge_requests/735, https://gitlab.com/lfortran/lfortran/-/issues/286, https://gitlab.com/lfortran/lfortran/-/issues/296)\n  * [x] Pointers (https://gitlab.com/lfortran/lfortran/-/merge_requests/721)\n  * [ ] Allocatable strings (might need special attention)\n  * [ ] Allocatable types (other than strings)\n  * [ ] Enumerations\n  * [x] Operators and assignment overloading\n  * [ ] Namelists\n  * [ ] Save variables\n  * [ ] Handling of `implicit none` (currently it is ignored and assumed it is in effect)\n  * [ ] class types with methods, inheritance (https://gitlab.com/lfortran/lfortran/-/issues/274)\n* Procedures\n  * [ ] Passing procedures as arguments to procedures (callbacks) (https://gitlab.com/lfortran/lfortran/-/merge_requests/917)\n  * [ ] Nested procedures (https://gitlab.com/lfortran/lfortran/-/merge_requests/746, https://gitlab.com/lfortran/lfortran/-/merge_requests/920)\n  * [ ] Optional arguments (`optional`, `present`)\n  * [ ] Pure procedures\n* Modules\n  * [x] modules (intrinsic and non intrinsic) (https://gitlab.com/lfortran/lfortran/-/issues/18)\n  * [ ] Submodules\n\n\nCandidate codes to get working:\n\n* https://github.com/lanl/SNAP (Fortran 95) https://gitlab.com/lfortran/lfortran/-/issues/313\n* https://github.com/certik/dftatom (Fortran 95) https://gitlab.com/lfortran/lfortran/-/issues/319\n* https://github.com/planelles20/numerical-methods-fortran\n\n\nThe [Compiler Support for the Fortran 2003 and 2008 Standards](https://www.physics.muni.cz/~jancely/NM/Texty/Fortran/PorovnaniFortranu.pdf) has a good high level list of features to be supported that we can use once we get there.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/297/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/297/timeline","performed_via_github_app":null,"state_reason":null}