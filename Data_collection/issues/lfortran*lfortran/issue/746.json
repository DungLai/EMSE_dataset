{"url":"https://api.github.com/repos/lfortran/lfortran/issues/746","repository_url":"https://api.github.com/repos/lfortran/lfortran","labels_url":"https://api.github.com/repos/lfortran/lfortran/issues/746/labels{/name}","comments_url":"https://api.github.com/repos/lfortran/lfortran/issues/746/comments","events_url":"https://api.github.com/repos/lfortran/lfortran/issues/746/events","html_url":"https://github.com/lfortran/lfortran/issues/746","id":1385314554,"node_id":"I_kwDOCpMuHc5Skjj6","number":746,"title":"C backend generates incorrect code for `intent(out)`","user":{"login":"certik","id":20568,"node_id":"MDQ6VXNlcjIwNTY4","avatar_url":"https://avatars.githubusercontent.com/u/20568?v=4","gravatar_id":"","url":"https://api.github.com/users/certik","html_url":"https://github.com/certik","followers_url":"https://api.github.com/users/certik/followers","following_url":"https://api.github.com/users/certik/following{/other_user}","gists_url":"https://api.github.com/users/certik/gists{/gist_id}","starred_url":"https://api.github.com/users/certik/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/certik/subscriptions","organizations_url":"https://api.github.com/users/certik/orgs","repos_url":"https://api.github.com/users/certik/repos","events_url":"https://api.github.com/users/certik/events{/privacy}","received_events_url":"https://api.github.com/users/certik/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-09-26T02:26:16Z","updated_at":"2022-09-27T05:54:25Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Here is an example:\r\n```fortran\r\nprogram test_a\r\n\r\ncall a()\r\n\r\ncontains\r\n\r\nsubroutine a()\r\n    integer :: i\r\n    call b(i)\r\n    print *, i\r\nend subroutine\r\n\r\nsubroutine b(out)\r\n    integer, intent(out) :: out\r\n    out = 3\r\nend subroutine\r\n\r\nend program\r\n```\r\nThis works correctly with the LLVM and C++ backends, but produces incorrect code with the C backend:\r\n```console\r\n$ lfortran --show-c a.f90 \r\n#include <inttypes.h>\r\n\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <lfortran_intrinsics.h>\r\n\r\n#define ASSERT(cond)                                                           \\\r\n    {                                                                          \\\r\n        if (!(cond)) {                                                         \\\r\n            printf(\"%s%s\", \"ASSERT failed: \", __FILE__);                       \\\r\n            printf(\"%s%s\", \"\\nfunction \", __func__);                           \\\r\n            printf(\"%s%d%s\", \"(), line number \", __LINE__, \" at \\n\");          \\\r\n            printf(\"%s%s\", #cond, \"\\n\");                                       \\\r\n            exit(1);                                                           \\\r\n        }                                                                      \\\r\n    }\r\n#define ASSERT_MSG(cond, msg)                                                  \\\r\n    {                                                                          \\\r\n        if (!(cond)) {                                                         \\\r\n            printf(\"%s%s\", \"ASSERT failed: \", __FILE__);                       \\\r\n            printf(\"%s%s\", \"\\nfunction \", __func__);                           \\\r\n            printf(\"%s%d%s\", \"(), line number \", __LINE__, \" at \\n\");          \\\r\n            printf(\"%s%s\", #cond, \"\\n\");                                       \\\r\n            printf(\"%s\", \"ERROR MESSAGE:\\n\");                                  \\\r\n            printf(\"%s%s\", msg, \"\\n\");                                         \\\r\n            exit(1);                                                           \\\r\n        }                                                                      \\\r\n    }\r\n\r\n\r\nstruct dimension_descriptor\r\n{\r\n    int32_t lower_bound, length;\r\n};\r\n// Forward declarations\r\nvoid a();\r\nvoid b(int32_t *out);\r\n\r\n// Implementations\r\nvoid a()\r\n{\r\n    int32_t i;\r\n    b(i);\r\n    printf(\"%d\\n\", i);\r\n}\r\n\r\nvoid b(int32_t *out)\r\n{\r\n    out = 3;\r\n}\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n    a();\r\n    return 0;\r\n}\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/lfortran/lfortran/issues/746/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/lfortran/lfortran/issues/746/timeline","performed_via_github_app":null,"state_reason":null}