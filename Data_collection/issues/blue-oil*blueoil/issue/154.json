{"url":"https://api.github.com/repos/blue-oil/blueoil/issues/154","repository_url":"https://api.github.com/repos/blue-oil/blueoil","labels_url":"https://api.github.com/repos/blue-oil/blueoil/issues/154/labels{/name}","comments_url":"https://api.github.com/repos/blue-oil/blueoil/issues/154/comments","events_url":"https://api.github.com/repos/blue-oil/blueoil/issues/154/events","html_url":"https://github.com/blue-oil/blueoil/issues/154","id":410112201,"node_id":"MDU6SXNzdWU0MTAxMTIyMDE=","number":154,"title":"Uses too many registers (performance degradation)","user":{"login":"lm-konda","id":43975451,"node_id":"MDQ6VXNlcjQzOTc1NDUx","avatar_url":"https://avatars.githubusercontent.com/u/43975451?v=4","gravatar_id":"","url":"https://api.github.com/users/lm-konda","html_url":"https://github.com/lm-konda","followers_url":"https://api.github.com/users/lm-konda/followers","following_url":"https://api.github.com/users/lm-konda/following{/other_user}","gists_url":"https://api.github.com/users/lm-konda/gists{/gist_id}","starred_url":"https://api.github.com/users/lm-konda/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lm-konda/subscriptions","organizations_url":"https://api.github.com/users/lm-konda/orgs","repos_url":"https://api.github.com/users/lm-konda/repos","events_url":"https://api.github.com/users/lm-konda/events{/privacy}","received_events_url":"https://api.github.com/users/lm-konda/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-02-14T03:44:57Z","updated_at":"2019-02-14T03:44:57Z","closed_at":null,"author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"in src file：\r\n　src/matrix/generic/quantized_multiplication.cpp\r\n\r\nWe are using too many variables as follows.\r\n```\r\n      BIN_CONV_OUTPUT r00 = 0;\r\n      BIN_CONV_OUTPUT r01 = 0;\r\n      BIN_CONV_OUTPUT r02 = 0;\r\n      BIN_CONV_OUTPUT r03 = 0;\r\n      BIN_CONV_OUTPUT r10 = 0;\r\n      BIN_CONV_OUTPUT r11 = 0;\r\n      BIN_CONV_OUTPUT r12 = 0;\r\n      BIN_CONV_OUTPUT r13 = 0;\r\n      BIN_CONV_OUTPUT r20 = 0;\r\n      BIN_CONV_OUTPUT r21 = 0;\r\n      BIN_CONV_OUTPUT r22 = 0;\r\n      BIN_CONV_OUTPUT r23 = 0;\r\n      BIN_CONV_OUTPUT r30 = 0;\r\n      BIN_CONV_OUTPUT r31 = 0;\r\n      BIN_CONV_OUTPUT r32 = 0;\r\n      BIN_CONV_OUTPUT r33 = 0;\r\n```\r\n\r\nSo, \r\n```\r\n#define CONV(i, k) r##i##k += pop_count(~(a ^ b##k##0)) + 2 * pop_count(~(a ^ b##k##1)) - 3 * (pop_count(~a));\r\n```\r\nthis macro is still costly. (because of register spills)\r\n\r\nIf we can use streaming store, it may improve.\r\nBut, If we aim high performance using generic code, we should rewrite code.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/blue-oil/blueoil/issues/154/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/blue-oil/blueoil/issues/154/timeline","performed_via_github_app":null,"state_reason":null}