{"url":"https://api.github.com/repos/blue-oil/blueoil/issues/133","repository_url":"https://api.github.com/repos/blue-oil/blueoil","labels_url":"https://api.github.com/repos/blue-oil/blueoil/issues/133/labels{/name}","comments_url":"https://api.github.com/repos/blue-oil/blueoil/issues/133/comments","events_url":"https://api.github.com/repos/blue-oil/blueoil/issues/133/events","html_url":"https://github.com/blue-oil/blueoil/issues/133","id":404612151,"node_id":"MDU6SXNzdWU0MDQ2MTIxNTE=","number":133,"title":"Pre-compute batch normalization scale and shift","user":{"login":"antonionevado","id":21376077,"node_id":"MDQ6VXNlcjIxMzc2MDc3","avatar_url":"https://avatars.githubusercontent.com/u/21376077?v=4","gravatar_id":"","url":"https://api.github.com/users/antonionevado","html_url":"https://github.com/antonionevado","followers_url":"https://api.github.com/users/antonionevado/followers","following_url":"https://api.github.com/users/antonionevado/following{/other_user}","gists_url":"https://api.github.com/users/antonionevado/gists{/gist_id}","starred_url":"https://api.github.com/users/antonionevado/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/antonionevado/subscriptions","organizations_url":"https://api.github.com/users/antonionevado/orgs","repos_url":"https://api.github.com/users/antonionevado/repos","events_url":"https://api.github.com/users/antonionevado/events{/privacy}","received_events_url":"https://api.github.com/users/antonionevado/received_events","type":"User","site_admin":false},"labels":[{"id":1095590113,"node_id":"MDU6TGFiZWwxMDk1NTkwMTEz","url":"https://api.github.com/repos/blue-oil/blueoil/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-01-30T05:46:42Z","updated_at":"2020-01-16T05:53:22Z","closed_at":"2020-01-16T05:53:22Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"Batch normalization learnt parameters are gamma, beta, running expectation and running variance. During inference, these parameters are constants but for some reason we still computing the final scaling factor and shift during inference:\r\n\r\n```C++\r\nvoid func_BatchNormalization(T_FLOAT input[], T_FLOAT gamma[], T_FLOAT beta[],\r\n                             T_FLOAT mean[], T_FLOAT variance[],\r\n                             T_FLOAT epsilon, T_FLOAT output[],\r\n                             T_UINT out_height, T_UINT out_width,\r\n                             T_UINT out_depth) {\r\n  Measurement::Start(\"BatchNorm\");\r\n\r\n  // temporary fix: will be replaced by pre-allocated one\r\n  T_FLOAT *scale = new float[out_depth];\r\n  T_FLOAT *shift = new float[out_depth];\r\n  T_UINT size = out_height * out_width;\r\n\r\n  float32x4_t eps_batch = vdupq_n_f32(epsilon);\r\n  float32x4_t scale_b, shift_b;\r\n\r\n  int i = 0;\r\n  for (; i <= static_cast<int>(out_depth) - 4; i += 4) {\r\n    float32x4_t gamma_batch = vld1q_f32(&gamma[i]);\r\n    float32x4_t var_batch = vld1q_f32(&variance[i]);\r\n    float32x4_t beta_batch = vld1q_f32(&beta[i]);\r\n    float32x4_t mu_batch = vld1q_f32(&mean[i]);\r\n\r\n    scale_b = vaddq_f32(var_batch, eps_batch);\r\n    float32x4_t rsqrt_est = vrsqrteq_f32(scale_b);\r\n    rsqrt_est = vrsqrtsq_f32(scale_b * rsqrt_est, rsqrt_est) * rsqrt_est;\r\n    scale_b = vrsqrtsq_f32(scale_b * rsqrt_est, rsqrt_est) * rsqrt_est;\r\n\r\n    scale_b = vmulq_f32(scale_b, gamma_batch);\r\n    shift_b = vmlsq_f32(beta_batch, scale_b, mu_batch);\r\n    vst1q_f32(&scale[i], scale_b);\r\n    vst1q_f32(&shift[i], shift_b);\r\n  }\r\n\r\n  for (; i < static_cast<int>(out_depth); i++) {\r\n    scale[i] = gamma[i] * (1.0 / std::sqrt(variance[i] + epsilon));\r\n    shift[i] = beta[i] - (scale[i] * mean[i]);\r\n  }\r\n... // until here is only for computing constants shift and scale from other constants\r\n```\r\n\r\nIt is possible, in DLK optimizer phase, to pre-compute this values and just save the shift and scale factors. During inference, this is the only code required (simplified, maybe use NEON and more than one CPU core improves speed):\r\n```C++\r\n    for (; d < out_depth; d++) {\r\n      *out_temp++ = *in_temp++ * scale[d] + shift[d];\r\n    }\r\n```","closed_by":{"login":"primenumber","id":1918373,"node_id":"MDQ6VXNlcjE5MTgzNzM=","avatar_url":"https://avatars.githubusercontent.com/u/1918373?v=4","gravatar_id":"","url":"https://api.github.com/users/primenumber","html_url":"https://github.com/primenumber","followers_url":"https://api.github.com/users/primenumber/followers","following_url":"https://api.github.com/users/primenumber/following{/other_user}","gists_url":"https://api.github.com/users/primenumber/gists{/gist_id}","starred_url":"https://api.github.com/users/primenumber/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/primenumber/subscriptions","organizations_url":"https://api.github.com/users/primenumber/orgs","repos_url":"https://api.github.com/users/primenumber/repos","events_url":"https://api.github.com/users/primenumber/events{/privacy}","received_events_url":"https://api.github.com/users/primenumber/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/blue-oil/blueoil/issues/133/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/blue-oil/blueoil/issues/133/timeline","performed_via_github_app":null,"state_reason":"completed"}