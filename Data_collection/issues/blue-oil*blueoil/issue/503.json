{"url":"https://api.github.com/repos/blue-oil/blueoil/issues/503","repository_url":"https://api.github.com/repos/blue-oil/blueoil","labels_url":"https://api.github.com/repos/blue-oil/blueoil/issues/503/labels{/name}","comments_url":"https://api.github.com/repos/blue-oil/blueoil/issues/503/comments","events_url":"https://api.github.com/repos/blue-oil/blueoil/issues/503/events","html_url":"https://github.com/blue-oil/blueoil/issues/503","id":502515642,"node_id":"MDU6SXNzdWU1MDI1MTU2NDI=","number":503,"title":"Refactor View.run() in view.py","user":{"login":"yd8534976","id":8168498,"node_id":"MDQ6VXNlcjgxNjg0OTg=","avatar_url":"https://avatars.githubusercontent.com/u/8168498?v=4","gravatar_id":"","url":"https://api.github.com/users/yd8534976","html_url":"https://github.com/yd8534976","followers_url":"https://api.github.com/users/yd8534976/followers","following_url":"https://api.github.com/users/yd8534976/following{/other_user}","gists_url":"https://api.github.com/users/yd8534976/gists{/gist_id}","starred_url":"https://api.github.com/users/yd8534976/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yd8534976/subscriptions","organizations_url":"https://api.github.com/users/yd8534976/orgs","repos_url":"https://api.github.com/users/yd8534976/repos","events_url":"https://api.github.com/users/yd8534976/events{/privacy}","received_events_url":"https://api.github.com/users/yd8534976/received_events","type":"User","site_admin":false},"labels":[{"id":1095590111,"node_id":"MDU6TGFiZWwxMDk1NTkwMTEx","url":"https://api.github.com/repos/blue-oil/blueoil/labels/duplicate","name":"duplicate","color":"cfd3d7","default":true,"description":"This issue or pull request already exists"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-10-04T08:58:05Z","updated_at":"2019-10-07T02:06:31Z","closed_at":"2019-10-07T02:06:31Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"body":"As @tsawada mentioned, View.run() is too long to read.\r\n\r\ncode structure is like\r\n```\r\nif self.op.op_type == \"A\":\r\n    return \"AAA\"\r\nelif self.op.op_type == \"B\":\r\n    return \"BBB\"\r\n...\r\n```\r\nA good solution is using a dict approach.\r\n\r\nI think we can use an alternative `singledispatch` approach.\r\nThe code structure will be something like:\r\n```\r\n@singledispatch\r\ndef get_format_string(op):\r\n    return \"Op not supported!\"\r\n\r\n\r\n@get_format_string.register\r\ndef _(op: A):\r\n    return \"AAA\"\r\n\r\n@get_format_string.register\r\ndef _(op: B):\r\n    return \"BBB\"\r\n\r\n```\r\n\r\nI think this approach should be clean to read. I'd like to hear your opinions.\r\n","closed_by":{"login":"yd8534976","id":8168498,"node_id":"MDQ6VXNlcjgxNjg0OTg=","avatar_url":"https://avatars.githubusercontent.com/u/8168498?v=4","gravatar_id":"","url":"https://api.github.com/users/yd8534976","html_url":"https://github.com/yd8534976","followers_url":"https://api.github.com/users/yd8534976/followers","following_url":"https://api.github.com/users/yd8534976/following{/other_user}","gists_url":"https://api.github.com/users/yd8534976/gists{/gist_id}","starred_url":"https://api.github.com/users/yd8534976/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yd8534976/subscriptions","organizations_url":"https://api.github.com/users/yd8534976/orgs","repos_url":"https://api.github.com/users/yd8534976/repos","events_url":"https://api.github.com/users/yd8534976/events{/privacy}","received_events_url":"https://api.github.com/users/yd8534976/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/blue-oil/blueoil/issues/503/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/blue-oil/blueoil/issues/503/timeline","performed_via_github_app":null,"state_reason":"completed"}