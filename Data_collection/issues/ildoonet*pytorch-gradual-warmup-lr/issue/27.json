{"url":"https://api.github.com/repos/ildoonet/pytorch-gradual-warmup-lr/issues/27","repository_url":"https://api.github.com/repos/ildoonet/pytorch-gradual-warmup-lr","labels_url":"https://api.github.com/repos/ildoonet/pytorch-gradual-warmup-lr/issues/27/labels{/name}","comments_url":"https://api.github.com/repos/ildoonet/pytorch-gradual-warmup-lr/issues/27/comments","events_url":"https://api.github.com/repos/ildoonet/pytorch-gradual-warmup-lr/issues/27/events","html_url":"https://github.com/ildoonet/pytorch-gradual-warmup-lr/issues/27","id":1379688531,"node_id":"I_kwDOCeStC85SPGBT","number":27,"title":"Target optimizer not set properly when loading from state dict","user":{"login":"stefan-baumann","id":4400519,"node_id":"MDQ6VXNlcjQ0MDA1MTk=","avatar_url":"https://avatars.githubusercontent.com/u/4400519?v=4","gravatar_id":"","url":"https://api.github.com/users/stefan-baumann","html_url":"https://github.com/stefan-baumann","followers_url":"https://api.github.com/users/stefan-baumann/followers","following_url":"https://api.github.com/users/stefan-baumann/following{/other_user}","gists_url":"https://api.github.com/users/stefan-baumann/gists{/gist_id}","starred_url":"https://api.github.com/users/stefan-baumann/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stefan-baumann/subscriptions","organizations_url":"https://api.github.com/users/stefan-baumann/orgs","repos_url":"https://api.github.com/users/stefan-baumann/repos","events_url":"https://api.github.com/users/stefan-baumann/events{/privacy}","received_events_url":"https://api.github.com/users/stefan-baumann/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-09-20T16:28:36Z","updated_at":"2022-09-20T16:28:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"When loading the `GradualWarmupScheduler` from a state dict to resume a training, the `optimizer` attribute of the nested `after_scheduler` is loaded from the `state_dict`. This causes a static learning rate after resuming a training, as the `after_scheduler` tries to update the learning rate of an optimizer that doesn't match the one used by the resumed training. Setting `self.after_scheduler.optimizer = self.optimizer` as a part of the `load_state_dict()` method should probably suffice to fix this.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/ildoonet/pytorch-gradual-warmup-lr/issues/27/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ildoonet/pytorch-gradual-warmup-lr/issues/27/timeline","performed_via_github_app":null,"state_reason":null}