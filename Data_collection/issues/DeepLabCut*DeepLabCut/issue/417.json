{"url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/417","repository_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut","labels_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/417/labels{/name}","comments_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/417/comments","events_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/417/events","html_url":"https://github.com/DeepLabCut/DeepLabCut/issues/417","id":490193781,"node_id":"MDU6SXNzdWU0OTAxOTM3ODE=","number":417,"title":"label_frames function crashes on MacOs (ipython vs pythonw)","user":{"login":"wiessall","id":50863434,"node_id":"MDQ6VXNlcjUwODYzNDM0","avatar_url":"https://avatars.githubusercontent.com/u/50863434?v=4","gravatar_id":"","url":"https://api.github.com/users/wiessall","html_url":"https://github.com/wiessall","followers_url":"https://api.github.com/users/wiessall/followers","following_url":"https://api.github.com/users/wiessall/following{/other_user}","gists_url":"https://api.github.com/users/wiessall/gists{/gist_id}","starred_url":"https://api.github.com/users/wiessall/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wiessall/subscriptions","organizations_url":"https://api.github.com/users/wiessall/orgs","repos_url":"https://api.github.com/users/wiessall/repos","events_url":"https://api.github.com/users/wiessall/events{/privacy}","received_events_url":"https://api.github.com/users/wiessall/received_events","type":"User","site_admin":false},"labels":[{"id":1313079487,"node_id":"MDU6TGFiZWwxMzEzMDc5NDg3","url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/labels/howtousedlc","name":"howtousedlc","color":"a1b3f4","default":false,"description":"issue regarding the use of DeepLabCut"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-09-06T08:18:46Z","updated_at":"2019-09-09T15:31:03Z","closed_at":"2019-09-09T15:31:03Z","author_association":"NONE","active_lock_reason":null,"body":"I just downloaded deeplabcut to play around with it a bit, so I'm not absolutely sure that the error is on my side. However, whenever I try to run the label_frames function iPython crashes and I get the error: AttributeError: module 'wx' has no attribute 'Thread_IsMain'. Down below is the full report:\r\n\r\n```\r\n***************************************************************************\r\n\r\nIPython post-mortem report\r\n\r\n{'commit_hash': '51ce9d73b',\r\n 'commit_source': 'installation',\r\n 'default_encoding': 'UTF-8',\r\n 'ipython_path': '/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/IPython',\r\n 'ipython_version': '6.0.0',\r\n 'os_name': 'posix',\r\n 'platform': 'Darwin-18.7.0-x86_64-i386-64bit',\r\n 'sys_executable': '/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/bin/python',\r\n 'sys_platform': 'darwin',\r\n 'sys_version': '3.6.8 |Anaconda, Inc.| (default, Dec 29 2018, 19:04:46) \\n'\r\n                '[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)]'}\r\n\r\n***************************************************************************\r\n\r\n\r\n\r\n***************************************************************************\r\n\r\nCrash traceback:\r\n\r\n---------------------------------------------------------------------------\r\n---------------------------------------------------------------------------\r\nAttributeErrorPython 3.6.8: /Users/Tristan/anaconda3/envs/dlc-macOS-CPU/bin/python\r\n                                                   Fri Sep  6 10:03:57 2019\r\nA problem occurred executing Python code.  Here is the sequence of function\r\ncalls leading up to the error, with the most recent (innermost) call last.\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/bin/ipython in <module>()\r\n      1 #!/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/bin/python\r\n      2 \r\n      3 # -*- coding: utf-8 -*-\r\n      4 import re\r\n      5 import sys\r\n      6 \r\n      7 from IPython import start_ipython\r\n      8 \r\n      9 if __name__ == '__main__':\r\n     10     sys.argv[0] = re.sub(r'(-script\\.pyw?|\\.exe)?$', '', sys.argv[0])\r\n---> 11     sys.exit(start_ipython())\r\n        global sys.exit = <built-in function exit>\r\n        global start_ipython = <function start_ipython at 0x1113f9b70>\r\n\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/IPython/__init__.py in start_ipython(argv=None, **kwargs={})\r\n    110     This is a public API method, and will survive implementation changes.\r\n    111     \r\n    112     Parameters\r\n    113     ----------\r\n    114     \r\n    115     argv : list or None, optional\r\n    116         If unspecified or None, IPython will parse command-line options from sys.argv.\r\n    117         To prevent any command-line parsing, pass an empty list: `argv=[]`.\r\n    118     user_ns : dict, optional\r\n    119         specify this dictionary to initialize the IPython user namespace with particular values.\r\n    120     kwargs : various, optional\r\n    121         Any other kwargs will be passed to the Application constructor,\r\n    122         such as `config`.\r\n    123     \"\"\"\r\n    124     from IPython.terminal.ipapp import launch_new_instance\r\n--> 125     return launch_new_instance(argv=argv, **kwargs)\r\n        launch_new_instance = <bound method Application.launch_instance of <class 'IPython.terminal.ipapp.TerminalIPythonApp'>>\r\n        argv = None\r\n        kwargs = {}\r\n    126 \r\n    127 def start_kernel(argv=None, **kwargs):\r\n    128     \"\"\"Launch a normal IPython kernel instance (as opposed to embedded)\r\n    129     \r\n    130     `IPython.embed_kernel()` puts a shell in a particular calling scope,\r\n    131     such as a function or method for debugging purposes,\r\n    132     which is often not desirable.\r\n    133     \r\n    134     `start_kernel()` does full, regular IPython initialization,\r\n    135     including loading startup files, configuration, etc.\r\n    136     much of which is skipped by `embed()`.\r\n    137     \r\n    138     Parameters\r\n    139     ----------\r\n    140     \r\n\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/traitlets/config/application.py in launch_instance(cls=<class 'IPython.terminal.ipapp.TerminalIPythonApp'>, argv=None, **kwargs={})\r\n    643             lines.append(cls.class_config_section())\r\n    644         return '\\n'.join(lines)\r\n    645 \r\n    646     def exit(self, exit_status=0):\r\n    647         self.log.debug(\"Exiting application: %s\" % self.name)\r\n    648         sys.exit(exit_status)\r\n    649 \r\n    650     @classmethod\r\n    651     def launch_instance(cls, argv=None, **kwargs):\r\n    652         \"\"\"Launch a global instance of this Application\r\n    653 \r\n    654         If a global instance already exists, this reinitializes and starts it\r\n    655         \"\"\"\r\n    656         app = cls.instance(**kwargs)\r\n    657         app.initialize(argv)\r\n--> 658         app.start()\r\n        app.start = <bound method TerminalIPythonApp.start of <IPython.terminal.ipapp.TerminalIPythonApp object at 0x10fb28fd0>>\r\n    659 \r\n    660 #-----------------------------------------------------------------------------\r\n    661 # utility functions, for convenience\r\n    662 #-----------------------------------------------------------------------------\r\n    663 \r\n    664 def boolean_flag(name, configurable, set_help='', unset_help=''):\r\n    665     \"\"\"Helper for building basic --trait, --no-trait flags.\r\n    666 \r\n    667     Parameters\r\n    668     ----------\r\n    669 \r\n    670     name : str\r\n    671         The name of the flag.\r\n    672     configurable : str\r\n    673         The 'Class.trait' string of the trait to be set/unset with the flag\r\n\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/IPython/terminal/ipapp.py in start(self=<IPython.terminal.ipapp.TerminalIPythonApp object>)\r\n    338         if self.log_level <= logging.INFO: print()\r\n    339 \r\n    340     def _pylab_changed(self, name, old, new):\r\n    341         \"\"\"Replace --pylab='inline' with --pylab='auto'\"\"\"\r\n    342         if new == 'inline':\r\n    343             warnings.warn(\"'inline' not available as pylab backend, \"\r\n    344                       \"using 'auto' instead.\")\r\n    345             self.pylab = 'auto'\r\n    346 \r\n    347     def start(self):\r\n    348         if self.subapp is not None:\r\n    349             return self.subapp.start()\r\n    350         # perform any prexec steps:\r\n    351         if self.interact:\r\n    352             self.log.debug(\"Starting IPython's mainloop...\")\r\n--> 353             self.shell.mainloop()\r\n        self.shell.mainloop = <bound method TerminalInteractiveShell.mainloop of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x1102d5278>>\r\n    354         else:\r\n    355             self.log.debug(\"IPython not interactive...\")\r\n    356 \r\n    357 def load_default_config(ipython_dir=None):\r\n    358     \"\"\"Load the default config file from the default ipython_dir.\r\n    359 \r\n    360     This is useful for embedded shells.\r\n    361     \"\"\"\r\n    362     if ipython_dir is None:\r\n    363         ipython_dir = get_ipython_dir()\r\n    364 \r\n    365     profile_dir = os.path.join(ipython_dir, 'profile_default')\r\n    366 \r\n    367     config = Config()\r\n    368     for cf in Application._load_config_files(\"ipython_config\", path=profile_dir):\r\n\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/IPython/terminal/interactiveshell.py in mainloop(self=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>, display_banner=<object object>)\r\n    444                 if (not self.confirm_exit) \\\r\n    445                         or self.ask_yes_no('Do you really want to exit ([y]/n)?','y','n'):\r\n    446                     self.ask_exit()\r\n    447 \r\n    448             else:\r\n    449                 if code:\r\n    450                     self.run_cell(code, store_history=True)\r\n    451 \r\n    452     def mainloop(self, display_banner=DISPLAY_BANNER_DEPRECATED):\r\n    453         # An extra layer of protection in case someone mashing Ctrl-C breaks\r\n    454         # out of our internal code.\r\n    455         if display_banner is not DISPLAY_BANNER_DEPRECATED:\r\n    456             warn('mainloop `display_banner` argument is deprecated since IPython 5.0. Call `show_banner()` if needed.', DeprecationWarning, stacklevel=2)\r\n    457         while True:\r\n    458             try:\r\n--> 459                 self.interact()\r\n        self.interact = <bound method TerminalInteractiveShell.interact of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x1102d5278>>\r\n    460                 break\r\n    461             except KeyboardInterrupt as e:\r\n    462                 print(\"\\n%s escaped interact()\\n\" % type(e).__name__)\r\n    463             finally:\r\n    464                 # An interrupt during the eventloop will mess up the\r\n    465                 # internal state of the prompt_toolkit library.\r\n    466                 # Stopping the eventloop fixes this, see\r\n    467                 # https://github.com/ipython/ipython/pull/9867\r\n    468                 if hasattr(self, '_eventloop'):\r\n    469                     self._eventloop.stop()\r\n    470 \r\n    471     _inputhook = None\r\n    472     def inputhook(self, context):\r\n    473         if self._inputhook is not None:\r\n    474             self._inputhook(context)\r\n\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/IPython/terminal/interactiveshell.py in interact(self=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>, display_banner=<object object>)\r\n    427                 # Older version of prompt_toolkit; it's OK to set the document\r\n    428                 # directly here.\r\n    429                 set_doc()\r\n    430             self.rl_next_input = None\r\n    431 \r\n    432     def interact(self, display_banner=DISPLAY_BANNER_DEPRECATED):\r\n    433 \r\n    434         if display_banner is not DISPLAY_BANNER_DEPRECATED:\r\n    435             warn('interact `display_banner` argument is deprecated since IPython 5.0. Call `show_banner()` if needed.', DeprecationWarning, stacklevel=2)\r\n    436 \r\n    437         self.keep_running = True\r\n    438         while self.keep_running:\r\n    439             print(self.separate_in, end='')\r\n    440 \r\n    441             try:\r\n--> 442                 code = self.prompt_for_code()\r\n        code = 'deeplabcut.label_frames(config_path)'\r\n        self.prompt_for_code = <bound method TerminalInteractiveShell.prompt_for_code of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x1102d5278>>\r\n    443             except EOFError:\r\n    444                 if (not self.confirm_exit) \\\r\n    445                         or self.ask_yes_no('Do you really want to exit ([y]/n)?','y','n'):\r\n    446                     self.ask_exit()\r\n    447 \r\n    448             else:\r\n    449                 if code:\r\n    450                     self.run_cell(code, store_history=True)\r\n    451 \r\n    452     def mainloop(self, display_banner=DISPLAY_BANNER_DEPRECATED):\r\n    453         # An extra layer of protection in case someone mashing Ctrl-C breaks\r\n    454         # out of our internal code.\r\n    455         if display_banner is not DISPLAY_BANNER_DEPRECATED:\r\n    456             warn('mainloop `display_banner` argument is deprecated since IPython 5.0. Call `show_banner()` if needed.', DeprecationWarning, stacklevel=2)\r\n    457         while True:\r\n\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/IPython/terminal/interactiveshell.py in prompt_for_code(self=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>)\r\n    340                         processor=HighlightMatchingBracketProcessor(chars='[](){}'),\r\n    341                         filter=HasFocus(DEFAULT_BUFFER) & ~IsDone() &\r\n    342                             Condition(lambda cli: self.highlight_matching_brackets))],\r\n    343                 }\r\n    344 \r\n    345     def _update_layout(self):\r\n    346         \"\"\"\r\n    347         Ask for a re computation of the application layout, if for example ,\r\n    348         some configuration options have changed.\r\n    349         \"\"\"\r\n    350         if self._pt_app:\r\n    351             self._pt_app.layout = create_prompt_layout(**self._layout_options())\r\n    352 \r\n    353     def prompt_for_code(self):\r\n    354         document = self.pt_cli.run(\r\n--> 355             pre_run=self.pre_prompt, reset_current_buffer=True)\r\n        global pre_run = undefined\r\n        self.pre_prompt = <bound method TerminalInteractiveShell.pre_prompt of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x1102d5278>>\r\n        global reset_current_buffer = undefined\r\n    356         return document.text\r\n    357 \r\n    358     def enable_win_unicode_console(self):\r\n    359         if sys.version_info >= (3, 6):\r\n    360             # Since PEP 528, Python uses the unicode APIs for the Windows\r\n    361             # console by default, so WUC shouldn't be needed.\r\n    362             return\r\n    363 \r\n    364         import win_unicode_console\r\n    365         win_unicode_console.enable()\r\n    366 \r\n    367     def init_io(self):\r\n    368         if sys.platform not in {'win32', 'cli'}:\r\n    369             return\r\n    370 \r\n\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/prompt_toolkit/interface.py in run(self=<prompt_toolkit.interface.CommandLineInterface object>, reset_current_buffer=True, pre_run=<bound method TerminalInteractiveShell.pre_promp...nteractiveshell.TerminalInteractiveShell object>>)\r\n    400 \r\n    401         try:\r\n    402             self._is_running = True\r\n    403 \r\n    404             self.on_start.fire()\r\n    405             self.reset()\r\n    406 \r\n    407             # Call pre_run.\r\n    408             self._pre_run(pre_run)\r\n    409 \r\n    410             # Run eventloop in raw mode.\r\n    411             with self.input.raw_mode():\r\n    412                 self.renderer.request_absolute_cursor_position()\r\n    413                 self._redraw()\r\n    414 \r\n--> 415                 self.eventloop.run(self.input, self.create_eventloop_callbacks())\r\n        self.eventloop.run = <bound method PosixEventLoop.run of <prompt_toolkit.eventloop.posix.PosixEventLoop object at 0x111684ba8>>\r\n        self.input = StdinInput(stdin=<_io.TextIOWrapper name='<stdin>' mode='r' encoding='UTF-8'>)\r\n        self.create_eventloop_callbacks = <bound method CommandLineInterface.create_eventloop_callbacks of <prompt_toolkit.interface.CommandLineInterface object at 0x111695390>>\r\n    416         finally:\r\n    417             # Clean up renderer. (This will leave the alternate screen, if we use\r\n    418             # that.)\r\n    419 \r\n    420             # If exit/abort haven't been called set, but another exception was\r\n    421             # thrown instead for some reason, make sure that we redraw in exit\r\n    422             # mode.\r\n    423             if not self.is_done:\r\n    424                 self._exit_flag = True\r\n    425                 self._redraw()\r\n    426 \r\n    427             self.renderer.reset()\r\n    428             self.on_stop.fire()\r\n    429             self._is_running = False\r\n    430 \r\n\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/prompt_toolkit/eventloop/posix.py in run(self=<prompt_toolkit.eventloop.posix.PosixEventLoop object>, stdin=StdinInput(stdin=<_io.TextIOWrapper name='<stdin>' mode='r' encoding='UTF-8'>), callbacks=<prompt_toolkit.interface._InterfaceEventLoopCallbacks object>)\r\n     87             # Quit when the input stream was closed.\r\n     88             if stdin_reader.closed:\r\n     89                 self.stop()\r\n     90 \r\n     91         self.add_reader(stdin, read_from_stdin)\r\n     92         self.add_reader(self._schedule_pipe[0], None)\r\n     93 \r\n     94         with ctx:\r\n     95             while self._running:\r\n     96                 # Call inputhook.\r\n     97                 if self._inputhook_context:\r\n     98                     with TimeIt() as inputhook_timer:\r\n     99                         def ready(wait):\r\n    100                             \" True when there is input ready. The inputhook should return control. \"\r\n    101                             return self._ready_for_reading(current_timeout[0] if wait else 0) != []\r\n--> 102                         self._inputhook_context.call_inputhook(ready)\r\n        self._inputhook_context.call_inputhook = <bound method InputHookContext.call_inputhook of <prompt_toolkit.eventloop.inputhook.InputHookContext object at 0x1116952e8>>\r\n        ready = <function PosixEventLoop.run.<locals>.ready at 0x1416e2b70>\r\n    103                     inputhook_duration = inputhook_timer.duration\r\n    104                 else:\r\n    105                     inputhook_duration = 0\r\n    106 \r\n    107                 # Calculate remaining timeout. (The inputhook consumed some of the time.)\r\n    108                 if current_timeout[0] is None:\r\n    109                     remaining_timeout = None\r\n    110                 else:\r\n    111                     remaining_timeout = max(0, current_timeout[0] - inputhook_duration)\r\n    112 \r\n    113                 # Wait until input is ready.\r\n    114                 fds = self._ready_for_reading(remaining_timeout)\r\n    115 \r\n    116                 # When any of the FDs are ready. Call the appropriate callback.\r\n    117                 if fds:\r\n\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/prompt_toolkit/eventloop/inputhook.py in call_inputhook(self=<prompt_toolkit.eventloop.inputhook.InputHookContext object>, input_is_ready_func=<function PosixEventLoop.run.<locals>.ready>)\r\n     59 \r\n     60     def call_inputhook(self, input_is_ready_func):\r\n     61         \"\"\"\r\n     62         Call the inputhook. (Called by a prompt-toolkit eventloop.)\r\n     63         \"\"\"\r\n     64         self._input_is_ready = input_is_ready_func\r\n     65 \r\n     66         # Start thread that activates this pipe when there is input to process.\r\n     67         def thread():\r\n     68             input_is_ready_func(wait=True)\r\n     69             os.write(self._w, b'x')\r\n     70 \r\n     71         threading.Thread(target=thread).start()\r\n     72 \r\n     73         # Call inputhook.\r\n---> 74         self.inputhook(self)\r\n        self.inputhook = <bound method TerminalInteractiveShell.inputhook of <IPython.terminal.interactiveshell.TerminalInteractiveShell object at 0x1102d5278>>\r\n        self = <prompt_toolkit.eventloop.inputhook.InputHookContext object at 0x1116952e8>\r\n     75 \r\n     76         # Flush the read end of the pipe.\r\n     77         try:\r\n     78             # Before calling 'os.read', call select.select. This is required\r\n     79             # when the gevent monkey patch has been applied. 'os.read' is never\r\n     80             # monkey patched and won't be cooperative, so that would block all\r\n     81             # other select() calls otherwise.\r\n     82             # See: http://www.gevent.org/gevent.os.html\r\n     83 \r\n     84             # Note: On Windows, this is apparently not an issue.\r\n     85             #       However, if we would ever want to add a select call, it\r\n     86             #       should use `windll.kernel32.WaitForMultipleObjects`,\r\n     87             #       because `select.select` can't wait for a pipe on Windows.\r\n     88             if not is_windows():\r\n     89                 select_fds([self._r], timeout=None)\r\n\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/IPython/terminal/interactiveshell.py in inputhook(self=<IPython.terminal.interactiveshell.TerminalInteractiveShell object>, context=<prompt_toolkit.eventloop.inputhook.InputHookContext object>)\r\n    459                 self.interact()\r\n    460                 break\r\n    461             except KeyboardInterrupt as e:\r\n    462                 print(\"\\n%s escaped interact()\\n\" % type(e).__name__)\r\n    463             finally:\r\n    464                 # An interrupt during the eventloop will mess up the\r\n    465                 # internal state of the prompt_toolkit library.\r\n    466                 # Stopping the eventloop fixes this, see\r\n    467                 # https://github.com/ipython/ipython/pull/9867\r\n    468                 if hasattr(self, '_eventloop'):\r\n    469                     self._eventloop.stop()\r\n    470 \r\n    471     _inputhook = None\r\n    472     def inputhook(self, context):\r\n    473         if self._inputhook is not None:\r\n--> 474             self._inputhook(context)\r\n        self._inputhook = <function inputhook_wx2 at 0x11dd02e18>\r\n        context = <prompt_toolkit.eventloop.inputhook.InputHookContext object at 0x1116952e8>\r\n    475 \r\n    476     active_eventloop = None\r\n    477     def enable_gui(self, gui=None):\r\n    478         if gui:\r\n    479             self.active_eventloop, self._inputhook =\\\r\n    480                 get_inputhook_name_and_func(gui)\r\n    481         else:\r\n    482             self.active_eventloop = self._inputhook = None\r\n    483 \r\n    484     # Run !system commands directly, not through pipes, so terminal programs\r\n    485     # work correctly.\r\n    486     system = InteractiveShell.system_raw\r\n    487 \r\n    488     def auto_rewrite_input(self, cmd):\r\n    489         \"\"\"Overridden from the parent class to use fancy rewriting prompt\"\"\"\r\n\r\n/Users/Tristan/anaconda3/envs/dlc-macOS-CPU/lib/python3.6/site-packages/IPython/terminal/pt_inputhooks/wx.py in inputhook_wx2(context=<prompt_toolkit.eventloop.inputhook.InputHookContext object>)\r\n     60 \r\n     61     This version runs the wx eventloop for an undetermined amount of time,\r\n     62     during which it periodically checks to see if anything is ready on\r\n     63     stdin.  If anything is ready on stdin, the event loop exits.\r\n     64 \r\n     65     The argument to elr.Run controls how often the event loop looks at stdin.\r\n     66     This determines the responsiveness at the keyboard.  A setting of 1000\r\n     67     enables a user to type at most 1 char per second.  I have found that a\r\n     68     setting of 10 gives good keyboard response.  We can shorten it further,\r\n     69     but eventually performance would suffer from calling select/kbhit too\r\n     70     often.\r\n     71     \"\"\"\r\n     72     try:\r\n     73         app = wx.GetApp()\r\n     74         if app is not None:\r\n---> 75             assert wx.Thread_IsMain()\r\n        global wx.Thread_IsMain = undefined\r\n     76             elr = EventLoopRunner()\r\n     77             # As this time is made shorter, keyboard response improves, but idle\r\n     78             # CPU load goes up.  10 ms seems like a good compromise.\r\n     79             elr.Run(time=10,  # CHANGE time here to control polling interval\r\n     80                     input_is_ready=context.input_is_ready)\r\n     81     except KeyboardInterrupt:\r\n     82         pass\r\n     83     return 0\r\n     84 \r\n     85 def inputhook_wx3(context):\r\n     86     \"\"\"Run the wx event loop by processing pending events only.\r\n     87 \r\n     88     This is like inputhook_wx1, but it keeps processing pending events\r\n     89     until stdin is ready.  After processing all pending events, a call to\r\n     90     time.sleep is inserted.  This is needed, otherwise, CPU usage is at 100%.\r\n\r\nAttributeError: module 'wx' has no attribute 'Thread_IsMain'\r\n\r\n***************************************************************************\r\n\r\nHistory of session input:import deeplabcutget_ipython().magic('config Application.verbose_crash=True')config_path = '/Users/Tristan/Desktop/Test_deeplabcut_1-Tristan-2019-09-02/config.yaml'deeplabcut.extract_frames(config_path, 'automatic')deeplabcut.label_frames(config_path)\r\n*** Last line of input (may not be in above history):\r\ndeeplabcut.label_frames(config_path)\r\n\r\n```","closed_by":{"login":"MMathisLab","id":28102185,"node_id":"MDQ6VXNlcjI4MTAyMTg1","avatar_url":"https://avatars.githubusercontent.com/u/28102185?v=4","gravatar_id":"","url":"https://api.github.com/users/MMathisLab","html_url":"https://github.com/MMathisLab","followers_url":"https://api.github.com/users/MMathisLab/followers","following_url":"https://api.github.com/users/MMathisLab/following{/other_user}","gists_url":"https://api.github.com/users/MMathisLab/gists{/gist_id}","starred_url":"https://api.github.com/users/MMathisLab/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MMathisLab/subscriptions","organizations_url":"https://api.github.com/users/MMathisLab/orgs","repos_url":"https://api.github.com/users/MMathisLab/repos","events_url":"https://api.github.com/users/MMathisLab/events{/privacy}","received_events_url":"https://api.github.com/users/MMathisLab/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/417/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/417/timeline","performed_via_github_app":null,"state_reason":"completed"}