{"url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1145","repository_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut","labels_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1145/labels{/name}","comments_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1145/comments","events_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1145/events","html_url":"https://github.com/DeepLabCut/DeepLabCut/issues/1145","id":831814235,"node_id":"MDU6SXNzdWU4MzE4MTQyMzU=","number":1145,"title":"corrupt video frames and \"no unfiltered file found\" errors","user":{"login":"backyardbiomech","id":9662673,"node_id":"MDQ6VXNlcjk2NjI2NzM=","avatar_url":"https://avatars.githubusercontent.com/u/9662673?v=4","gravatar_id":"","url":"https://api.github.com/users/backyardbiomech","html_url":"https://github.com/backyardbiomech","followers_url":"https://api.github.com/users/backyardbiomech/followers","following_url":"https://api.github.com/users/backyardbiomech/following{/other_user}","gists_url":"https://api.github.com/users/backyardbiomech/gists{/gist_id}","starred_url":"https://api.github.com/users/backyardbiomech/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/backyardbiomech/subscriptions","organizations_url":"https://api.github.com/users/backyardbiomech/orgs","repos_url":"https://api.github.com/users/backyardbiomech/repos","events_url":"https://api.github.com/users/backyardbiomech/events{/privacy}","received_events_url":"https://api.github.com/users/backyardbiomech/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2021-03-15T13:31:16Z","updated_at":"2021-04-01T12:51:11Z","closed_at":"2021-04-01T12:51:11Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"There have been a number of issues and forum entries reported errors following apparently completed video analysis. Users report \"No unfiltered data file found\" type errors (e.g.: #1141) even though DLC reports \"Analysis completed\".\r\n\r\nWhile there are other causes of this error (e.g. [moving projects between computers](https://forum.image.sc/t/extract-outlier-frames-gui-unable-to-find-analysed-video/49354/11?u=backyardbiomech), or user error in not including tracking method in multi-animal projects), some or most of the errors appear to be caused by corrupted video files or frames, and based on screenshots of the folders containing the targeted videos, `dlc.analyze_videos` simply didn't save any files. \r\n\r\nOpenCV somewhat infamously lacks robustness working with corrupted video files that will play without problems in most media players which suggests the file is uncorrupted. [Re-encoding video files with ffmpeg](https://forum.image.sc/t/analyzing-new-videos-no-data/48313) typically fixes the error, but DeepLabCut (and opencv) provide no warning. In fact, from my own experience, the only indication of a problem while running `dlc.analyze_videos` is that the progress bar stops prematurely. Even in those cases, there is no traceback, the \"success\" message is still printed, and no output files are actually saved.\r\n\r\nIt appears in [`predict_videos.py`](https://github.com/DeepLabCut/DeepLabCut/blob/0f24d32ac57cc1cc0bc60bf8a307211779d736fd/deeplabcut/pose_estimation_tensorflow/predict_videos.py#L419) that the strategy is to create data frames of zeros, and then to continue over corrupted frames by simply not writing data to that row. But in some cases, no data file ends up being saved. I'm hypothesizing that some forms of corruption, probably in the header/metadata, are more fatal so this frame skipping method doesn't work. But it's not clear why no traceback is produced.\r\n\r\nI think a relatively easy (and informative fix) would be a simple print alerting to skipped frames, the possibility of no data file being saved, and the solution of re-encoding the video with ffmpeg.\r\n\r\nI'm not at my development computer right now, but I think adding in something like the following would help:\r\nAfter the `if ret:` [operations](https://github.com/DeepLabCut/DeepLabCut/blob/0f24d32ac57cc1cc0bc60bf8a307211779d736fd/deeplabcut/pose_estimation_tensorflow/predict_videos.py#L435)\r\n\r\n```python\r\nelif counter < nframes:\r\n    print(\"possible corrupt frame encountered...if no .pickle, .meta, or .h5 files are saved for the video, consider re-encoding the video with ffmpeg\")\r\n```\r\n\r\nWithout a `break`, that would allow the analysis to continue in case the corruption is minor enough to allow completion, but would inform the user of the problem. \r\n\r\nOf course, it would print with each skipped frame, so this could get messy. As an alternative, you could set a variable `corrupt_frame=True` in the loop, with a single conditional print instance after the loop. \r\n\r\nIf I can find a corrupt video to test on, I'll see if I can test a PR, but it might be a while. \r\n","closed_by":{"login":"backyardbiomech","id":9662673,"node_id":"MDQ6VXNlcjk2NjI2NzM=","avatar_url":"https://avatars.githubusercontent.com/u/9662673?v=4","gravatar_id":"","url":"https://api.github.com/users/backyardbiomech","html_url":"https://github.com/backyardbiomech","followers_url":"https://api.github.com/users/backyardbiomech/followers","following_url":"https://api.github.com/users/backyardbiomech/following{/other_user}","gists_url":"https://api.github.com/users/backyardbiomech/gists{/gist_id}","starred_url":"https://api.github.com/users/backyardbiomech/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/backyardbiomech/subscriptions","organizations_url":"https://api.github.com/users/backyardbiomech/orgs","repos_url":"https://api.github.com/users/backyardbiomech/repos","events_url":"https://api.github.com/users/backyardbiomech/events{/privacy}","received_events_url":"https://api.github.com/users/backyardbiomech/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1145/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1145/timeline","performed_via_github_app":null,"state_reason":"completed"}