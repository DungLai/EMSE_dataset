{"url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/849","repository_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut","labels_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/849/labels{/name}","comments_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/849/comments","events_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/849/events","html_url":"https://github.com/DeepLabCut/DeepLabCut/issues/849","id":678729905,"node_id":"MDU6SXNzdWU2Nzg3Mjk5MDU=","number":849,"title":"Copy labels from previous image","user":{"login":"nishbo","id":3775317,"node_id":"MDQ6VXNlcjM3NzUzMTc=","avatar_url":"https://avatars.githubusercontent.com/u/3775317?v=4","gravatar_id":"","url":"https://api.github.com/users/nishbo","html_url":"https://github.com/nishbo","followers_url":"https://api.github.com/users/nishbo/followers","following_url":"https://api.github.com/users/nishbo/following{/other_user}","gists_url":"https://api.github.com/users/nishbo/gists{/gist_id}","starred_url":"https://api.github.com/users/nishbo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nishbo/subscriptions","organizations_url":"https://api.github.com/users/nishbo/orgs","repos_url":"https://api.github.com/users/nishbo/repos","events_url":"https://api.github.com/users/nishbo/events{/privacy}","received_events_url":"https://api.github.com/users/nishbo/received_events","type":"User","site_admin":false},"labels":[{"id":1013047008,"node_id":"MDU6TGFiZWwxMDEzMDQ3MDA4","url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/labels/Feature-request","name":"Feature-request","color":"3cc9b1","default":false,"description":""},{"id":1313079487,"node_id":"MDU6TGFiZWwxMzEzMDc5NDg3","url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/labels/howtousedlc","name":"howtousedlc","color":"a1b3f4","default":false,"description":"issue regarding the use of DeepLabCut"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2020-08-13T20:58:08Z","updated_at":"2020-08-29T14:02:32Z","closed_at":"2020-08-29T14:02:32Z","author_association":"NONE","active_lock_reason":null,"body":"Hi, we label a lot of images, and on some of them the markers barely move or don't move at all during some portions of movements, e.g. shoulder during finger manipulation. For that, I have written a small routine that checks several previous frames and copies the marker position from the previous image if the marker has not moved much.\r\nThis was inserted into generate_training_dataset/labeling_toolbox.py:572\r\n```\r\n        # copy over labels\r\n        is_this_labeled = any([not np.isnan(self.dataFrame[self.scorer][bp]['x'].values[self.iter])\r\n                               for bpindex, bp in enumerate(self.bodyparts)]) \r\n        num_prev_frames = 3\r\n        pixel_distance_threshold = 10\r\n        if self.iter > 1 and not is_this_labeled:\r\n            start_copy_frame = max(1, self.iter-num_prev_frames)\r\n            prev_labeled_bps = []\r\n            prev_labeled_bpindexes = []\r\n            for bpindex, bp in enumerate(self.bodyparts):\r\n                if not np.isnan(self.dataFrame[self.scorer][bp]['x'].values[self.iter-1]):\r\n                    prev_labeled_bps.append(bp)\r\n                    prev_labeled_bpindexes.append(bpindex)\r\n            for bpindex, bp in zip(prev_labeled_bpindexes, prev_labeled_bps):\r\n                xs = []\r\n                ys = []\r\n                for frame_index in range(start_copy_frame, self.iter):\r\n                    xs.append(self.dataFrame[self.scorer][bp]['x'].values[frame_index])\r\n                    ys.append(self.dataFrame[self.scorer][bp]['y'].values[frame_index])\r\n                if not any(np.isnan(x) for x in xs) and (np.std(xs)**2+np.std(ys)**2)**0.5 < pixel_distance_threshold:\r\n                        self.rdb.SetSelection(bpindex)\r\n                        event2 = wx._core.CommandEvent()\r\n                        event2.xdata = self.dataFrame[self.scorer][bp]['x'].values[self.iter-1]\r\n                        event2.ydata = self.dataFrame[self.scorer][bp]['y'].values[self.iter-1]\r\n                        event2.button = 3\r\n                        self.onClick(event2)\r\n```\r\nIt has several parameters that should be available to the user, like:\r\n`num_prev_frames` - number of frames to be checked for marker movement;\r\n`pixel_distance_threshold` - allowed 2D deviation of the marker position for the marker to be considered \"not moving\".\r\n\r\nIt calls OnClick event to place the markers, which makes them appear gradually on the screen, and some users liked that as a visual indication of the procedure.\r\n\r\nI am not sure of the best way to integrate it into DLC config, so I am just leaving it here as a suggestion.","closed_by":{"login":"MMathisLab","id":28102185,"node_id":"MDQ6VXNlcjI4MTAyMTg1","avatar_url":"https://avatars.githubusercontent.com/u/28102185?v=4","gravatar_id":"","url":"https://api.github.com/users/MMathisLab","html_url":"https://github.com/MMathisLab","followers_url":"https://api.github.com/users/MMathisLab/followers","following_url":"https://api.github.com/users/MMathisLab/following{/other_user}","gists_url":"https://api.github.com/users/MMathisLab/gists{/gist_id}","starred_url":"https://api.github.com/users/MMathisLab/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MMathisLab/subscriptions","organizations_url":"https://api.github.com/users/MMathisLab/orgs","repos_url":"https://api.github.com/users/MMathisLab/repos","events_url":"https://api.github.com/users/MMathisLab/events{/privacy}","received_events_url":"https://api.github.com/users/MMathisLab/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/849/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/849/timeline","performed_via_github_app":null,"state_reason":"completed"}