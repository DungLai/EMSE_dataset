{"url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1062","repository_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut","labels_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1062/labels{/name}","comments_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1062/comments","events_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1062/events","html_url":"https://github.com/DeepLabCut/DeepLabCut/issues/1062","id":778816496,"node_id":"MDU6SXNzdWU3Nzg4MTY0OTY=","number":1062,"title":"Running Testscript.py leads to endless loop, only on windows","user":{"login":"FactoryXCode","id":41634066,"node_id":"MDQ6VXNlcjQxNjM0MDY2","avatar_url":"https://avatars.githubusercontent.com/u/41634066?v=4","gravatar_id":"","url":"https://api.github.com/users/FactoryXCode","html_url":"https://github.com/FactoryXCode","followers_url":"https://api.github.com/users/FactoryXCode/followers","following_url":"https://api.github.com/users/FactoryXCode/following{/other_user}","gists_url":"https://api.github.com/users/FactoryXCode/gists{/gist_id}","starred_url":"https://api.github.com/users/FactoryXCode/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FactoryXCode/subscriptions","organizations_url":"https://api.github.com/users/FactoryXCode/orgs","repos_url":"https://api.github.com/users/FactoryXCode/repos","events_url":"https://api.github.com/users/FactoryXCode/events{/privacy}","received_events_url":"https://api.github.com/users/FactoryXCode/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":{"login":"jeylau","id":30733203,"node_id":"MDQ6VXNlcjMwNzMzMjAz","avatar_url":"https://avatars.githubusercontent.com/u/30733203?v=4","gravatar_id":"","url":"https://api.github.com/users/jeylau","html_url":"https://github.com/jeylau","followers_url":"https://api.github.com/users/jeylau/followers","following_url":"https://api.github.com/users/jeylau/following{/other_user}","gists_url":"https://api.github.com/users/jeylau/gists{/gist_id}","starred_url":"https://api.github.com/users/jeylau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeylau/subscriptions","organizations_url":"https://api.github.com/users/jeylau/orgs","repos_url":"https://api.github.com/users/jeylau/repos","events_url":"https://api.github.com/users/jeylau/events{/privacy}","received_events_url":"https://api.github.com/users/jeylau/received_events","type":"User","site_admin":false},"assignees":[{"login":"jeylau","id":30733203,"node_id":"MDQ6VXNlcjMwNzMzMjAz","avatar_url":"https://avatars.githubusercontent.com/u/30733203?v=4","gravatar_id":"","url":"https://api.github.com/users/jeylau","html_url":"https://github.com/jeylau","followers_url":"https://api.github.com/users/jeylau/followers","following_url":"https://api.github.com/users/jeylau/following{/other_user}","gists_url":"https://api.github.com/users/jeylau/gists{/gist_id}","starred_url":"https://api.github.com/users/jeylau/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeylau/subscriptions","organizations_url":"https://api.github.com/users/jeylau/orgs","repos_url":"https://api.github.com/users/jeylau/repos","events_url":"https://api.github.com/users/jeylau/events{/privacy}","received_events_url":"https://api.github.com/users/jeylau/received_events","type":"User","site_admin":false}],"milestone":null,"comments":7,"created_at":"2021-01-05T09:44:44Z","updated_at":"2021-01-05T23:52:16Z","closed_at":"2021-01-05T23:51:32Z","author_association":"NONE","active_lock_reason":null,"body":"**Describe the bug**\r\n\r\nWhile running DLC-CPU and DLC-GPU on two different systems the script hangs in an endless loop of initializing the script. \r\n\r\n**Desktop (please complete the following information about your system):**\r\n - OS: Windows 10 Pro version 20H2 build build 19042.685 \r\n - System: HP Envi i9, 32 mb, RTX 2060 running DLC-GPU and hp Spectre i7 10thgen, 16mb, MX330 running DLC-CPU. \r\n - DeepLabCut Version 2.1.9\r\n - DeepLabCut testscript.py\r\n\r\n**To Reproduce**\r\nRun the testscript in DLC-CPU or DLC-GPU.\r\nUntil line 183 (print(\"CREATE VIDEO\")) all runs as expected.\r\nOn method deeplabcut.create_labeled_video the script hangs in an infinitive loop of Importing DLC.\r\nThis can only be ended with a hard reset.\r\n\r\n<details><summary>TRACEBACK</summary><p>\r\n\r\n```python\r\n\r\n^do not delete the above \"<details><summary>TRACEBACK</summary><p>\" or the ```python part!\r\n#!/usr/bin/env python3\r\n# -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Tue Oct  2 13:56:11 2018\r\n@author: alex\r\n\r\nDEVELOPERS:\r\nThis script tests various functionalities in an automatic way.\r\n\r\nIt should take about 3:30 minutes to run this in a CPU.\r\nIt should take about 1:30 minutes on a GPU (incl. downloading the ResNet weights)\r\n\r\nIt produces nothing of interest scientifically.\r\n\"\"\"\r\n\r\ntask = \"TEST\"  # Enter the name of your experiment Task\r\nscorer = \"Alex\"  # Enter the name of the experimenter/labeler\r\n\r\nimport os, subprocess, deeplabcut\r\nfrom pathlib import Path\r\nimport pandas as pd\r\nimport numpy as np\r\nimport platform\r\n\r\nprint(\"Imported DLC!\")\r\nbasepath = os.path.dirname(os.path.abspath(\"testscript.py\"))\r\nvideoname = \"reachingvideo1\"\r\nvideo = [\r\n    os.path.join(\r\n        basepath, \"Reaching-Mackenzie-2018-08-30\", \"videos\", videoname + \".avi\"\r\n    )\r\n]\r\n\r\n# For testing a color video:\r\n# videoname='baby4hin2min'\r\n# video=[os.path.join('/home/alex/Desktop/Data',videoname+'.mp4')]\r\n# to test destination folder:\r\n# dfolder=basepath\r\n\r\ndfolder = None\r\nnet_type = \"resnet_50\"  #'mobilenet_v2_0.35' #'resnet_50'\r\naugmenter_type = \"default\"  # = imgaug!!\r\naugmenter_type2 = \"scalecrop\"\r\n\r\nif platform.system() == \"Darwin\" or platform.system() == \"Windows\":\r\n    print(\"On Windows/OSX tensorpack is not tested by default.\")\r\n    augmenter_type3 = \"imgaug\"\r\nelse:\r\n    augmenter_type3 = \"tensorpack\"  # Does not work on WINDOWS\r\n\r\nnumiter = 5\r\n\r\nprint(\"CREATING PROJECT\")\r\npath_config_file = deeplabcut.create_new_project(task, scorer, video, copy_videos=True)\r\n\r\ncfg = deeplabcut.auxiliaryfunctions.read_config(path_config_file)\r\ncfg[\"numframes2pick\"] = 5\r\ncfg[\"pcutoff\"] = 0.01\r\ncfg[\"TrainingFraction\"] = [0.8]\r\ncfg[\"skeleton\"] = [[\"bodypart1\", \"bodypart2\"], [\"bodypart1\", \"bodypart3\"]]\r\n\r\ndeeplabcut.auxiliaryfunctions.write_config(path_config_file, cfg)\r\n\r\nprint(\"EXTRACTING FRAMES\")\r\ndeeplabcut.extract_frames(path_config_file, mode=\"automatic\", userfeedback=False)\r\n\r\nprint(\"CREATING-SOME LABELS FOR THE FRAMES\")\r\nframes = os.listdir(os.path.join(cfg[\"project_path\"], \"labeled-data\", videoname))\r\n# As this next step is manual, we update the labels by putting them on the diagonal (fixed for all frames)\r\nfor index, bodypart in enumerate(cfg[\"bodyparts\"]):\r\n    columnindex = pd.MultiIndex.from_product(\r\n        [[scorer], [bodypart], [\"x\", \"y\"]], names=[\"scorer\", \"bodyparts\", \"coords\"]\r\n    )\r\n    frame = pd.DataFrame(\r\n        100 + np.ones((len(frames), 2)) * 50 * index,\r\n        columns=columnindex,\r\n        index=[os.path.join(\"labeled-data\", videoname, fn) for fn in frames],\r\n    )\r\n    if index == 0:\r\n        dataFrame = frame\r\n    else:\r\n        dataFrame = pd.concat([dataFrame, frame], axis=1)\r\n\r\ndataFrame.to_csv(\r\n    os.path.join(\r\n        cfg[\"project_path\"],\r\n        \"labeled-data\",\r\n        videoname,\r\n        \"CollectedData_\" + scorer + \".csv\",\r\n    )\r\n)\r\ndataFrame.to_hdf(\r\n    os.path.join(\r\n        cfg[\"project_path\"],\r\n        \"labeled-data\",\r\n        videoname,\r\n        \"CollectedData_\" + scorer + \".h5\",\r\n    ),\r\n    \"df_with_missing\",\r\n    format=\"table\",\r\n    mode=\"w\",\r\n)\r\n\r\nprint(\"Plot labels...\")\r\n\r\ndeeplabcut.check_labels(path_config_file)\r\n\r\nprint(\"CREATING TRAININGSET\")\r\ndeeplabcut.create_training_dataset(\r\n    path_config_file, net_type=net_type, augmenter_type=augmenter_type\r\n)\r\n\r\nposefile = os.path.join(\r\n    cfg[\"project_path\"],\r\n    \"dlc-models/iteration-\"\r\n    + str(cfg[\"iteration\"])\r\n    + \"/\"\r\n    + cfg[\"Task\"]\r\n    + cfg[\"date\"]\r\n    + \"-trainset\"\r\n    + str(int(cfg[\"TrainingFraction\"][0] * 100))\r\n    + \"shuffle\"\r\n    + str(1),\r\n    \"train/pose_cfg.yaml\",\r\n)\r\n\r\nDLC_config = deeplabcut.auxiliaryfunctions.read_plainconfig(posefile)\r\nDLC_config[\"save_iters\"] = numiter\r\nDLC_config[\"display_iters\"] = 2\r\nDLC_config[\"multi_step\"] = [[0.001, numiter]]\r\n\r\nprint(\"CHANGING training parameters to end quickly!\")\r\ndeeplabcut.auxiliaryfunctions.write_plainconfig(posefile, DLC_config)\r\n\r\nprint(\"TRAIN\")\r\ndeeplabcut.train_network(path_config_file)\r\n\r\nprint(\"EVALUATE\")\r\ndeeplabcut.evaluate_network(path_config_file, plotting=True)\r\n# deeplabcut.evaluate_network(path_config_file,plotting=True,trainingsetindex=33)\r\nprint(\"CUT SHORT VIDEO AND ANALYZE (with dynamic cropping!)\")\r\n\r\n# Make super short video (so the analysis is quick!)\r\n\r\ntry:  # you need ffmpeg command line interface\r\n    # subprocess.call(['ffmpeg','-i',video[0],'-ss','00:00:00','-to','00:00:00.4','-c','copy',newvideo])\r\n    newvideo = deeplabcut.ShortenVideo(\r\n        video[0],\r\n        start=\"00:00:00\",\r\n        stop=\"00:00:01\",\r\n        outsuffix=\"short\",\r\n        outpath=os.path.join(cfg[\"project_path\"], \"videos\"),\r\n    )\r\nexcept:  # if ffmpeg is broken/missing\r\n    print(\"using alternative method\")\r\n    newvideo = os.path.join(cfg[\"project_path\"], \"videos\", videoname + \"short.mp4\")\r\n    from moviepy.editor import VideoFileClip, VideoClip\r\n\r\n    clip = VideoFileClip(video[0])\r\n    clip.reader.initialize()\r\n\r\n    def make_frame(t):\r\n        return clip.get_frame(1)\r\n\r\n    newclip = VideoClip(make_frame, duration=1)\r\n    newclip.write_videofile(newvideo, fps=30)\r\n\r\nvname = Path(newvideo).stem\r\n\r\ndeeplabcut.analyze_videos(\r\n    path_config_file,\r\n    [newvideo],\r\n    save_as_csv=True,\r\n    destfolder=dfolder,\r\n    dynamic=(True, 0.1, 5),\r\n)\r\n\r\nprint(\"analyze again...\")\r\ndeeplabcut.analyze_videos(\r\n    path_config_file, [newvideo], save_as_csv=True, destfolder=dfolder\r\n)\r\n\r\nprint(\"CREATE VIDEO\")\r\ndeeplabcut.create_labeled_video(\r\n    path_config_file, [newvideo], destfolder=dfolder, save_frames=True\r\n)\r\n\r\nprint(\"Making plots\")\r\ndeeplabcut.plot_trajectories(path_config_file, [newvideo], destfolder=dfolder)\r\n\r\nprint(\"EXTRACT OUTLIERS\")\r\ndeeplabcut.extract_outlier_frames(\r\n    path_config_file,\r\n    [newvideo],\r\n    outlieralgorithm=\"jump\",\r\n    epsilon=0,\r\n    automatic=True,\r\n    destfolder=dfolder,\r\n)\r\n\r\ndeeplabcut.extract_outlier_frames(\r\n    path_config_file,\r\n    [newvideo],\r\n    outlieralgorithm=\"fitting\",\r\n    automatic=True,\r\n    destfolder=dfolder,\r\n)\r\n\r\nfile = os.path.join(\r\n    cfg[\"project_path\"],\r\n    \"labeled-data\",\r\n    vname,\r\n    \"machinelabels-iter\" + str(cfg[\"iteration\"]) + \".h5\",\r\n)\r\n\r\nprint(\"RELABELING\")\r\nDF = pd.read_hdf(file, \"df_with_missing\")\r\nDLCscorer = np.unique(DF.columns.get_level_values(0))[0]\r\nDF.columns.set_levels([scorer.replace(DLCscorer, scorer)], level=0, inplace=True)\r\nDF = DF.drop(\"likelihood\", axis=1, level=2)\r\nDF.to_csv(\r\n    os.path.join(\r\n        cfg[\"project_path\"], \"labeled-data\", vname, \"CollectedData_\" + scorer + \".csv\"\r\n    )\r\n)\r\nDF.to_hdf(\r\n    os.path.join(\r\n        cfg[\"project_path\"], \"labeled-data\", vname, \"CollectedData_\" + scorer + \".h5\"\r\n    ),\r\n    \"df_with_missing\",\r\n    format=\"table\",\r\n    mode=\"w\",\r\n)\r\n\r\nprint(\"MERGING\")\r\ndeeplabcut.merge_datasets(path_config_file)  # iteration + 1\r\n\r\nprint(\"CREATING TRAININGSET\")\r\ndeeplabcut.create_training_dataset(\r\n    path_config_file, net_type=net_type, augmenter_type=augmenter_type2\r\n)\r\n\r\ncfg = deeplabcut.auxiliaryfunctions.read_config(path_config_file)\r\nposefile = os.path.join(\r\n    cfg[\"project_path\"],\r\n    \"dlc-models/iteration-\"\r\n    + str(cfg[\"iteration\"])\r\n    + \"/\"\r\n    + cfg[\"Task\"]\r\n    + cfg[\"date\"]\r\n    + \"-trainset\"\r\n    + str(int(cfg[\"TrainingFraction\"][0] * 100))\r\n    + \"shuffle\"\r\n    + str(1),\r\n    \"train/pose_cfg.yaml\",\r\n)\r\nDLC_config = deeplabcut.auxiliaryfunctions.read_plainconfig(posefile)\r\nDLC_config[\"save_iters\"] = numiter\r\nDLC_config[\"display_iters\"] = 1\r\nDLC_config[\"multi_step\"] = [[0.001, numiter]]\r\n\r\nprint(\"CHANGING training parameters to end quickly!\")\r\ndeeplabcut.auxiliaryfunctions.write_config(posefile, DLC_config)\r\n\r\nprint(\"TRAIN\")\r\ndeeplabcut.train_network(path_config_file)\r\n\r\ntry:  # you need ffmpeg command line interface\r\n    # subprocess.call(['ffmpeg','-i',video[0],'-ss','00:00:00','-to','00:00:00.4','-c','copy',newvideo])\r\n    newvideo2 = deeplabcut.ShortenVideo(\r\n        video[0],\r\n        start=\"00:00:00\",\r\n        stop=\"00:00:01\",\r\n        outsuffix=\"short2\",\r\n        outpath=os.path.join(cfg[\"project_path\"], \"videos\"),\r\n    )\r\n\r\nexcept:  # if ffmpeg is broken\r\n    newvideo2 = os.path.join(cfg[\"project_path\"], \"videos\", videoname + \"short2.mp4\")\r\n    from moviepy.editor import VideoFileClip, VideoClip\r\n\r\n    clip = VideoFileClip(video[0])\r\n    clip.reader.initialize()\r\n\r\n    def make_frame(t):\r\n        return clip.get_frame(1)\r\n\r\n    newclip = VideoClip(make_frame, duration=1)\r\n    newclip.write_videofile(newvideo2, fps=30)\r\n\r\nvname = Path(newvideo2).stem\r\n\r\nprint(\"Inference with direct cropping\")\r\ndeeplabcut.analyze_videos(\r\n    path_config_file,\r\n    [newvideo2],\r\n    save_as_csv=True,\r\n    destfolder=dfolder,\r\n    cropping=[0, 50, 0, 50],\r\n)\r\n\r\nprint(\"Extracting skeleton distances, filter and plot filtered output\")\r\ndeeplabcut.analyzeskeleton(\r\n    path_config_file, [newvideo2], save_as_csv=True, destfolder=dfolder\r\n)\r\ndeeplabcut.filterpredictions(path_config_file, [newvideo2])\r\n\r\n# deeplabcut.create_labeled_video(path_config_file,[newvideo], destfolder=dfolder,filtered=True)\r\ndeeplabcut.create_labeled_video(\r\n    path_config_file,\r\n    [newvideo2],\r\n    destfolder=dfolder,\r\n    displaycropped=True,\r\n    filtered=True,\r\n)\r\n\r\nprint(\"Creating a Johansson video!\")\r\ndeeplabcut.create_labeled_video(\r\n    path_config_file, [newvideo], destfolder=dfolder, keypoints_only=True\r\n)\r\n\r\ndeeplabcut.plot_trajectories(\r\n    path_config_file, [newvideo2], destfolder=dfolder, filtered=True\r\n)\r\n\r\nprint(\"ALL DONE!!! - default cases without Tensorpack loader are functional.\")\r\n\r\nprint(\"CREATING TRAININGSET for shuffle 2\")\r\nprint(\"will be used for 3D testscript...\")\r\n# TENSORPACK could fail in WINDOWS...\r\ndeeplabcut.create_training_dataset(\r\n    path_config_file, Shuffles=[2], net_type=net_type, augmenter_type=augmenter_type3\r\n)\r\n\r\nposefile = os.path.join(\r\n    cfg[\"project_path\"],\r\n    \"dlc-models/iteration-\"\r\n    + str(cfg[\"iteration\"])\r\n    + \"/\"\r\n    + cfg[\"Task\"]\r\n    + cfg[\"date\"]\r\n    + \"-trainset\"\r\n    + str(int(cfg[\"TrainingFraction\"][0] * 100))\r\n    + \"shuffle\"\r\n    + str(2),\r\n    \"train/pose_cfg.yaml\",\r\n)\r\n\r\nDLC_config = deeplabcut.auxiliaryfunctions.read_plainconfig(posefile)\r\nDLC_config[\"save_iters\"] = 10\r\nDLC_config[\"display_iters\"] = 2\r\nDLC_config[\"multi_step\"] = [[0.001, 10]]\r\n\r\nprint(\"CHANGING training parameters to end quickly!\")\r\ndeeplabcut.auxiliaryfunctions.write_plainconfig(posefile, DLC_config)\r\n\r\nprint(\"TRAINING shuffle 2, with smaller allocated memory\")\r\ndeeplabcut.train_network(path_config_file, shuffle=2, allow_growth=True)\r\n\r\nprint(\"ANALYZING some individual frames\")\r\ndeeplabcut.analyze_time_lapse_frames(\r\n    path_config_file, os.path.join(cfg[\"project_path\"], \"labeled-data/reachingvideo1/\")\r\n)\r\n\r\nprint(\"Export model...\")\r\ndeeplabcut.export_model(path_config_file, shuffle=2, make_tar=False)\r\n\r\n\r\ntrainIndices, testIndices = deeplabcut.mergeandsplit(\r\n    path_config_file, trainindex=0, uniform=True\r\n)\r\n\r\ndeeplabcut.create_training_dataset(\r\n    path_config_file,\r\n    Shuffles=[4, 5],\r\n    trainIndices=[trainIndices, trainIndices],\r\n    testIndices=[testIndices, testIndices],\r\n)\r\n\r\nprint(\"ALL DONE!!! - default cases are functional.\")\r\nprint(\"Re-import DLC with env. variable set to test DLC light mode.\")\r\nos.environ[\"DLClight\"] = \"True\"\r\nsubprocess.call([\"python3\", \"-c\", \"import deeplabcut\"])\r\n\r\ndo not delete below this line, leave the blank line and the ```\r\n\r\n```\r\n</p></details>\r\n\r\n\r\n**Expected behavior**\r\nThe script runs all methods after writing the labeled videofile.\r\n\r\n**Screenshots**\r\n\r\n\r\n\r\n\r\n","closed_by":{"login":"MMathisLab","id":28102185,"node_id":"MDQ6VXNlcjI4MTAyMTg1","avatar_url":"https://avatars.githubusercontent.com/u/28102185?v=4","gravatar_id":"","url":"https://api.github.com/users/MMathisLab","html_url":"https://github.com/MMathisLab","followers_url":"https://api.github.com/users/MMathisLab/followers","following_url":"https://api.github.com/users/MMathisLab/following{/other_user}","gists_url":"https://api.github.com/users/MMathisLab/gists{/gist_id}","starred_url":"https://api.github.com/users/MMathisLab/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MMathisLab/subscriptions","organizations_url":"https://api.github.com/users/MMathisLab/orgs","repos_url":"https://api.github.com/users/MMathisLab/repos","events_url":"https://api.github.com/users/MMathisLab/events{/privacy}","received_events_url":"https://api.github.com/users/MMathisLab/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1062/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/DeepLabCut/DeepLabCut/issues/1062/timeline","performed_via_github_app":null,"state_reason":"completed"}