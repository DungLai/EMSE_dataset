{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/793","repository_url":"https://api.github.com/repos/onnx/sklearn-onnx","labels_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/793/labels{/name}","comments_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/793/comments","events_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/793/events","html_url":"https://github.com/onnx/sklearn-onnx/issues/793","id":1063392173,"node_id":"I_kwDOCa0gS84_YhOt","number":793,"title":"Misalignment between sklearn and onnx definition of Normalizer with Max norm","user":{"login":"ROC5COR","id":5347750,"node_id":"MDQ6VXNlcjUzNDc3NTA=","avatar_url":"https://avatars.githubusercontent.com/u/5347750?v=4","gravatar_id":"","url":"https://api.github.com/users/ROC5COR","html_url":"https://github.com/ROC5COR","followers_url":"https://api.github.com/users/ROC5COR/followers","following_url":"https://api.github.com/users/ROC5COR/following{/other_user}","gists_url":"https://api.github.com/users/ROC5COR/gists{/gist_id}","starred_url":"https://api.github.com/users/ROC5COR/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ROC5COR/subscriptions","organizations_url":"https://api.github.com/users/ROC5COR/orgs","repos_url":"https://api.github.com/users/ROC5COR/repos","events_url":"https://api.github.com/users/ROC5COR/events{/privacy}","received_events_url":"https://api.github.com/users/ROC5COR/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-11-25T10:15:55Z","updated_at":"2021-11-29T14:11:44Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\nUsing sklearn Normalizer(norm=Max) and the onnx version converted via skl2onnx also called Normalizer I get differences when running this layer with sklearn or onnxruntime. \r\nFor the same Normalizer layer used with same inputs parameters I get **negative** outputs with **sklearn** and **positive** outputs with **onnxruntime** !\r\n\r\nDigging into sklearn code I found that the follownig formula was used by sklearn:\r\n![sklearn_norm_code](https://user-images.githubusercontent.com/5347750/143421292-8d22477f-2c24-4ca5-bb74-1092f889a118.png)\r\n\r\nAnd digging into onnxruntime code the following code is used:\r\n![onnxruntime_norm_code](https://user-images.githubusercontent.com/5347750/143421567-2078603f-6f9b-4ac5-a91a-49417b2ffda0.PNG)\r\n\r\nThe main difference here is that sklearn is using an **Absolute** value when computing the max value, while onnxruntime **is not**. \r\nonnxruntime is aligned with its documentation: https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#ai.onnx.ml.Normalizer \r\n\r\nIssue is: what should be the correct implementation of the Normalizer ? Should it use Absolute values or not ? \r\n\r\nThanks","closed_by":null,"reactions":{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/793/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/793/timeline","performed_via_github_app":null,"state_reason":null}