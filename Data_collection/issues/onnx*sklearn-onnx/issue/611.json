{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/611","repository_url":"https://api.github.com/repos/onnx/sklearn-onnx","labels_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/611/labels{/name}","comments_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/611/comments","events_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/611/events","html_url":"https://github.com/onnx/sklearn-onnx/issues/611","id":802793854,"node_id":"MDU6SXNzdWU4MDI3OTM4NTQ=","number":611,"title":"\"Unable to guess ONNX type from type object\" KNN","user":{"login":"gespriella","id":13472010,"node_id":"MDQ6VXNlcjEzNDcyMDEw","avatar_url":"https://avatars.githubusercontent.com/u/13472010?v=4","gravatar_id":"","url":"https://api.github.com/users/gespriella","html_url":"https://github.com/gespriella","followers_url":"https://api.github.com/users/gespriella/followers","following_url":"https://api.github.com/users/gespriella/following{/other_user}","gists_url":"https://api.github.com/users/gespriella/gists{/gist_id}","starred_url":"https://api.github.com/users/gespriella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gespriella/subscriptions","organizations_url":"https://api.github.com/users/gespriella/orgs","repos_url":"https://api.github.com/users/gespriella/repos","events_url":"https://api.github.com/users/gespriella/events{/privacy}","received_events_url":"https://api.github.com/users/gespriella/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2021-02-06T21:18:55Z","updated_at":"2021-02-18T15:51:30Z","closed_at":"2021-02-18T15:51:30Z","author_association":"NONE","active_lock_reason":null,"body":"Hi,\r\nI'm getting this error when trying to save my KNN model as onnx and **y** has string values (that's how it's provided from the fetch_openml call). It works fine when using logisticregression, but fails with KNN on conversion. It does work also if I cast the **y** values to ints, but my guess is it should probably work without needing to do that.\r\n\r\n_NotImplementedError: Unable to guess ONNX type from type object. You may raise an issue at https://github.com/onnx/sklearn-onnx/issues._\r\n\r\nThe code to reproduce is:\r\n`from sklearn.datasets import fetch_openml`\r\n`from sklearn.neighbors import KNeighborsClassifier`\r\n`from skl2onnx import convert_sklearn`\r\n`from skl2onnx.common.data_types import FloatTensorType`\r\n\r\n`X, y = fetch_openml('mnist_784', version=1, return_X_y=True, as_frame=False)`\r\n`MnistModel = KNeighborsClassifier(n_neighbors=6, weights=\"distance\")`\r\n`MnistModel.fit(X, y)`\r\n`initial_types = [('input', FloatTensorType([1, X.shape[1]]))]`\r\n`onx = convert_sklearn(MnistModel, initial_types=initial_types)`\r\n`with open(\"MnistLR.onnx\", \"wb\") as file:`\r\n`    file.write(onx.SerializeToString())`\r\n\r\nIt fails on convert_sklearn.\r\n\r\nHere's the debug info:\r\n\r\n---------------------------------------------------------------------------\r\nNotImplementedError                       Traceback (most recent call last)\r\n<ipython-input-7-cb470d7bec6d> in <module>\r\n      1 initial_types = [('input', FloatTensorType([1, X.shape[1]]))]\r\n----> 2 onx = convert_sklearn(MnistModel, initial_types=initial_types)\r\n      3 with open(\"MnistLR.onnx\", \"wb\") as file:\r\n      4     file.write(onx.SerializeToString())\r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\convert.py in convert_sklearn(model, name, initial_types, doc_string, target_opset, custom_conversion_functions, custom_shape_calculators, custom_parsers, options, dtype, intermediate, white_op, black_op, final_types)\r\n    151 \r\n    152     # Convert our Topology object into ONNX. The outcome is an ONNX model.\r\n--> 153     onnx_model = convert_topology(topology, name, doc_string, target_opset,\r\n    154                                   dtype=dtype, options=options)\r\n    155 \r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\common\\_topology.py in convert_topology(topology, model_name, doc_string, target_opset, channel_first_inputs, dtype, options)\r\n   1052                               type(getattr(operator, 'raw_model', None))))\r\n   1053         container.validate_options(operator)\r\n-> 1054         conv(scope, operator, container)\r\n   1055 \r\n   1056     # Create a graph from its main components\r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\common\\_registration.py in __call__(self, *args)\r\n     27             if args[1].raw_operator is not None:\r\n     28                 args[2]._get_allowed_options(args[1].raw_operator)\r\n---> 29         return self._fct(*args)\r\n     30 \r\n     31     def get_allowed_options(self):\r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\operator_converters\\nearest_neighbours.py in convert_nearest_neighbors_classifier(scope, operator, container)\r\n    369         out_labels = OnnxReshape(res_name, np.array([-1], dtype=np.int64),\r\n    370                                  output_names=out[:1], op_version=opv)\r\n--> 371         out_labels.add_to(scope, container)\r\n    372         probas.add_to(scope, container)\r\n    373 \r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\algebra\\onnx_operator.py in add_to(self, scope, container, operator)\r\n    416                 op_domain=domain, onnx_prefix_name=self.onnx_prefix,\r\n    417                 **kwargs)\r\n--> 418             self.state.run(operator=operator)\r\n    419 \r\n    420     @property\r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\algebra\\graph_state.py in run(self, operator)\r\n    191             inputs = []\r\n    192             for i in self.inputs:\r\n--> 193                 v = self._get_var_name(i, False, operator=operator)\r\n    194                 if v is not None:\r\n    195                     inputs.append(v)\r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\algebra\\graph_state.py in _get_var_name(self, var, unused, operator)\r\n     64             return self._add_constant(var.ConstantValue, var.ImplicitCast)\r\n     65         elif hasattr(var, 'add_to'):\r\n---> 66             var.add_to(self.scope, self.container, operator=operator)\r\n     67             outputs = var.outputs\r\n     68             if isinstance(outputs, list):\r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\algebra\\onnx_operator.py in add_to(self, scope, container, operator)\r\n    416                 op_domain=domain, onnx_prefix_name=self.onnx_prefix,\r\n    417                 **kwargs)\r\n--> 418             self.state.run(operator=operator)\r\n    419 \r\n    420     @property\r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\algebra\\graph_state.py in run(self, operator)\r\n    191             inputs = []\r\n    192             for i in self.inputs:\r\n--> 193                 v = self._get_var_name(i, False, operator=operator)\r\n    194                 if v is not None:\r\n    195                     inputs.append(v)\r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\algebra\\graph_state.py in _get_var_name(self, var, unused, operator)\r\n     62             return self._add_constant(var)\r\n     63         elif hasattr(var, 'ConstantValue'):\r\n---> 64             return self._add_constant(var.ConstantValue, var.ImplicitCast)\r\n     65         elif hasattr(var, 'add_to'):\r\n     66             var.add_to(self.scope, self.container, operator=operator)\r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\algebra\\graph_state.py in _add_constant(self, cst, can_cast)\r\n    119             name = self.scope.get_unique_variable_name(\r\n    120                 self.onnx_prefix + 'cst')\r\n--> 121             cst, ty, astype = _ty_astype(cst)\r\n    122             if astype is not None:\r\n    123                 cst = cst.astype(astype)\r\n\r\n~\\AppData\\Roaming\\Python\\Python38\\site-packages\\skl2onnx\\algebra\\graph_state.py in _ty_astype(cst)\r\n    108                     cst = np.array([s.encode('utf-8') for s in cst])\r\n    109                 else:\r\n--> 110                     raise NotImplementedError(\r\n    111                         \"Unable to guess ONNX type from type {}. \"\r\n    112                         \"You may raise an issue at https://github.com/onnx/\"\r\n\r\nNotImplementedError: Unable to guess ONNX type from type object. You may raise an issue at https://github.com/onnx/sklearn-onnx/issues.","closed_by":{"login":"gespriella","id":13472010,"node_id":"MDQ6VXNlcjEzNDcyMDEw","avatar_url":"https://avatars.githubusercontent.com/u/13472010?v=4","gravatar_id":"","url":"https://api.github.com/users/gespriella","html_url":"https://github.com/gespriella","followers_url":"https://api.github.com/users/gespriella/followers","following_url":"https://api.github.com/users/gespriella/following{/other_user}","gists_url":"https://api.github.com/users/gespriella/gists{/gist_id}","starred_url":"https://api.github.com/users/gespriella/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gespriella/subscriptions","organizations_url":"https://api.github.com/users/gespriella/orgs","repos_url":"https://api.github.com/users/gespriella/repos","events_url":"https://api.github.com/users/gespriella/events{/privacy}","received_events_url":"https://api.github.com/users/gespriella/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/611/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/611/timeline","performed_via_github_app":null,"state_reason":"completed"}