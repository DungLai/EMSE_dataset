{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/678","repository_url":"https://api.github.com/repos/onnx/sklearn-onnx","labels_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/678/labels{/name}","comments_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/678/comments","events_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/678/events","html_url":"https://github.com/onnx/sklearn-onnx/issues/678","id":935035099,"node_id":"MDU6SXNzdWU5MzUwMzUwOTk=","number":678,"title":"Version 1.9 apply_normalizer does not support double","user":{"login":"busFred","id":32878707,"node_id":"MDQ6VXNlcjMyODc4NzA3","avatar_url":"https://avatars.githubusercontent.com/u/32878707?v=4","gravatar_id":"","url":"https://api.github.com/users/busFred","html_url":"https://github.com/busFred","followers_url":"https://api.github.com/users/busFred/followers","following_url":"https://api.github.com/users/busFred/following{/other_user}","gists_url":"https://api.github.com/users/busFred/gists{/gist_id}","starred_url":"https://api.github.com/users/busFred/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/busFred/subscriptions","organizations_url":"https://api.github.com/users/busFred/orgs","repos_url":"https://api.github.com/users/busFred/repos","events_url":"https://api.github.com/users/busFred/events{/privacy}","received_events_url":"https://api.github.com/users/busFred/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-07-01T16:50:55Z","updated_at":"2021-07-15T13:18:30Z","closed_at":"2021-07-15T13:18:30Z","author_association":"NONE","active_lock_reason":null,"body":"In my converter function, I have the following.\r\n```\r\ndef spherical_kmeans_converter(scope: Scope, operator: Operator,\r\n                               container: ModelComponentContainer):\r\n    \"\"\"The ONNX converter for sklearn_plugins.cluster.SphericalKMeans.\r\n\r\n    Original SphericalKMeans Implementation:\r\n    ```\r\n    # preprocess input\r\n    if skm.normalize:\r\n        X = normalize(X, norm=\"l2\", axis=1, copy=skm.copy)\r\n    # each features in the dataset has zero mean and unit variance; dataset level\r\n    if skm.standarize:\r\n        X = skm.__std_scalar_.transform(X, copy=copy)\r\n    # PCA whiten\r\n    X = skm.__pca_.transform(X)\r\n    # calculate projection\r\n    proj: np.ndarray = np.matmul(X, centroids)\r\n    # calculate lables\r\n    labels: np.ndarray = np.argmax(S_proj, axis=1)\r\n    ```\r\n\r\n    Args:\r\n        scope (Scope): [description]\r\n        operator (Operator): [description]\r\n        container (ModelComponentContainer): [description]\r\n    \"\"\"\r\n    skm: SphericalKMeans = operator.raw_operator\r\n    op_version: Union[int, None] = container.target_opset\r\n    op_outputs: List[Variable] = operator.outputs\r\n    # retreive input\r\n    input: Variable = operator.inputs[0]\r\n    np_dtype = guess_numpy_type(input.type)\r\n    # normalize input\r\n    normalize_op: Union[OnnxOperator, Variable] = input\r\n    if skm.normalize == True:\r\n        normalize_op = OnnxSubEstimator(Normalizer(norm=\"l2\"),\r\n                                        normalize_op,\r\n                                        op_versionrow_norms=op_version)\r\n        # normalize_op = OnnxNormalizer(input, norm=\"L2\", op_version=op_version)\r\n    # standardize input\r\n    std_scalar_op: Union[OnnxOperator, Variable] = normalize_op\r\n    if skm.standardize == True:\r\n        std_scalar_op = OnnxSubEstimator(skm.std_scalar_,\r\n                                         normalize_op,\r\n                                         op_versionrow_norms=op_version)\r\n    # pca whitening\r\n    pca_op: OnnxOperator = OnnxSubEstimator(skm.pca_,\r\n                                            std_scalar_op,\r\n                                            op_version=op_version)\r\n    # calculate projection\r\n    proj_op: OnnxOperator = OnnxMatMul(pca_op,\r\n                                       skm.centroids_.astype(np_dtype),\r\n                                       op_version=op_version,\r\n                                       output_names=[op_outputs[1]])\r\n    proj_op.add_to(scope=scope, container=container)\r\n    labels_op: OnnxOperator = OnnxArgMax(proj_op,\r\n                                         op_version=op_version,\r\n                                         output_names=[op_outputs[0]])\r\n    labels_op.add_to(scope=scope, container=container)\r\n```\r\nWhen I try to convert the model with the following:\r\n```\r\nonx: ModelProto\r\ntry:\r\n    onx = to_onnx(skm, X.astype(np.float64))\r\nexcept Exception as e:\r\n    traceback.print_exception(type(e), e, e.__traceback__)\r\n```\r\nI get the following exception:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/fred/Documents/research/sklearn_plugins/test/sklearn_plugins/cluster/test_spherical_kmeans_export.py\", line 64, in <module>\r\n    onx = to_onnx(skm, X.astype(np.float64))\r\n  File \"/home/fred/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx-1.9.0-py3.8.egg/skl2onnx/convert.py\", line 207, in to_onnx\r\n    return convert_sklearn(model, initial_types=initial_types,\r\n  File \"/home/fred/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx-1.9.0-py3.8.egg/skl2onnx/convert.py\", line 157, in convert_sklearn\r\n    onnx_model = convert_topology(topology, name, doc_string, target_opset,\r\n  File \"/home/fred/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx-1.9.0-py3.8.egg/skl2onnx/common/_topology.py\", line 1180, in convert_topology\r\n    conv(scope, operator, container)\r\n  File \"/home/fred/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx-1.9.0-py3.8.egg/skl2onnx/common/_registration.py\", line 26, in __call__\r\n    return self._fct(*args)\r\n  File \"/home/fred/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx-1.9.0-py3.8.egg/skl2onnx/operator_converters/normaliser.py\", line 27, in convert_sklearn_normalizer\r\n    apply_normalizer(\r\n  File \"/home/fred/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx-1.9.0-py3.8.egg/skl2onnx/common/_apply_operation.py\", line 44, in apply_normalizer\r\n    raise NotImplementedError(\r\nNotImplementedError: Normalization not implemented for norm 'L2'.\r\n```\r\nI dive into _apply_operation.py, I found out that for L2 normalization is indeed unimplemented for double type:\r\n```\r\ndef apply_normalizer(scope, inputs, outputs, container,\r\n                     norm, use_float):\r\n    \"\"\"\r\n    Adds operator Normalizer if *use_float* is true,\r\n    otherwise, uses *ReduceSum* + *Div*. *Normalizer*\r\n    always produces float according to ONNX speciciations.\r\n    \"\"\"\r\n    input = inputs[0] if isinstance(inputs, list) else inputs\r\n    output = outputs[0] if isinstance(outputs, list) else outputs\r\n\r\n    if use_float:\r\n        container.add_node(\r\n            'Normalizer', input, output,\r\n            op_domain='ai.onnx.ml', norm=norm,\r\n            name=scope.get_unique_operator_name('Normalizer'))\r\n    else:\r\n        # Normalizer only produces floats.\r\n        if norm == 'L1':\r\n            norm = scope.get_unique_variable_name('norm')\r\n\r\n            if container.target_opset < 13:\r\n                container.add_node(\r\n                    'ReduceSum', input, norm, axes=[1], keepdims=1,\r\n                    name=scope.get_unique_operator_name('NormalizerNorm'))\r\n            else:\r\n                axis_name = scope.get_unique_variable_name('axis')\r\n                container.add_initializer(\r\n                    axis_name, onnx_proto.TensorProto.INT64, [1], [1])\r\n                container.add_node(\r\n                    'ReduceSum', [input, axis_name], norm, keepdims=1,\r\n                    name=scope.get_unique_operator_name('ReduceSum'))\r\n            apply_div(  # noqa\r\n                scope, [input, norm], output, container,\r\n                operator_name=scope.get_unique_operator_name(\r\n                    'NormalizerNorm'))\r\n        else:\r\n            raise NotImplementedError(\r\n                \"Normalization not implemented for norm %r.\" % norm)\r\n```\r\nThe same file exist in version 1.8.1, but the content of the file is empty.","closed_by":{"login":"xadupre","id":22452781,"node_id":"MDQ6VXNlcjIyNDUyNzgx","avatar_url":"https://avatars.githubusercontent.com/u/22452781?v=4","gravatar_id":"","url":"https://api.github.com/users/xadupre","html_url":"https://github.com/xadupre","followers_url":"https://api.github.com/users/xadupre/followers","following_url":"https://api.github.com/users/xadupre/following{/other_user}","gists_url":"https://api.github.com/users/xadupre/gists{/gist_id}","starred_url":"https://api.github.com/users/xadupre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xadupre/subscriptions","organizations_url":"https://api.github.com/users/xadupre/orgs","repos_url":"https://api.github.com/users/xadupre/repos","events_url":"https://api.github.com/users/xadupre/events{/privacy}","received_events_url":"https://api.github.com/users/xadupre/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/678/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/678/timeline","performed_via_github_app":null,"state_reason":"completed"}