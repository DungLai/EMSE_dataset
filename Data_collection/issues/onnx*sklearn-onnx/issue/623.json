{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/623","repository_url":"https://api.github.com/repos/onnx/sklearn-onnx","labels_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/623/labels{/name}","comments_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/623/comments","events_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/623/events","html_url":"https://github.com/onnx/sklearn-onnx/issues/623","id":813975222,"node_id":"MDU6SXNzdWU4MTM5NzUyMjI=","number":623,"title":"cannot save/serialize model with sparse matrix","user":{"login":"gxlarson","id":5505519,"node_id":"MDQ6VXNlcjU1MDU1MTk=","avatar_url":"https://avatars.githubusercontent.com/u/5505519?v=4","gravatar_id":"","url":"https://api.github.com/users/gxlarson","html_url":"https://github.com/gxlarson","followers_url":"https://api.github.com/users/gxlarson/followers","following_url":"https://api.github.com/users/gxlarson/following{/other_user}","gists_url":"https://api.github.com/users/gxlarson/gists{/gist_id}","starred_url":"https://api.github.com/users/gxlarson/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gxlarson/subscriptions","organizations_url":"https://api.github.com/users/gxlarson/orgs","repos_url":"https://api.github.com/users/gxlarson/repos","events_url":"https://api.github.com/users/gxlarson/events{/privacy}","received_events_url":"https://api.github.com/users/gxlarson/received_events","type":"User","site_admin":false},"labels":[{"id":2011464385,"node_id":"MDU6TGFiZWwyMDExNDY0Mzg1","url":"https://api.github.com/repos/onnx/sklearn-onnx/labels/Sparse","name":"Sparse","color":"7fb5e8","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-02-23T00:10:49Z","updated_at":"2021-08-19T11:56:59Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In the code below, I am able to serialize a model but only if the feature vectors are converted from sparse (e.g. 'scipy.sparse.csr.csr_matrix') to dense.\r\n\r\n```\r\nfrom sklearn.feature_extraction.text import TfidfVectorizer\r\nfrom sklearn.svm import SVC\r\nfrom sklearn.neighbors import KNeighborsClassifier\r\nimport numpy as np\r\n\r\nfrom skl2onnx import convert_sklearn\r\nfrom skl2onnx.common.data_types import FloatTensorType\r\n\r\ndata = [\r\n    [\"schedule a meeting\", 0],\r\n    [\"schedule a sync with the team\", 0],\r\n    [\"slot in a meeting\", 0],\r\n    [\"call ron\", 1],\r\n    [\"make a phone call\", 1],\r\n    [\"call in on the phone\", 2]\r\n]\r\ndocs = [doc for (doc, _) in data]\r\nlabels = [label for (_, label) in data]\r\n\r\n\r\nvectorizer = TfidfVectorizer()\r\nvectorizer.fit_transform(docs)\r\nembeddings = vectorizer.transform(docs)\r\ndim = embeddings.shape[1]\r\n#embeddings = np.vstack(embeddings)\r\n\r\nclf = SVC()\r\nclf = KNeighborsClassifier(n_neighbors=1)\r\n#embeddings = embeddings.todense()   # casting to dense matrix works, leaving this as sparse does not\r\nclf.fit(embeddings, labels)\r\n\r\ninitial_type = [('float_input', FloatTensorType([1, dim]))]\r\nonnx_model = convert_sklearn(clf, initial_types=initial_type) # this is line 37, where the crash occurs\r\nwith open('model.onnx', 'wb') as f:\r\n    f.write(onnx_model.SerializeToString())\r\n```\r\n\r\nIf we do not do the `embeddings = embeddings.todense()` line in the snippet above, I get this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \".\\xo.py\", line 32, in <module>\r\n    onnx_model = convert_sklearn(clf, initial_types=initial_type) # this is line 37, where the crash occurs\r\n  File \"C:\\Users\\Stefan Larson\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\skl2onnx\\convert.py\", line 160, in convert_sklearn\r\n    onnx_model = convert_topology(topology, name, doc_string, target_opset,\r\n  File \"C:\\Users\\Stefan Larson\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\skl2onnx\\common\\_topology.py\", line 1087, in convert_topology\r\n    conv(scope, operator, container)\r\n  File \"C:\\Users\\Stefan Larson\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\skl2onnx\\common\\_registration.py\", line 29, in __call__\r\n    return self._fct(*args)\r\n  File \"C:\\Users\\Stefan Larson\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\skl2onnx\\operator_converters\\nearest_neighbours.py\", line 442, in convert_nearest_neighbors_classifier\r\n    many = _convert_nearest_neighbors(operator, container)\r\n  File \"C:\\Users\\Stefan Larson\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\skl2onnx\\operator_converters\\nearest_neighbours.py\", line 250, in _convert_nearest_neighbors\r\n    top_indices = onnx_nearest_neighbors_indices_k(\r\n  File \"C:\\Users\\Stefan Larson\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\skl2onnx\\operator_converters\\nearest_neighbours.py\", line 89, in onnx_nearest_neighbors_indices_k\r\n    dist = onnx_cdist(X, Y, metric=metric, dtype=dtype,\r\n  File \"C:\\Users\\Stefan Larson\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\skl2onnx\\algebra\\complex_functions.py\", line 88, in onnx_cdist\r\n    res = _onnx_cdist_sqeuclidean(\r\n  File \"C:\\Users\\Stefan Larson\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\skl2onnx\\algebra\\complex_functions.py\", line 148, in _onnx_cdist_sqeuclidean\r\n    return _onnx_cdist_end(XA, XB, id_next, flat, dtype, op_version,\r\n  File \"C:\\Users\\Stefan Larson\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\skl2onnx\\algebra\\complex_functions.py\", line 130, in _onnx_cdist_end\r\n    node = OnnxScan(XA, XB, output_names=['u(scan0)', 'u(scan1)'],\r\n  File \"C:\\Users\\Stefan Larson\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\skl2onnx\\algebra\\onnx_ops.py\", line 79, in __init__\r\n    OnnxOperator.__init__(self, *args, **kwargs)\r\n  File \"C:\\Users\\Stefan Larson\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\skl2onnx\\algebra\\onnx_operator.py\", line 311, in __init__\r\n    raise TypeError(\r\nTypeError: Unable to interpret the input name for type <class 'scipy.sparse.csr.csr_matrix'> in operator 'OnnxScan' (value=  (0, 3)        0.70710677\r\n  (0, 7)        0.70710677\r\n  (1, 7)        0.39339983\r\n  (1, 9)        0.47974753\r\n  (1, 10)       0.47974753\r\n  (1, 11)       0.39339983\r\n  (1, 12)       0.47974753\r\n  (2, 1)        0.53550583\r\n  (2, 3)        0.53550583\r\n  (2, 8)        0.65304446\r\n  (3, 0)        0.5692126\r\n  (3, 6)        0.82219034\r\n  (4, 0)        0.47196442\r\n  (4, 2)        0.6817217\r\n  (4, 5)        0.55902153\r\n  (5, 0)        0.37023818\r\n  (5, 1)        0.43853122\r\n  (5, 4)        0.53478485\r\n  (5, 5)        0.43853122\r\n  (5, 11)       0.43853122).\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/623/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/623/timeline","performed_via_github_app":null,"state_reason":null}