{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/936","repository_url":"https://api.github.com/repos/onnx/sklearn-onnx","labels_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/936/labels{/name}","comments_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/936/comments","events_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/936/events","html_url":"https://github.com/onnx/sklearn-onnx/issues/936","id":1447343838,"node_id":"I_kwDOCa0gS85WRLbe","number":936,"title":"VotingClassifier to onnx does not support xgb and lgb as base estimators","user":{"login":"singaln","id":34467903,"node_id":"MDQ6VXNlcjM0NDY3OTAz","avatar_url":"https://avatars.githubusercontent.com/u/34467903?v=4","gravatar_id":"","url":"https://api.github.com/users/singaln","html_url":"https://github.com/singaln","followers_url":"https://api.github.com/users/singaln/followers","following_url":"https://api.github.com/users/singaln/following{/other_user}","gists_url":"https://api.github.com/users/singaln/gists{/gist_id}","starred_url":"https://api.github.com/users/singaln/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/singaln/subscriptions","organizations_url":"https://api.github.com/users/singaln/orgs","repos_url":"https://api.github.com/users/singaln/repos","events_url":"https://api.github.com/users/singaln/events{/privacy}","received_events_url":"https://api.github.com/users/singaln/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-11-14T04:03:59Z","updated_at":"2022-11-24T13:04:35Z","closed_at":"2022-11-24T13:04:35Z","author_association":"NONE","active_lock_reason":null,"body":"Code:\r\n```python\r\nfrom xgboost import XGBClassifier\r\nfrom lightgbm import LGBMClassifier\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.ensemble import VotingClassifier, RandomForestClassifier\r\nfrom sklearn.datasets import load_breast_cancer\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.preprocessing import StandardScaler\r\nfrom sklearn.model_selection import train_test_split\r\nfrom skl2onnx import convert_sklearn, update_registered_converter\r\nfrom skl2onnx.common.data_types import FloatTensorType, Int64TensorType, StringTensorType\r\nfrom sklearn.compose import ColumnTransformer\r\n\r\nparam_dict = {}\r\n\r\n\r\ndef convert_dataframe_schema(train_data, drop=None):\r\n    inputs = []\r\n    for k, v in zip(train_data.columns, train_data.dtypes):\r\n        if drop is not None and k in drop:\r\n            continue\r\n        if v == 'int64':\r\n            t = Int64TensorType([None, 1])\r\n        elif v == \"float32\":\r\n            t = FloatTensorType([None, 1])\r\n        elif v == \"float64\":\r\n            t = FloatTensorType([None, 1])\r\n        else:\r\n            t = StringTensorType([None, 1])\r\n        inputs.append((k, t))\r\n    return inputs\r\n\r\n\r\nlgb_model = LGBMClassifier().set_params(**param_dict.get('lightgbm', {}))\r\nxgb_model = XGBClassifier().set_params(**param_dict.get('xgboost', {}))\r\n# rf_model = RandomForestClassifier().set_params(**param_dict.get(\"rf\", {}))\r\nlr_model = LogisticRegression().set_params(**param_dict.get('lr', {}))\r\nmodel_classifier = VotingClassifier(estimators=[('lightgbm', lgb_model), ('xgboost', xgb_model), ('lr', lr_model)],\r\n                                    voting='soft', weights=np.ones(3), n_jobs=3, flatten_transform=False)\r\n# model_classifier = VotingClassifier(estimators=[('rf', rf_model),(\"lr\", lr_model)], voting=\"soft\", weights=np.ones(2), flatten_transform=False)\r\ndata = load_breast_cancer()\r\ndata_columns = [col.replace(\" \", \"_\") for col in data[\"feature_names\"]]\r\ndata_df = pd.DataFrame(data=data.data, columns=data_columns)\r\ndata_df['target'] = pd.Series(data.target)\r\nX_data, X_test = train_test_split(data_df)\r\ndata_X, data_y = X_data.iloc[:, :-1], X_data.iloc[:, -1]\r\ntest_X, test_y = X_test.iloc[:, :-1], X_test.iloc[:, -1]\r\n\r\nnumeric_transformer = Pipeline(steps=[('scaler', StandardScaler())])\r\npreprocessor = ColumnTransformer(transformers=[('num', numeric_transformer, data_columns)])\r\nmodel = Pipeline([(\"mapper\", preprocessor), (\"classifier\", model_classifier)])\r\nmodel.fit(data_X, data_y)\r\ninitial_inputs = convert_dataframe_schema(train_data=data_X)\r\n\r\nmodel_onnx = convert_sklearn(model=model, name=\"voting\", initial_types=initial_inputs,\r\n                             target_opset={'': 12, 'ai.onnx.ml': 2}, verbose=True)\r\nwith open(\"./output\", \"wb\") as f:\r\n    f.write(model_onnx.SerializeToString())\r\n```\r\nError:\r\n```\r\n[convert_sklearn] parse_sklearn_model\r\n[convert_sklearn] convert_topology\r\n[convert_operators] begin\r\n[convert_operators] iteration 1 - n_vars=0 n_ops=4\r\n[call_converter] call converter for 'SklearnConcat'.\r\n[call_converter] call converter for 'SklearnScaler'.\r\nTraceback (most recent call last):\r\n  File \"D:\\bm_v3\\business_modeling\\src\\bm\\model\\test.py\", line 61, in <module>\r\n    model_onnx = convert_sklearn(model=model, name=\"voting\", initial_types=initial_inputs,\r\n  File \"D:\\ProgramData\\Anaconda3\\envs\\ml\\lib\\site-packages\\skl2onnx\\convert.py\", line 184, in convert_sklearn\r\n    onnx_model = convert_topology(\r\n  File \"D:\\ProgramData\\Anaconda3\\envs\\ml\\lib\\site-packages\\skl2onnx\\common\\_topology.py\", line 1421, in convert_topology\r\n    topology.convert_operators(container=container, verbose=verbose)\r\n  File \"D:\\ProgramData\\Anaconda3\\envs\\ml\\lib\\site-packages\\skl2onnx\\common\\_topology.py\", line 1256, in convert_operators\r\n[call_converter] call converter for 'SklearnVotingClassifier'.\r\n    self.call_converter(operator, container, verbose=verbose)\r\n  File \"D:\\ProgramData\\Anaconda3\\envs\\ml\\lib\\site-packages\\skl2onnx\\common\\_topology.py\", line 1062, in call_converter\r\n    conv(self.scopes[0], operator, container)\r\n  File \"D:\\ProgramData\\Anaconda3\\envs\\ml\\lib\\site-packages\\skl2onnx\\common\\_registration.py\", line 26, in __call__\r\n    return self._fct(*args)\r\n  File \"D:\\ProgramData\\Anaconda3\\envs\\ml\\lib\\site-packages\\skl2onnx\\operator_converters\\voting_classifier.py\", line 49, in convert_voting_classifier\r\n    op_type = sklearn_operator_name_map[type(estimator)]\r\nKeyError: <class 'lightgbm.sklearn.LGBMClassifier'>\r\n```\r\n","closed_by":{"login":"xadupre","id":22452781,"node_id":"MDQ6VXNlcjIyNDUyNzgx","avatar_url":"https://avatars.githubusercontent.com/u/22452781?v=4","gravatar_id":"","url":"https://api.github.com/users/xadupre","html_url":"https://github.com/xadupre","followers_url":"https://api.github.com/users/xadupre/followers","following_url":"https://api.github.com/users/xadupre/following{/other_user}","gists_url":"https://api.github.com/users/xadupre/gists{/gist_id}","starred_url":"https://api.github.com/users/xadupre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xadupre/subscriptions","organizations_url":"https://api.github.com/users/xadupre/orgs","repos_url":"https://api.github.com/users/xadupre/repos","events_url":"https://api.github.com/users/xadupre/events{/privacy}","received_events_url":"https://api.github.com/users/xadupre/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/936/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/936/timeline","performed_via_github_app":null,"state_reason":"completed"}