{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/710","repository_url":"https://api.github.com/repos/onnx/sklearn-onnx","labels_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/710/labels{/name}","comments_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/710/comments","events_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/710/events","html_url":"https://github.com/onnx/sklearn-onnx/issues/710","id":976196407,"node_id":"MDU6SXNzdWU5NzYxOTY0MDc=","number":710,"title":"OnnxConcatFromSequence `input_sequence`","user":{"login":"busFred","id":32878707,"node_id":"MDQ6VXNlcjMyODc4NzA3","avatar_url":"https://avatars.githubusercontent.com/u/32878707?v=4","gravatar_id":"","url":"https://api.github.com/users/busFred","html_url":"https://github.com/busFred","followers_url":"https://api.github.com/users/busFred/followers","following_url":"https://api.github.com/users/busFred/following{/other_user}","gists_url":"https://api.github.com/users/busFred/gists{/gist_id}","starred_url":"https://api.github.com/users/busFred/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/busFred/subscriptions","organizations_url":"https://api.github.com/users/busFred/orgs","repos_url":"https://api.github.com/users/busFred/repos","events_url":"https://api.github.com/users/busFred/events{/privacy}","received_events_url":"https://api.github.com/users/busFred/received_events","type":"User","site_admin":false},"labels":[{"id":2673847808,"node_id":"MDU6TGFiZWwyNjczODQ3ODA4","url":"https://api.github.com/repos/onnx/sklearn-onnx/labels/pending%20user%20response","name":"pending user response","color":"2465AA","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-08-21T18:38:28Z","updated_at":"2021-08-24T14:41:35Z","closed_at":"2021-08-24T14:41:35Z","author_association":"NONE","active_lock_reason":null,"body":"I have a list of custom model `_BinaryRVC`. Each `_BinaryRVC` outputs a n-dimensional row vector. The Reshape in the first command is to convert each n-dimensional row vector into a n-dimensional column vector.\r\nThe goal is to concatenate all the n-dimensional column vectors into a n by c matrix, where c is the number of `_BinaryRVC` in the list.\r\n```python\r\ny_list: List[OnnxOperator] = [\r\n    OnnxReshape(OnnxSubEstimator(bsvc, input, op_version=op_version),\r\n                np.array([-1, 1], dtype=np.int64),\r\n                op_version=op_version) for bsvc in rvc.binary_rvc_list_\r\n]\r\ny_matrix: OnnxOperator = OnnxConcatFromSequence(y_list,\r\n                                                axis=1,\r\n                                                new_axis=1,\r\n                                                op_version=op_version)\r\n```\r\nHowever the above code generate the following error:\r\n```\r\nTypeError: Unexpected type <class 'list'> for input 0 of operator 'OnnxConcatFromSequence'. It must be an instance of Variable (or a string), OnnxOperator, OnnxOperatorItem, numpy.ndarray, coo_matrix).\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n~/Documents/research/sklearn_plugins/test/sklearn_plugins/rvm/test_rvc_export.py in \r\n      34 \"\"\"\r\n      35 onx: ModelProto\r\n----> 36 onx = to_onnx(rvc, X_train[:1, :].astype(np.float64), target_opset=13)\r\n\r\n~/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx/convert.py in to_onnx(model, X, name, initial_types, target_opset, options, white_op, black_op, final_types, dtype, verbose)\r\n    214         name = \"ONNX(%s)\" % model.__class__.__name__\r\n    215     initial_types = guess_initial_types(X, initial_types)\r\n--> 216     return convert_sklearn(model, initial_types=initial_types,\r\n    217                            target_opset=target_opset,\r\n    218                            name=name, options=options,\r\n\r\n~/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx/convert.py in convert_sklearn(model, name, initial_types, doc_string, target_opset, custom_conversion_functions, custom_shape_calculators, custom_parsers, options, intermediate, white_op, black_op, final_types, dtype, verbose)\r\n    160     if verbose >= 1:\r\n    161         print(\"[convert_sklearn] convert_topology\")\r\n--> 162     onnx_model = convert_topology(topology, name, doc_string, target_opset,\r\n    163                                   options=options,\r\n    164                                   remove_identity=not intermediate,\r\n\r\n~/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx/common/_topology.py in convert_topology(topology, model_name, doc_string, target_opset, channel_first_inputs, options, remove_identity, verbose)\r\n   1200                               type(getattr(operator, 'raw_model', None))))\r\n   1201         container.validate_options(operator)\r\n-> 1202         conv(scope, operator, container)\r\n   1203 \r\n   1204     container.ensure_topological_order()\r\n\r\n~/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx/common/_registration.py in __call__(self, *args)\r\n     24             if args[1].raw_operator is not None:\r\n     25                 args[2]._get_allowed_options(args[1].raw_operator)\r\n---> 26         return self._fct(*args)\r\n     27 \r\n     28     def get_allowed_options(self):\r\n\r\n~/Documents/research/sklearn_plugins/src/sklearn_plugins/rvm/_onnx_transfrom.py in rvc_converter(scope, operator, container)\r\n    114                     op_version=op_version) for bsvc in rvc.binary_rvc_list_\r\n    115     ]\r\n--> 116     y_matrix: OnnxOperator = OnnxConcatFromSequence(y_list,\r\n    117                                                     axis=1,\r\n    118                                                     new_axis=1,\r\n\r\n~/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx/algebra/onnx_ops.py in __init__(self, *args, **kwargs)\r\n     99                     Variable, OnnxOperator, np.ndarray, str,\r\n    100                     OnnxOperatorItem, coo_matrix)):\r\n--> 101                 raise TypeError(\r\n    102                     \"Unexpected type %r for input %r of operator %r. \"\r\n    103                     \"It must be an instance of Variable (or a string), \"\r\n\r\nTypeError: Unexpected type <class 'list'> for input 0 of operator 'OnnxConcatFromSequence'. It must be an instance of Variable (or a string), OnnxOperator, OnnxOperatorItem, numpy.ndarray, coo_matrix).\r\n```\r\nI also try the following code. Instead of piping entire `list` into `OnnxConcatFromSequence`, I unpack the `y_list`.\r\n```python\r\ny_list: List[OnnxOperator] = [\r\n    OnnxReshape(OnnxSubEstimator(bsvc, input, op_version=op_version),\r\n                np.array([-1, 1], dtype=np.int64),\r\n                op_version=op_version) for bsvc in rvc.binary_rvc_list_\r\n]\r\ny_matrix: OnnxOperator = OnnxConcatFromSequence(*y_list,\r\n                                                axis=1,\r\n                                                new_axis=1,\r\n                                                op_version=op_version)\r\n```\r\nBut this appraoch result in the following error:\r\n\r\n```\r\nRuntimeError: Operator 'ConcatFromSequence' expects a number of inputs in [1, 1] not 3 (expected opset=13, class opset=11)\r\n---------------------------------------------------------------------------\r\nRuntimeError                              Traceback (most recent call last)\r\n~/Documents/research/sklearn_plugins/test/sklearn_plugins/rvm/test_rvc_export.py in \r\n      34 \"\"\"\r\n      35 onx: ModelProto\r\n----> 36 onx = to_onnx(rvc, X_train[:1, :].astype(np.float64), target_opset=13)\r\n\r\n~/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx/convert.py in to_onnx(model, X, name, initial_types, target_opset, options, white_op, black_op, final_types, dtype, verbose)\r\n    214         name = \"ONNX(%s)\" % model.__class__.__name__\r\n    215     initial_types = guess_initial_types(X, initial_types)\r\n--> 216     return convert_sklearn(model, initial_types=initial_types,\r\n    217                            target_opset=target_opset,\r\n    218                            name=name, options=options,\r\n\r\n~/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx/convert.py in convert_sklearn(model, name, initial_types, doc_string, target_opset, custom_conversion_functions, custom_shape_calculators, custom_parsers, options, intermediate, white_op, black_op, final_types, dtype, verbose)\r\n    160     if verbose >= 1:\r\n    161         print(\"[convert_sklearn] convert_topology\")\r\n--> 162     onnx_model = convert_topology(topology, name, doc_string, target_opset,\r\n    163                                   options=options,\r\n    164                                   remove_identity=not intermediate,\r\n\r\n~/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx/common/_topology.py in convert_topology(topology, model_name, doc_string, target_opset, channel_first_inputs, options, remove_identity, verbose)\r\n   1200                               type(getattr(operator, 'raw_model', None))))\r\n   1201         container.validate_options(operator)\r\n-> 1202         conv(scope, operator, container)\r\n   1203 \r\n   1204     container.ensure_topological_order()\r\n\r\n~/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx/common/_registration.py in __call__(self, *args)\r\n     24             if args[1].raw_operator is not None:\r\n     25                 args[2]._get_allowed_options(args[1].raw_operator)\r\n---> 26         return self._fct(*args)\r\n     27 \r\n     28     def get_allowed_options(self):\r\n\r\n~/Documents/research/sklearn_plugins/src/sklearn_plugins/rvm/_onnx_transfrom.py in rvc_converter(scope, operator, container)\r\n    114                     op_version=op_version) for bsvc in rvc.binary_rvc_list_\r\n    115     ]\r\n--> 116     y_matrix: OnnxOperator = OnnxConcatFromSequence(*y_list,\r\n    117                                                     axis=1,\r\n    118                                                     new_axis=1,\r\n\r\n~/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx/algebra/onnx_ops.py in __init__(self, *args, **kwargs)\r\n    105                     \"coo_matrix).\" % (\r\n    106                         type(a), i, class_name))\r\n--> 107         OnnxOperator.__init__(self, *args, **kwargs)\r\n    108 \r\n    109     newclass = type(class_name, (OnnxOperator,),\r\n\r\n~/anaconda3/envs/sklearn_plugins/lib/python3.8/site-packages/skl2onnx/algebra/onnx_operator.py in __init__(self, op_version, output_names, domain, *inputs, **kwargs)\r\n    318             if (len(self.inputs) < self.input_range[0] or\r\n    319                     len(self.inputs) > self.input_range[1]):\r\n--> 320                 raise RuntimeError(\r\n    321                     \"Operator '{}' expects a number of inputs \"\r\n    322                     \"in [{}, {}] not {} (expected opset={}, \"\r\n\r\nRuntimeError: Operator 'ConcatFromSequence' expects a number of inputs in [1, 1] not 3 (expected opset=13, class opset=11)\r\n```\r\n\r\nI believe the issue is similar to the one I encountered in #703. I think about using `onnx.helper.make_sequence` function in the `onnx` library. However, I soon realize both `OnnxSubEstimator` and `OnnxReshape` are subclass of `OnnxOperator`, which is a class defined in `skl2onnx` library and not a native `onnx` `tensor` type. Therefore, I don't think directly pipe `y_list` to `onnx.helper.make_sequence` would work.\r\n\r\n> For this operator (following the example in ONNX specification for [ConstantOfShape](https://github.com/onnx/onnx/blob/master/docs/Operators.md#ConstantOfShape)), you can use this code:\r\n> ```\r\n> tensor_value = onnx.helper.make_tensor(\"value\", onnx.TensorProto.FLOAT, [1], [5])\r\n> cst = OnnxConstantOfShape(shape, value=tensor_value, op_version=opset)\r\n> ```\r\n> \r\n> I'll create a PR to make it easier with numpy.\r\n\r\n_Originally posted by @xadupre in https://github.com/onnx/sklearn-onnx/issues/703#issuecomment-902683449_","closed_by":{"login":"busFred","id":32878707,"node_id":"MDQ6VXNlcjMyODc4NzA3","avatar_url":"https://avatars.githubusercontent.com/u/32878707?v=4","gravatar_id":"","url":"https://api.github.com/users/busFred","html_url":"https://github.com/busFred","followers_url":"https://api.github.com/users/busFred/followers","following_url":"https://api.github.com/users/busFred/following{/other_user}","gists_url":"https://api.github.com/users/busFred/gists{/gist_id}","starred_url":"https://api.github.com/users/busFred/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/busFred/subscriptions","organizations_url":"https://api.github.com/users/busFred/orgs","repos_url":"https://api.github.com/users/busFred/repos","events_url":"https://api.github.com/users/busFred/events{/privacy}","received_events_url":"https://api.github.com/users/busFred/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/710/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/710/timeline","performed_via_github_app":null,"state_reason":"completed"}