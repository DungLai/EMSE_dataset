{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/200","repository_url":"https://api.github.com/repos/onnx/sklearn-onnx","labels_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/200/labels{/name}","comments_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/200/comments","events_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/200/events","html_url":"https://github.com/onnx/sklearn-onnx/issues/200","id":460103774,"node_id":"MDU6SXNzdWU0NjAxMDM3NzQ=","number":200,"title":"CalibratedClassifierCV converter probability scores have some mismatches with Scikit's predict_proba() results when method is set to isotonic","user":{"login":"prabhat00155","id":7043157,"node_id":"MDQ6VXNlcjcwNDMxNTc=","avatar_url":"https://avatars.githubusercontent.com/u/7043157?v=4","gravatar_id":"","url":"https://api.github.com/users/prabhat00155","html_url":"https://github.com/prabhat00155","followers_url":"https://api.github.com/users/prabhat00155/followers","following_url":"https://api.github.com/users/prabhat00155/following{/other_user}","gists_url":"https://api.github.com/users/prabhat00155/gists{/gist_id}","starred_url":"https://api.github.com/users/prabhat00155/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/prabhat00155/subscriptions","organizations_url":"https://api.github.com/users/prabhat00155/orgs","repos_url":"https://api.github.com/users/prabhat00155/repos","events_url":"https://api.github.com/users/prabhat00155/events{/privacy}","received_events_url":"https://api.github.com/users/prabhat00155/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-06-24T21:26:24Z","updated_at":"2019-09-12T19:33:50Z","closed_at":"2019-09-12T19:33:50Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"data = load_iris()\r\nX = data.data\r\ny = data.target\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\r\nmodel = CalibratedClassifierCV(MLPClassifier(), method='isotonic', cv='warn').fit(X_train, y_train)\r\n\r\nonnx_model = convert_sklearn(model, 'lr', [('input', FloatTensorType([1, X_test.shape[1]]))])\r\nsave_model(onnx_model, 'lr.onnx')\r\nsess = InferenceSession('lr.onnx')\r\nres = []\r\nfor x in X_test:\r\n    res.append(sess.run(None, input_feed={'input': x.astype(np.float32)}))\r\n\r\nr1 = np.mean(np.isclose(model.predict_proba(X_test),\r\n                        list(map(lambda x: list(map(lambda y: x[1][0][y], x[1][0])), res)), atol=1e-4))\r\nr2 = np.mean(list(map(lambda x: x[0][0], res)) == model.predict(X_test))\r\nprint(f'{r1} {r2}')\r\n\r\nX, y = make_classification(n_features=100, n_samples=10000, n_classes=2)\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\r\nmodel = CalibratedClassifierCV(MLPClassifier(), method='isotonic', cv='warn').fit(X_train, y_train)\r\n\r\nonnx_model = convert_sklearn(model, 'lr', [('input', FloatTensorType([1, X_test.shape[1]]))])\r\nsave_model(onnx_model, 'lr.onnx')\r\nsess = InferenceSession('lr.onnx')\r\nres = []\r\nfor x in X_test:\r\n    res.append(sess.run(None, input_feed={'input': x.astype(np.float32)}))\r\n\r\nr1 = np.mean(np.isclose(model.predict_proba(X_test),\r\n                        list(map(lambda x: list(map(lambda y: x[1][0][y], x[1][0])), res)), atol=1e-4))\r\nr2 = np.mean(list(map(lambda x: x[0][0], res)) == model.predict(X_test))\r\nprint(f'{r1} {r2}')\r\n\r\ndata = load_digits()\r\nX = data.data\r\ny = data.target.astype(np.str)\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\r\nmodel = CalibratedClassifierCV(MLPClassifier(), method='isotonic', cv='warn').fit(X_train, y_train)\r\n\r\nonnx_model = convert_sklearn(model, 'lr', [('input', Int64TensorType([1, X_test.shape[1]]))])\r\nsave_model(onnx_model, 'lr.onnx')\r\nsess = InferenceSession('lr.onnx')\r\nres = []\r\nfor x in X_test:\r\n    res.append(sess.run(None, input_feed={'input': x.astype(np.int64)}))\r\n    \r\nr1 = np.mean(np.isclose(model.predict_proba(X_test),\r\n                        list(map(lambda x: list(map(lambda y: x[1][0][y], x[1][0])), res)), atol=1e-4))\r\nr2 = np.mean(list(map(lambda x: x[0][0], res)) == model.predict(X_test))\r\nprint(f'{r1} {r2}')\r\n\r\ndata = load_digits()\r\nX = data.data\r\ny = data.target.astype(np.str)\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=42)\r\nmodel = CalibratedClassifierCV(MLPClassifier(), method='isotonic', cv='warn').fit(X_train, y_train)\r\n\r\nonnx_model = convert_sklearn(model, 'lr', [('input', Int64TensorType([1, X_test.shape[1]]))])\r\nsave_model(onnx_model, 'lr.onnx')\r\nsess = InferenceSession('lr.onnx')\r\nres = []\r\nfor x in X_test:\r\n    res.append(sess.run(None, input_feed={'input': x.astype(np.int64)}))\r\n    \r\nr1 = np.mean(np.isclose(model.predict_proba(X_test),\r\n                        list(map(lambda x: list(map(lambda y: x[1][0][y], x[1][0])), res)), atol=1e-4))\r\nr2 = np.mean(list(map(lambda x: x[0][0], res)) == model.predict(X_test))\r\nprint(f'{r1} {r2}')\r\n\r\n\r\n0.9466666666666667 1.0\r\n0.9283 1.0\r\n0.9400444938820912 0.996662958843159\r\n0.949833147942158 0.9944382647385984","closed_by":{"login":"prabhat00155","id":7043157,"node_id":"MDQ6VXNlcjcwNDMxNTc=","avatar_url":"https://avatars.githubusercontent.com/u/7043157?v=4","gravatar_id":"","url":"https://api.github.com/users/prabhat00155","html_url":"https://github.com/prabhat00155","followers_url":"https://api.github.com/users/prabhat00155/followers","following_url":"https://api.github.com/users/prabhat00155/following{/other_user}","gists_url":"https://api.github.com/users/prabhat00155/gists{/gist_id}","starred_url":"https://api.github.com/users/prabhat00155/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/prabhat00155/subscriptions","organizations_url":"https://api.github.com/users/prabhat00155/orgs","repos_url":"https://api.github.com/users/prabhat00155/repos","events_url":"https://api.github.com/users/prabhat00155/events{/privacy}","received_events_url":"https://api.github.com/users/prabhat00155/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/200/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/200/timeline","performed_via_github_app":null,"state_reason":"completed"}