{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/557","repository_url":"https://api.github.com/repos/onnx/sklearn-onnx","labels_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/557/labels{/name}","comments_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/557/comments","events_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/557/events","html_url":"https://github.com/onnx/sklearn-onnx/issues/557","id":741162957,"node_id":"MDU6SXNzdWU3NDExNjI5NTc=","number":557,"title":"How to implement a custom converter ( as part of a sklearn pipeline) for mapping values","user":{"login":"waiyujack","id":46226344,"node_id":"MDQ6VXNlcjQ2MjI2MzQ0","avatar_url":"https://avatars.githubusercontent.com/u/46226344?v=4","gravatar_id":"","url":"https://api.github.com/users/waiyujack","html_url":"https://github.com/waiyujack","followers_url":"https://api.github.com/users/waiyujack/followers","following_url":"https://api.github.com/users/waiyujack/following{/other_user}","gists_url":"https://api.github.com/users/waiyujack/gists{/gist_id}","starred_url":"https://api.github.com/users/waiyujack/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/waiyujack/subscriptions","organizations_url":"https://api.github.com/users/waiyujack/orgs","repos_url":"https://api.github.com/users/waiyujack/repos","events_url":"https://api.github.com/users/waiyujack/events{/privacy}","received_events_url":"https://api.github.com/users/waiyujack/received_events","type":"User","site_admin":false},"labels":[{"id":1165979610,"node_id":"MDU6TGFiZWwxMTY1OTc5NjEw","url":"https://api.github.com/repos/onnx/sklearn-onnx/labels/question","name":"question","color":"d876e3","default":true,"description":"Further information is requested"},{"id":2673847808,"node_id":"MDU6TGFiZWwyNjczODQ3ODA4","url":"https://api.github.com/repos/onnx/sklearn-onnx/labels/pending%20user%20response","name":"pending user response","color":"2465AA","default":false,"description":""}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":18,"created_at":"2020-11-12T00:01:06Z","updated_at":"2022-11-24T13:11:26Z","closed_at":"2022-11-24T13:11:26Z","author_association":"NONE","active_lock_reason":null,"body":"I am trying to code up a custom converter that maps values say non-positives to -1 and positives to 1.\r\n\r\nSomething like below in terms of python code:\r\n```\r\ndef mapping(x):\r\n    return np.where(x <= 0, -1, 1)\r\n```\r\n\r\nI am thinking of using the OnnxIF function but haven't got much idea of how to use that as there aren't any examples. Can anyone help me? Other methods are also welcome!\r\n\r\nI have been trying to replicate the simple scaler example from [here ](http://onnx.ai/sklearn-onnx/auto_examples/plot_convert_syntax.html#pipeline-and-a-custom-object) but haven't got much success so far. I am struggling to write some code on the last line of **class CustomOpTransformer**.\r\n\r\n\r\n```\r\n\r\n# **Imports**\r\n\r\nimport numpy as np\r\nfrom sklearn.base import BaseEstimator, TransformerMixin\r\nfrom sklearn.pipeline import make_pipeline\r\nfrom onnxruntime import InferenceSession\r\nfrom skl2onnx import convert_sklearn, to_onnx, wrap_as_onnx_mixin\r\nfrom skl2onnx.common.data_types import FloatTensorType\r\nfrom skl2onnx.algebra.onnx_operator_mixin import OnnxOperatorMixin\r\n\r\n# **Simple function to check the converted model works fine.**\r\n\r\ndef predict_with_onnxruntime(onx, X):\r\n    sess = InferenceSession(onx.SerializeToString())\r\n    input_name = sess.get_inputs()[0].name\r\n    res = sess.run(None, {input_name: X.astype(np.float32)})\r\n    return res[0]\r\n\r\n# **Custom transformer to perform mapping (NOT YET COMPLETE see last line)**\r\n\r\nclass CustomOpTransformer(BaseEstimator, TransformerMixin,\r\n                          OnnxOperatorMixin):\r\n\r\n    def __init__(self):\r\n        BaseEstimator.__init__(self)\r\n        TransformerMixin.__init__(self)\r\n\r\n    def fit(self, X, y=None):\r\n        self.W_ = np.float32(1)\r\n        self.S_ = np.float32(1)\r\n        return self\r\n\r\n    def transform(self, X):\r\n        return np.where(X <= 0, -1, 1)\r\n\r\n    def onnx_shape_calculator(self):\r\n        def shape_calculator(operator):\r\n            operator.outputs[0].type = operator.inputs[0].type\r\n        return shape_calculator\r\n    \r\n    \r\n    # We need to use some if else statments\r\n    def to_onnx_operator(self, inputs=None, outputs=('Y', )):\r\n        if inputs is None:\r\n            raise RuntimeError(\"Parameter inputs should contain at least \"\r\n                               \"one name.\")\r\n        i0 = self.get_inputs(inputs, 0)\r\n        return **????**\r\n\r\n# **Try to implement the convertor in a pipeline and test the function**\r\n\r\nX = np.array([[0, 0], [1, 1]])\r\ntr = make_pipeline(CustomOpTransformer())\r\ntr.fit(X)\r\n\r\n# Original matrix\r\nprint('Original matrix')\r\nprint(X)\r\n\r\n# sklearn pipeline\r\nprint('Transform using np.where')\r\nprint(tr.transform(X))\r\n\r\n# Run in onnx\r\nprint('Transform using to_onnx_operator')\r\nonx = to_onnx(tr, X.astype(np.float32), target_opset=12)\r\nprint(predict_with_onnxruntime(onx, X))\r\n```\r\n","closed_by":{"login":"xadupre","id":22452781,"node_id":"MDQ6VXNlcjIyNDUyNzgx","avatar_url":"https://avatars.githubusercontent.com/u/22452781?v=4","gravatar_id":"","url":"https://api.github.com/users/xadupre","html_url":"https://github.com/xadupre","followers_url":"https://api.github.com/users/xadupre/followers","following_url":"https://api.github.com/users/xadupre/following{/other_user}","gists_url":"https://api.github.com/users/xadupre/gists{/gist_id}","starred_url":"https://api.github.com/users/xadupre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xadupre/subscriptions","organizations_url":"https://api.github.com/users/xadupre/orgs","repos_url":"https://api.github.com/users/xadupre/repos","events_url":"https://api.github.com/users/xadupre/events{/privacy}","received_events_url":"https://api.github.com/users/xadupre/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/557/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/557/timeline","performed_via_github_app":null,"state_reason":"completed"}