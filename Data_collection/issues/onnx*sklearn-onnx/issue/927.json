{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/927","repository_url":"https://api.github.com/repos/onnx/sklearn-onnx","labels_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/927/labels{/name}","comments_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/927/comments","events_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/927/events","html_url":"https://github.com/onnx/sklearn-onnx/issues/927","id":1420505620,"node_id":"I_kwDOCa0gS85UqzIU","number":927,"title":"Derive dtype from np.dtype in CastTransformer/Regressor","user":{"login":"stephantul","id":8882233,"node_id":"MDQ6VXNlcjg4ODIyMzM=","avatar_url":"https://avatars.githubusercontent.com/u/8882233?v=4","gravatar_id":"","url":"https://api.github.com/users/stephantul","html_url":"https://github.com/stephantul","followers_url":"https://api.github.com/users/stephantul/followers","following_url":"https://api.github.com/users/stephantul/following{/other_user}","gists_url":"https://api.github.com/users/stephantul/gists{/gist_id}","starred_url":"https://api.github.com/users/stephantul/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/stephantul/subscriptions","organizations_url":"https://api.github.com/users/stephantul/orgs","repos_url":"https://api.github.com/users/stephantul/repos","events_url":"https://api.github.com/users/stephantul/events{/privacy}","received_events_url":"https://api.github.com/users/stephantul/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-10-24T09:14:39Z","updated_at":"2022-11-10T11:05:23Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi! \r\n\r\nThanks for the great work.\r\n\r\nIn `numpy`, any function that receives a dtype can also receive a string representation of that dtype:\r\n\r\n```python\r\nimport numpy as np\r\n\r\nassert np.zeros(3, dtype=\"float64\").dtype == np.zeros(3, dtype=np.float64).dtype\r\nassert np.zeros(3, dtype=\"float64\").dtype != np.zeros(3, dtype=np.float32).dtype\r\n```\r\n\r\nI expected the same behavior in `CastTransformer` which led to a weird error. The `CastTransformer` seemed to interpret my string representation of the dtype as a literal string type (i.e., it expected a string as input).\r\n\r\nAs a fix, we could replace the setting of the dtype in the constructor with an inferred dtype from `numpy`.\r\n\r\ni.e.,\r\n\r\n```python\r\ndef __init__(self, *, dtype=np.float32):\r\n        self.dtype = np.dtype(dtype)\r\n```\r\n\r\nThis looks up the appropriate dtype, and is also a no-op if the passed value is already a dtype (and not a string). Alternatively, we could catch whether the passed value is actually a dtype.\r\n\r\n```python\r\ndef __init__(self, *, dtype=np.float32):\r\n        if not _is_dtype(dtype):\r\n             raise ValueError(\"informative message\")\r\n        self.dtype = dtype\r\n```\r\n\r\nWe would have to implement `_is_dtype` somehow though.\r\n\r\nI fully concede that this was user error on my part, but given this is how numpy behaves, maybe the behavior could be copied.\r\n\r\nHappy to contribute a PR.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/927/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/927/timeline","performed_via_github_app":null,"state_reason":null}