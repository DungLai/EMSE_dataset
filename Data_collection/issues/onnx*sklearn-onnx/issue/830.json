{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/830","repository_url":"https://api.github.com/repos/onnx/sklearn-onnx","labels_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/830/labels{/name}","comments_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/830/comments","events_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/830/events","html_url":"https://github.com/onnx/sklearn-onnx/issues/830","id":1145914339,"node_id":"I_kwDOCa0gS85ETUPj","number":830,"title":"Error converting pipeline: \"Failed to create ONNX node. Undefined attribute pair (default_string, None) found for type 'LabelEncoder' and version 2\"","user":{"login":"torshind","id":23017724,"node_id":"MDQ6VXNlcjIzMDE3NzI0","avatar_url":"https://avatars.githubusercontent.com/u/23017724?v=4","gravatar_id":"","url":"https://api.github.com/users/torshind","html_url":"https://github.com/torshind","followers_url":"https://api.github.com/users/torshind/followers","following_url":"https://api.github.com/users/torshind/following{/other_user}","gists_url":"https://api.github.com/users/torshind/gists{/gist_id}","starred_url":"https://api.github.com/users/torshind/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/torshind/subscriptions","organizations_url":"https://api.github.com/users/torshind/orgs","repos_url":"https://api.github.com/users/torshind/repos","events_url":"https://api.github.com/users/torshind/events{/privacy}","received_events_url":"https://api.github.com/users/torshind/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-21T15:04:35Z","updated_at":"2022-02-24T09:27:31Z","closed_at":"2022-02-24T09:27:31Z","author_association":"NONE","active_lock_reason":null,"body":"Hello,\r\nI attach an example to reproduce.\r\n```\r\nimport sys\r\n\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.compose import make_column_selector as selector\r\nfrom sklearn.datasets import fetch_openml\r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.preprocessing import StandardScaler, OrdinalEncoder\r\nfrom sklearn.linear_model import LogisticRegression\r\nfrom sklearn.model_selection import train_test_split, GridSearchCV\r\nfrom sklearn.pipeline import Pipeline\r\n\r\nnp.random.seed(0)\r\n\r\nX, y = fetch_openml(\"titanic\", version=1, as_frame=True, return_X_y=True)\r\n\r\nX['home_dest'] = X['home.dest']\r\nX = X.drop('home.dest', axis=1)\r\n\r\nX.loc[:, X.select_dtypes(exclude=np.number).columns] = X.select_dtypes(exclude=np.number).apply(lambda x: x.astype(str))\r\nX = X.replace(\"None\", '')\r\n\r\nprint(X.dtypes)\r\n\r\nnumeric_transformer = Pipeline(\r\n    steps=[(\"num_imputer\", SimpleImputer(strategy=\"median\")),\r\n           (\"scaler\", StandardScaler())]\r\n)\r\n\r\ncategorical_transformer = Pipeline(\r\n    steps=[(\"cat_imputer\", SimpleImputer(strategy='most_frequent', missing_values='')),\r\n           (\"encoder\", OrdinalEncoder(dtype=np.int32,\r\n                                      handle_unknown='use_encoded_value',\r\n                                      unknown_value=-999))]\r\n)\r\n\r\npreprocessor = ColumnTransformer(\r\n    transformers=[\r\n        (\"num\", numeric_transformer, selector(dtype_include=np.number)),\r\n        (\"cat\", categorical_transformer, selector(dtype_exclude=np.number)),\r\n    ]\r\n)\r\nclf = Pipeline(\r\n    steps=[(\"preprocessor\", preprocessor), (\"classifier\", LogisticRegression())]\r\n)\r\n\r\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\r\n\r\nclf.fit(X_train, y_train)\r\nprint(\"model score: %.3f\" % clf.score(X_test, y_test))\r\n\r\nfrom skl2onnx.common.data_types import (FloatTensorType, Int64TensorType, StringTensorType)\r\n\r\ndef convert_dataframe_schema(df, drop=None):\r\n    inputs = []\r\n    for k, v in zip(df.columns, df.dtypes):\r\n        if drop is not None and k in drop:\r\n            continue\r\n        if v == 'int64':\r\n            t = Int64TensorType([None, 1])\r\n        elif v == 'float64':\r\n            t = FloatTensorType([None, 1])\r\n        else:\r\n            t = StringTensorType([None, 1])\r\n        inputs.append((k, t))\r\n    return inputs\r\n\r\ninitial_inputs = convert_dataframe_schema(X)\r\n\r\nfrom skl2onnx import convert_sklearn\r\n\r\nimport logging\r\nlog = logging.getLogger('skl2onnx')\r\nlog.setLevel(logging.DEBUG)\r\nlogging.basicConfig(level=logging.DEBUG)\r\n\r\ntry:\r\n    model_onnx = convert_sklearn(clf, 'pipeline_onnx', initial_inputs,\r\n                                 target_opset=14, verbose=1)\r\nexcept Exception as e:\r\n    print(e)\r\n```\r\nOutput:\r\n```\r\nDEBUG:skl2onnx:[Var] +Variable('pclass', 'pclass', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('name', 'name', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('sex', 'sex', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('age', 'age', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('sibsp', 'sibsp', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('parch', 'parch', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('ticket', 'ticket', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('fare', 'fare', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('cabin', 'cabin', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('embarked', 'embarked', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('boat', 'boat', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('body', 'body', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] +Variable('home_dest', 'home_dest', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('pclass', 'pclass', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('name', 'name', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('sex', 'sex', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('age', 'age', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('sibsp', 'sibsp', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('parch', 'parch', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('ticket', 'ticket', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('fare', 'fare', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('cabin', 'cabin', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('embarked', 'embarked', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('boat', 'boat', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('body', 'body', type=FloatTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Var] update is_root=True for Variable('home_dest', 'home_dest', type=StringTensorType(shape=[None, 1]))\r\nDEBUG:skl2onnx:[Op] +Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('pclass', 'pclass', type=FloatTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('age', 'age', type=FloatTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('sibsp', 'sibsp', type=FloatTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('parch', 'parch', type=FloatTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('fare', 'fare', type=FloatTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('body', 'body', type=FloatTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] +Variable('merged_columns', 'merged_columns', type=FloatTensorType(shape=[None, None]))\r\nDEBUG:skl2onnx:[Var] set parent for Variable('merged_columns', 'merged_columns', type=FloatTensorType(shape=[None, None])), parent=Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add Out Variable('merged_columns', 'merged_columns', type=FloatTensorType(shape=[None, None])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='merged_columns', raw_operator=None)\r\nDEBUG:skl2onnx:[parsing] found alias='SklearnSimpleImputer' for type=<class 'sklearn.impute._base.SimpleImputer'>.\r\nDEBUG:skl2onnx:[Op] +Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='', outputs='', raw_operator=SimpleImputer(strategy='median'))\r\nDEBUG:skl2onnx:[Op] add In Variable('merged_columns', 'merged_columns', type=FloatTensorType(shape=[None, None])) to Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='', raw_operator=SimpleImputer(strategy='median'))\r\nDEBUG:skl2onnx:[Var] +Variable('variable', 'variable', type=FloatTensorType(shape=[]))\r\nDEBUG:skl2onnx:[Var] set parent for Variable('variable', 'variable', type=FloatTensorType(shape=[])), parent=Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='', raw_operator=SimpleImputer(strategy='median'))\r\nDEBUG:skl2onnx:[Op] add Out Variable('variable', 'variable', type=FloatTensorType(shape=[])) to Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='variable', raw_operator=SimpleImputer(strategy='median'))\r\nDEBUG:skl2onnx:[parsing] found alias='SklearnScaler' for type=<class 'sklearn.preprocessing._data.StandardScaler'>.\r\nDEBUG:skl2onnx:[Op] +Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='', outputs='', raw_operator=StandardScaler())\r\nDEBUG:skl2onnx:[Var] +Variable('variable', 'variable1', type=FloatTensorType(shape=[]))\r\nDEBUG:skl2onnx:[Var] set parent for Variable('variable', 'variable1', type=FloatTensorType(shape=[])), parent=Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='variable', outputs='', raw_operator=StandardScaler())\r\nDEBUG:skl2onnx:[Op] add Out Variable('variable', 'variable1', type=FloatTensorType(shape=[])) to Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='variable', outputs='variable1', raw_operator=StandardScaler())\r\nDEBUG:skl2onnx:[Op] +Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('name', 'name', type=StringTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('sex', 'sex', type=StringTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('ticket', 'ticket', type=StringTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('cabin', 'cabin', type=StringTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('embarked', 'embarked', type=StringTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('boat', 'boat', type=StringTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('home_dest', 'home_dest', type=StringTensorType(shape=[None, 1])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] +Variable('merged_columns', 'merged_columns1', type=StringTensorType(shape=[None, None]))\r\nDEBUG:skl2onnx:[Var] set parent for Variable('merged_columns', 'merged_columns1', type=StringTensorType(shape=[None, None])), parent=Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add Out Variable('merged_columns', 'merged_columns1', type=StringTensorType(shape=[None, None])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='merged_columns1', raw_operator=None)\r\nDEBUG:skl2onnx:[parsing] found alias='SklearnSimpleImputer' for type=<class 'sklearn.impute._base.SimpleImputer'>.\r\nDEBUG:skl2onnx:[Op] +Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer1', inputs='', outputs='', raw_operator=SimpleImputer(missing_values='', strategy='most_frequent'))\r\nDEBUG:skl2onnx:[Op] add In Variable('merged_columns', 'merged_columns1', type=StringTensorType(shape=[None, None])) to Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer1', inputs='merged_columns1', outputs='', raw_operator=SimpleImputer(missing_values='', strategy='most_frequent'))\r\nDEBUG:skl2onnx:[Var] +Variable('variable', 'variable2', type=StringTensorType(shape=[]))\r\nDEBUG:skl2onnx:[Var] set parent for Variable('variable', 'variable2', type=StringTensorType(shape=[])), parent=Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer1', inputs='merged_columns1', outputs='', raw_operator=SimpleImputer(missing_values='', strategy='most_frequent'))\r\nDEBUG:skl2onnx:[Op] add Out Variable('variable', 'variable2', type=StringTensorType(shape=[])) to Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer1', inputs='merged_columns1', outputs='variable2', raw_operator=SimpleImputer(missing_values='', strategy='most_frequent'))\r\nDEBUG:skl2onnx:[parsing] found alias='SklearnOrdinalEncoder' for type=<class 'sklearn.preprocessing._encoders.OrdinalEncoder'>.\r\nDEBUG:skl2onnx:[Op] +Operator(type='SklearnOrdinalEncoder', onnx_name='SklearnOrdinalEncoder', inputs='', outputs='', raw_operator=OrdinalEncoder(dtype=<class'numpy.int32'>,handle_unknown='use_encoded_value',unknown_value=-999))\r\nDEBUG:skl2onnx:[Var] +Variable('variable', 'variable3', type=FloatTensorType(shape=[]))\r\nDEBUG:skl2onnx:[Var] set parent for Variable('variable', 'variable3', type=FloatTensorType(shape=[])), parent=Operator(type='SklearnOrdinalEncoder', onnx_name='SklearnOrdinalEncoder', inputs='variable2', outputs='', raw_operator=OrdinalEncoder(dtype=<class'numpy.int32'>,handle_unknown='use_encoded_value',unknown_value=-999))\r\nDEBUG:skl2onnx:[Op] add Out Variable('variable', 'variable3', type=FloatTensorType(shape=[])) to Operator(type='SklearnOrdinalEncoder', onnx_name='SklearnOrdinalEncoder', inputs='variable2', outputs='variable3', raw_operator=OrdinalEncoder(dtype=<class'numpy.int32'>,handle_unknown='use_encoded_value',unknown_value=-999))\r\nDEBUG:skl2onnx:[Op] +Operator(type='SklearnConcat', onnx_name='SklearnConcat2', inputs='', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('variable', 'variable1', type=FloatTensorType(shape=[])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat2', inputs='variable1', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add In Variable('variable', 'variable3', type=FloatTensorType(shape=[])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat2', inputs='variable1,variable3', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] +Variable('transformed_column', 'transformed_column', type=FloatTensorType(shape=[None, None]))\r\nDEBUG:skl2onnx:[Var] set parent for Variable('transformed_column', 'transformed_column', type=FloatTensorType(shape=[None, None])), parent=Operator(type='SklearnConcat', onnx_name='SklearnConcat2', inputs='variable1,variable3', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add Out Variable('transformed_column', 'transformed_column', type=FloatTensorType(shape=[None, None])) to Operator(type='SklearnConcat', onnx_name='SklearnConcat2', inputs='variable1,variable3', outputs='transformed_column', raw_operator=None)\r\nDEBUG:skl2onnx:[parsing] found alias='SklearnLinearClassifier' for type=<class 'sklearn.linear_model._logistic.LogisticRegression'>.\r\nDEBUG:skl2onnx:[Op] +Operator(type='SklearnLinearClassifier', onnx_name='SklearnLinearClassifier', inputs='', outputs='', raw_operator=LogisticRegression())\r\nDEBUG:skl2onnx:[Var] +Variable('label', 'label', type=Int64TensorType(shape=[]))\r\nDEBUG:skl2onnx:[Var] +Variable('probabilities', 'probabilities', type=FloatTensorType(shape=[]))\r\nDEBUG:skl2onnx:[Var] set parent for Variable('label', 'label', type=Int64TensorType(shape=[])), parent=Operator(type='SklearnLinearClassifier', onnx_name='SklearnLinearClassifier', inputs='transformed_column', outputs='', raw_operator=LogisticRegression())\r\nDEBUG:skl2onnx:[Op] add Out Variable('label', 'label', type=Int64TensorType(shape=[])) to Operator(type='SklearnLinearClassifier', onnx_name='SklearnLinearClassifier', inputs='transformed_column', outputs='label', raw_operator=LogisticRegression())\r\nDEBUG:skl2onnx:[Var] set parent for Variable('probabilities', 'probabilities', type=FloatTensorType(shape=[])), parent=Operator(type='SklearnLinearClassifier', onnx_name='SklearnLinearClassifier', inputs='transformed_column', outputs='label', raw_operator=LogisticRegression())\r\nDEBUG:skl2onnx:[Op] add Out Variable('probabilities', 'probabilities', type=FloatTensorType(shape=[])) to Operator(type='SklearnLinearClassifier', onnx_name='SklearnLinearClassifier', inputs='transformed_column', outputs='label,probabilities', raw_operator=LogisticRegression())\r\nDEBUG:skl2onnx:[Op] +Operator(type='SklearnZipMap', onnx_name='SklearnZipMap', inputs='', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] +Variable('output_label', 'output_label', type=StringTensorType(shape=[None]))\r\nDEBUG:skl2onnx:[Var] set parent for Variable('output_label', 'output_label', type=StringTensorType(shape=[None])), parent=Operator(type='SklearnZipMap', onnx_name='SklearnZipMap', inputs='label,probabilities', outputs='', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add Out Variable('output_label', 'output_label', type=StringTensorType(shape=[None])) to Operator(type='SklearnZipMap', onnx_name='SklearnZipMap', inputs='label,probabilities', outputs='output_label', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] +Variable('output_probability', 'output_probability', type=SequenceType(element_type=DictionaryType(key_type=StringTensorType(shape=[None]), value_type=FloatTensorType(shape=[]))))\r\nDEBUG:skl2onnx:[Var] set parent for Variable('output_probability', 'output_probability', type=SequenceType(element_type=DictionaryType(key_type=StringTensorType(shape=[None]), value_type=FloatTensorType(shape=[])))), parent=Operator(type='SklearnZipMap', onnx_name='SklearnZipMap', inputs='label,probabilities', outputs='output_label', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] add Out Variable('output_probability', 'output_probability', type=SequenceType(element_type=DictionaryType(key_type=StringTensorType(shape=[None]), value_type=FloatTensorType(shape=[])))) to Operator(type='SklearnZipMap', onnx_name='SklearnZipMap', inputs='label,probabilities', outputs='output_label,output_probability', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] update is_evaluated=True for Operator(type='SklearnZipMap', onnx_name='SklearnZipMap', inputs='label,probabilities', outputs='output_label,output_probability', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] update is_leaf=True for Variable('output_label', 'output_label', type=StringTensorType(shape=[None]))\r\nDEBUG:skl2onnx:[Var] update is_leaf=True for Variable('output_probability', 'output_probability', type=SequenceType(element_type=DictionaryType(key_type=StringTensorType(shape=[None]), value_type=FloatTensorType(shape=[]))))\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('pclass', 'pclass', type=FloatTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('name', 'name', type=StringTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('sex', 'sex', type=StringTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('age', 'age', type=FloatTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('sibsp', 'sibsp', type=FloatTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('parch', 'parch', type=FloatTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('ticket', 'ticket', type=StringTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('fare', 'fare', type=FloatTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('cabin', 'cabin', type=StringTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('embarked', 'embarked', type=StringTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('boat', 'boat', type=StringTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('body', 'body', type=FloatTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('home_dest', 'home_dest', type=StringTensorType(shape=[None, 1])), parent=None\r\nDEBUG:skl2onnx:[Var] update is_fed=False for Variable('merged_columns', 'merged_columns', type=FloatTensorType(shape=[None, None])), parent=Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='merged_columns', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] update is_fed=False for Variable('variable', 'variable', type=FloatTensorType(shape=[])), parent=Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='variable', raw_operator=SimpleImputer(strategy='median'))\r\nDEBUG:skl2onnx:[Var] update is_fed=False for Variable('variable', 'variable1', type=FloatTensorType(shape=[])), parent=Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='variable', outputs='variable1', raw_operator=StandardScaler())\r\nDEBUG:skl2onnx:[Var] update is_fed=False for Variable('merged_columns', 'merged_columns1', type=StringTensorType(shape=[None, None])), parent=Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='merged_columns1', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] update is_fed=False for Variable('variable', 'variable2', type=StringTensorType(shape=[])), parent=Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer1', inputs='merged_columns1', outputs='variable2', raw_operator=SimpleImputer(missing_values='', strategy='most_frequent'))\r\nDEBUG:skl2onnx:[Var] update is_fed=False for Variable('variable', 'variable3', type=FloatTensorType(shape=[])), parent=Operator(type='SklearnOrdinalEncoder', onnx_name='SklearnOrdinalEncoder', inputs='variable2', outputs='variable3', raw_operator=OrdinalEncoder(dtype=<class'numpy.int32'>,handle_unknown='use_encoded_value',unknown_value=-999))\r\nDEBUG:skl2onnx:[Var] update is_fed=False for Variable('transformed_column', 'transformed_column', type=FloatTensorType(shape=[None, None])), parent=Operator(type='SklearnConcat', onnx_name='SklearnConcat2', inputs='variable1,variable3', outputs='transformed_column', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] update is_fed=False for Variable('label', 'label', type=Int64TensorType(shape=[])), parent=Operator(type='SklearnLinearClassifier', onnx_name='SklearnLinearClassifier', inputs='transformed_column', outputs='label,probabilities', raw_operator=LogisticRegression())\r\nDEBUG:skl2onnx:[Var] update is_fed=False for Variable('probabilities', 'probabilities', type=FloatTensorType(shape=[])), parent=Operator(type='SklearnLinearClassifier', onnx_name='SklearnLinearClassifier', inputs='transformed_column', outputs='label,probabilities', raw_operator=LogisticRegression())\r\nDEBUG:skl2onnx:[Var] update is_fed=False for Variable('output_label', 'output_label', type=StringTensorType(shape=[None])), parent=Operator(type='SklearnZipMap', onnx_name='SklearnZipMap', inputs='label,probabilities', outputs='output_label,output_probability', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] update is_fed=False for Variable('output_probability', 'output_probability', type=SequenceType(element_type=DictionaryType(key_type=StringTensorType(shape=[None]), value_type=FloatTensorType(shape=[])))), parent=Operator(type='SklearnZipMap', onnx_name='SklearnZipMap', inputs='label,probabilities', outputs='output_label,output_probability', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] update is_evaluated=False for Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='merged_columns', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] update is_evaluated=False for Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='variable', raw_operator=SimpleImputer(strategy='median'))\r\nDEBUG:skl2onnx:[Op] update is_evaluated=False for Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='variable', outputs='variable1', raw_operator=StandardScaler())\r\nDEBUG:skl2onnx:[Op] update is_evaluated=False for Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='merged_columns1', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] update is_evaluated=False for Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer1', inputs='merged_columns1', outputs='variable2', raw_operator=SimpleImputer(missing_values='', strategy='most_frequent'))\r\nDEBUG:skl2onnx:[Op] update is_evaluated=False for Operator(type='SklearnOrdinalEncoder', onnx_name='SklearnOrdinalEncoder', inputs='variable2', outputs='variable3', raw_operator=OrdinalEncoder(dtype=<class'numpy.int32'>,handle_unknown='use_encoded_value',unknown_value=-999))\r\nDEBUG:skl2onnx:[Op] update is_evaluated=False for Operator(type='SklearnConcat', onnx_name='SklearnConcat2', inputs='variable1,variable3', outputs='transformed_column', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] update is_evaluated=False for Operator(type='SklearnLinearClassifier', onnx_name='SklearnLinearClassifier', inputs='transformed_column', outputs='label,probabilities', raw_operator=LogisticRegression())\r\nDEBUG:skl2onnx:[Op] update is_evaluated=False for Operator(type='SklearnZipMap', onnx_name='SklearnZipMap', inputs='label,probabilities', outputs='output_label,output_probability', raw_operator=None)\r\nDEBUG:skl2onnx:[Shape2] call infer_types for Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='merged_columns', raw_operator=None)\r\nDEBUG:skl2onnx:[Shape-a] Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='merged_columns', raw_operator=None) fed 'TrueTrueTrueTrueTrueTrue' - 'False'\r\nDEBUG:skl2onnx:[Var] update type for Variable('merged_columns', 'merged_columns', type=FloatTensorType(shape=[None, None]))\r\nDEBUG:skl2onnx:[Shape-b] Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='merged_columns', raw_operator=None) inputs=[Variable('pclass', 'pclass', type=FloatTensorType(shape=[None, 1])), Variable('age', 'age', type=FloatTensorType(shape=[None, 1])), Variable('sibsp', 'sibsp', type=FloatTensorType(shape=[None, 1])), Variable('parch', 'parch', type=FloatTensorType(shape=[None, 1])), Variable('fare', 'fare', type=FloatTensorType(shape=[None, 1])), Variable('body', 'body', type=FloatTensorType(shape=[None, 1]))] - outputs=[Variable('merged_columns', 'merged_columns', type=FloatTensorType(shape=[None, 6]))]\r\nDEBUG:skl2onnx:[Conv] call Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='merged_columns', raw_operator=None) fed 'TrueTrueTrueTrueTrueTrue' - 'False'\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'pclass' -> 'pclass_cast' (name='Cast')\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'age' -> 'age_cast' (name='Cast1')\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'sibsp' -> 'sibsp_cast' (name='Cast2')\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'parch' -> 'parch_cast' (name='Cast3')\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'fare' -> 'fare_cast' (name='Cast4')\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'body' -> 'body_cast' (name='Cast5')\r\nDEBUG:skl2onnx:[Node] 'Concat' - 'pclass_cast,age_cast,sibsp_cast,parch_cast,fare_cast,body_cast' -> 'merged_columns' (name='Concat')\r\nDEBUG:skl2onnx:[Conv] end - Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='merged_columns', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] update is_evaluated=True for Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='merged_columns', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('merged_columns', 'merged_columns', type=FloatTensorType(shape=[None, 6])), parent=Operator(type='SklearnConcat', onnx_name='SklearnConcat', inputs='pclass,age,sibsp,parch,fare,body', outputs='merged_columns', raw_operator=None)\r\nDEBUG:skl2onnx:[Shape2] call infer_types for Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='variable', raw_operator=SimpleImputer(strategy='median'))\r\nDEBUG:skl2onnx:[Shape-a] Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='variable', raw_operator=SimpleImputer(strategy='median')) fed 'True' - 'False'\r\nDEBUG:skl2onnx:[Shape-b] Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='variable', raw_operator=SimpleImputer(strategy='median')) inputs=[Variable('merged_columns', 'merged_columns', type=FloatTensorType(shape=[None, 6]))] - outputs=[Variable('variable', 'variable', type=FloatTensorType(shape=[None, 6]))]\r\nDEBUG:skl2onnx:[Conv] call Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='variable', raw_operator=SimpleImputer(strategy='median')) fed 'True' - 'False'\r\nDEBUG:skl2onnx:[Node] 'Imputer' - 'merged_columns' -> 'variable' (name='Imputer')\r\nDEBUG:skl2onnx:[Conv] end - Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='variable', raw_operator=SimpleImputer(strategy='median'))\r\nDEBUG:skl2onnx:[Op] update is_evaluated=True for Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='variable', raw_operator=SimpleImputer(strategy='median'))\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('variable', 'variable', type=FloatTensorType(shape=[None, 6])), parent=Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer', inputs='merged_columns', outputs='variable', raw_operator=SimpleImputer(strategy='median'))\r\nDEBUG:skl2onnx:[Shape2] call infer_types for Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='variable', outputs='variable1', raw_operator=StandardScaler())\r\nDEBUG:skl2onnx:[Shape-a] Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='variable', outputs='variable1', raw_operator=StandardScaler()) fed 'True' - 'False'\r\nDEBUG:skl2onnx:[Shape-b] Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='variable', outputs='variable1', raw_operator=StandardScaler()) inputs=[Variable('variable', 'variable', type=FloatTensorType(shape=[None, 6]))] - outputs=[Variable('variable', 'variable1', type=FloatTensorType(shape=[None, 6]))]\r\nDEBUG:skl2onnx:[Conv] call Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='variable', outputs='variable1', raw_operator=StandardScaler()) fed 'True' - 'False'\r\nDEBUG:skl2onnx:[Node] 'Scaler' - 'variable' -> 'variable1' (name='Scaler')\r\nDEBUG:skl2onnx:[Conv] end - Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='variable', outputs='variable1', raw_operator=StandardScaler())\r\n[convert_sklearn] parse_sklearn_model\r\n[convert_sklearn] convert_topology\r\n[convert_operators] begin\r\n[convert_operators] iteration 1 - n_vars=0 n_ops=9\r\n[call_converter] call converter for 'SklearnConcat'.\r\n[call_converter] call converter for 'SklearnSimpleImputer'.\r\n[call_converter] call converter for 'SklearnScaler'.\r\nDEBUG:skl2onnx:[Op] update is_evaluated=True for Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='variable', outputs='variable1', raw_operator=StandardScaler())\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('variable', 'variable1', type=FloatTensorType(shape=[None, 6])), parent=Operator(type='SklearnScaler', onnx_name='SklearnScaler', inputs='variable', outputs='variable1', raw_operator=StandardScaler())\r\nDEBUG:skl2onnx:[Shape2] call infer_types for Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='merged_columns1', raw_operator=None)\r\nDEBUG:skl2onnx:[Shape-a] Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='merged_columns1', raw_operator=None) fed 'TrueTrueTrueTrueTrueTrueTrue' - 'False'\r\nDEBUG:skl2onnx:[Var] update type for Variable('merged_columns', 'merged_columns1', type=StringTensorType(shape=[None, None]))\r\nDEBUG:skl2onnx:[Shape-b] Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='merged_columns1', raw_operator=None) inputs=[Variable('name', 'name', type=StringTensorType(shape=[None, 1])), Variable('sex', 'sex', type=StringTensorType(shape=[None, 1])), Variable('ticket', 'ticket', type=StringTensorType(shape=[None, 1])), Variable('cabin', 'cabin', type=StringTensorType(shape=[None, 1])), Variable('embarked', 'embarked', type=StringTensorType(shape=[None, 1])), Variable('boat', 'boat', type=StringTensorType(shape=[None, 1])), Variable('home_dest', 'home_dest', type=StringTensorType(shape=[None, 1]))] - outputs=[Variable('merged_columns', 'merged_columns1', type=StringTensorType(shape=[None, 7]))]\r\nDEBUG:skl2onnx:[Conv] call Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='merged_columns1', raw_operator=None) fed 'TrueTrueTrueTrueTrueTrueTrue' - 'False'\r\n[call_converter] call converter for 'SklearnConcat'.\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'name' -> 'name_cast' (name='Cast6')\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'sex' -> 'sex_cast' (name='Cast7')\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'ticket' -> 'ticket_cast' (name='Cast8')\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'cabin' -> 'cabin_cast' (name='Cast9')\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'embarked' -> 'embarked_cast' (name='Cast10')\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'boat' -> 'boat_cast' (name='Cast11')\r\nDEBUG:skl2onnx:[Node] 'Cast' - 'home_dest' -> 'home_dest_cast' (name='Cast12')\r\nDEBUG:skl2onnx:[Node] 'Concat' - 'name_cast,sex_cast,ticket_cast,cabin_cast,embarked_cast,boat_cast,home_dest_cast' -> 'merged_columns1' (name='Concat1')\r\nDEBUG:skl2onnx:[Conv] end - Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='merged_columns1', raw_operator=None)\r\nDEBUG:skl2onnx:[Op] update is_evaluated=True for Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='merged_columns1', raw_operator=None)\r\nDEBUG:skl2onnx:[Var] update is_fed=True for Variable('merged_columns', 'merged_columns1', type=StringTensorType(shape=[None, 7])), parent=Operator(type='SklearnConcat', onnx_name='SklearnConcat1', inputs='name,sex,ticket,cabin,embarked,boat,home_dest', outputs='merged_columns1', raw_operator=None)\r\nDEBUG:skl2onnx:[Shape2] call infer_types for Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer1', inputs='merged_columns1', outputs='variable2', raw_operator=SimpleImputer(missing_values='', strategy='most_frequent'))\r\nDEBUG:skl2onnx:[Shape-a] Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer1', inputs='merged_columns1', outputs='variable2', raw_operator=SimpleImputer(missing_values='', strategy='most_frequent')) fed 'True' - 'False'\r\nDEBUG:skl2onnx:[Shape-b] Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer1', inputs='merged_columns1', outputs='variable2', raw_operator=SimpleImputer(missing_values='', strategy='most_frequent')) inputs=[Variable('merged_columns', 'merged_columns1', type=StringTensorType(shape=[None, 7]))] - outputs=[Variable('variable', 'variable2', type=StringTensorType(shape=[None, 7]))]\r\nDEBUG:skl2onnx:[Conv] call Operator(type='SklearnSimpleImputer', onnx_name='SklearnSimpleImputer1', inputs='merged_columns1', outputs='variable2', raw_operator=SimpleImputer(missing_values='', strategy='most_frequent')) fed 'True' - 'False'\r\nDEBUG:skl2onnx:[Init] 'zero', 7, [1]\r\nDEBUG:skl2onnx:[Node] 'LabelEncoder' - 'zero' -> 'fillvalue' (name='N17')\r\n[call_converter] call converter for 'SklearnSimpleImputer'.\r\nFailed to create ONNX node. Undefined attribute pair (default_string, None) found for type 'LabelEncoder' and version 2\r\n```\r\n\r\nThe conversion from category to string became necessary because using pd.NA as missing_values I get a type error.\r\n\r\nVersions:\r\npython 3.9.7\r\nonnx==1.11.0\r\nskl2onnx @ git+https://github.com/onnx/sklearn-onnx.git@c0a0eb8dd4033fdee36421665a05c9e19de4436e\r\n","closed_by":{"login":"xadupre","id":22452781,"node_id":"MDQ6VXNlcjIyNDUyNzgx","avatar_url":"https://avatars.githubusercontent.com/u/22452781?v=4","gravatar_id":"","url":"https://api.github.com/users/xadupre","html_url":"https://github.com/xadupre","followers_url":"https://api.github.com/users/xadupre/followers","following_url":"https://api.github.com/users/xadupre/following{/other_user}","gists_url":"https://api.github.com/users/xadupre/gists{/gist_id}","starred_url":"https://api.github.com/users/xadupre/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/xadupre/subscriptions","organizations_url":"https://api.github.com/users/xadupre/orgs","repos_url":"https://api.github.com/users/xadupre/repos","events_url":"https://api.github.com/users/xadupre/events{/privacy}","received_events_url":"https://api.github.com/users/xadupre/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/830/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/onnx/sklearn-onnx/issues/830/timeline","performed_via_github_app":null,"state_reason":"completed"}