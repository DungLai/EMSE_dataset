{"url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/49","repository_url":"https://api.github.com/repos/adambielski/siamese-triplet","labels_url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/49/labels{/name}","comments_url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/49/comments","events_url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/49/events","html_url":"https://github.com/adambielski/siamese-triplet/issues/49","id":602846237,"node_id":"MDU6SXNzdWU2MDI4NDYyMzc=","number":49,"title":"Different device error ","user":{"login":"heet2201","id":43903682,"node_id":"MDQ6VXNlcjQzOTAzNjgy","avatar_url":"https://avatars.githubusercontent.com/u/43903682?v=4","gravatar_id":"","url":"https://api.github.com/users/heet2201","html_url":"https://github.com/heet2201","followers_url":"https://api.github.com/users/heet2201/followers","following_url":"https://api.github.com/users/heet2201/following{/other_user}","gists_url":"https://api.github.com/users/heet2201/gists{/gist_id}","starred_url":"https://api.github.com/users/heet2201/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/heet2201/subscriptions","organizations_url":"https://api.github.com/users/heet2201/orgs","repos_url":"https://api.github.com/users/heet2201/repos","events_url":"https://api.github.com/users/heet2201/events{/privacy}","received_events_url":"https://api.github.com/users/heet2201/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-04-19T23:09:12Z","updated_at":"2020-04-20T14:45:43Z","closed_at":"2020-04-20T14:45:43Z","author_association":"NONE","active_lock_reason":null,"body":"I am initially loading data into CPU and after that passing it to GPU, but it gives the following error,\r\n\r\n>  **Input type (torch.cuda.DoubleTensor) and weight type (torch.cuda.FloatTensor) should be the same**\r\n\r\n\r\nAttaching code at below, (I am using own custom data)\r\n\r\n```\r\nclass Data_Load(Dataset):\r\n    def __init__(self,train_path,test_path,train):\r\n        # Transforms\r\n        \r\n        # self.transform = transform\r\n        # Read the csv file\r\n        self.train=train\r\n        if self.train:\r\n            self.train_data_info = pd.read_csv(train_path,header=None)\r\n            self.train_data =[] \r\n            \r\n            print(\"printing train data length CUHK\")\r\n            print(len(self.train_data_info.index))\r\n\r\n            for (i,j) in enumerate(np.asarray(self.train_data_info.iloc[:, 0])):\r\n                try:\r\n                    self.train_data.append(np.moveaxis(cv2.imread(j)[:,:,:3]/ 255., -1, 0))\r\n                except:\r\n                    print(j)\r\n\r\n            self.train_data = np.stack(self.train_data)\r\n            self.train_labels = np.asarray(self.train_data_info.iloc[:, 1])\r\n            self.train_labels = torch.from_numpy(self.train_labels)\r\n\r\n            self.train_data_len = len(self.train_data_info.index)\r\n\r\n        else :\r\n            self.test_data_info = pd.read_csv(test_path,header=None)\r\n            self.test_data =[] \r\n\r\n            print(\"printing test data length CUHK\")\r\n            print(len(self.test_data_info.index))\r\n\r\n            for (i,j) in enumerate(np.asarray(self.test_data_info.iloc[:, 0])):\r\n                try : \r\n                    self.test_data.append(np.moveaxis(cv2.imread(j)[:,:,:3] / 255., -1, 0))\r\n                except : \r\n                    print(j)  \r\n\r\n            self.test_data = np.stack(self.test_data)\r\n            self.test_labels = np.asarray(self.test_data_info.iloc[:, 1])\r\n            self.test_labels = torch.from_numpy(self.test_labels)\r\n            \r\n            self.test_data_len = len(self.test_data_info.index)\r\n            \r\n\r\n    def __getitem__(self, index):\r\n        if self.train:\r\n            img, target = self.train_data[index], self.train_labels[index]\r\n        else:\r\n            img, target = self.test_data[index], self.test_labels[index]\r\n\r\n        return (img,target)\r\n\r\n    def __len__(self):\r\n        if self.train :\r\n            return self.train_data_len\r\n        else :\r\n            return `self.test_data_len\r\n```\r\n\r\nAnd in the trainer.py\r\n\r\n```\r\n......\r\nfor batch_idx, (data, target) in enumerate(train_loader):\r\n        target = target if len(target) > 0 else None\r\n        if not type(data) in (tuple, list):\r\n            data = (data,)\r\n        \r\n        if cuda:\r\n            data = tuple(d.float().cuda() for d in data)\r\n            if target is not None:\r\n                target = target.float().cuda()\r\n\r\n        optimizer.zero_grad()\r\n        outputs = model(*data)\r\n.....\r\n```\r\nTraceback :\r\n\r\n> ---------------------------------------------------------------------------\r\n> RuntimeError                              Traceback (most recent call last)\r\n> <ipython-input-13-49277b91f203> in <module>()\r\n> ----> 1 fit(online_train_loader, online_test_loader, model, loss_fn, optimizer, scheduler, n_epochs, cuda, log_interval)\r\n> \r\n> 8 frames\r\n> /content/siamese-triplet/trainer.py in fit(train_loader, val_loader, model, loss_fn, optimizer, scheduler, n_epochs, cuda, log_interval, metrics, start_epoch)\r\n>      21 \r\n>      22         # Train stage\r\n> ---> 23         train_loss, metrics = train_epoch(train_loader, model, loss_fn, optimizer, cuda, log_interval, metrics)\r\n>      24 \r\n>      25         message = 'Epoch: {}/{}. Train set: Average loss: {:.4f}'.format(epoch + 1, n_epochs, train_loss)\r\n> \r\n> /content/siamese-triplet/trainer.py in train_epoch(train_loader, model, loss_fn, optimizer, cuda, log_interval, metrics)\r\n>      57 \r\n>      58         optimizer.zero_grad()\r\n> ---> 59         outputs = model(*data)\r\n>      60 \r\n>      61         if type(outputs) not in (tuple, list):\r\n> \r\n> /usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n>     530             result = self._slow_forward(*input, **kwargs)\r\n>     531         else:\r\n> --> 532             result = self.forward(*input, **kwargs)\r\n>     533         for hook in self._forward_hooks.values():\r\n>     534             hook_result = hook(self, input, result)\r\n> \r\n> /content/siamese-triplet/networks.py in forward(self, x)\r\n>      43 \r\n>      44     def forward(self, x):\r\n> ---> 45         output = self.convnet(x)\r\n>      46         output = output.view(output.size()[0], -1)\r\n>      47         output = self.fc(output)\r\n> \r\n> /usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n>     530             result = self._slow_forward(*input, **kwargs)\r\n>     531         else:\r\n> --> 532             result = self.forward(*input, **kwargs)\r\n>     533         for hook in self._forward_hooks.values():\r\n>     534             hook_result = hook(self, input, result)\r\n> \r\n> /usr/local/lib/python3.6/dist-packages/torch/nn/modules/container.py in forward(self, input)\r\n>      98     def forward(self, input):\r\n>      99         for module in self:\r\n> --> 100             input = module(input)\r\n>     101         return input\r\n>     102 \r\n> \r\n> /usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs)\r\n>     530             result = self._slow_forward(*input, **kwargs)\r\n>     531         else:\r\n> --> 532             result = self.forward(*input, **kwargs)\r\n>     533         for hook in self._forward_hooks.values():\r\n>     534             hook_result = hook(self, input, result)\r\n> \r\n> /usr/local/lib/python3.6/dist-packages/torch/nn/modules/conv.py in forward(self, input)\r\n>     343 \r\n>     344     def forward(self, input):\r\n> --> 345         return self.conv2d_forward(input, self.weight)\r\n>     346 \r\n>     347 class Conv3d(_ConvNd):\r\n> \r\n> /usr/local/lib/python3.6/dist-packages/torch/nn/modules/conv.py in conv2d_forward(self, input, weight)\r\n>     340                             _pair(0), self.dilation, self.groups)\r\n>     341         return F.conv2d(input, weight, self.bias, self.stride,\r\n> --> 342                         self.padding, self.dilation, self.groups)\r\n>     343 \r\n>     344     def forward(self, input):\r\n> \r\n> RuntimeError: Input type (torch.cuda.DoubleTensor) and weight type (torch.cuda.FloatTensor) should be the same\r\n\r\nCan anyone help me to sort out? \r\n\r\nThank You.","closed_by":{"login":"adambielski","id":14027793,"node_id":"MDQ6VXNlcjE0MDI3Nzkz","avatar_url":"https://avatars.githubusercontent.com/u/14027793?v=4","gravatar_id":"","url":"https://api.github.com/users/adambielski","html_url":"https://github.com/adambielski","followers_url":"https://api.github.com/users/adambielski/followers","following_url":"https://api.github.com/users/adambielski/following{/other_user}","gists_url":"https://api.github.com/users/adambielski/gists{/gist_id}","starred_url":"https://api.github.com/users/adambielski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/adambielski/subscriptions","organizations_url":"https://api.github.com/users/adambielski/orgs","repos_url":"https://api.github.com/users/adambielski/repos","events_url":"https://api.github.com/users/adambielski/events{/privacy}","received_events_url":"https://api.github.com/users/adambielski/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/49/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/49/timeline","performed_via_github_app":null,"state_reason":"completed"}