{"url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/61","repository_url":"https://api.github.com/repos/adambielski/siamese-triplet","labels_url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/61/labels{/name}","comments_url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/61/comments","events_url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/61/events","html_url":"https://github.com/adambielski/siamese-triplet/issues/61","id":851236102,"node_id":"MDU6SXNzdWU4NTEyMzYxMDI=","number":61,"title":"utils.py:FunctionNegativeTripletSelector -  'anchor_positive' referenced before assignment when len(label_indices) < 2","user":{"login":"Trotts","id":9531671,"node_id":"MDQ6VXNlcjk1MzE2NzE=","avatar_url":"https://avatars.githubusercontent.com/u/9531671?v=4","gravatar_id":"","url":"https://api.github.com/users/Trotts","html_url":"https://github.com/Trotts","followers_url":"https://api.github.com/users/Trotts/followers","following_url":"https://api.github.com/users/Trotts/following{/other_user}","gists_url":"https://api.github.com/users/Trotts/gists{/gist_id}","starred_url":"https://api.github.com/users/Trotts/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Trotts/subscriptions","organizations_url":"https://api.github.com/users/Trotts/orgs","repos_url":"https://api.github.com/users/Trotts/repos","events_url":"https://api.github.com/users/Trotts/events{/privacy}","received_events_url":"https://api.github.com/users/Trotts/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2021-04-06T09:27:10Z","updated_at":"2021-05-06T08:10:46Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, \r\n\r\nFirst off I'd like to say thank you for making this repo, it has been immensely helpful to my research! I believe I have found a bug in utils.py: FunctionNegativeTripletSelector when working with certain datasets. Specifically, the issue occurs on lines 174-175:\r\n\r\n```\r\nif len(triplets) == 0:\r\n            triplets.append([anchor_positive[0], anchor_positive[1], negative_indices[0]])\r\n\r\n```\r\nWhen the dataset is small, for example a validation set of an already small dataset, it may not be possible for `label_indices` defined on line 161 to ever be >= 2. This is then checked on line 159-160:\r\n\r\n```\r\nif len(label_indices) < 2:\r\n                continue\r\n\r\n```\r\n\r\nIf every `label_indices` causes the `continue` to run, then `len(triplets)` will be 0. This triggers the offending code on lines 174-175. However at this point under the conditions, `anchor_positive` has not yet been defined, leading to a fatal error. \r\n\r\nTo test this, I created a training and validation split, with the validation set being of the following size:\r\n\r\n```\r\nunique, counts = np.unique(val_dataset.val_labels, return_counts=True)\r\nprint(\"y_val: len\", len(unique), \"\\n\", np.asarray((unique, counts)).T, \"\\n\")\r\n\r\ny_val: len 28 \r\n [[ 1  2]\r\n [ 2  2]\r\n [ 3  4]\r\n [ 4  2]\r\n [ 7  2]\r\n [ 8  5]\r\n [11  6]\r\n [13  3]\r\n [14  4]\r\n [15  3]\r\n [16  4]\r\n [18  3]\r\n [19  2]\r\n [21  2]\r\n [22  3]\r\n [23  2]\r\n [24  2]\r\n [25  3]\r\n [26  3]\r\n [28  5]\r\n [29  3]\r\n [31  2]\r\n [32  2]\r\n [34  5]\r\n [37  2]\r\n [39  2]\r\n [41  2]\r\n [44  2]] \r\n\r\n```\r\n\r\nTraining occurs as normal, as the offending conditional is never hit:\r\n\r\n```\r\n\r\nTRAINING\r\nlabels: [ 4  4 34 34 11 11  3  3  2  2 13 13 32 32 16 16 22 22 39 39 29 29 25 25\r\n  8  8 24 24 37 37 41 41 44 44 18 18 21 21 31 31 23 23  1  1 15 15  7  7\r\n 26 26 28 28 14 14 19 19]\r\nlabel_indices [42 43]\r\nlabel_indices [8 9]\r\nlabel_indices [6 7]\r\nlabel_indices [0 1]\r\nlabel_indices [46 47]\r\nlabel_indices [24 25]\r\nlabel_indices [4 5]\r\nlabel_indices [10 11]\r\nlabel_indices [52 53]\r\nlabel_indices [44 45]\r\nlabel_indices [14 15]\r\nlabel_indices [34 35]\r\nlabel_indices [54 55]\r\nlabel_indices [36 37]\r\nlabel_indices [16 17]\r\nlabel_indices [40 41]\r\nlabel_indices [26 27]\r\nlabel_indices [22 23]\r\nlabel_indices [48 49]\r\nlabel_indices [50 51]\r\nlabel_indices [20 21]\r\nlabel_indices [38 39]\r\nlabel_indices [12 13]\r\nlabel_indices [2 3]\r\nlabel_indices [28 29]\r\nlabel_indices [18 19]\r\nlabel_indices [30 31]\r\nlabel_indices [32 33]\r\nTrain: [0/181 (0%)]\tLoss: 0.987690\tAverage nonzero triplets: 28.0\r\n```\r\n\r\nHowever the validation set falls foul:\r\n\r\n```\r\nVALIDATION\r\nlabels: [19 13  4 15 14 31 37 21 11 26  3  1 41 29 34  2  8 23 28 39 44 22 32 18\r\n 24 16 25  7]\r\nlabel_indices [11]\r\ncontinue triggered\r\nlabel_indices [15]\r\ncontinue triggered\r\nlabel_indices [10]\r\ncontinue triggered\r\nlabel_indices [2]\r\ncontinue triggered\r\nlabel_indices [27]\r\ncontinue triggered\r\nlabel_indices [16]\r\ncontinue triggered\r\nlabel_indices [8]\r\ncontinue triggered\r\nlabel_indices [1]\r\ncontinue triggered\r\nlabel_indices [4]\r\ncontinue triggered\r\nlabel_indices [3]\r\ncontinue triggered\r\nlabel_indices [25]\r\ncontinue triggered\r\nlabel_indices [23]\r\ncontinue triggered\r\nlabel_indices [0]\r\ncontinue triggered\r\nlabel_indices [7]\r\ncontinue triggered\r\nlabel_indices [21]\r\ncontinue triggered\r\nlabel_indices [17]\r\ncontinue triggered\r\nlabel_indices [24]\r\ncontinue triggered\r\nlabel_indices [26]\r\ncontinue triggered\r\nlabel_indices [9]\r\ncontinue triggered\r\nlabel_indices [18]\r\ncontinue triggered\r\nlabel_indices [13]\r\ncontinue triggered\r\nlabel_indices [5]\r\ncontinue triggered\r\nlabel_indices [22]\r\ncontinue triggered\r\nlabel_indices [14]\r\ncontinue triggered\r\nlabel_indices [6]\r\ncontinue triggered\r\nlabel_indices [19]\r\ncontinue triggered\r\nlabel_indices [12]\r\ncontinue triggered\r\nlabel_indices [20]\r\ncontinue triggered\r\n\r\nTraceback (most recent call last):\r\n  File \"/trainer.py\", line 53, in fit\r\n    val_loss, metrics = test_epoch(val_loader, model, loss_fn, cuda, metrics)\r\n  File \"/trainer.py\", line 190, in test_epoch\r\n    loss_outputs = loss_fn(*loss_inputs)\r\n  File \"/module.py\", line 727, in _call_impl\r\n    result = self.forward(*input, **kwargs)\r\n  File \"/losses.py\", line 82, in forward\r\n    triplets = self.triplet_selector.get_triplets(embeddings, target)\r\n  File \"/utils.py\", line 187, in get_triplets\r\n    triplets.append([anchor_positive[0], anchor_positive[1], negative_indices[0]])\r\nUnboundLocalError: local variable 'anchor_positive' referenced before assignment\r\n\r\n```\r\nNote the line numbers above may be different from the repo's code due to the print statements. To me, it seems like currently the only way around this error would be to increase the size of the dataset, increasing the chance of `label_indices` at some point being >=2. `anchor_positive` needs to be defined somewhere before the offending conditional to stop the error, but I'm unsure where or how in order to fix. \r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/61/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/adambielski/siamese-triplet/issues/61/timeline","performed_via_github_app":null,"state_reason":null}