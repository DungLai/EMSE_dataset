{"url":"https://api.github.com/repos/MillionIntegrals/vel/issues/53","repository_url":"https://api.github.com/repos/MillionIntegrals/vel","labels_url":"https://api.github.com/repos/MillionIntegrals/vel/issues/53/labels{/name}","comments_url":"https://api.github.com/repos/MillionIntegrals/vel/issues/53/comments","events_url":"https://api.github.com/repos/MillionIntegrals/vel/issues/53/events","html_url":"https://github.com/MillionIntegrals/vel/issues/53","id":497043140,"node_id":"MDU6SXNzdWU0OTcwNDMxNDA=","number":53,"title":"Multiple optimizers support","user":{"login":"galatolofederico","id":15450580,"node_id":"MDQ6VXNlcjE1NDUwNTgw","avatar_url":"https://avatars.githubusercontent.com/u/15450580?v=4","gravatar_id":"","url":"https://api.github.com/users/galatolofederico","html_url":"https://github.com/galatolofederico","followers_url":"https://api.github.com/users/galatolofederico/followers","following_url":"https://api.github.com/users/galatolofederico/following{/other_user}","gists_url":"https://api.github.com/users/galatolofederico/gists{/gist_id}","starred_url":"https://api.github.com/users/galatolofederico/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/galatolofederico/subscriptions","organizations_url":"https://api.github.com/users/galatolofederico/orgs","repos_url":"https://api.github.com/users/galatolofederico/repos","events_url":"https://api.github.com/users/galatolofederico/events{/privacy}","received_events_url":"https://api.github.com/users/galatolofederico/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":{"login":"MillionIntegrals","id":2262651,"node_id":"MDQ6VXNlcjIyNjI2NTE=","avatar_url":"https://avatars.githubusercontent.com/u/2262651?v=4","gravatar_id":"","url":"https://api.github.com/users/MillionIntegrals","html_url":"https://github.com/MillionIntegrals","followers_url":"https://api.github.com/users/MillionIntegrals/followers","following_url":"https://api.github.com/users/MillionIntegrals/following{/other_user}","gists_url":"https://api.github.com/users/MillionIntegrals/gists{/gist_id}","starred_url":"https://api.github.com/users/MillionIntegrals/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MillionIntegrals/subscriptions","organizations_url":"https://api.github.com/users/MillionIntegrals/orgs","repos_url":"https://api.github.com/users/MillionIntegrals/repos","events_url":"https://api.github.com/users/MillionIntegrals/events{/privacy}","received_events_url":"https://api.github.com/users/MillionIntegrals/received_events","type":"User","site_admin":false},"assignees":[{"login":"MillionIntegrals","id":2262651,"node_id":"MDQ6VXNlcjIyNjI2NTE=","avatar_url":"https://avatars.githubusercontent.com/u/2262651?v=4","gravatar_id":"","url":"https://api.github.com/users/MillionIntegrals","html_url":"https://github.com/MillionIntegrals","followers_url":"https://api.github.com/users/MillionIntegrals/followers","following_url":"https://api.github.com/users/MillionIntegrals/following{/other_user}","gists_url":"https://api.github.com/users/MillionIntegrals/gists{/gist_id}","starred_url":"https://api.github.com/users/MillionIntegrals/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MillionIntegrals/subscriptions","organizations_url":"https://api.github.com/users/MillionIntegrals/orgs","repos_url":"https://api.github.com/users/MillionIntegrals/repos","events_url":"https://api.github.com/users/MillionIntegrals/events{/privacy}","received_events_url":"https://api.github.com/users/MillionIntegrals/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2019-09-23T11:34:38Z","updated_at":"2019-11-09T19:03:38Z","closed_at":"2019-11-09T19:03:38Z","author_association":"NONE","active_lock_reason":null,"body":"Some architectures like GANs use two or more optimizers and it would be nice to add this behavior to vel.\r\nvel right now relies on the function `calculate_gradient` to compute the loss backward. What do you think if instead the `calculate_gradient` will return a list of loss tensors (and metrics) and the Trainer will also have a list of optimizers and the backward() will be called by the Trainer in the `train_batch` function.\r\n\r\nI am thinking about something like\r\n```\r\nfor loss, optimizer in zip(self.model.calculate_gradient(), self.model.optimizers):\r\n   optimizer.zero_grad()\r\n   loss.backward()\r\n   #clip gradients\r\n   optimizer.step()\r\n```\r\n\r\nThe `calculate_gradient` can be also retro compatible by checking the return type (dict or list).\r\n\r\nWhat do you think? if you are ok with it i can work on it :smiley: ","closed_by":{"login":"MillionIntegrals","id":2262651,"node_id":"MDQ6VXNlcjIyNjI2NTE=","avatar_url":"https://avatars.githubusercontent.com/u/2262651?v=4","gravatar_id":"","url":"https://api.github.com/users/MillionIntegrals","html_url":"https://github.com/MillionIntegrals","followers_url":"https://api.github.com/users/MillionIntegrals/followers","following_url":"https://api.github.com/users/MillionIntegrals/following{/other_user}","gists_url":"https://api.github.com/users/MillionIntegrals/gists{/gist_id}","starred_url":"https://api.github.com/users/MillionIntegrals/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MillionIntegrals/subscriptions","organizations_url":"https://api.github.com/users/MillionIntegrals/orgs","repos_url":"https://api.github.com/users/MillionIntegrals/repos","events_url":"https://api.github.com/users/MillionIntegrals/events{/privacy}","received_events_url":"https://api.github.com/users/MillionIntegrals/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/MillionIntegrals/vel/issues/53/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/MillionIntegrals/vel/issues/53/timeline","performed_via_github_app":null,"state_reason":"completed"}