[{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/comments/500125590","html_url":"https://github.com/nanoporetech/taiyaki/issues/24#issuecomment-500125590","issue_url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/24","id":500125590,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMDEyNTU5MA==","user":{"login":"lpryszcz","id":988152,"node_id":"MDQ6VXNlcjk4ODE1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/988152?v=4","gravatar_id":"","url":"https://api.github.com/users/lpryszcz","html_url":"https://github.com/lpryszcz","followers_url":"https://api.github.com/users/lpryszcz/followers","following_url":"https://api.github.com/users/lpryszcz/following{/other_user}","gists_url":"https://api.github.com/users/lpryszcz/gists{/gist_id}","starred_url":"https://api.github.com/users/lpryszcz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lpryszcz/subscriptions","organizations_url":"https://api.github.com/users/lpryszcz/orgs","repos_url":"https://api.github.com/users/lpryszcz/repos","events_url":"https://api.github.com/users/lpryszcz/events{/privacy}","received_events_url":"https://api.github.com/users/lpryszcz/received_events","type":"User","site_admin":false},"created_at":"2019-06-08T13:48:23Z","updated_at":"2019-06-08T13:48:23Z","author_association":"CONTRIBUTOR","body":"it still fails, it looks that the vRAM memory is not released after basecalling batches of reads... \r\nUsually it fails after a few thousands reads, but sometimes it happens after a few hundred! Any idea? \r\n```\r\n..................................................    8850\r\n................................Traceback (most recent call last):\r\nFile \"/home/lpryszcz/src/taiyaki/venv/bin/basecall.py\", line 7, in <module>\r\nexec(compile(f.read(), __file__, 'exec'))\r\nFile \"/home/lpryszcz/src/taiyaki/bin/basecall.py\", line 198, in <module>\r\nmain()\r\nFile \"/home/lpryszcz/src/taiyaki/bin/basecall.py\", line 177, in main\r\nis_cat_mod, mods_fp)\r\nFile \"/home/lpryszcz/src/taiyaki/bin/basecall.py\", line 83, in process_read\r\nout = model(torch.tensor(chunks, device=device))\r\nFile \"/home/lpryszcz/src/taiyaki/venv/lib/python3.7/site-packages/torch/nn/modules/module.py\", line 489, in __call__\r\nresult = self.forward(*input, **kwargs)\r\nFile \"/home/lpryszcz/src/taiyaki/taiyaki/layers.py\", line 487, in forward\r\nx = layer(x)\r\nFile \"/home/lpryszcz/src/taiyaki/venv/lib/python3.7/site-packages/torch/nn/modules/module.py\", line 489, in __call__\r\nresult = self.forward(*input, **kwargs)\r\nFile \"/home/lpryszcz/src/taiyaki/taiyaki/layers.py\", line 80, in forward\r\nreturn reverse(self.layer(reverse(x)))\r\nFile \"/home/lpryszcz/src/taiyaki/venv/lib/python3.7/site-packages/torch/nn/modules/module.py\", line 489, in __call__\r\nresult = self.forward(*input, **kwargs)\r\nFile \"/home/lpryszcz/src/taiyaki/taiyaki/layers.py\", line 362, in forward\r\ny, hy = self.cudnn_gru.forward(x)\r\nFile \"/home/lpryszcz/src/taiyaki/venv/lib/python3.7/site-packages/torch/nn/modules/rnn.py\", line 179, in forward\r\nself.dropout, self.training, self.bidirectional, self.batch_first)\r\nRuntimeError: CUDA out of memory. Tried to allocate 7.61 GiB (GPU 0; 10.92 GiB total capacity; 3.94 GiB already allocated; 1.85 GiB free; 4.55 GiB cached)\r\n```\r\n\r\n```\r\n* Calling reads.\r\n..................................................      50\r\n..................................................     100\r\n..........................Traceback (most recent call last):\r\nFile \"/home/lpryszcz/src/taiyaki/venv/bin/basecall.py\", line 7, in <module>\r\nexec(compile(f.read(), __file__, 'exec'))\r\nFile \"/home/lpryszcz/src/taiyaki/bin/basecall.py\", line 198, in <module>\r\nmain()\r\nFile \"/home/lpryszcz/src/taiyaki/bin/basecall.py\", line 177, in main\r\nis_cat_mod, mods_fp)\r\nFile \"/home/lpryszcz/src/taiyaki/bin/basecall.py\", line 83, in process_read\r\nout = model(torch.tensor(chunks, device=device))\r\nFile \"/home/lpryszcz/src/taiyaki/venv/lib/python3.7/site-packages/torch/nn/modules/module.py\", line 489, in __call__\r\nresult = self.forward(*input, **kwargs)\r\nFile \"/home/lpryszcz/src/taiyaki/taiyaki/layers.py\", line 487, in forward\r\nx = layer(x)\r\nFile \"/home/lpryszcz/src/taiyaki/venv/lib/python3.7/site-packages/torch/nn/modules/module.py\", line 489, in __call__\r\nresult = self.forward(*input, **kwargs)\r\nFile \"/home/lpryszcz/src/taiyaki/taiyaki/layers.py\", line 80, in forward\r\nreturn reverse(self.layer(reverse(x)))\r\nFile \"/home/lpryszcz/src/taiyaki/venv/lib/python3.7/site-packages/torch/nn/modules/module.py\", line 489, in __call__\r\nresult = self.forward(*input, **kwargs)\r\nFile \"/home/lpryszcz/src/taiyaki/taiyaki/layers.py\", line 362, in forward\r\ny, hy = self.cudnn_gru.forward(x)\r\nFile \"/home/lpryszcz/src/taiyaki/venv/lib/python3.7/site-packages/torch/nn/modules/rnn.py\", line 179, in forward\r\nself.dropout, self.training, self.bidirectional, self.batch_first)\r\nRuntimeError: CUDA out of memory. Tried to allocate 7.38 GiB (GPU 0; 10.92 GiB total capacity; 3.82 GiB already allocated; 6.19 GiB free; 333.31 MiB cached)\r\n```","reactions":{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/comments/500125590/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"lpryszcz","id":988152,"node_id":"MDQ6VXNlcjk4ODE1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/988152?v=4","gravatar_id":"","url":"https://api.github.com/users/lpryszcz","html_url":"https://github.com/lpryszcz","followers_url":"https://api.github.com/users/lpryszcz/followers","following_url":"https://api.github.com/users/lpryszcz/following{/other_user}","gists_url":"https://api.github.com/users/lpryszcz/gists{/gist_id}","starred_url":"https://api.github.com/users/lpryszcz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lpryszcz/subscriptions","organizations_url":"https://api.github.com/users/lpryszcz/orgs","repos_url":"https://api.github.com/users/lpryszcz/repos","events_url":"https://api.github.com/users/lpryszcz/events{/privacy}","received_events_url":"https://api.github.com/users/lpryszcz/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/comments/500484883","html_url":"https://github.com/nanoporetech/taiyaki/issues/24#issuecomment-500484883","issue_url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/24","id":500484883,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMDQ4NDg4Mw==","user":{"login":"myrtlecat","id":1001949,"node_id":"MDQ6VXNlcjEwMDE5NDk=","avatar_url":"https://avatars.githubusercontent.com/u/1001949?v=4","gravatar_id":"","url":"https://api.github.com/users/myrtlecat","html_url":"https://github.com/myrtlecat","followers_url":"https://api.github.com/users/myrtlecat/followers","following_url":"https://api.github.com/users/myrtlecat/following{/other_user}","gists_url":"https://api.github.com/users/myrtlecat/gists{/gist_id}","starred_url":"https://api.github.com/users/myrtlecat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/myrtlecat/subscriptions","organizations_url":"https://api.github.com/users/myrtlecat/orgs","repos_url":"https://api.github.com/users/myrtlecat/repos","events_url":"https://api.github.com/users/myrtlecat/events{/privacy}","received_events_url":"https://api.github.com/users/myrtlecat/received_events","type":"User","site_admin":false},"created_at":"2019-06-10T16:33:11Z","updated_at":"2019-06-10T16:34:22Z","author_association":"CONTRIBUTOR","body":"My apologies, the memory management in `basecall.py` is not great. I'll try to explain below what the problems are, and we are aiming to improve this situation.\r\n\r\nIn the interim, the best advice is to try to basecall reads in small batches, and accept that some jobs may have to be retried. Some reads (probably longer ones) might not basecall at all until we make some improvements (see below). If using guppy is an option that should usually be preferred. `basecall.py` enables us to quickly test new networks that aren't yet supported by guppy, but guppy will always be more robust and performant.\r\n\r\nThere are two things wrong with memory management in `basecall.py`:\r\n1. `basecall.py` is written entirely using pytorch. The memory management in pytorch happens via python's garbage collector, which means that the exact time that memory gets freed is non-deterministic. This is why basecalling the same reads can fail at different times. In contrast, guppy is written in C++/CUDA and should have much more robust and reliable memory management; the freeing of GPU memory can be precisely controlled and is deterministic.\r\n2. We basecall entire reads all at once. This means that any particularly long reads can cause out of memory errors on the GPU. What we should do is break long reads into smaller pieces, basecall these separately, and then stitch the results back together. This improvement is planned, and it should land in the next release. Hopefully it will make things much more robust.","reactions":{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/comments/500484883/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"myrtlecat","id":1001949,"node_id":"MDQ6VXNlcjEwMDE5NDk=","avatar_url":"https://avatars.githubusercontent.com/u/1001949?v=4","gravatar_id":"","url":"https://api.github.com/users/myrtlecat","html_url":"https://github.com/myrtlecat","followers_url":"https://api.github.com/users/myrtlecat/followers","following_url":"https://api.github.com/users/myrtlecat/following{/other_user}","gists_url":"https://api.github.com/users/myrtlecat/gists{/gist_id}","starred_url":"https://api.github.com/users/myrtlecat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/myrtlecat/subscriptions","organizations_url":"https://api.github.com/users/myrtlecat/orgs","repos_url":"https://api.github.com/users/myrtlecat/repos","events_url":"https://api.github.com/users/myrtlecat/events{/privacy}","received_events_url":"https://api.github.com/users/myrtlecat/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/comments/500505987","html_url":"https://github.com/nanoporetech/taiyaki/issues/24#issuecomment-500505987","issue_url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/24","id":500505987,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMDUwNTk4Nw==","user":{"login":"lpryszcz","id":988152,"node_id":"MDQ6VXNlcjk4ODE1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/988152?v=4","gravatar_id":"","url":"https://api.github.com/users/lpryszcz","html_url":"https://github.com/lpryszcz","followers_url":"https://api.github.com/users/lpryszcz/followers","following_url":"https://api.github.com/users/lpryszcz/following{/other_user}","gists_url":"https://api.github.com/users/lpryszcz/gists{/gist_id}","starred_url":"https://api.github.com/users/lpryszcz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lpryszcz/subscriptions","organizations_url":"https://api.github.com/users/lpryszcz/orgs","repos_url":"https://api.github.com/users/lpryszcz/repos","events_url":"https://api.github.com/users/lpryszcz/events{/privacy}","received_events_url":"https://api.github.com/users/lpryszcz/received_events","type":"User","site_admin":false},"created_at":"2019-06-10T17:30:29Z","updated_at":"2019-06-10T17:30:51Z","author_association":"CONTRIBUTOR","body":"Cool, thanks for the details! \r\n\r\n>  If using guppy is an option that should usually be preferred.  \r\n\r\nThat'd would be an option if only guppy reported modified bases as well ;) Or am I missing something? Is it possible to play with guppy3 config in such way that it reports alternative basecalld above certain threshold? \r\n\r\n> The memory management in pytorch happens via python's garbage collector, which means that the exact time that memory gets freed is non-deterministic. \r\n\r\nNaive question, wouldn't `import gc; gc.collect()` do the job?\r\n","reactions":{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/comments/500505987/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"lpryszcz","id":988152,"node_id":"MDQ6VXNlcjk4ODE1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/988152?v=4","gravatar_id":"","url":"https://api.github.com/users/lpryszcz","html_url":"https://github.com/lpryszcz","followers_url":"https://api.github.com/users/lpryszcz/followers","following_url":"https://api.github.com/users/lpryszcz/following{/other_user}","gists_url":"https://api.github.com/users/lpryszcz/gists{/gist_id}","starred_url":"https://api.github.com/users/lpryszcz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lpryszcz/subscriptions","organizations_url":"https://api.github.com/users/lpryszcz/orgs","repos_url":"https://api.github.com/users/lpryszcz/repos","events_url":"https://api.github.com/users/lpryszcz/events{/privacy}","received_events_url":"https://api.github.com/users/lpryszcz/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/comments/500507944","html_url":"https://github.com/nanoporetech/taiyaki/issues/24#issuecomment-500507944","issue_url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/24","id":500507944,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMDUwNzk0NA==","user":{"login":"myrtlecat","id":1001949,"node_id":"MDQ6VXNlcjEwMDE5NDk=","avatar_url":"https://avatars.githubusercontent.com/u/1001949?v=4","gravatar_id":"","url":"https://api.github.com/users/myrtlecat","html_url":"https://github.com/myrtlecat","followers_url":"https://api.github.com/users/myrtlecat/followers","following_url":"https://api.github.com/users/myrtlecat/following{/other_user}","gists_url":"https://api.github.com/users/myrtlecat/gists{/gist_id}","starred_url":"https://api.github.com/users/myrtlecat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/myrtlecat/subscriptions","organizations_url":"https://api.github.com/users/myrtlecat/orgs","repos_url":"https://api.github.com/users/myrtlecat/repos","events_url":"https://api.github.com/users/myrtlecat/events{/privacy}","received_events_url":"https://api.github.com/users/myrtlecat/received_events","type":"User","site_admin":false},"created_at":"2019-06-10T17:35:59Z","updated_at":"2019-06-10T17:35:59Z","author_association":"CONTRIBUTOR","body":"> That'd would be an option if only guppy reported modified bases as well ;) Or am I missing something?\r\n\r\nYou're not missing anything, support for mod-bases in guppy is planned and coming soon (see 23 minutes into [this talk](https://nanoporetech.com/about-us/news/london-calling-clive-brown-and-team-plenary) for the announcement).\r\n\r\n> Naive question, wouldn't import gc; gc.collect() do the job?\r\n\r\nI hope it is that simple! We'll give it a try.","reactions":{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/comments/500507944/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"myrtlecat","id":1001949,"node_id":"MDQ6VXNlcjEwMDE5NDk=","avatar_url":"https://avatars.githubusercontent.com/u/1001949?v=4","gravatar_id":"","url":"https://api.github.com/users/myrtlecat","html_url":"https://github.com/myrtlecat","followers_url":"https://api.github.com/users/myrtlecat/followers","following_url":"https://api.github.com/users/myrtlecat/following{/other_user}","gists_url":"https://api.github.com/users/myrtlecat/gists{/gist_id}","starred_url":"https://api.github.com/users/myrtlecat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/myrtlecat/subscriptions","organizations_url":"https://api.github.com/users/myrtlecat/orgs","repos_url":"https://api.github.com/users/myrtlecat/repos","events_url":"https://api.github.com/users/myrtlecat/events{/privacy}","received_events_url":"https://api.github.com/users/myrtlecat/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/comments/502144854","html_url":"https://github.com/nanoporetech/taiyaki/issues/24#issuecomment-502144854","issue_url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/24","id":502144854,"node_id":"MDEyOklzc3VlQ29tbWVudDUwMjE0NDg1NA==","user":{"login":"lpryszcz","id":988152,"node_id":"MDQ6VXNlcjk4ODE1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/988152?v=4","gravatar_id":"","url":"https://api.github.com/users/lpryszcz","html_url":"https://github.com/lpryszcz","followers_url":"https://api.github.com/users/lpryszcz/followers","following_url":"https://api.github.com/users/lpryszcz/following{/other_user}","gists_url":"https://api.github.com/users/lpryszcz/gists{/gist_id}","starred_url":"https://api.github.com/users/lpryszcz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lpryszcz/subscriptions","organizations_url":"https://api.github.com/users/lpryszcz/orgs","repos_url":"https://api.github.com/users/lpryszcz/repos","events_url":"https://api.github.com/users/lpryszcz/events{/privacy}","received_events_url":"https://api.github.com/users/lpryszcz/received_events","type":"User","site_admin":false},"created_at":"2019-06-14T15:05:34Z","updated_at":"2019-06-14T15:05:34Z","author_association":"CONTRIBUTOR","body":"Also, you may want to have a look at https://discuss.pytorch.org/t/i-run-out-of-memory-after-a-certain-amount-of-batches-when-training-a-resnet18/1911/10\r\n\r\nor `torch.cuda.empty_cache()`","reactions":{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/comments/502144854/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"lpryszcz","id":988152,"node_id":"MDQ6VXNlcjk4ODE1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/988152?v=4","gravatar_id":"","url":"https://api.github.com/users/lpryszcz","html_url":"https://github.com/lpryszcz","followers_url":"https://api.github.com/users/lpryszcz/followers","following_url":"https://api.github.com/users/lpryszcz/following{/other_user}","gists_url":"https://api.github.com/users/lpryszcz/gists{/gist_id}","starred_url":"https://api.github.com/users/lpryszcz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lpryszcz/subscriptions","organizations_url":"https://api.github.com/users/lpryszcz/orgs","repos_url":"https://api.github.com/users/lpryszcz/repos","events_url":"https://api.github.com/users/lpryszcz/events{/privacy}","received_events_url":"https://api.github.com/users/lpryszcz/received_events","type":"User","site_admin":false}},{"id":2437144478,"node_id":"MDExOkNsb3NlZEV2ZW50MjQzNzE0NDQ3OA==","url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/events/2437144478","actor":{"login":"lpryszcz","id":988152,"node_id":"MDQ6VXNlcjk4ODE1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/988152?v=4","gravatar_id":"","url":"https://api.github.com/users/lpryszcz","html_url":"https://github.com/lpryszcz","followers_url":"https://api.github.com/users/lpryszcz/followers","following_url":"https://api.github.com/users/lpryszcz/following{/other_user}","gists_url":"https://api.github.com/users/lpryszcz/gists{/gist_id}","starred_url":"https://api.github.com/users/lpryszcz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lpryszcz/subscriptions","organizations_url":"https://api.github.com/users/lpryszcz/orgs","repos_url":"https://api.github.com/users/lpryszcz/repos","events_url":"https://api.github.com/users/lpryszcz/events{/privacy}","received_events_url":"https://api.github.com/users/lpryszcz/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2019-06-25T10:59:03Z","state_reason":null,"performed_via_github_app":null},{"id":2676775669,"node_id":"MDE1OlJlZmVyZW5jZWRFdmVudDI2NzY3NzU2Njk=","url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/events/2676775669","actor":{"login":"tmassingham-ont","id":19410440,"node_id":"MDQ6VXNlcjE5NDEwNDQw","avatar_url":"https://avatars.githubusercontent.com/u/19410440?v=4","gravatar_id":"","url":"https://api.github.com/users/tmassingham-ont","html_url":"https://github.com/tmassingham-ont","followers_url":"https://api.github.com/users/tmassingham-ont/followers","following_url":"https://api.github.com/users/tmassingham-ont/following{/other_user}","gists_url":"https://api.github.com/users/tmassingham-ont/gists{/gist_id}","starred_url":"https://api.github.com/users/tmassingham-ont/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tmassingham-ont/subscriptions","organizations_url":"https://api.github.com/users/tmassingham-ont/orgs","repos_url":"https://api.github.com/users/tmassingham-ont/repos","events_url":"https://api.github.com/users/tmassingham-ont/events{/privacy}","received_events_url":"https://api.github.com/users/tmassingham-ont/received_events","type":"User","site_admin":false},"event":"referenced","commit_id":"68c977fadd0e514c0ef86b24278a2f63a586b820","commit_url":"https://api.github.com/repos/nanoporetech/taiyaki/commits/68c977fadd0e514c0ef86b24278a2f63a586b820","created_at":"2019-10-01T12:12:15Z","performed_via_github_app":null}]