{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/53","repository_url":"https://api.github.com/repos/nanoporetech/taiyaki","labels_url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/53/labels{/name}","comments_url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/53/comments","events_url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/53/events","html_url":"https://github.com/nanoporetech/taiyaki/issues/53","id":498952622,"node_id":"MDU6SXNzdWU0OTg5NTI2MjI=","number":53,"title":"guppy with new model trained on modified uridine RNA outputs high identities but low basecall quality ","user":{"login":"callumparr","id":41637575,"node_id":"MDQ6VXNlcjQxNjM3NTc1","avatar_url":"https://avatars.githubusercontent.com/u/41637575?v=4","gravatar_id":"","url":"https://api.github.com/users/callumparr","html_url":"https://github.com/callumparr","followers_url":"https://api.github.com/users/callumparr/followers","following_url":"https://api.github.com/users/callumparr/following{/other_user}","gists_url":"https://api.github.com/users/callumparr/gists{/gist_id}","starred_url":"https://api.github.com/users/callumparr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/callumparr/subscriptions","organizations_url":"https://api.github.com/users/callumparr/orgs","repos_url":"https://api.github.com/users/callumparr/repos","events_url":"https://api.github.com/users/callumparr/events{/privacy}","received_events_url":"https://api.github.com/users/callumparr/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":24,"created_at":"2019-09-26T15:15:49Z","updated_at":"2020-07-01T14:34:35Z","closed_at":"2019-10-02T06:59:56Z","author_association":"NONE","active_lock_reason":null,"body":"I have a similar yet opposite problem to this previous issue https://github.com/nanoporetech/taiyaki/issues/26#issue-454223766\r\n\r\nWhere I have a model that works well with the basecall.py script but when dumped to model file for guppy, the output basecalls seem to still have very low basecall quality despite using reads that were originally filtered to pass the min_qscore >7. Despite this the basecall reads both fail and pass map well (identities well over 95%).\r\n\r\nI read that for RNA, increasing chunk size to 1200 may help but this only very marginally. \r\n\r\nOnly thing I can assume is guppy assumes RNA to use AGCU alphabet and require additional step to output T where as I used AGCT alphabet to train my model. \r\n\r\nBelow is percent identity vs length output from mapped reads outputted from basecall.py and guppy.  I show output on the input trained data to illustrate the point that guppy outputs lower basecall qualities than the input data. This data is a mixture of unmodified and modified reads.\r\n\r\noutput from basecall.py looks solid, of course because this is the data used to train:\r\n \r\n<img width=\"775\" alt=\"Screen Shot 2019-09-26 at 3 27 45 PM\" src=\"https://user-images.githubusercontent.com/41637575/65697106-44ff8200-e072-11e9-9e62-4eadf512fa32.png\">\r\n\r\noutput from guppy using the trained model and rna941_hac.cfg: \r\n\r\n<img width=\"888\" alt=\"Screen Shot 2019-09-26 at 4 08 24 PM\" src=\"https://user-images.githubusercontent.com/41637575/65700683-f654e680-e077-11e9-93d2-0bea075caf14.png\">\r\n\r\nHere is pycoQC of the sequencing summary file , around 2/3 of reads are classified as 'fail'\r\n\r\nusing new trained model for basecall\r\n\r\n<img width=\"976\" alt=\"Screen Shot 2019-09-26 at 4 11 36 PM\" src=\"https://user-images.githubusercontent.com/41637575/65701161-bf330500-e078-11e9-95f8-a2554f0a6391.png\">\r\n\r\nusing the standard RNA hac model with guppy \r\n\r\n<img width=\"948\" alt=\"Screen Shot 2019-09-26 at 4 12 25 PM\" src=\"https://user-images.githubusercontent.com/41637575/65701186-c9550380-e078-11e9-94c4-eb9252e6f2c5.png\">\r\n\r\n\r\nTo generate this model\r\n\r\n1. I took reads generated from IVT mRNA with or without modified uridine. I filtered out raw fast5 reads that generated passed reads from guppy and greater than 500nt as I think the IVT generates can produce plenty of premature termination transcripts. I output fastq sequences with T instead of U\r\n\r\n1. Then generated a reference fasta for each of the reads. For the modified reads, I converted T to Y for the modification. For all reads are reversed the sequence to match with the physical mRNA molecule passing through the pore\r\n\r\n1. I generated the prepare mapped reads hdf5 files separately for unmodified and modified and then later merged them with the merge.py script. Resquiggle used the pretrained/r941_rna_minion.checkpoint file given in the taiyaki_modbase walkthrough. Using AGCT alphabet as I output T originally with guppy. \r\n\r\n1. Then trained data using the taiyaki/models/mGru_cat_mod_flipflop.py for first round and using AGCT and additionally parameters --winlen 31, --size 256, --stride 10 to make compatible with RNA hac. \r\n\r\nFar as I can tell things went smoothly for training. Although for mapped squiggle to sequence it doesn't look as clean as DNA examples but this probably has something to do with the DNA adaptor at 3' end of RNA molecule and the polyA on the raw read but absent form the basecalled sequence. \r\n","closed_by":{"login":"callumparr","id":41637575,"node_id":"MDQ6VXNlcjQxNjM3NTc1","avatar_url":"https://avatars.githubusercontent.com/u/41637575?v=4","gravatar_id":"","url":"https://api.github.com/users/callumparr","html_url":"https://github.com/callumparr","followers_url":"https://api.github.com/users/callumparr/followers","following_url":"https://api.github.com/users/callumparr/following{/other_user}","gists_url":"https://api.github.com/users/callumparr/gists{/gist_id}","starred_url":"https://api.github.com/users/callumparr/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/callumparr/subscriptions","organizations_url":"https://api.github.com/users/callumparr/orgs","repos_url":"https://api.github.com/users/callumparr/repos","events_url":"https://api.github.com/users/callumparr/events{/privacy}","received_events_url":"https://api.github.com/users/callumparr/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/53/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/nanoporetech/taiyaki/issues/53/timeline","performed_via_github_app":null,"state_reason":"completed"}