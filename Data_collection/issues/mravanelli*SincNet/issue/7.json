{"url":"https://api.github.com/repos/mravanelli/SincNet/issues/7","repository_url":"https://api.github.com/repos/mravanelli/SincNet","labels_url":"https://api.github.com/repos/mravanelli/SincNet/issues/7/labels{/name}","comments_url":"https://api.github.com/repos/mravanelli/SincNet/issues/7/comments","events_url":"https://api.github.com/repos/mravanelli/SincNet/issues/7/events","html_url":"https://github.com/mravanelli/SincNet/issues/7","id":365253947,"node_id":"MDU6SXNzdWUzNjUyNTM5NDc=","number":7,"title":"Visualizing sinc filter kernels","user":{"login":"btlorch","id":11959715,"node_id":"MDQ6VXNlcjExOTU5NzE1","avatar_url":"https://avatars.githubusercontent.com/u/11959715?v=4","gravatar_id":"","url":"https://api.github.com/users/btlorch","html_url":"https://github.com/btlorch","followers_url":"https://api.github.com/users/btlorch/followers","following_url":"https://api.github.com/users/btlorch/following{/other_user}","gists_url":"https://api.github.com/users/btlorch/gists{/gist_id}","starred_url":"https://api.github.com/users/btlorch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/btlorch/subscriptions","organizations_url":"https://api.github.com/users/btlorch/orgs","repos_url":"https://api.github.com/users/btlorch/repos","events_url":"https://api.github.com/users/btlorch/events{/privacy}","received_events_url":"https://api.github.com/users/btlorch/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-09-30T19:33:45Z","updated_at":"2018-10-26T13:46:00Z","closed_at":"2018-10-26T13:45:59Z","author_association":"NONE","active_lock_reason":null,"body":"Hi Marco,\r\n\r\nthanks for sharing this great work! I'm trying to visualize the weights of the sinc layer in time and frequency domain but I'm having trouble getting it right. Some filters don't look like a single bandpass but have different amplitudes for different frequencies (e.g., see the right example in the eleventh row in the figure below).\r\n\r\nThe code below just loads a trained model from the saved checkpoint, computes the filters in time domain, and visualizes them alongside their Fourier transform. I'm certain it's just a problem with visualizing them. If you could have a look or share the example from Figure 2 in the paper, that would be highly appreciated.\r\n\r\nThanks,\r\nBenedikt\r\n\r\n```python\r\n%matplotlib notebook\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport math\r\nimport torch\r\n\r\nsampling_frequency = 16000\r\nnum_filters = 80\r\nfilter_length = 251\r\nfrequency_scaling = sampling_frequency * 1.0\r\n\r\n# Load trained model from checkpoint\r\ntorch_checkpoint = torch.load(\"exp/SincNet_TIMIT/model_raw.pkl\", map_location='cpu')\r\nlow_hz = torch_checkpoint[\"CNN_model_par\"][\"conv.0.filt_b1\"]\r\nband_hz = torch_checkpoint[\"CNN_model_par\"][\"conv.0.filt_band\"]\r\n\r\n# Compute filter kernel. Except from renaming some variables, this should be the same as the original code.\r\ndef flip(x, dim):\r\n    xsize = x.size()\r\n    dim = x.dim() + dim if dim < 0 else dim\r\n    x = x.contiguous()\r\n    x = x.view(-1, *xsize[dim:])\r\n    x = x.view(x.size(0), x.size(1), -1)[:,\r\n        getattr(torch.arange(x.size(1) - 1, -1, -1), ('cpu', 'cuda')[x.is_cuda])().long(), :]\r\n    return x.view(xsize)\r\n\r\ndef sinc(band, t_right):\r\n    y_right = torch.sin(2 * math.pi * band * t_right) / (2 * math.pi * band * t_right)\r\n    y_left = flip(y_right, 0)\r\n\r\n    y = torch.cat([y_left, torch.autograd.Variable(torch.ones(1)), y_right])\r\n\r\n    return y\r\n\r\nfilters = torch.autograd.Variable(torch.zeros((num_filters, filter_length)))\r\nN = filter_length\r\nt_right = torch.autograd.Variable(torch.linspace(1, (N - 1) / 2, steps=int((N - 1) / 2)) / sampling_frequency)\r\n\r\nmin_freq = 50.0;\r\nmin_band = 50.0;\r\n\r\nfilt_beg_freq = torch.abs(low_hz) + min_freq / frequency_scaling\r\nfilt_end_freq = filt_beg_freq + (torch.abs(band_hz) + min_band / frequency_scaling)\r\n\r\nn = torch.linspace(0, N, steps=N)\r\n\r\n# Filter window (hamming)\r\nwindow = 0.54 - 0.46 * torch.cos(2 * math.pi * n / N);\r\nwindow = torch.autograd.Variable(window.float())\r\n\r\nfor i in range(num_filters):\r\n    low_pass1 = 2 * filt_beg_freq[i].float() * sinc(filt_beg_freq[i].float() * frequency_scaling, t_right)\r\n    low_pass2 = 2 * filt_end_freq[i].float() * sinc(filt_end_freq[i].float() * frequency_scaling, t_right)\r\n    band_pass = (low_pass2 - low_pass1)\r\n\r\n    band_pass = band_pass / torch.max(band_pass)\r\n\r\n    filters[i, :] = band_pass * window\r\n\r\nfilters = filters.view(num_filters, 1, filter_length)\r\nfilters = filters.detach().numpy()\r\n\r\n# Visualize filter kernels (similar to https://gist.github.com/endolith/236567)\r\n# Two filters and their Fourier transform per row.\r\nnum_cols = 4\r\nnum_rows = int(np.ceil(num_filters * 2 / num_cols))\r\n\r\nfig, axes = plt.subplots(num_rows, num_cols, figsize=(9, 80))\r\nfor i in range(num_filters):\r\n    spatial_ax = axes[(i * 2) // 4, (i * 2) % 4]\r\n    frequency_ax = axes[(i * 2 + 1) // 4, (i * 2 + 1) % 4]\r\n    \r\n    weights = filters[i, 0, :]\r\n    \r\n    # Frequency computation\r\n    ampl = 1/N * np.abs(np.fft.rfft(weights))\r\n    \r\n    # RFFT frequency bins\r\n    freqs = np.fft.rfftfreq(N, 1/sampling_frequency)\r\n    \r\n    spatial_ax.plot(weights)\r\n    frequency_ax.stem(freqs, ampl)\r\n    \r\nfig.tight_layout()\r\n```\r\n\r\n![visualize_weights](https://user-images.githubusercontent.com/11959715/46261723-0636fa80-c4f8-11e8-87ef-0c55b2102e92.png)","closed_by":{"login":"btlorch","id":11959715,"node_id":"MDQ6VXNlcjExOTU5NzE1","avatar_url":"https://avatars.githubusercontent.com/u/11959715?v=4","gravatar_id":"","url":"https://api.github.com/users/btlorch","html_url":"https://github.com/btlorch","followers_url":"https://api.github.com/users/btlorch/followers","following_url":"https://api.github.com/users/btlorch/following{/other_user}","gists_url":"https://api.github.com/users/btlorch/gists{/gist_id}","starred_url":"https://api.github.com/users/btlorch/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/btlorch/subscriptions","organizations_url":"https://api.github.com/users/btlorch/orgs","repos_url":"https://api.github.com/users/btlorch/repos","events_url":"https://api.github.com/users/btlorch/events{/privacy}","received_events_url":"https://api.github.com/users/btlorch/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mravanelli/SincNet/issues/7/reactions","total_count":3,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":3,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mravanelli/SincNet/issues/7/timeline","performed_via_github_app":null,"state_reason":"completed"}