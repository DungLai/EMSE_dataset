{"url":"https://api.github.com/repos/mravanelli/SincNet/issues/59","repository_url":"https://api.github.com/repos/mravanelli/SincNet","labels_url":"https://api.github.com/repos/mravanelli/SincNet/issues/59/labels{/name}","comments_url":"https://api.github.com/repos/mravanelli/SincNet/issues/59/comments","events_url":"https://api.github.com/repos/mravanelli/SincNet/issues/59/events","html_url":"https://github.com/mravanelli/SincNet/issues/59","id":478936334,"node_id":"MDU6SXNzdWU0Nzg5MzYzMzQ=","number":59,"title":"Computational Efficiency Through Symmetric Convolutions","user":{"login":"KnurpsBram","id":32075749,"node_id":"MDQ6VXNlcjMyMDc1NzQ5","avatar_url":"https://avatars.githubusercontent.com/u/32075749?v=4","gravatar_id":"","url":"https://api.github.com/users/KnurpsBram","html_url":"https://github.com/KnurpsBram","followers_url":"https://api.github.com/users/KnurpsBram/followers","following_url":"https://api.github.com/users/KnurpsBram/following{/other_user}","gists_url":"https://api.github.com/users/KnurpsBram/gists{/gist_id}","starred_url":"https://api.github.com/users/KnurpsBram/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/KnurpsBram/subscriptions","organizations_url":"https://api.github.com/users/KnurpsBram/orgs","repos_url":"https://api.github.com/users/KnurpsBram/repos","events_url":"https://api.github.com/users/KnurpsBram/events{/privacy}","received_events_url":"https://api.github.com/users/KnurpsBram/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-08-09T11:21:00Z","updated_at":"2019-08-09T20:38:25Z","closed_at":"2019-08-09T20:38:25Z","author_association":"NONE","active_lock_reason":null,"body":"The paper mentions symmetry of the convolutional filters as a benefit because 'we can perform convolution in a very efficient way by only considering one side of the filter and inheriting the results for the other half'. Sounds nice! How is this reflected in the implementation? The F.conv1d() function is called with a kernel of full width. Does cudnn backend somehow recognize the symmetry in the filter and change its algorithm accordingly?\r\n\r\nI do see a difference in the classes sinc_conv and SincConv_fast, but the difference is only in the construction of the filters from the computed frequency bands (where the slower one uses a for-loop), not in the convolution itself.\r\n\r\nI'm very interested in this symmetry property, could you explain or reference some additional material on it? thanks!","closed_by":{"login":"KnurpsBram","id":32075749,"node_id":"MDQ6VXNlcjMyMDc1NzQ5","avatar_url":"https://avatars.githubusercontent.com/u/32075749?v=4","gravatar_id":"","url":"https://api.github.com/users/KnurpsBram","html_url":"https://github.com/KnurpsBram","followers_url":"https://api.github.com/users/KnurpsBram/followers","following_url":"https://api.github.com/users/KnurpsBram/following{/other_user}","gists_url":"https://api.github.com/users/KnurpsBram/gists{/gist_id}","starred_url":"https://api.github.com/users/KnurpsBram/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/KnurpsBram/subscriptions","organizations_url":"https://api.github.com/users/KnurpsBram/orgs","repos_url":"https://api.github.com/users/KnurpsBram/repos","events_url":"https://api.github.com/users/KnurpsBram/events{/privacy}","received_events_url":"https://api.github.com/users/KnurpsBram/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/mravanelli/SincNet/issues/59/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/mravanelli/SincNet/issues/59/timeline","performed_via_github_app":null,"state_reason":"completed"}