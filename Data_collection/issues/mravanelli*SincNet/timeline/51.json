[{"url":"https://api.github.com/repos/mravanelli/SincNet/issues/comments/504640162","html_url":"https://github.com/mravanelli/SincNet/issues/51#issuecomment-504640162","issue_url":"https://api.github.com/repos/mravanelli/SincNet/issues/51","id":504640162,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDY0MDE2Mg==","user":{"login":"hamiGH","id":27420222,"node_id":"MDQ6VXNlcjI3NDIwMjIy","avatar_url":"https://avatars.githubusercontent.com/u/27420222?v=4","gravatar_id":"","url":"https://api.github.com/users/hamiGH","html_url":"https://github.com/hamiGH","followers_url":"https://api.github.com/users/hamiGH/followers","following_url":"https://api.github.com/users/hamiGH/following{/other_user}","gists_url":"https://api.github.com/users/hamiGH/gists{/gist_id}","starred_url":"https://api.github.com/users/hamiGH/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hamiGH/subscriptions","organizations_url":"https://api.github.com/users/hamiGH/orgs","repos_url":"https://api.github.com/users/hamiGH/repos","events_url":"https://api.github.com/users/hamiGH/events{/privacy}","received_events_url":"https://api.github.com/users/hamiGH/received_events","type":"User","site_admin":false},"created_at":"2019-06-22T07:33:27Z","updated_at":"2019-06-22T07:34:36Z","author_association":"NONE","body":"You should create a new class with these layers:\r\n\r\nclass MyModel(nn.Module):\r\n\r\n    def __init__(self, options):\r\n        super(MyModel, self).__init__()\r\n        //parse config file\r\n        ...\r\n         Feature extractor CNN\r\n        CNN_arch = {'input_dim': wlen,\r\n                    'fs': fs,\r\n                    'cnn_N_filt': cnn_N_filt,\r\n                    'cnn_len_filt': cnn_len_filt,\r\n                    'cnn_max_pool_len': cnn_max_pool_len,\r\n                    'cnn_use_laynorm_inp': cnn_use_laynorm_inp,\r\n                    'cnn_use_batchnorm_inp': cnn_use_batchnorm_inp,\r\n                    'cnn_use_laynorm': cnn_use_laynorm,\r\n                    'cnn_use_batchnorm': cnn_use_batchnorm,\r\n                    'cnn_act': cnn_act,\r\n                    'cnn_drop': cnn_drop,\r\n                    }\r\n\r\n        self.CNN_net = CNN(CNN_arch)\r\n        # self.CNN_net.cuda()\r\n\r\n\r\n        DNN1_arch = {'input_dim': self.CNN_net.out_dim,\r\n                     'fc_lay': fc_lay,\r\n                     'fc_drop': fc_drop,\r\n                     'fc_use_batchnorm': fc_use_batchnorm,\r\n                     'fc_use_laynorm': fc_use_laynorm,\r\n                     'fc_use_laynorm_inp': fc_use_laynorm_inp,\r\n                     'fc_use_batchnorm_inp': fc_use_batchnorm_inp,\r\n                     'fc_act': fc_act,\r\n                     }\r\n\r\n        self.DNN1_net = MLP(DNN1_arch)\r\n        # self.DNN1_net.cuda()\r\n\r\n        DNN2_arch = {'input_dim': fc_lay[-1],\r\n                     'fc_lay': class_lay,\r\n                     'fc_drop': class_drop,\r\n                     'fc_use_batchnorm': class_use_batchnorm,\r\n                     'fc_use_laynorm': class_use_laynorm,\r\n                     'fc_use_laynorm_inp': class_use_laynorm_inp,\r\n                     'fc_use_batchnorm_inp': class_use_batchnorm_inp,\r\n                     'fc_act': class_act,\r\n                     }\r\n\r\n        self.DNN2_net = MLP(DNN2_arch)\r\n       \r\n        modules = [\r\n            self.CNN_net,\r\n            self.DNN1_net,\r\n            self.DNN2_net\r\n        ]\r\n\r\n        self.net = nn.ModuleList(modules)\r\n\r\n\r\n    def train(self):\r\n        self.CNN_net.train()\r\n        self.DNN1_net.train()\r\n        self.DNN2_net.train()\r\n\r\n\r\n    def forward(self, inp):\r\n        # out = self.DNN2_net(self.DNN1_net(self.CNN_net(inp)))\r\n        for i, n in enumerate(self.net):\r\n            inp = n(inp)\r\n        return inp\r\n---------------------------------------------------------------------\r\noptions=read_conf(\"cfg/SincNet_Librispeech.cfg\")\r\n\r\nmodel = MyModel(options)\r\n\r\nmodel.train()\r\n\r\nparallel_model = DataParallel(model, device_ids=[0, 1])\r\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\r\nparallel_model.to(device)\r\n\r\n","reactions":{"url":"https://api.github.com/repos/mravanelli/SincNet/issues/comments/504640162/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"hamiGH","id":27420222,"node_id":"MDQ6VXNlcjI3NDIwMjIy","avatar_url":"https://avatars.githubusercontent.com/u/27420222?v=4","gravatar_id":"","url":"https://api.github.com/users/hamiGH","html_url":"https://github.com/hamiGH","followers_url":"https://api.github.com/users/hamiGH/followers","following_url":"https://api.github.com/users/hamiGH/following{/other_user}","gists_url":"https://api.github.com/users/hamiGH/gists{/gist_id}","starred_url":"https://api.github.com/users/hamiGH/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hamiGH/subscriptions","organizations_url":"https://api.github.com/users/hamiGH/orgs","repos_url":"https://api.github.com/users/hamiGH/repos","events_url":"https://api.github.com/users/hamiGH/events{/privacy}","received_events_url":"https://api.github.com/users/hamiGH/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/mravanelli/SincNet/issues/comments/504729762","html_url":"https://github.com/mravanelli/SincNet/issues/51#issuecomment-504729762","issue_url":"https://api.github.com/repos/mravanelli/SincNet/issues/51","id":504729762,"node_id":"MDEyOklzc3VlQ29tbWVudDUwNDcyOTc2Mg==","user":{"login":"DanielMengLiu","id":45690014,"node_id":"MDQ6VXNlcjQ1NjkwMDE0","avatar_url":"https://avatars.githubusercontent.com/u/45690014?v=4","gravatar_id":"","url":"https://api.github.com/users/DanielMengLiu","html_url":"https://github.com/DanielMengLiu","followers_url":"https://api.github.com/users/DanielMengLiu/followers","following_url":"https://api.github.com/users/DanielMengLiu/following{/other_user}","gists_url":"https://api.github.com/users/DanielMengLiu/gists{/gist_id}","starred_url":"https://api.github.com/users/DanielMengLiu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DanielMengLiu/subscriptions","organizations_url":"https://api.github.com/users/DanielMengLiu/orgs","repos_url":"https://api.github.com/users/DanielMengLiu/repos","events_url":"https://api.github.com/users/DanielMengLiu/events{/privacy}","received_events_url":"https://api.github.com/users/DanielMengLiu/received_events","type":"User","site_admin":false},"created_at":"2019-06-23T08:07:22Z","updated_at":"2019-06-23T08:07:22Z","author_association":"NONE","body":"> You should create a new class with these layers:\r\n> \r\n> class MyModel(nn.Module):\r\n> \r\n> ```\r\n> def __init__(self, options):\r\n>     super(MyModel, self).__init__()\r\n>     //parse config file\r\n>     ...\r\n>      Feature extractor CNN\r\n>     CNN_arch = {'input_dim': wlen,\r\n>                 'fs': fs,\r\n>                 'cnn_N_filt': cnn_N_filt,\r\n>                 'cnn_len_filt': cnn_len_filt,\r\n>                 'cnn_max_pool_len': cnn_max_pool_len,\r\n>                 'cnn_use_laynorm_inp': cnn_use_laynorm_inp,\r\n>                 'cnn_use_batchnorm_inp': cnn_use_batchnorm_inp,\r\n>                 'cnn_use_laynorm': cnn_use_laynorm,\r\n>                 'cnn_use_batchnorm': cnn_use_batchnorm,\r\n>                 'cnn_act': cnn_act,\r\n>                 'cnn_drop': cnn_drop,\r\n>                 }\r\n> \r\n>     self.CNN_net = CNN(CNN_arch)\r\n>     # self.CNN_net.cuda()\r\n> \r\n> \r\n>     DNN1_arch = {'input_dim': self.CNN_net.out_dim,\r\n>                  'fc_lay': fc_lay,\r\n>                  'fc_drop': fc_drop,\r\n>                  'fc_use_batchnorm': fc_use_batchnorm,\r\n>                  'fc_use_laynorm': fc_use_laynorm,\r\n>                  'fc_use_laynorm_inp': fc_use_laynorm_inp,\r\n>                  'fc_use_batchnorm_inp': fc_use_batchnorm_inp,\r\n>                  'fc_act': fc_act,\r\n>                  }\r\n> \r\n>     self.DNN1_net = MLP(DNN1_arch)\r\n>     # self.DNN1_net.cuda()\r\n> \r\n>     DNN2_arch = {'input_dim': fc_lay[-1],\r\n>                  'fc_lay': class_lay,\r\n>                  'fc_drop': class_drop,\r\n>                  'fc_use_batchnorm': class_use_batchnorm,\r\n>                  'fc_use_laynorm': class_use_laynorm,\r\n>                  'fc_use_laynorm_inp': class_use_laynorm_inp,\r\n>                  'fc_use_batchnorm_inp': class_use_batchnorm_inp,\r\n>                  'fc_act': class_act,\r\n>                  }\r\n> \r\n>     self.DNN2_net = MLP(DNN2_arch)\r\n>    \r\n>     modules = [\r\n>         self.CNN_net,\r\n>         self.DNN1_net,\r\n>         self.DNN2_net\r\n>     ]\r\n> \r\n>     self.net = nn.ModuleList(modules)\r\n> \r\n> \r\n> def train(self):\r\n>     self.CNN_net.train()\r\n>     self.DNN1_net.train()\r\n>     self.DNN2_net.train()\r\n> \r\n> \r\n> def forward(self, inp):\r\n>     # out = self.DNN2_net(self.DNN1_net(self.CNN_net(inp)))\r\n>     for i, n in enumerate(self.net):\r\n>         inp = n(inp)\r\n>     return inp\r\n> ```\r\n> \r\n> options=read_conf(\"cfg/SincNet_Librispeech.cfg\")\r\n> \r\n> model = MyModel(options)\r\n> \r\n> model.train()\r\n> \r\n> parallel_model = DataParallel(model, device_ids=[0, 1])\r\n> device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\r\n> parallel_model.to(device)\r\n\r\nThanks, hamiGH, I will try your way later.\r\nps: I have temporarily realized parallel by importing tensorflow. And it seems worked.","reactions":{"url":"https://api.github.com/repos/mravanelli/SincNet/issues/comments/504729762/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"DanielMengLiu","id":45690014,"node_id":"MDQ6VXNlcjQ1NjkwMDE0","avatar_url":"https://avatars.githubusercontent.com/u/45690014?v=4","gravatar_id":"","url":"https://api.github.com/users/DanielMengLiu","html_url":"https://github.com/DanielMengLiu","followers_url":"https://api.github.com/users/DanielMengLiu/followers","following_url":"https://api.github.com/users/DanielMengLiu/following{/other_user}","gists_url":"https://api.github.com/users/DanielMengLiu/gists{/gist_id}","starred_url":"https://api.github.com/users/DanielMengLiu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DanielMengLiu/subscriptions","organizations_url":"https://api.github.com/users/DanielMengLiu/orgs","repos_url":"https://api.github.com/users/DanielMengLiu/repos","events_url":"https://api.github.com/users/DanielMengLiu/events{/privacy}","received_events_url":"https://api.github.com/users/DanielMengLiu/received_events","type":"User","site_admin":false}},{"id":2432315709,"node_id":"MDExOkNsb3NlZEV2ZW50MjQzMjMxNTcwOQ==","url":"https://api.github.com/repos/mravanelli/SincNet/issues/events/2432315709","actor":{"login":"DanielMengLiu","id":45690014,"node_id":"MDQ6VXNlcjQ1NjkwMDE0","avatar_url":"https://avatars.githubusercontent.com/u/45690014?v=4","gravatar_id":"","url":"https://api.github.com/users/DanielMengLiu","html_url":"https://github.com/DanielMengLiu","followers_url":"https://api.github.com/users/DanielMengLiu/followers","following_url":"https://api.github.com/users/DanielMengLiu/following{/other_user}","gists_url":"https://api.github.com/users/DanielMengLiu/gists{/gist_id}","starred_url":"https://api.github.com/users/DanielMengLiu/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DanielMengLiu/subscriptions","organizations_url":"https://api.github.com/users/DanielMengLiu/orgs","repos_url":"https://api.github.com/users/DanielMengLiu/repos","events_url":"https://api.github.com/users/DanielMengLiu/events{/privacy}","received_events_url":"https://api.github.com/users/DanielMengLiu/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2019-06-23T08:07:33Z","state_reason":null,"performed_via_github_app":null}]