{"url":"https://api.github.com/repos/qubvel/efficientnet/issues/152","repository_url":"https://api.github.com/repos/qubvel/efficientnet","labels_url":"https://api.github.com/repos/qubvel/efficientnet/issues/152/labels{/name}","comments_url":"https://api.github.com/repos/qubvel/efficientnet/issues/152/comments","events_url":"https://api.github.com/repos/qubvel/efficientnet/issues/152/events","html_url":"https://github.com/qubvel/efficientnet/issues/152","id":1233628506,"node_id":"I_kwDOC0sxAM5Jh61a","number":152,"title":"Bad prediction result using EfficientNet ","user":{"login":"mhmdghazal","id":51853854,"node_id":"MDQ6VXNlcjUxODUzODU0","avatar_url":"https://avatars.githubusercontent.com/u/51853854?v=4","gravatar_id":"","url":"https://api.github.com/users/mhmdghazal","html_url":"https://github.com/mhmdghazal","followers_url":"https://api.github.com/users/mhmdghazal/followers","following_url":"https://api.github.com/users/mhmdghazal/following{/other_user}","gists_url":"https://api.github.com/users/mhmdghazal/gists{/gist_id}","starred_url":"https://api.github.com/users/mhmdghazal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mhmdghazal/subscriptions","organizations_url":"https://api.github.com/users/mhmdghazal/orgs","repos_url":"https://api.github.com/users/mhmdghazal/repos","events_url":"https://api.github.com/users/mhmdghazal/events{/privacy}","received_events_url":"https://api.github.com/users/mhmdghazal/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-05-12T08:26:36Z","updated_at":"2022-05-12T08:26:36Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Kindly, I used EfficientNet B7 to classify face mask images with 2 classes, (Mask , No Mask) but the problem is with prediction from live video, the code of the training the model is shown below:\r\n\r\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\r\nfrom tensorflow.keras.preprocessing import image\r\nfrom tensorflow.keras.applications import EfficientNetB7\r\nfrom tensorflow.keras.layers import Dense, GlobalAveragePooling2D\r\nfrom tensorflow.keras.models import Model\r\nfrom tensorflow.keras.applications.efficientnet import preprocess_input\r\n\r\nimport tensorflow as tf\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nimport itertools\r\nimport random\r\nimport os\r\nimport cv2\r\n\r\nfrom sklearn import metrics \r\nfrom pathlib import Path\r\n\r\ntarget_size = (224,224)\r\nbatch_size = 8\r\nlr = 0.01\r\nn_epochs = 4 \r\n\r\n#root_dir = os.path.dirname(os.path.abspath(os.curdir))\r\ndata_dir = r\"C:\\Users\\admin\\Desktop\\b7\\a\\dataset\"\r\n\r\ntrain_datagen = ImageDataGenerator(preprocessing_function=preprocess_input)\r\ntrain_generator = train_datagen.flow_from_directory(str(r\"C:\\Users\\admin\\Desktop\\b7\\a\\dataset\\train\"),\r\n                                                    target_size=target_size,\r\n                                                    batch_size=batch_size,\r\n                                                    class_mode='binary',\r\n                                                    classes=['with_mask', 'without_mask'],\r\n                                                    shuffle=True)\r\n\r\nval_datagen_artificial = ImageDataGenerator(preprocessing_function=preprocess_input)\r\nval_generator_artificial = val_datagen_artificial.flow_from_directory(str(r\"C:\\Users\\admin\\Desktop\\b7\\a\\dataset\\validation\"),\r\n                                                    target_size=target_size,\r\n                                                    batch_size=batch_size,\r\n                                                    class_mode='binary',\r\n                                                    classes=['with_mask', 'without_mask'],\r\n                                                    shuffle=False)\r\n\r\nbase_model = EfficientNetB7(weights='imagenet',include_top=False, input_shape=(target_size[0],target_size[1],3))\r\n\r\nx = base_model.output\r\nx = GlobalAveragePooling2D()(x)\r\nx = Dense(128,activation='relu')(x) \r\npreds = Dense(1,activation='sigmoid')(x)\r\n\r\nmodel = Model(inputs=base_model.input,outputs=preds)\r\n\r\nfor layer in model.layers[:-4]:\r\n    layer.trainable = False\r\n\r\nopt = tf.keras.optimizers.Adam(learning_rate=lr)\r\nmodel.compile(optimizer=opt,loss='binary_crossentropy',metrics=['accuracy'])\r\nstep_size_train = train_generator.n//train_generator.batch_size\r\nstep_size_val = val_generator_artificial.n//val_generator_artificial.batch_size\r\n\r\nmodel.fit_generator(generator=train_generator, steps_per_epoch=step_size_train, epochs=n_epochs, validation_data=val_generator_artificial, validation_steps=step_size_val)\r\n\r\n429/429 [==============================] - 911s 2s/step - loss: 0.0773 - accuracy: 0.9834 - val_loss: 0.0150 - val_accuracy: 0.9950\r\nEpoch 2/4\r\n429/429 [==============================] - 876s 2s/step - loss: 0.0422 - accuracy: 0.9927 - val_loss: 0.0569 - val_accuracy: 0.9875\r\nEpoch 3/4\r\n429/429 [==============================] - 874s 2s/step - loss: 0.0072 - accuracy: 0.9983 - val_loss: 0.0090 - val_accuracy: 0.9950\r\nEpoch 4/4\r\n429/429 [==============================] - 870s 2s/step - loss: 0.0283 - accuracy: 0.9948 - val_loss: 3.0768e-04 - val_accuracy: 1.0000\r\n<keras.callbacks.History at 0x2534bdfdb80>\r\n\r\n\r\n\r\nmodel.save(\"mask.model\", save_format=\"h5\")\r\n\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/qubvel/efficientnet/issues/152/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/qubvel/efficientnet/issues/152/timeline","performed_via_github_app":null,"state_reason":null}