[{"url":"https://api.github.com/repos/qubvel/efficientnet/issues/comments/538323473","html_url":"https://github.com/qubvel/efficientnet/issues/75#issuecomment-538323473","issue_url":"https://api.github.com/repos/qubvel/efficientnet/issues/75","id":538323473,"node_id":"MDEyOklzc3VlQ29tbWVudDUzODMyMzQ3Mw==","user":{"login":"qubvel","id":31920396,"node_id":"MDQ6VXNlcjMxOTIwMzk2","avatar_url":"https://avatars.githubusercontent.com/u/31920396?v=4","gravatar_id":"","url":"https://api.github.com/users/qubvel","html_url":"https://github.com/qubvel","followers_url":"https://api.github.com/users/qubvel/followers","following_url":"https://api.github.com/users/qubvel/following{/other_user}","gists_url":"https://api.github.com/users/qubvel/gists{/gist_id}","starred_url":"https://api.github.com/users/qubvel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qubvel/subscriptions","organizations_url":"https://api.github.com/users/qubvel/orgs","repos_url":"https://api.github.com/users/qubvel/repos","events_url":"https://api.github.com/users/qubvel/events{/privacy}","received_events_url":"https://api.github.com/users/qubvel/received_events","type":"User","site_admin":false},"created_at":"2019-10-04T09:26:43Z","updated_at":"2019-10-04T09:26:43Z","author_association":"OWNER","body":"Hi what is the problem? Could you provide a traceback","reactions":{"url":"https://api.github.com/repos/qubvel/efficientnet/issues/comments/538323473/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"qubvel","id":31920396,"node_id":"MDQ6VXNlcjMxOTIwMzk2","avatar_url":"https://avatars.githubusercontent.com/u/31920396?v=4","gravatar_id":"","url":"https://api.github.com/users/qubvel","html_url":"https://github.com/qubvel","followers_url":"https://api.github.com/users/qubvel/followers","following_url":"https://api.github.com/users/qubvel/following{/other_user}","gists_url":"https://api.github.com/users/qubvel/gists{/gist_id}","starred_url":"https://api.github.com/users/qubvel/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qubvel/subscriptions","organizations_url":"https://api.github.com/users/qubvel/orgs","repos_url":"https://api.github.com/users/qubvel/repos","events_url":"https://api.github.com/users/qubvel/events{/privacy}","received_events_url":"https://api.github.com/users/qubvel/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/qubvel/efficientnet/issues/comments/538333882","html_url":"https://github.com/qubvel/efficientnet/issues/75#issuecomment-538333882","issue_url":"https://api.github.com/repos/qubvel/efficientnet/issues/75","id":538333882,"node_id":"MDEyOklzc3VlQ29tbWVudDUzODMzMzg4Mg==","user":{"login":"s-rog","id":55400948,"node_id":"MDQ6VXNlcjU1NDAwOTQ4","avatar_url":"https://avatars.githubusercontent.com/u/55400948?v=4","gravatar_id":"","url":"https://api.github.com/users/s-rog","html_url":"https://github.com/s-rog","followers_url":"https://api.github.com/users/s-rog/followers","following_url":"https://api.github.com/users/s-rog/following{/other_user}","gists_url":"https://api.github.com/users/s-rog/gists{/gist_id}","starred_url":"https://api.github.com/users/s-rog/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s-rog/subscriptions","organizations_url":"https://api.github.com/users/s-rog/orgs","repos_url":"https://api.github.com/users/s-rog/repos","events_url":"https://api.github.com/users/s-rog/events{/privacy}","received_events_url":"https://api.github.com/users/s-rog/received_events","type":"User","site_admin":false},"created_at":"2019-10-04T09:58:34Z","updated_at":"2019-10-04T14:21:49Z","author_association":"NONE","body":"```python\r\nimport efficientnet.keras as efn\r\nfrom keras import backend as K\r\nK.set_image_data_format('channels_first')\r\nmodel = efn.EfficientNetB0(\r\n            weights=\"imagenet\",\r\n            include_top=False,\r\n            input_shape=(3, 256, 256))\r\n```\r\n\r\n<details><summary>Traceback</summary>\r\n<p>\r\n\r\n```\r\nInvalidArgumentError                      Traceback (most recent call last)\r\n/opt/conda/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in _create_c_op(graph, node_def, inputs, control_inputs)\r\n   1863   try:\r\n-> 1864     c_op = c_api.TF_FinishOperation(op_desc)\r\n   1865   except errors.InvalidArgumentError as e:\r\n\r\nInvalidArgumentError: Shape must be rank 1 but is rank 0 for 'stem_bn/cond/Reshape_4' (op: 'Reshape') with input shapes: [1,32,1,1], [].\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-3-26ac989de061> in <module>\r\n      2             weights=\"imagenet\",\r\n      3             include_top=False,\r\n----> 4             input_shape=(3, 256, 256))\r\n\r\n/opt/conda/lib/python3.7/site-packages/efficientnet/__init__.py in wrapper(*args, **kwargs)\r\n     42         kwargs['models'] = keras.models\r\n     43         kwargs['utils'] = keras.utils\r\n---> 44         return func(*args, **kwargs)\r\n     45 \r\n     46     return wrapper\r\n\r\n/opt/conda/lib/python3.7/site-packages/efficientnet/model.py in EfficientNetB0(include_top, weights, input_tensor, input_shape, pooling, classes, **kwargs)\r\n    491                         input_tensor=input_tensor, input_shape=input_shape,\r\n    492                         pooling=pooling, classes=classes,\r\n--> 493                         **kwargs)\r\n    494 \r\n    495 \r\n\r\n/opt/conda/lib/python3.7/site-packages/efficientnet/model.py in EfficientNet(width_coefficient, depth_coefficient, default_resolution, dropout_rate, drop_connect_rate, depth_divisor, blocks_args, model_name, include_top, weights, input_tensor, input_shape, pooling, classes, **kwargs)\r\n    388                       kernel_initializer=CONV_KERNEL_INITIALIZER,\r\n    389                       name='stem_conv')(x)\r\n--> 390     x = layers.BatchNormalization(axis=bn_axis, name='stem_bn')(x)\r\n    391     x = layers.Activation(activation, name='stem_activation')(x)\r\n    392 \r\n\r\n/opt/conda/lib/python3.7/site-packages/keras/engine/base_layer.py in __call__(self, inputs, **kwargs)\r\n    455             # Actually call the layer,\r\n    456             # collecting output(s), mask(s), and shape(s).\r\n--> 457             output = self.call(inputs, **kwargs)\r\n    458             output_mask = self.compute_mask(inputs, previous_mask)\r\n    459 \r\n\r\n/opt/conda/lib/python3.7/site-packages/keras/layers/normalization.py in call(self, inputs, training)\r\n    204         return K.in_train_phase(normed_training,\r\n    205                                 normalize_inference,\r\n--> 206                                 training=training)\r\n    207 \r\n    208     def get_config(self):\r\n\r\n/opt/conda/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py in in_train_phase(x, alt, training)\r\n   3121 \r\n   3122     # else: assume learning phase is a placeholder tensor.\r\n-> 3123     x = switch(training, x, alt)\r\n   3124     if uses_learning_phase:\r\n   3125         x._uses_learning_phase = True\r\n\r\n/opt/conda/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py in switch(condition, then_expression, else_expression)\r\n   3056         x = tf.cond(condition,\r\n   3057                     then_expression_fn,\r\n-> 3058                     else_expression_fn)\r\n   3059     else:\r\n   3060         # tf.where needs its condition tensor\r\n\r\n/opt/conda/lib/python3.7/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\r\n    505                 'in a future version' if date is None else ('after %s' % date),\r\n    506                 instructions)\r\n--> 507       return func(*args, **kwargs)\r\n    508 \r\n    509     doc = _add_deprecated_arg_notice_to_docstring(\r\n\r\n/opt/conda/lib/python3.7/site-packages/tensorflow/python/ops/control_flow_ops.py in cond(pred, true_fn, false_fn, strict, name, fn1, fn2)\r\n   1986     try:\r\n   1987       context_f.Enter()\r\n-> 1988       orig_res_f, res_f = context_f.BuildCondBranch(false_fn)\r\n   1989       if orig_res_f is None:\r\n   1990         raise ValueError(\"false_fn must have a return value.\")\r\n\r\n/opt/conda/lib/python3.7/site-packages/tensorflow/python/ops/control_flow_ops.py in BuildCondBranch(self, fn)\r\n   1812     \"\"\"Add the subgraph defined by fn() to the graph.\"\"\"\r\n   1813     pre_summaries = ops.get_collection(ops.GraphKeys._SUMMARY_COLLECTION)  # pylint: disable=protected-access\r\n-> 1814     original_result = fn()\r\n   1815     post_summaries = ops.get_collection(ops.GraphKeys._SUMMARY_COLLECTION)  # pylint: disable=protected-access\r\n   1816     if len(post_summaries) > len(pre_summaries):\r\n\r\n/opt/conda/lib/python3.7/site-packages/keras/layers/normalization.py in normalize_inference()\r\n    165                     broadcast_gamma,\r\n    166                     axis=self.axis,\r\n--> 167                     epsilon=self.epsilon)\r\n    168             else:\r\n    169                 return K.batch_normalization(\r\n\r\n/opt/conda/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py in batch_normalization(x, mean, var, beta, gamma, axis, epsilon)\r\n   1906             # so it may have extra axes with 1, it is not needed and should be removed\r\n   1907             if ndim(mean) > 1:\r\n-> 1908                 mean = tf.reshape(mean, (-1))\r\n   1909             if ndim(var) > 1:\r\n   1910                 var = tf.reshape(var, (-1))\r\n\r\n/opt/conda/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py in reshape(tensor, shape, name)\r\n   7713   try:\r\n   7714     _, _, _op = _op_def_lib._apply_op_helper(\r\n-> 7715         \"Reshape\", tensor=tensor, shape=shape, name=name)\r\n   7716   except (TypeError, ValueError):\r\n   7717     result = _dispatch.dispatch(\r\n\r\n/opt/conda/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\r\n    786         op = g.create_op(op_type_name, inputs, dtypes=None, name=scope,\r\n    787                          input_types=input_types, attrs=attr_protos,\r\n--> 788                          op_def=op_def)\r\n    789       return output_structure, op_def.is_stateful, op\r\n    790 \r\n\r\n/opt/conda/lib/python3.7/site-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\r\n    505                 'in a future version' if date is None else ('after %s' % date),\r\n    506                 instructions)\r\n--> 507       return func(*args, **kwargs)\r\n    508 \r\n    509     doc = _add_deprecated_arg_notice_to_docstring(\r\n\r\n/opt/conda/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in create_op(***failed resolving arguments***)\r\n   3614           input_types=input_types,\r\n   3615           original_op=self._default_original_op,\r\n-> 3616           op_def=op_def)\r\n   3617       self._create_op_helper(ret, compute_device=compute_device)\r\n   3618     return ret\r\n\r\n/opt/conda/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in __init__(self, node_def, g, inputs, output_types, control_inputs, input_types, original_op, op_def)\r\n   2025           op_def, inputs, node_def.attr)\r\n   2026       self._c_op = _create_c_op(self._graph, node_def, grouped_inputs,\r\n-> 2027                                 control_input_ops)\r\n   2028 \r\n   2029     # Initialize self._outputs.\r\n\r\n/opt/conda/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in _create_c_op(graph, node_def, inputs, control_inputs)\r\n   1865   except errors.InvalidArgumentError as e:\r\n   1866     # Convert to ValueError for backwards compatibility.\r\n-> 1867     raise ValueError(str(e))\r\n   1868 \r\n   1869   return c_op\r\n\r\nValueError: Shape must be rank 1 but is rank 0 for 'stem_bn/cond/Reshape_4' (op: 'Reshape') with input shapes: [1,32,1,1], [].\r\n```\r\n\r\n</p>\r\n</details>","reactions":{"url":"https://api.github.com/repos/qubvel/efficientnet/issues/comments/538333882/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"s-rog","id":55400948,"node_id":"MDQ6VXNlcjU1NDAwOTQ4","avatar_url":"https://avatars.githubusercontent.com/u/55400948?v=4","gravatar_id":"","url":"https://api.github.com/users/s-rog","html_url":"https://github.com/s-rog","followers_url":"https://api.github.com/users/s-rog/followers","following_url":"https://api.github.com/users/s-rog/following{/other_user}","gists_url":"https://api.github.com/users/s-rog/gists{/gist_id}","starred_url":"https://api.github.com/users/s-rog/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s-rog/subscriptions","organizations_url":"https://api.github.com/users/s-rog/orgs","repos_url":"https://api.github.com/users/s-rog/repos","events_url":"https://api.github.com/users/s-rog/events{/privacy}","received_events_url":"https://api.github.com/users/s-rog/received_events","type":"User","site_admin":false}},{"id":3899777243,"node_id":"MDExOkNsb3NlZEV2ZW50Mzg5OTc3NzI0Mw==","url":"https://api.github.com/repos/qubvel/efficientnet/issues/events/3899777243","actor":{"login":"s-rog","id":55400948,"node_id":"MDQ6VXNlcjU1NDAwOTQ4","avatar_url":"https://avatars.githubusercontent.com/u/55400948?v=4","gravatar_id":"","url":"https://api.github.com/users/s-rog","html_url":"https://github.com/s-rog","followers_url":"https://api.github.com/users/s-rog/followers","following_url":"https://api.github.com/users/s-rog/following{/other_user}","gists_url":"https://api.github.com/users/s-rog/gists{/gist_id}","starred_url":"https://api.github.com/users/s-rog/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/s-rog/subscriptions","organizations_url":"https://api.github.com/users/s-rog/orgs","repos_url":"https://api.github.com/users/s-rog/repos","events_url":"https://api.github.com/users/s-rog/events{/privacy}","received_events_url":"https://api.github.com/users/s-rog/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2020-10-20T16:46:34Z","state_reason":null,"performed_via_github_app":null}]