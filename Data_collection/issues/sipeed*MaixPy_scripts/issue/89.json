{"url":"https://api.github.com/repos/sipeed/MaixPy_scripts/issues/89","repository_url":"https://api.github.com/repos/sipeed/MaixPy_scripts","labels_url":"https://api.github.com/repos/sipeed/MaixPy_scripts/issues/89/labels{/name}","comments_url":"https://api.github.com/repos/sipeed/MaixPy_scripts/issues/89/comments","events_url":"https://api.github.com/repos/sipeed/MaixPy_scripts/issues/89/events","html_url":"https://github.com/sipeed/MaixPy_scripts/issues/89","id":789595974,"node_id":"MDU6SXNzdWU3ODk1OTU5NzQ=","number":89,"title":"自学习分类示例程序中关于保存及载入分类器的提示有误！","user":{"login":"embedream","id":47808447,"node_id":"MDQ6VXNlcjQ3ODA4NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/47808447?v=4","gravatar_id":"","url":"https://api.github.com/users/embedream","html_url":"https://github.com/embedream","followers_url":"https://api.github.com/users/embedream/followers","following_url":"https://api.github.com/users/embedream/following{/other_user}","gists_url":"https://api.github.com/users/embedream/gists{/gist_id}","starred_url":"https://api.github.com/users/embedream/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/embedream/subscriptions","organizations_url":"https://api.github.com/users/embedream/orgs","repos_url":"https://api.github.com/users/embedream/repos","events_url":"https://api.github.com/users/embedream/events{/privacy}","received_events_url":"https://api.github.com/users/embedream/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-01-20T03:31:13Z","updated_at":"2021-01-20T07:43:20Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"在自学习分类示例程序最后，所提示的保存、载入语句为：\r\n\r\n# You can save trained data to file system by:\r\nclassifier.save(\"3_classes.classifier\")\r\n\r\n# Then load :\r\n# model = kpu.load(0x300000)\r\n# classifier = kpu.classifier.load(model, \"3_class.classifier\")\r\n\r\n保存是正确的，载入语句不对，在请教Sipeed工程师后，得知正确的应该是：\r\nclassifier, class_num, sample_num = kpu.classifier.load(model, \"3_class.classifier\")\r\n\r\n已经在示例程序中加上测试了，正确！\r\n我修改后的程序如下，供后续学习者参考（里面有些是为了理解程序增加的输出）：\r\n\r\nimport KPU as kpu\r\nimport sensor\r\nimport lcd\r\nfrom Maix import GPIO\r\nfrom fpioa_manager import fm\r\nfrom board import board_info\r\nimport time\r\nimport gc\r\nimport uos\r\n\r\n############### config #################\r\nclass_num = 3\r\nsample_num = 15\r\nTHRESHOLD = 11\r\nclass_names = ['class1', 'class2', 'class3']\r\nboard_cube = 0\r\n########################################\r\n\r\n\r\ndef draw_string(img, x, y, text, color, scale, bg=None ):\r\n    if bg:\r\n        img.draw_rectangle(x-2,y-2, len(text)*8*scale+4 , 16*scale, fill=True, color=bg)\r\n    img = img.draw_string(x, y, text, color=color,scale=scale)\r\n    return img\r\n\r\nprint(uos.listdir(\"/\"))\r\nprint(\"files:\", uos.listdir(\"/flash\"))\r\n\r\nsensor.reset()\r\nsensor.set_pixformat(sensor.RGB565)\r\nsensor.set_framesize(sensor.QVGA)\r\nsensor.set_windowing((224, 224))\r\nsensor.set_vflip(True)  #for MaixBit,20210118\r\nsensor.set_hmirror(True) #for MaixBit\r\nif board_cube == 1:\r\n    sensor.set_vflip(True)\r\n    sensor.set_hmirror(True)\r\n    lcd.init(type=2)\r\n    lcd.rotation(2)\r\nelse:\r\n    lcd.init()\r\n\r\nfm.register(board_info.BOOT_KEY, fm.fpioa.GPIOHS0)\r\nkey = GPIO(GPIO.GPIOHS0, GPIO.PULL_UP)\r\n\r\ntry:\r\n    del model\r\nexcept Exception:\r\n    pass\r\ntry:\r\n    del classifier\r\nexcept Exception:\r\n    pass\r\ngc.collect()\r\n\r\nmodel = kpu.load(0x300000)\r\ntry:\r\n    classifier, class_num, sample_num = kpu.classifier.load(model, \"3_classes.classifier\")\r\n    train_status = 1\r\nexcept Exception as err:\r\n    print(\"Exception:\",err)\r\n    classifier = kpu.classifier(model, class_num, sample_num)\r\n    train_status = 0\r\n\r\nprint(\"Train:\",train_status)\r\n\r\ncap_num = 0\r\n#train_status = 0\r\nlast_cap_time = 0\r\nlast_btn_status = 1\r\nwhile 1:\r\n    img = sensor.snapshot()\r\n    if board_cube:\r\n        img = img.rotation_corr(z_rotation=90)\r\n        img.pix_to_ai()\r\n    # capture img\r\n    if train_status == 0:\r\n        if key.value() == 0:\r\n            time.sleep_ms(30)\r\n            if key.value() == 0 and (last_btn_status == 1) and (time.ticks_ms() - last_cap_time > 500):\r\n                last_btn_status = 0\r\n                last_cap_time = time.ticks_ms()\r\n                if cap_num < class_num:\r\n                    index = classifier.add_class_img(img)\r\n                    cap_num += 1\r\n                    print(\"add class img:\", index)\r\n                elif cap_num < class_num + sample_num:\r\n                    index = classifier.add_sample_img(img)\r\n                    cap_num += 1\r\n                    print(\"add sample img:\", index)\r\n            else:\r\n                img = draw_string(img, 2, 200, \"release boot key please\", color=lcd.WHITE,scale=1, bg=lcd.RED)\r\n        else:\r\n            time.sleep_ms(30)\r\n            if key.value() == 1 and (last_btn_status == 0):\r\n                last_btn_status = 1\r\n            if cap_num < class_num:\r\n                img = draw_string(img, 0, 200, \"press boot key to cap \"+class_names[cap_num], color=lcd.WHITE,scale=1, bg=lcd.RED)\r\n            elif cap_num < class_num + sample_num:\r\n                img = draw_string(img, 0, 200, \"boot key to cap sample{}\".format(cap_num-class_num), color=lcd.WHITE,scale=1, bg=lcd.RED)\r\n    # train and predict\r\n    if train_status == 0:\r\n        if cap_num >= class_num + sample_num:\r\n            print(\"start train\")\r\n            img = draw_string(img, 30, 100, \"training...\", color=lcd.WHITE,scale=2, bg=lcd.RED)\r\n            lcd.display(img)\r\n            classifier.train()\r\n            classifier.save(\"3_classes.classifier\")\r\n            print(\"train end\")\r\n            train_status = 1\r\n    else:\r\n        res_index = -1\r\n        try:\r\n            res_index, min_dist = classifier.predict(img)\r\n            print(\"{:.2f}\".format(min_dist))\r\n            print(\"index:\",res_index)\r\n        except Exception as e:\r\n            print(\"predict err:\", e)\r\n\r\n        if res_index >= 0:\r\n            if min_dist < THRESHOLD :\r\n                print(\"predict result:\", class_names[res_index])\r\n                img = draw_string(img, 2, 2, class_names[res_index], color=lcd.WHITE,scale=2, bg=lcd.RED)\r\n            else:\r\n                if min_dist < (THRESHOLD+4) :\r\n                    print(\"maybe:\", class_names[res_index])\r\n                    img = draw_string(img, 2, 2, 'maybe {}'.format(class_names[res_index]), color=lcd.WHITE,scale=2, bg=lcd.RED)\r\n                else:\r\n                    img = draw_string(img, 2, 2, \"unknown\", color=lcd.WHITE,scale=2, bg=lcd.RED)\r\n    lcd.display(img)\r\n\r\n# You can save trained data to file system by:\r\n# classifier.save(\"3_classes.classifier\")\r\n\r\n# Then load :\r\n# model = kpu.load(0x300000)\r\n# classifier, class_num, sample_num = kpu.classifier.load(model, \"3_class.classifier\")\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/sipeed/MaixPy_scripts/issues/89/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/sipeed/MaixPy_scripts/issues/89/timeline","performed_via_github_app":null,"state_reason":null}