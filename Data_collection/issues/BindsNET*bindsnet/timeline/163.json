[{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/441833730","html_url":"https://github.com/BindsNET/bindsnet/issues/163#issuecomment-441833730","issue_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/163","id":441833730,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MTgzMzczMA==","user":{"login":"djsaunde","id":1245942,"node_id":"MDQ6VXNlcjEyNDU5NDI=","avatar_url":"https://avatars.githubusercontent.com/u/1245942?v=4","gravatar_id":"","url":"https://api.github.com/users/djsaunde","html_url":"https://github.com/djsaunde","followers_url":"https://api.github.com/users/djsaunde/followers","following_url":"https://api.github.com/users/djsaunde/following{/other_user}","gists_url":"https://api.github.com/users/djsaunde/gists{/gist_id}","starred_url":"https://api.github.com/users/djsaunde/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djsaunde/subscriptions","organizations_url":"https://api.github.com/users/djsaunde/orgs","repos_url":"https://api.github.com/users/djsaunde/repos","events_url":"https://api.github.com/users/djsaunde/events{/privacy}","received_events_url":"https://api.github.com/users/djsaunde/received_events","type":"User","site_admin":false},"created_at":"2018-11-26T23:01:56Z","updated_at":"2018-11-26T23:01:56Z","author_association":"COLLABORATOR","body":"Could you elaborate? PRs are welcome.","reactions":{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/441833730/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"djsaunde","id":1245942,"node_id":"MDQ6VXNlcjEyNDU5NDI=","avatar_url":"https://avatars.githubusercontent.com/u/1245942?v=4","gravatar_id":"","url":"https://api.github.com/users/djsaunde","html_url":"https://github.com/djsaunde","followers_url":"https://api.github.com/users/djsaunde/followers","following_url":"https://api.github.com/users/djsaunde/following{/other_user}","gists_url":"https://api.github.com/users/djsaunde/gists{/gist_id}","starred_url":"https://api.github.com/users/djsaunde/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djsaunde/subscriptions","organizations_url":"https://api.github.com/users/djsaunde/orgs","repos_url":"https://api.github.com/users/djsaunde/repos","events_url":"https://api.github.com/users/djsaunde/events{/privacy}","received_events_url":"https://api.github.com/users/djsaunde/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/442192733","html_url":"https://github.com/BindsNET/bindsnet/issues/163#issuecomment-442192733","issue_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/163","id":442192733,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjE5MjczMw==","user":{"login":"PaulMuadDib","id":4218461,"node_id":"MDQ6VXNlcjQyMTg0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/4218461?v=4","gravatar_id":"","url":"https://api.github.com/users/PaulMuadDib","html_url":"https://github.com/PaulMuadDib","followers_url":"https://api.github.com/users/PaulMuadDib/followers","following_url":"https://api.github.com/users/PaulMuadDib/following{/other_user}","gists_url":"https://api.github.com/users/PaulMuadDib/gists{/gist_id}","starred_url":"https://api.github.com/users/PaulMuadDib/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PaulMuadDib/subscriptions","organizations_url":"https://api.github.com/users/PaulMuadDib/orgs","repos_url":"https://api.github.com/users/PaulMuadDib/repos","events_url":"https://api.github.com/users/PaulMuadDib/events{/privacy}","received_events_url":"https://api.github.com/users/PaulMuadDib/received_events","type":"User","site_admin":false},"created_at":"2018-11-27T19:49:01Z","updated_at":"2018-11-27T19:49:01Z","author_association":"NONE","body":"For the time being, a connection is a weight, and I was wondering about the possibility to add a \"conduction delay\" attribute (say from 0 to 50 ms) to simulate the time needed for the action potential / spike to propagate from one neuron to the following... so that a connection would be a (weight , delay) in this manner: https://www.izhikevich.org/publications/spnet.cpp\r\nI was also wondering about the possibility to extend this unique couple to a set of (weights , delays)  (effectively modelling an inpulse response).","reactions":{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/442192733/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"PaulMuadDib","id":4218461,"node_id":"MDQ6VXNlcjQyMTg0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/4218461?v=4","gravatar_id":"","url":"https://api.github.com/users/PaulMuadDib","html_url":"https://github.com/PaulMuadDib","followers_url":"https://api.github.com/users/PaulMuadDib/followers","following_url":"https://api.github.com/users/PaulMuadDib/following{/other_user}","gists_url":"https://api.github.com/users/PaulMuadDib/gists{/gist_id}","starred_url":"https://api.github.com/users/PaulMuadDib/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PaulMuadDib/subscriptions","organizations_url":"https://api.github.com/users/PaulMuadDib/orgs","repos_url":"https://api.github.com/users/PaulMuadDib/repos","events_url":"https://api.github.com/users/PaulMuadDib/events{/privacy}","received_events_url":"https://api.github.com/users/PaulMuadDib/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/442455330","html_url":"https://github.com/BindsNET/bindsnet/issues/163#issuecomment-442455330","issue_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/163","id":442455330,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MjQ1NTMzMA==","user":{"login":"djsaunde","id":1245942,"node_id":"MDQ6VXNlcjEyNDU5NDI=","avatar_url":"https://avatars.githubusercontent.com/u/1245942?v=4","gravatar_id":"","url":"https://api.github.com/users/djsaunde","html_url":"https://github.com/djsaunde","followers_url":"https://api.github.com/users/djsaunde/followers","following_url":"https://api.github.com/users/djsaunde/following{/other_user}","gists_url":"https://api.github.com/users/djsaunde/gists{/gist_id}","starred_url":"https://api.github.com/users/djsaunde/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djsaunde/subscriptions","organizations_url":"https://api.github.com/users/djsaunde/orgs","repos_url":"https://api.github.com/users/djsaunde/repos","events_url":"https://api.github.com/users/djsaunde/events{/privacy}","received_events_url":"https://api.github.com/users/djsaunde/received_events","type":"User","site_admin":false},"created_at":"2018-11-28T13:57:09Z","updated_at":"2018-11-28T13:57:09Z","author_association":"COLLABORATOR","body":"That is an interesting idea, but I'm not sure we need it in BindsNET, especially not in the generic `Connection` object where it would induce computational overhead. Maybe implementing a new `DelayConnection` object with this functionality would be the way to go.\r\n\r\nPersonally, I don't have a use case for simulating propagation times, nor do I have the extra time to work on it, so I'd encourage you to make a PR if you'd like the functionality in the package.","reactions":{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/442455330/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"djsaunde","id":1245942,"node_id":"MDQ6VXNlcjEyNDU5NDI=","avatar_url":"https://avatars.githubusercontent.com/u/1245942?v=4","gravatar_id":"","url":"https://api.github.com/users/djsaunde","html_url":"https://github.com/djsaunde","followers_url":"https://api.github.com/users/djsaunde/followers","following_url":"https://api.github.com/users/djsaunde/following{/other_user}","gists_url":"https://api.github.com/users/djsaunde/gists{/gist_id}","starred_url":"https://api.github.com/users/djsaunde/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djsaunde/subscriptions","organizations_url":"https://api.github.com/users/djsaunde/orgs","repos_url":"https://api.github.com/users/djsaunde/repos","events_url":"https://api.github.com/users/djsaunde/events{/privacy}","received_events_url":"https://api.github.com/users/djsaunde/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/443542392","html_url":"https://github.com/BindsNET/bindsnet/issues/163#issuecomment-443542392","issue_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/163","id":443542392,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0MzU0MjM5Mg==","user":{"login":"PaulMuadDib","id":4218461,"node_id":"MDQ6VXNlcjQyMTg0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/4218461?v=4","gravatar_id":"","url":"https://api.github.com/users/PaulMuadDib","html_url":"https://github.com/PaulMuadDib","followers_url":"https://api.github.com/users/PaulMuadDib/followers","following_url":"https://api.github.com/users/PaulMuadDib/following{/other_user}","gists_url":"https://api.github.com/users/PaulMuadDib/gists{/gist_id}","starred_url":"https://api.github.com/users/PaulMuadDib/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PaulMuadDib/subscriptions","organizations_url":"https://api.github.com/users/PaulMuadDib/orgs","repos_url":"https://api.github.com/users/PaulMuadDib/repos","events_url":"https://api.github.com/users/PaulMuadDib/events{/privacy}","received_events_url":"https://api.github.com/users/PaulMuadDib/received_events","type":"User","site_admin":false},"created_at":"2018-12-02T21:11:11Z","updated_at":"2018-12-02T21:11:11Z","author_association":"NONE","body":"I understand, it is not my priority right now, and it would certainly slow down the computations. I may try to implement it as a new connection object later, but I am rather struggling to backpropagate rewards in an efficient manner for now.","reactions":{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/443542392/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"PaulMuadDib","id":4218461,"node_id":"MDQ6VXNlcjQyMTg0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/4218461?v=4","gravatar_id":"","url":"https://api.github.com/users/PaulMuadDib","html_url":"https://github.com/PaulMuadDib","followers_url":"https://api.github.com/users/PaulMuadDib/followers","following_url":"https://api.github.com/users/PaulMuadDib/following{/other_user}","gists_url":"https://api.github.com/users/PaulMuadDib/gists{/gist_id}","starred_url":"https://api.github.com/users/PaulMuadDib/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PaulMuadDib/subscriptions","organizations_url":"https://api.github.com/users/PaulMuadDib/orgs","repos_url":"https://api.github.com/users/PaulMuadDib/repos","events_url":"https://api.github.com/users/PaulMuadDib/events{/privacy}","received_events_url":"https://api.github.com/users/PaulMuadDib/received_events","type":"User","site_admin":false}},{"id":2019865361,"node_id":"MDExOkNsb3NlZEV2ZW50MjAxOTg2NTM2MQ==","url":"https://api.github.com/repos/BindsNET/bindsnet/issues/events/2019865361","actor":{"login":"Hananel-Hazan","id":3954715,"node_id":"MDQ6VXNlcjM5NTQ3MTU=","avatar_url":"https://avatars.githubusercontent.com/u/3954715?v=4","gravatar_id":"","url":"https://api.github.com/users/Hananel-Hazan","html_url":"https://github.com/Hananel-Hazan","followers_url":"https://api.github.com/users/Hananel-Hazan/followers","following_url":"https://api.github.com/users/Hananel-Hazan/following{/other_user}","gists_url":"https://api.github.com/users/Hananel-Hazan/gists{/gist_id}","starred_url":"https://api.github.com/users/Hananel-Hazan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hananel-Hazan/subscriptions","organizations_url":"https://api.github.com/users/Hananel-Hazan/orgs","repos_url":"https://api.github.com/users/Hananel-Hazan/repos","events_url":"https://api.github.com/users/Hananel-Hazan/events{/privacy}","received_events_url":"https://api.github.com/users/Hananel-Hazan/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2018-12-11T21:04:45Z","state_reason":null,"performed_via_github_app":null},{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/449961041","html_url":"https://github.com/BindsNET/bindsnet/issues/163#issuecomment-449961041","issue_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/163","id":449961041,"node_id":"MDEyOklzc3VlQ29tbWVudDQ0OTk2MTA0MQ==","user":{"login":"PaulMuadDib","id":4218461,"node_id":"MDQ6VXNlcjQyMTg0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/4218461?v=4","gravatar_id":"","url":"https://api.github.com/users/PaulMuadDib","html_url":"https://github.com/PaulMuadDib","followers_url":"https://api.github.com/users/PaulMuadDib/followers","following_url":"https://api.github.com/users/PaulMuadDib/following{/other_user}","gists_url":"https://api.github.com/users/PaulMuadDib/gists{/gist_id}","starred_url":"https://api.github.com/users/PaulMuadDib/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PaulMuadDib/subscriptions","organizations_url":"https://api.github.com/users/PaulMuadDib/orgs","repos_url":"https://api.github.com/users/PaulMuadDib/repos","events_url":"https://api.github.com/users/PaulMuadDib/events{/privacy}","received_events_url":"https://api.github.com/users/PaulMuadDib/received_events","type":"User","site_admin":false},"created_at":"2018-12-26T12:38:40Z","updated_at":"2018-12-26T12:54:04Z","author_association":"NONE","body":"Hi there,\r\nIt seems that minor modifications on the \"Connection\" object (see DelayedConnection below) would allow the introduction of synaptic conduction delays (which, imo, are fundamentally required to represent/augment the adaptive spatiotemporal processing capabilities of a spiking neuron ruled by STDP, and allow the emergence of richer internal representations in the form of polychronous groups, see Izhikevich). I tried to optimize/vectorize the .compute( ) part (summation of the delayed weights * spikes contributions), but it still slows down the simulation by 4 with my deep SNN (with synaptic delays from 0 to 10 ms)... and the STDP implementation needs to be revisited as well to take in account the synaptic delays.\r\n\r\n    `class AbstractDelayedConnection(ABC):\r\n    \"\"\"\r\n    Abstract base method for connections between ``Nodes``.\r\n    \"\"\"\r\n\r\n    def __init__(self, source: Nodes, target: Nodes,\r\n                 nu: Optional[Union[float, Sequence[float]]] = None, weight_decay: float = 0.0, **kwargs) -> None:\r\n        \"\"\"\r\n        Constructor for abstract base class for connection objects.\r\n\r\n        :param source: A layer of nodes from which the connection originates.\r\n        :param target: A layer of nodes to which the connection connects.\r\n        :param nu: Learning rate for both pre- and post-synaptic events.\r\n        :param weight_decay: Constant multiple to decay weights by on each iteration.\r\n\r\n        Keyword arguments:\r\n\r\n        :param function update_rule: Modifies connection parameters according to some rule.\r\n        :param float wmin: The minimum value on the connection weights.\r\n        :param float wmax: The maximum value on the connection weights.\r\n        :param float norm: Total weight per target neuron normalization.\r\n        \"\"\"\r\n        self.w = None\r\n        self.d = None\r\n        self.source = source\r\n        self.target = target\r\n        self.nu = nu\r\n        self.weight_decay = weight_decay\r\n\r\n        assert isinstance(source, Nodes), 'Source is not a Nodes object'\r\n        assert isinstance(target, Nodes), 'Target is not a Nodes object'\r\n\r\n        from ..learning import NoOp\r\n\r\n        self.update_rule = kwargs.get('update_rule', NoOp)\r\n        self.wmin = kwargs.get('wmin', None)\r\n        self.wmax = kwargs.get('wmax', None)\r\n        self.dmin = kwargs.get('dmin', None)\r\n        self.dmax = kwargs.get('dmax', None)\r\n        self.norm = kwargs.get('norm', None)\r\n        self.decay = kwargs.get('decay', None)\r\n\r\n        if self.update_rule is None:\r\n            self.update_rule = NoOp\r\n\r\n        self.a_pre = 0.0\r\n\r\n        self.update_rule = self.update_rule(\r\n            connection=self, nu=self.nu, weight_decay=weight_decay\r\n        )\r\n\r\n    @abstractmethod\r\n    def compute(self, s: torch.Tensor) -> None:\r\n        \"\"\"\r\n        Compute pre-activations of downstream neurons given spikes of upstream neurons.\r\n\r\n        :param s: Incoming spikes.\r\n        \"\"\"\r\n        pass\r\n\r\n    @abstractmethod\r\n    def update(self, **kwargs) -> None:\r\n        \"\"\"\r\n        Compute connection's update rule.\r\n        \"\"\"\r\n        learning = kwargs.get('learning', True)\r\n\r\n        if learning:\r\n            self.update_rule.update(**kwargs)\r\n\r\n        mask = kwargs.get('mask', None)\r\n        if mask is not None:\r\n            self.w.masked_fill_(mask, 0)\r\n\r\n    @abstractmethod\r\n    def normalize(self) -> None:\r\n        \"\"\"\r\n        Normalize weights so each target neuron has sum of incoming connection weights equal to ``self.norm``.\r\n        \"\"\"\r\n        pass\r\n\r\n    @abstractmethod\r\n    def reset_(self) -> None:\r\n        # language=rst\r\n        \"\"\"\r\n        Contains resetting logic for the connection.\r\n        \"\"\"\r\n        pass\r\n\r\n\r\n\r\n\r\n    class DelayedConnection(AbstractDelayedConnection):\r\n    \"\"\"\r\n    Specifies delayed synapses between one or two populations of neurons.\r\n    \"\"\"\r\n    def __init__(self, source: Nodes, target: Nodes, nu: Optional[Union[float, Sequence[float]]] = None,\r\n                 weight_decay: float = 0.0, **kwargs) -> None:\r\n        \"\"\"\r\n        Instantiates a :code:`Connection` object.\r\n\r\n        :param source: A layer of nodes from which the connection originates.\r\n        :param target: A layer of nodes to which the connection connects.\r\n        :param nu: Learning rate for both pre- and post-synaptic events.\r\n        :param weight_decay: Constant multiple to decay weights by on each iteration.\r\n\r\n        Keyword arguments:\r\n\r\n        :param function update_rule: Modifies connection parameters according to some rule.\r\n        :param torch.Tensor w: Strengths of synapses.\r\n        :param torch.Tensor b: Target population bias.\r\n        :param torch.Tensor d: Conduction delays of synapses.\r\n        :param float wmin: Minimum allowed value on the connection weights.\r\n        :param float wmax: Maximum allowed value on the connection weights.\r\n        :param float dmin: Minimum allowed value on the connection delays.\r\n        :param float dmax: Maximum allowed value on the connection delays.\r\n        :param float norm: Total weight per target neuron normalization constant.\r\n        \"\"\"\r\n        super().__init__(source, target, nu, weight_decay, **kwargs)\r\n\r\n        self.w = kwargs.get('w', None)\r\n        self.d = kwargs.get('d', None)\r\n\r\n        if self.w is None:\r\n            if self.wmin is None or self.wmax is None:\r\n                self.w = torch.rand(source.n, target.n)\r\n            elif self.wmin is not None and self.wmax is not None:\r\n                self.w = self.wmin + torch.rand(source.n, target.n) * (self.wmax - self.wmin)\r\n        else:\r\n            if self.wmin is not None and self.wmax is not None:\r\n                self.w = torch.clamp(self.w, self.wmin, self.wmax)\r\n\r\n        self.b = kwargs.get('b', torch.zeros(target.n))\r\n\r\n        if self.d is None:\r\n            if self.dmin is None or self.dmax is None:\r\n                self.d = torch.randint(low = 0,         high = source.d,  size=(source.n, target.n))\r\n            elif self.dmin is not None and self.dmax is not None:\r\n                self.d = torch.randint(low = self.dmin, high = self.dmax, size=(source.n, target.n)) \r\n        else:\r\n            if self.dmin is not None and self.dmax is not None:\r\n                self.d = torch.clamp(self.d, self.dmin, self.dmax)\r\n\t\t\t\t\r\n\t\t# To boost (=max vectorization) the .compute part\r\n        self.nb_synapses   =  torch.zeros((self.dmax, 1), dtype = torch.int)\r\n        self.delay_synapes =  torch.zeros((self.dmax, source.n * target.n // 3, 2), dtype = torch.int)\r\n        for delay in range(self.dmax):\r\n            connections             = (self.d == delay).nonzero()\r\n            self.nb_synapses[delay] = connections.size(0)\r\n            if connections.size(0) > 0:\r\n                self.delay_synapes[delay, 0:connections.size(0)-1, 0:connections.size(1)-1] = connections[0:connections.size(0)-1, 0:connections.size(1)-1]\r\n\t\t\t\t\r\n    def compute(self, s: torch.Tensor) -> torch.Tensor:\r\n        \"\"\"\r\n        Compute pre-activations given source spikes using delayed / weighted connections\r\n\r\n        :param s: Incoming spikes.\r\n        :return: Incoming spikes multiplied by synaptic weights, biased and delayed (with or without decaying spike activation).\r\n        \"\"\"\r\n        for delay in range(self.target.d):\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n            if self.nb_synapses[delay] > 0:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# For each possible delay d of a connection\r\n                presyn  = self.delay_synapes[delay,0:self.nb_synapses[delay]-1,0].long().view(-1)\t\t\t\t\t# Presynaptic/source neurons of connections of delay d\r\n                postsyn = self.delay_synapes[delay,0:self.nb_synapses[delay]-1,1].long().view(-1)\t\t\t\t\t# Postsynaptic/target neurons of connections of delay d\r\n                self.target.inpt[postsyn, delay] += self.w[presyn, postsyn].view(-1) @ s[presyn].float().view(-1)\t# Add the d - delayed contribution w * s of each connections of delay d\t\t\r\n            if delay == 0:    post = self.target.inpt[:, delay].view(*self.target.shape)\t\t\t\t\t\t\t# Current (0 delay) pre-activation to be returned  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n            else:             self.target.inpt[:, delay-1] = self.target.inpt[:, delay]\t\t\t\t\t\t\t\t# Action potential propagation (simple time shift @ each call)\r\n        self.target.inpt[:, self.target.d - 1] = 0.0\r\n        return post\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\r\n    def update(self, **kwargs) -> None:\r\n        \"\"\"\r\n        Compute connection's update rule.\r\n        \"\"\"\r\n        super().update(**kwargs)\r\n\r\n    def normalize(self) -> None:\r\n        \"\"\"\r\n        Normalize weights so each target neuron has sum of connection weights equal to ``self.norm``.\r\n        \"\"\"\r\n        if self.norm is not None:\r\n            self.w *= self.norm / self.w.abs().sum(0).unsqueeze(0)\r\n\r\n    def reset_(self) -> None:\r\n        \"\"\"\r\n        Contains resetting logic for the connection.\r\n        \"\"\"\r\n        super().reset_()`","reactions":{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/449961041/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"PaulMuadDib","id":4218461,"node_id":"MDQ6VXNlcjQyMTg0NjE=","avatar_url":"https://avatars.githubusercontent.com/u/4218461?v=4","gravatar_id":"","url":"https://api.github.com/users/PaulMuadDib","html_url":"https://github.com/PaulMuadDib","followers_url":"https://api.github.com/users/PaulMuadDib/followers","following_url":"https://api.github.com/users/PaulMuadDib/following{/other_user}","gists_url":"https://api.github.com/users/PaulMuadDib/gists{/gist_id}","starred_url":"https://api.github.com/users/PaulMuadDib/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/PaulMuadDib/subscriptions","organizations_url":"https://api.github.com/users/PaulMuadDib/orgs","repos_url":"https://api.github.com/users/PaulMuadDib/repos","events_url":"https://api.github.com/users/PaulMuadDib/events{/privacy}","received_events_url":"https://api.github.com/users/PaulMuadDib/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/576064692","html_url":"https://github.com/BindsNET/bindsnet/issues/163#issuecomment-576064692","issue_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/163","id":576064692,"node_id":"MDEyOklzc3VlQ29tbWVudDU3NjA2NDY5Mg==","user":{"login":"Enguerran971","id":24988925,"node_id":"MDQ6VXNlcjI0OTg4OTI1","avatar_url":"https://avatars.githubusercontent.com/u/24988925?v=4","gravatar_id":"","url":"https://api.github.com/users/Enguerran971","html_url":"https://github.com/Enguerran971","followers_url":"https://api.github.com/users/Enguerran971/followers","following_url":"https://api.github.com/users/Enguerran971/following{/other_user}","gists_url":"https://api.github.com/users/Enguerran971/gists{/gist_id}","starred_url":"https://api.github.com/users/Enguerran971/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Enguerran971/subscriptions","organizations_url":"https://api.github.com/users/Enguerran971/orgs","repos_url":"https://api.github.com/users/Enguerran971/repos","events_url":"https://api.github.com/users/Enguerran971/events{/privacy}","received_events_url":"https://api.github.com/users/Enguerran971/received_events","type":"User","site_admin":false},"created_at":"2020-01-20T00:23:49Z","updated_at":"2020-01-20T00:23:49Z","author_association":"NONE","body":"Hi,\r\nI've read your code and it's very interesting for me. I think you also modify the Nodes class (self.target.inpt and self.target.d), could you show me this class.\r\nThank's\r\n","reactions":{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/comments/576064692/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"Enguerran971","id":24988925,"node_id":"MDQ6VXNlcjI0OTg4OTI1","avatar_url":"https://avatars.githubusercontent.com/u/24988925?v=4","gravatar_id":"","url":"https://api.github.com/users/Enguerran971","html_url":"https://github.com/Enguerran971","followers_url":"https://api.github.com/users/Enguerran971/followers","following_url":"https://api.github.com/users/Enguerran971/following{/other_user}","gists_url":"https://api.github.com/users/Enguerran971/gists{/gist_id}","starred_url":"https://api.github.com/users/Enguerran971/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Enguerran971/subscriptions","organizations_url":"https://api.github.com/users/Enguerran971/orgs","repos_url":"https://api.github.com/users/Enguerran971/repos","events_url":"https://api.github.com/users/Enguerran971/events{/privacy}","received_events_url":"https://api.github.com/users/Enguerran971/received_events","type":"User","site_admin":false}}]