{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/104","repository_url":"https://api.github.com/repos/BindsNET/bindsnet","labels_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/104/labels{/name}","comments_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/104/comments","events_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/104/events","html_url":"https://github.com/BindsNET/bindsnet/issues/104","id":345219161,"node_id":"MDU6SXNzdWUzNDUyMTkxNjE=","number":104,"title":"PyTorch implementation of (homogeneous / inhomogeneous) Poisson encoding","user":{"login":"djsaunde","id":1245942,"node_id":"MDQ6VXNlcjEyNDU5NDI=","avatar_url":"https://avatars.githubusercontent.com/u/1245942?v=4","gravatar_id":"","url":"https://api.github.com/users/djsaunde","html_url":"https://github.com/djsaunde","followers_url":"https://api.github.com/users/djsaunde/followers","following_url":"https://api.github.com/users/djsaunde/following{/other_user}","gists_url":"https://api.github.com/users/djsaunde/gists{/gist_id}","starred_url":"https://api.github.com/users/djsaunde/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djsaunde/subscriptions","organizations_url":"https://api.github.com/users/djsaunde/orgs","repos_url":"https://api.github.com/users/djsaunde/repos","events_url":"https://api.github.com/users/djsaunde/events{/privacy}","received_events_url":"https://api.github.com/users/djsaunde/received_events","type":"User","site_admin":false},"labels":[{"id":832665087,"node_id":"MDU6TGFiZWw4MzI2NjUwODc=","url":"https://api.github.com/repos/BindsNET/bindsnet/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":{"login":"djsaunde","id":1245942,"node_id":"MDQ6VXNlcjEyNDU5NDI=","avatar_url":"https://avatars.githubusercontent.com/u/1245942?v=4","gravatar_id":"","url":"https://api.github.com/users/djsaunde","html_url":"https://github.com/djsaunde","followers_url":"https://api.github.com/users/djsaunde/followers","following_url":"https://api.github.com/users/djsaunde/following{/other_user}","gists_url":"https://api.github.com/users/djsaunde/gists{/gist_id}","starred_url":"https://api.github.com/users/djsaunde/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djsaunde/subscriptions","organizations_url":"https://api.github.com/users/djsaunde/orgs","repos_url":"https://api.github.com/users/djsaunde/repos","events_url":"https://api.github.com/users/djsaunde/events{/privacy}","received_events_url":"https://api.github.com/users/djsaunde/received_events","type":"User","site_admin":false},"assignees":[{"login":"djsaunde","id":1245942,"node_id":"MDQ6VXNlcjEyNDU5NDI=","avatar_url":"https://avatars.githubusercontent.com/u/1245942?v=4","gravatar_id":"","url":"https://api.github.com/users/djsaunde","html_url":"https://github.com/djsaunde","followers_url":"https://api.github.com/users/djsaunde/followers","following_url":"https://api.github.com/users/djsaunde/following{/other_user}","gists_url":"https://api.github.com/users/djsaunde/gists{/gist_id}","starred_url":"https://api.github.com/users/djsaunde/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/djsaunde/subscriptions","organizations_url":"https://api.github.com/users/djsaunde/orgs","repos_url":"https://api.github.com/users/djsaunde/repos","events_url":"https://api.github.com/users/djsaunde/events{/privacy}","received_events_url":"https://api.github.com/users/djsaunde/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2018-07-27T13:07:06Z","updated_at":"2018-10-09T17:57:02Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"I think that `bindsnet.encoding.poisson` could easily be converted to use `torch.distributions.Poisson`. It would be a good way for us to reduce reliance on `numpy`, and perhaps improve readibility of the code.\r\n\r\nConsider the `poisson` function:\r\n\r\n```\r\npoisson(datum: torch.Tensor, time: int, **kwargs) -> torch.Tensor:\r\n    # language=rst\r\n    \"\"\"\r\n    Generates Poisson-distributed spike trains based on input intensity. Inputs must be non-negative.\r\n\r\n    :param datum: Tensor of shape ``[n_1, ..., n_k]``.\r\n    :param time: Length of Bernoulli spike train per input variable.\r\n    :return: Tensor of shape ``[time, n_1, ..., n_k]`` of Poisson-distributed spikes.\r\n    \"\"\"\r\n    datum = np.copy(datum)\r\n    shape, size = datum.shape, datum.size\r\n    datum = datum.ravel()\r\n\r\n    # Invert inputs (firing rate inverse of inter-arrival time).\r\n    datum[datum != 0] = 1 / datum[datum != 0] * 1000\r\n\r\n    # Make spike data from Poisson sampling.\r\n    s_times = np.random.poisson(datum, [time, size])\r\n    s_times = np.cumsum(s_times, axis=0)\r\n    s_times[s_times >= time] = 0\r\n\r\n    # Create spike trains from spike times.\r\n    s = np.zeros([time, size])\r\n    for i in range(time):\r\n        s[s_times[i], np.arange(size)] = 1\r\n\r\n    s[0, :] = 0\r\n    s = s.reshape([time, *shape])\r\n\r\n    return torch.Tensor(s).byte()\r\n```\r\n\r\nThere are a few things that are missing:\r\n\r\n1. No concept of a time step. If we assume the data are coded as rates, with Hz units (which perhaps we should, and which is implicitly assumed in the current `poisson` implementation), then global time step should have an effect on interspike intervals.\r\n2. No concept of time-varying input. @dsanghavi worked on a sort of overlapping Poisson encoding function, but we really need something that implements [inhomogeneous Poisson processes](https://en.wikipedia.org/wiki/Poisson_point_process#Inhomogeneous_Poisson_point_process). This would allow us to naturally encode time-varying input. This might implemented in a separate function (say, `inhomogeneous_poisson`), or by means of a boolean argument to `poisson` which signals that, say, the first dimension of the input is the time dimension. I'm leaning towards the latter.\r\n\r\nI'd allow like to include this in a `PoissonInput(Nodes)` object, which would accept a `rates` parameter specifying the per-neuron firing rate (parametrizing their Poisson spike trains). This would optionally be time-varying. On each `step` of a `PoissonInput` instance, it would generate its output using the `poisson` function and its `rates` attribute.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/104/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/104/timeline","performed_via_github_app":null,"state_reason":null}