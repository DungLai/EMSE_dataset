{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/537","repository_url":"https://api.github.com/repos/BindsNET/bindsnet","labels_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/537/labels{/name}","comments_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/537/comments","events_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/537/events","html_url":"https://github.com/BindsNET/bindsnet/issues/537","id":1110104713,"node_id":"I_kwDOBzWFSM5CKtqJ","number":537,"title":"work-around to allow batch_size>1 for ann_to_snn() 2D CNN","user":{"login":"XiYuan68","id":13471851,"node_id":"MDQ6VXNlcjEzNDcxODUx","avatar_url":"https://avatars.githubusercontent.com/u/13471851?v=4","gravatar_id":"","url":"https://api.github.com/users/XiYuan68","html_url":"https://github.com/XiYuan68","followers_url":"https://api.github.com/users/XiYuan68/followers","following_url":"https://api.github.com/users/XiYuan68/following{/other_user}","gists_url":"https://api.github.com/users/XiYuan68/gists{/gist_id}","starred_url":"https://api.github.com/users/XiYuan68/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/XiYuan68/subscriptions","organizations_url":"https://api.github.com/users/XiYuan68/orgs","repos_url":"https://api.github.com/users/XiYuan68/repos","events_url":"https://api.github.com/users/XiYuan68/events{/privacy}","received_events_url":"https://api.github.com/users/XiYuan68/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-01-21T06:27:30Z","updated_at":"2022-02-13T22:40:23Z","closed_at":"2022-02-13T22:40:23Z","author_association":"NONE","active_lock_reason":null,"body":"Hi BindsNET team and users, I've been using ann_to_snn() for a while. I notice that for MNSIT data, only converted MLP-SNN (`input_shape=(784,)`) allows `batch_size>1`. For 2D CNN-SNN (`input_shape=(1, 28, 28)`), `batch_size` is only allowed to be `1`. \r\n\r\nHere is my 2d CNN structure:\r\n\r\n```\r\nclass MNISTCNN(nn.Module):\r\n    def __init__(self):\r\n\r\n        super(MNISTCNN, self).__init__()\r\n        self.input_shape = (1, 28, 28)\r\n        self.conv1 = nn.Conv2d(1, 32, 5, stride=1, padding=2, bias=True)\r\n        self.maxpool1 = nn.MaxPool2d((2, 2), stride=(2, 2), padding=0)\r\n        self.conv2 = nn.Conv2d(32, 64, 5, stride=1, padding=2, bias=True)\r\n        self.maxpool2 = nn.MaxPool2d((2, 2), stride=(2, 2), padding=0)\r\n        self.fc1 = nn.Linear(7 * 7 * 64, 1024, bias=True)  \r\n        self.fc2 = nn.Linear(1024, 10)  \r\n        \r\n    def forward(self, x):  \r\n        x = F.relu(self.conv1(x))\r\n        x = self.maxpool1(x)\r\n        x = F.relu(self.conv2(x))\r\n        x = self.maxpool2(x)\r\n        x = x.reshape([x.shape[0], -1])\r\n        x = self.fc1(x)\r\n        output = self.fc2(x)\r\n        return output\r\n```\r\n\r\nAnd here is my converted SNN:\r\n\r\n```\r\nclass MNISTSNN(nn.Module):\r\n    def __init__(self,\r\n                 ann: MNISTMLP,\r\n                 n_step: int,\r\n                 density: float, \r\n                 noise: float,\r\n                 decode: bool = True, \r\n                 device: torch.device = DEVICE):\r\n        super(MNISTSNN, self).__init__()\r\n        self.encoder = PoissonEncoder(n_step, density)\r\n        self.noise = SpikeNoise(noise)\r\n        loader = get_loader('mnist', subset='train', proportion=0.2, num_workers=0)\r\n        data = torch.cat([i[0].to(device) for i in loader])\r\n        self.snn = ann_to_snn(ann, ann.input_shape, data).to(device)\r\n        layer_output = list(self.snn.layers.keys())[-1]\r\n        self.monitor_output = Monitor(self.snn.layers[layer_output], ['s'], \r\n                                      n_step, device=device)\r\n        self.snn.add_monitor(self.monitor_output, 'output')\r\n        self.decode = decode\r\n        self.device = device\r\n\r\n    def forward(self, x):\r\n\r\n        x = self.encoder(x)\r\n        x = self.noise(x)\r\n\r\n        self.snn.reset_state_variables()\r\n        self.snn = self.snn.to(self.device)\r\n\r\n        self.snn.run({'Input': x}, self.encoder.n_step)\r\n        # [time, batch_size, n_choice]\r\n        y = self.snn.monitors['output'].get('s')\r\n        if self.decode:\r\n            y = torch.sum(y, axis=0)\r\n        else:\r\n            y = y.to(torch.bool)\r\n        \r\n        \r\n        return y\r\n```\r\n\r\n\r\nI found that it's the `bindsnet.network.topology.MaxPool2dConnection` causing the trouble. When i try to run through a `shape=[100, 32, 1, 28, 28]` spike train, in which `length=100` and `batch_size=32`, error raised:\r\n\r\n```\r\n  File \"/home/chenxiyuan/projects/project/model.py\", line 167, in forward\r\n    self.snn.run({'Input': x}, self.encoder.n_step)\r\n\r\n  File \"/home/chenxiyuan/.local/lib/python3.9/site-packages/bindsnet/network/network.py\", line 360, in run\r\n    current_inputs.update(self._get_inputs())\r\n\r\n  File \"/home/chenxiyuan/.local/lib/python3.9/site-packages/bindsnet/network/network.py\", line 245, in _get_inputs\r\n    inputs[c[1]] += self.connections[c].compute(source.s)\r\n\r\n  File \"/home/chenxiyuan/.local/lib/python3.9/site-packages/bindsnet/network/topology.py\", line 463, in compute\r\n    self.firing_rates += s.float().squeeze()\r\n\r\nRuntimeError: output with shape [1, 32, 28, 28] doesn't match the broadcast shape [32, 32, 28, 28]\r\n```\r\n\r\nIt turns out that when I run `self.snn.reset_state_variables()`, `bindsnet.network.topology.MaxPool2dConnection.reset_state_variables()` always makes `self.firing_rates.shape=[1, 32, 28, 28]` instead of `[32, 32, 28, 28]`, matching with `batch_size=32`, inside the connection.\r\n\r\nSo here is a little work-around to allow reseting the `firing_rates` Tensor with given `batch_size`:\r\n\r\nFor `bindsnet.network.topology.MaxPool2dConnection.reset_state_variables()`: [here](https://github.com/BindsNET/bindsnet/blob/3b19e04132ae5862c2eea46e72accb01ad8f58f0/bindsnet/network/topology.py#L898)\r\n\r\n```\r\n    def reset_state_variables(self, batch_size=1) -> None:\r\n        # language=rst\r\n        \"\"\"\r\n        Contains resetting logic for the connection.\r\n        \"\"\"\r\n        super().reset_state_variables()\r\n\r\n        shape = [batch_size] + list(self.source.s.shape)[1:]\r\n        self.firing_rates = torch.zeros(shape)\r\n```\r\n\r\nFor `bindsnet.network.network.Network.reset_state_variables()`: [here](https://github.com/BindsNET/bindsnet/blob/3b19e04132ae5862c2eea46e72accb01ad8f58f0/bindsnet/network/network.py#L420)\r\n\r\n```\r\n    def reset_state_variables(self, batch_size=1) -> None:\r\n        # language=rst\r\n        \"\"\"\r\n        Reset state variables of objects in network.\r\n        \"\"\"\r\n        for layer in self.layers:\r\n            self.layers[layer].reset_state_variables()\r\n\r\n        for connection in self.connections:\r\n            if isinstance(self.connections[connection], MaxPool2dConnection):\r\n                self.connections[connection].reset_state_variables(batch_size)\r\n            else:\r\n                self.connections[connection].reset_state_variables()\r\n\r\n        for monitor in self.monitors:\r\n            self.monitors[monitor].reset_state_variables()\r\n```\r\n\r\nFinally the converted SNN looks like this, assigning the `batch_size` by `self.snn.reset_state_variables(x.shape[1])` :\r\n\r\n```\r\nclass MNISTSNN(nn.Module):\r\n    def __init__(self,\r\n                 ann: MNISTMLP,\r\n                 n_step: int,\r\n                 density: float, \r\n                 noise: float,\r\n                 decode: bool = True, \r\n                 device: torch.device = DEVICE):\r\n        super(MNISTSNN, self).__init__()\r\n        self.encoder = PoissonEncoder(n_step, density)\r\n        self.noise = SpikeNoise(noise)\r\n        loader = get_loader('mnist', subset='train', proportion=0.2, num_workers=0)\r\n        data = torch.cat([i[0].to(device) for i in loader])\r\n        self.snn = ann_to_snn(ann, ann.input_shape, data).to(device)\r\n        layer_output = list(self.snn.layers.keys())[-1]\r\n        self.monitor_output = Monitor(self.snn.layers[layer_output], ['s'], \r\n                                      n_step, device=device)\r\n        self.snn.add_monitor(self.monitor_output, 'output')\r\n        self.decode = decode\r\n        self.device = device\r\n\r\n    def forward(self, x):\r\n\r\n        x = self.encoder(x)\r\n        x = self.noise(x)\r\n\r\n        self.snn.reset_state_variables(x.shape[1])\r\n        self.snn = self.snn.to(self.device)\r\n\r\n        self.snn.run({'Input': x}, self.encoder.n_step)\r\n        y = self.snn.monitors['output'].get('s')\r\n        if self.decode:\r\n            y = torch.sum(y, axis=0)\r\n        else:\r\n            y = y.to(torch.bool)\r\n        \r\n        \r\n        return y\r\n```\r\n\r\nI only tested this work-around in this model on `bindsnet==0.3.0`., and there is a 10x speed boosting when `batch_size=32`. Hope this post can help the bindsnet team to add this feature in the future version and anyone who wants `batch_size>1` with `ann_to_snn()` 2D CNNs.\r\n","closed_by":{"login":"Hananel-Hazan","id":3954715,"node_id":"MDQ6VXNlcjM5NTQ3MTU=","avatar_url":"https://avatars.githubusercontent.com/u/3954715?v=4","gravatar_id":"","url":"https://api.github.com/users/Hananel-Hazan","html_url":"https://github.com/Hananel-Hazan","followers_url":"https://api.github.com/users/Hananel-Hazan/followers","following_url":"https://api.github.com/users/Hananel-Hazan/following{/other_user}","gists_url":"https://api.github.com/users/Hananel-Hazan/gists{/gist_id}","starred_url":"https://api.github.com/users/Hananel-Hazan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Hananel-Hazan/subscriptions","organizations_url":"https://api.github.com/users/Hananel-Hazan/orgs","repos_url":"https://api.github.com/users/Hananel-Hazan/repos","events_url":"https://api.github.com/users/Hananel-Hazan/events{/privacy}","received_events_url":"https://api.github.com/users/Hananel-Hazan/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/BindsNET/bindsnet/issues/537/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/BindsNET/bindsnet/issues/537/timeline","performed_via_github_app":null,"state_reason":"completed"}