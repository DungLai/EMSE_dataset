{"url":"https://api.github.com/repos/brendanhasz/probflow/issues/33","repository_url":"https://api.github.com/repos/brendanhasz/probflow","labels_url":"https://api.github.com/repos/brendanhasz/probflow/issues/33/labels{/name}","comments_url":"https://api.github.com/repos/brendanhasz/probflow/issues/33/comments","events_url":"https://api.github.com/repos/brendanhasz/probflow/issues/33/events","html_url":"https://github.com/brendanhasz/probflow/issues/33","id":771248884,"node_id":"MDU6SXNzdWU3NzEyNDg4ODQ=","number":33,"title":"DenseNet example","user":{"login":"brendanhasz","id":3465846,"node_id":"MDQ6VXNlcjM0NjU4NDY=","avatar_url":"https://avatars.githubusercontent.com/u/3465846?v=4","gravatar_id":"","url":"https://api.github.com/users/brendanhasz","html_url":"https://github.com/brendanhasz","followers_url":"https://api.github.com/users/brendanhasz/followers","following_url":"https://api.github.com/users/brendanhasz/following{/other_user}","gists_url":"https://api.github.com/users/brendanhasz/gists{/gist_id}","starred_url":"https://api.github.com/users/brendanhasz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brendanhasz/subscriptions","organizations_url":"https://api.github.com/users/brendanhasz/orgs","repos_url":"https://api.github.com/users/brendanhasz/repos","events_url":"https://api.github.com/users/brendanhasz/events{/privacy}","received_events_url":"https://api.github.com/users/brendanhasz/received_events","type":"User","site_admin":false},"labels":[{"id":2193758067,"node_id":"MDU6TGFiZWwyMTkzNzU4MDY3","url":"https://api.github.com/repos/brendanhasz/probflow/labels/examples","name":"examples","color":"42ed17","default":false,"description":"An example to add"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-12-19T00:05:11Z","updated_at":"2020-12-19T00:05:11Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"Add an example of building a net using DenseNet blocks?  Something like\r\n\r\n```python\r\nclass DenseNetBlock(pf.Module):\r\n    \r\n    def __init__(self, dims):\r\n        self.num_layers = len(dims) - 2\r\n        cdims = np.cumsum(dims[:-1])\r\n        self.layers = [pf.Dense(cdims[i], cdims[i+1]) for i in range(self.num_layers)]\r\n        self.batch_norms = [pf.BatchNormalization(d) for d in cdims[1:]]\r\n        self.linear = pf.Dense(cdims[-1], dims[-1])  # last layer reduces\r\n        \r\n    def __call__(self, x):\r\n        outputs = [x]\r\n        for i in range(self.num_layers):\r\n            x = tf.concat(outputs, -1)\r\n            x = self.layers[i](x)\r\n            x = tf.keras.activations.swish(x)\r\n            x = self.batch_norms[i](x)\r\n            outputs.append(x)\r\n        return self.linear(tf.concat(outputs, -1))\r\n\r\n        \r\n\r\nclass DenseNetNetwork(pf.Module):\r\n\r\n    def __init__(self, dims):\r\n        self.num_blocks = len(dims)\r\n        self.blocks = [DenseNetBlock(d) for d in dims]\r\n        self.batch_norms = [pf.BatchNormalization(d[-1]) for d in dims[:-1]]\r\n\r\n    def __call__(self, x):\r\n        for i in range(self.num_blocks):\r\n            x = self.blocks[i](x)\r\n            if i < self.num_blocks - 1:\r\n                x = tf.keras.activations.swish(x)\r\n                x = self.batch_norms[i](x)\r\n        return x\r\n\r\n\r\n\r\nclass DenseNetRegression(pf.Model):\r\n    \r\n    def __init__(self, dims):\r\n        assert dims[-1][-1] == 2\r\n        self.net = DenseNetNetwork(dims)\r\n\r\n    def __call__(self, x):\r\n        x = self.net(x)\r\n        return pf.Normal(x[..., 0], tf.exp(x[..., 1]))\r\n\r\n\r\n\r\nmodel = DenseNetRegression([[256, 128, 64, 32, 16], [16, 128, 64, 2]])\r\n```\r\n\r\nMaybe even add `DenseNet` and `DenseNetNetwork` to modules, and `DenseNetRegression` to applications (though versions with more options (i.e. pass choice of activation function, whether or not you want batch normalization, etc).","closed_by":null,"reactions":{"url":"https://api.github.com/repos/brendanhasz/probflow/issues/33/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/brendanhasz/probflow/issues/33/timeline","performed_via_github_app":null,"state_reason":null}