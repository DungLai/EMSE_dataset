{"url":"https://api.github.com/repos/brendanhasz/probflow/issues/23","repository_url":"https://api.github.com/repos/brendanhasz/probflow","labels_url":"https://api.github.com/repos/brendanhasz/probflow/issues/23/labels{/name}","comments_url":"https://api.github.com/repos/brendanhasz/probflow/issues/23/comments","events_url":"https://api.github.com/repos/brendanhasz/probflow/issues/23/events","html_url":"https://github.com/brendanhasz/probflow/issues/23","id":654510693,"node_id":"MDU6SXNzdWU2NTQ1MTA2OTM=","number":23,"title":"Collect backend variables/modules","user":{"login":"brendanhasz","id":3465846,"node_id":"MDQ6VXNlcjM0NjU4NDY=","avatar_url":"https://avatars.githubusercontent.com/u/3465846?v=4","gravatar_id":"","url":"https://api.github.com/users/brendanhasz","html_url":"https://github.com/brendanhasz","followers_url":"https://api.github.com/users/brendanhasz/followers","following_url":"https://api.github.com/users/brendanhasz/following{/other_user}","gists_url":"https://api.github.com/users/brendanhasz/gists{/gist_id}","starred_url":"https://api.github.com/users/brendanhasz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brendanhasz/subscriptions","organizations_url":"https://api.github.com/users/brendanhasz/orgs","repos_url":"https://api.github.com/users/brendanhasz/repos","events_url":"https://api.github.com/users/brendanhasz/events{/privacy}","received_events_url":"https://api.github.com/users/brendanhasz/received_events","type":"User","site_admin":false},"labels":[{"id":1181357314,"node_id":"MDU6TGFiZWwxMTgxMzU3MzE0","url":"https://api.github.com/repos/brendanhasz/probflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-07-10T04:59:50Z","updated_at":"2020-07-10T04:59:50Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"Make `Module.trainable_variables` also return `tf.Variables` or (or for pytorch, tensors with `requires_grad = True`) which are properties of modules + sub-modules as well (and are not necessarily in parameters).\r\n\r\nAlso allow embedding of `tf.Modules` (or for Pytorch, `nn.Module`) and recursively search them for backend variables.\r\n\r\nThis will mean you can mix probflow parameters + modules with backend variables + modules.  For example:\r\n\r\n```python\r\nclass DenseNetwork(tf.keras.Model):\r\n    \"\"\"A totally tensorflow-only module\"\"\"\r\n\r\n    def __init__(self, units):\r\n        self.layers = [\r\n            tf.keras.layers.Dense(units[i+1], input_shape=(units[i],))\r\n            for i in range(len(units)-1)\r\n        ]\r\n\r\n    def call(self, x):\r\n        for layer in self.layer:\r\n            x = tf.nn.relu(layer(x))\r\n\r\nclass NeuralLinear(pf.ContinuousModel):\r\n\r\n    def __init__(self, units):\r\n        self.net = DenseNetwork(units)  # tensorflow model!\r\n        self.w = pf.Parameter([units[-1], 1])  # probflow parameters\r\n        self.b = pf.Parameter([1, 1])\r\n        self.s = tf.Variable(tf.random.normal([1, 1]))  # tensorflow variable!\r\n\r\n    def __call__(self, x):\r\n        loc = self.net(x) @ self.w() + self.b()\r\n        scale = tf.exp(self.s)\r\n        return pf.Normal(loc, scale)\r\n```\r\n\r\nAnd then with recursive variable/model, ProbFlow will also optimize those variables along with the ones in ProbFlow modules/parameters.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/brendanhasz/probflow/issues/23/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/brendanhasz/probflow/issues/23/timeline","performed_via_github_app":null,"state_reason":null}