{"url":"https://api.github.com/repos/brendanhasz/probflow/issues/27","repository_url":"https://api.github.com/repos/brendanhasz/probflow","labels_url":"https://api.github.com/repos/brendanhasz/probflow/issues/27/labels{/name}","comments_url":"https://api.github.com/repos/brendanhasz/probflow/issues/27/comments","events_url":"https://api.github.com/repos/brendanhasz/probflow/issues/27/events","html_url":"https://github.com/brendanhasz/probflow/issues/27","id":671688145,"node_id":"MDU6SXNzdWU2NzE2ODgxNDU=","number":27,"title":"Ordered Parameter","user":{"login":"brendanhasz","id":3465846,"node_id":"MDQ6VXNlcjM0NjU4NDY=","avatar_url":"https://avatars.githubusercontent.com/u/3465846?v=4","gravatar_id":"","url":"https://api.github.com/users/brendanhasz","html_url":"https://github.com/brendanhasz","followers_url":"https://api.github.com/users/brendanhasz/followers","following_url":"https://api.github.com/users/brendanhasz/following{/other_user}","gists_url":"https://api.github.com/users/brendanhasz/gists{/gist_id}","starred_url":"https://api.github.com/users/brendanhasz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brendanhasz/subscriptions","organizations_url":"https://api.github.com/users/brendanhasz/orgs","repos_url":"https://api.github.com/users/brendanhasz/repos","events_url":"https://api.github.com/users/brendanhasz/events{/privacy}","received_events_url":"https://api.github.com/users/brendanhasz/received_events","type":"User","site_admin":false},"labels":[{"id":1181357314,"node_id":"MDU6TGFiZWwxMTgxMzU3MzE0","url":"https://api.github.com/repos/brendanhasz/probflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2020-08-02T20:54:56Z","updated_at":"2020-08-02T20:54:56Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"Add an `OrderedParameter` class where samples from the vector are always ordered (ie `p = OrderedParameter(3); p[0] < p[1]; p[1] < p[2]`).\r\n\r\nThis is trickier w/ SVI than w/ MCMC because you can't just do the [exp/increment transform](https://github.com/pymc-devs/pymc3/blob/a52a120f7d4778537122ab6c7acde0125f3f5472/pymc3/distributions/transforms.py#L365) with independent variances, because the variances could cause some samples from adjacent parameters to be on the \"wrong side\" of each other.\r\n\r\nMaybe do something like this?  Where `centered_vars` make centered variables from raw ones using same QR transform as in https://github.com/brendanhasz/probflow/issues/19\r\n\r\n```python\r\ndef ordered_transform(vars):\r\n    return vars[0] + tf.exp(vars[1]) * centered_vars(vars[2:])\r\n```\r\n\r\nDownside of that is each parameter's variance is correlated, but also variance depends on distance from mean?","closed_by":null,"reactions":{"url":"https://api.github.com/repos/brendanhasz/probflow/issues/27/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/brendanhasz/probflow/issues/27/timeline","performed_via_github_app":null,"state_reason":null}