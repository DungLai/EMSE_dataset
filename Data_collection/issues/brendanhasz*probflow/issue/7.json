{"url":"https://api.github.com/repos/brendanhasz/probflow/issues/7","repository_url":"https://api.github.com/repos/brendanhasz/probflow","labels_url":"https://api.github.com/repos/brendanhasz/probflow/issues/7/labels{/name}","comments_url":"https://api.github.com/repos/brendanhasz/probflow/issues/7/comments","events_url":"https://api.github.com/repos/brendanhasz/probflow/issues/7/events","html_url":"https://github.com/brendanhasz/probflow/issues/7","id":515191235,"node_id":"MDU6SXNzdWU1MTUxOTEyMzU=","number":7,"title":"Gaussian Process support","user":{"login":"brendanhasz","id":3465846,"node_id":"MDQ6VXNlcjM0NjU4NDY=","avatar_url":"https://avatars.githubusercontent.com/u/3465846?v=4","gravatar_id":"","url":"https://api.github.com/users/brendanhasz","html_url":"https://github.com/brendanhasz","followers_url":"https://api.github.com/users/brendanhasz/followers","following_url":"https://api.github.com/users/brendanhasz/following{/other_user}","gists_url":"https://api.github.com/users/brendanhasz/gists{/gist_id}","starred_url":"https://api.github.com/users/brendanhasz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brendanhasz/subscriptions","organizations_url":"https://api.github.com/users/brendanhasz/orgs","repos_url":"https://api.github.com/users/brendanhasz/repos","events_url":"https://api.github.com/users/brendanhasz/events{/privacy}","received_events_url":"https://api.github.com/users/brendanhasz/received_events","type":"User","site_admin":false},"labels":[{"id":1181357314,"node_id":"MDU6TGFiZWwxMTgxMzU3MzE0","url":"https://api.github.com/repos/brendanhasz/probflow/labels/enhancement","name":"enhancement","color":"a2eeef","default":true,"description":"New feature or request"}],"state":"open","locked":false,"assignee":{"login":"brendanhasz","id":3465846,"node_id":"MDQ6VXNlcjM0NjU4NDY=","avatar_url":"https://avatars.githubusercontent.com/u/3465846?v=4","gravatar_id":"","url":"https://api.github.com/users/brendanhasz","html_url":"https://github.com/brendanhasz","followers_url":"https://api.github.com/users/brendanhasz/followers","following_url":"https://api.github.com/users/brendanhasz/following{/other_user}","gists_url":"https://api.github.com/users/brendanhasz/gists{/gist_id}","starred_url":"https://api.github.com/users/brendanhasz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brendanhasz/subscriptions","organizations_url":"https://api.github.com/users/brendanhasz/orgs","repos_url":"https://api.github.com/users/brendanhasz/repos","events_url":"https://api.github.com/users/brendanhasz/events{/privacy}","received_events_url":"https://api.github.com/users/brendanhasz/received_events","type":"User","site_admin":false},"assignees":[{"login":"brendanhasz","id":3465846,"node_id":"MDQ6VXNlcjM0NjU4NDY=","avatar_url":"https://avatars.githubusercontent.com/u/3465846?v=4","gravatar_id":"","url":"https://api.github.com/users/brendanhasz","html_url":"https://github.com/brendanhasz","followers_url":"https://api.github.com/users/brendanhasz/followers","following_url":"https://api.github.com/users/brendanhasz/following{/other_user}","gists_url":"https://api.github.com/users/brendanhasz/gists{/gist_id}","starred_url":"https://api.github.com/users/brendanhasz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/brendanhasz/subscriptions","organizations_url":"https://api.github.com/users/brendanhasz/orgs","repos_url":"https://api.github.com/users/brendanhasz/repos","events_url":"https://api.github.com/users/brendanhasz/events{/privacy}","received_events_url":"https://api.github.com/users/brendanhasz/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2019-10-31T06:10:13Z","updated_at":"2019-10-31T06:10:13Z","closed_at":null,"author_association":"OWNER","active_lock_reason":null,"body":"Currently I can't think of a good way to fit nonparametric models (like Gaussian processes) into the ProbFlow framework.  For example, the `probflow.model.predict` interface would have to change, and all the methods which depend on it, since you'd need both the x and y training data as well as the x test data.\r\n\r\nThat said, you can still use ProbFlow to fit GP kernel and/or latent parameters.  For example, fitting the kernel parameters would look something like:\r\n\r\n```python\r\nimport tensorflow_probability as tfp\r\nimport probflow as pf\r\n\r\nclass GP(pf.Model):\r\n\r\n    def __init__(self):\r\n        self.amplitude = pf.ScaleParameter()\r\n        self.length_scale = pf.ScaleParameter()\r\n        self.var = pf.ScaleParameter()\r\n\r\n    def __call__(self, x):\r\n        kernel = tfp.positive_semidefinite_kernels.ExponentiatedQuadratic(\r\n            amplitude=self.amplitude(),\r\n            length_scale=self.length_scale())\r\n        return tfp.distributions.GaussianProcess(kernel, x, \r\n            observation_noise_variance=self.var())\r\n```\r\n\r\nWhich can be `fit` just fine, but then runs into issues if you were to call `predict` on the model, since the model doesn't store the training data.\r\n\r\nFor now I've put further support for GPs on the \"out-of-scope\" list, but if anyone has ideas for how to make GPs work with the rest of the framework (say, with `probflow.model.predict`), and want to see that be part of the package, I'm definitely open to discussion!","closed_by":null,"reactions":{"url":"https://api.github.com/repos/brendanhasz/probflow/issues/7/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/brendanhasz/probflow/issues/7/timeline","performed_via_github_app":null,"state_reason":null}