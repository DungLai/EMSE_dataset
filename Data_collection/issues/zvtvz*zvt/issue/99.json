{"url":"https://api.github.com/repos/zvtvz/zvt/issues/99","repository_url":"https://api.github.com/repos/zvtvz/zvt","labels_url":"https://api.github.com/repos/zvtvz/zvt/issues/99/labels{/name}","comments_url":"https://api.github.com/repos/zvtvz/zvt/issues/99/comments","events_url":"https://api.github.com/repos/zvtvz/zvt/issues/99/events","html_url":"https://github.com/zvtvz/zvt/issues/99","id":682777283,"node_id":"MDU6SXNzdWU2ODI3NzcyODM=","number":99,"title":"实现插件的Stock K线 Recorder 出现问题","user":{"login":"lowwor","id":5444033,"node_id":"MDQ6VXNlcjU0NDQwMzM=","avatar_url":"https://avatars.githubusercontent.com/u/5444033?v=4","gravatar_id":"","url":"https://api.github.com/users/lowwor","html_url":"https://github.com/lowwor","followers_url":"https://api.github.com/users/lowwor/followers","following_url":"https://api.github.com/users/lowwor/following{/other_user}","gists_url":"https://api.github.com/users/lowwor/gists{/gist_id}","starred_url":"https://api.github.com/users/lowwor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lowwor/subscriptions","organizations_url":"https://api.github.com/users/lowwor/orgs","repos_url":"https://api.github.com/users/lowwor/repos","events_url":"https://api.github.com/users/lowwor/events{/privacy}","received_events_url":"https://api.github.com/users/lowwor/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-08-20T14:47:24Z","updated_at":"2020-08-20T15:04:24Z","closed_at":"2020-08-20T15:04:24Z","author_association":"NONE","active_lock_reason":null,"body":"尝试接入baostock日k，测试的recorder如下\r\n```\r\n# -*- coding: utf-8 -*-\r\n\r\nimport baostock as bs\r\nimport pandas as pd\r\n\r\nfrom zvt.api import get_kdata, AdjustType\r\nfrom zvt.api.quote import generate_kdata_id, get_kdata_schema, StockKdataCommon, Stock\r\nfrom zvt.contract import IntervalLevel\r\nfrom zvt.contract.api import df_to_db\r\nfrom zvt.contract.recorder import FixedCycleDataRecorder\r\nfrom zvt.domain import register_schema, declarative_base\r\n\r\nfrom zvt_tm.domain import Stock1dKdata\r\nfrom zvt_tm.recorders.baostock.common import to_bs_trading_level, to_bs_entity_id\r\nfrom zvt.utils.pd_utils import pd_is_not_null\r\nfrom zvt.utils.time_utils import to_time_str, TIME_FORMAT_DAY, TIME_FORMAT_ISO8601\r\n\r\n\r\nclass BaoStockChinaStockKdataRecorder(FixedCycleDataRecorder):\r\n    entity_provider = 'eastmoney'\r\n    entity_schema = Stock\r\n\r\n    # 数据来自bs\r\n    provider = 'baostock'\r\n\r\n    # 只是为了把recorder注册到data_schema\r\n    data_schema = StockKdataCommon\r\n\r\n    def __init__(self,\r\n                 exchanges=['sh', 'sz'],\r\n                 entity_ids=None,\r\n                 codes=None,\r\n                 batch_size=10,\r\n                 force_update=True,\r\n                 sleeping_time=0,\r\n                 default_size=2000,\r\n                 real_time=False,\r\n                 fix_duplicate_way='ignore',\r\n                 start_timestamp=None,\r\n                 end_timestamp=None,\r\n                 level=IntervalLevel.LEVEL_1WEEK,\r\n                 kdata_use_begin_time=False,\r\n                 close_hour=15,\r\n                 close_minute=0,\r\n                 one_day_trading_minutes=4 * 60,\r\n                 adjust_type=AdjustType.qfq) -> None:\r\n        level = IntervalLevel(level)\r\n        adjust_type = AdjustType(adjust_type)\r\n        self.data_schema = get_kdata_schema(entity_type='stock', level=level, adjust_type=adjust_type)\r\n        self.bs_trading_level = to_bs_trading_level(level)\r\n\r\n        super().__init__('stock', exchanges, entity_ids, codes, batch_size, force_update, sleeping_time,\r\n                         default_size, real_time, fix_duplicate_way, start_timestamp, end_timestamp, close_hour,\r\n                         close_minute, level, kdata_use_begin_time, one_day_trading_minutes)\r\n        self.adjust_type = adjust_type\r\n\r\n        print(\"尝试登陆baostock\")\r\n        #####login#####\r\n        lg = bs.login(user_id=\"anonymous\", password=\"123456\")\r\n        if (lg.error_code == '0'):\r\n            print(\"登陆成功\")\r\n        else:\r\n            print(\"登录失败\")\r\n\r\n    def generate_domain_id(self, entity, original_data):\r\n        return generate_kdata_id(entity_id=entity.id, timestamp=original_data['timestamp'], level=self.level)\r\n\r\n    def recompute_qfq(self, entity, qfq_factor, last_timestamp):\r\n        # 重新计算前复权数据\r\n        if qfq_factor != 0:\r\n            kdatas = get_kdata(provider=self.provider, entity_id=entity.id, level=self.level.value,\r\n                               order=self.data_schema.timestamp.asc(),\r\n                               return_type='domain',\r\n                               session=self.session,\r\n                               filters=[self.data_schema.timestamp < last_timestamp])\r\n            if kdatas:\r\n                self.logger.info('recomputing {} qfq kdata,factor is:{}'.format(entity.code, qfq_factor))\r\n                for kdata in kdatas:\r\n                    kdata.open = round(kdata.open * qfq_factor, 2)\r\n                    kdata.close = round(kdata.close * qfq_factor, 2)\r\n                    kdata.high = round(kdata.high * qfq_factor, 2)\r\n                    kdata.low = round(kdata.low * qfq_factor, 2)\r\n                self.session.add_all(kdatas)\r\n                self.session.commit()\r\n\r\n    def on_finish(self):\r\n        super().on_finish()\r\n        bs.logout()\r\n\r\n    def record(self, entity, start, end, size, timestamps):\r\n        if self.adjust_type == AdjustType.hfq:\r\n            adflag = '1'\r\n        else:\r\n            adflag = '2'\r\n\r\n        if not self.end_timestamp:\r\n            data = bs.query_history_k_data(to_bs_entity_id(entity),\r\n                                           \"date,code,open,high,low,close,volume,amount\",\r\n                                           start_date=to_time_str(start),\r\n                                           frequency=self.bs_trading_level, adjustflag=adflag)\r\n        else:\r\n            end_timestamp = to_time_str(self.end_timestamp)\r\n            data = bs.query_history_k_data(to_bs_entity_id(entity),\r\n                                         \"date,code,open,high,low,close,volume,amount\",\r\n                                         start_date = to_time_str(start),\r\n                                         end_date = end_timestamp,\r\n                                         frequency=self.bs_trading_level, adjustflag=adflag)\r\n        df = data.get_data()\r\n        if pd_is_not_null(df):\r\n            df['name'] = entity.name\r\n            df.rename(columns={'amount': 'turnover', 'date': 'timestamp'}, inplace=True)\r\n\r\n            df['entity_id'] = entity.id\r\n            df['timestamp'] = pd.to_datetime(df['timestamp'])\r\n            df['provider'] = 'baostock'\r\n            df['level'] = self.level.value\r\n            df['code'] = entity.code\r\n\r\n            # 判断是否需要重新计算之前保存的前复权数据\r\n            # if self.adjust_type == AdjustType.qfq:\r\n            #     check_df = df.head(1)\r\n            #     check_date = check_df['timestamp'][0]\r\n            #     current_df = get_kdata(entity_id=entity.id, provider=self.provider, start_timestamp=check_date,\r\n            #                            end_timestamp=check_date, limit=1, level=self.level,\r\n            #                            adjust_type=self.adjust_type)\r\n            #     if pd_is_not_null(current_df):\r\n            #         old = current_df.iloc[0, :]['close']\r\n            #         new = check_df['close'][0]\r\n            #         # 相同时间的close不同，表明前复权需要重新计算\r\n            #         if round(old, 2) != round(new, 2):\r\n            #             qfq_factor = new / old\r\n            #             last_timestamp = pd.Timestamp(check_date)\r\n            #             self.recompute_qfq(entity, qfq_factor=qfq_factor, last_timestamp=last_timestamp)\r\n\r\n            def generate_kdata_id(se):\r\n                if self.level >= IntervalLevel.LEVEL_1DAY:\r\n                    return \"{}_{}\".format(se['entity_id'], to_time_str(se['timestamp'], fmt=TIME_FORMAT_DAY))\r\n                else:\r\n                    return \"{}_{}\".format(se['entity_id'], to_time_str(se['timestamp'], fmt=TIME_FORMAT_ISO8601))\r\n\r\n            df['id'] = df[['entity_id', 'timestamp']].apply(generate_kdata_id, axis=1)\r\n\r\n            df_to_db(df=df, data_schema=self.data_schema, provider=self.provider, force_update=self.force_update)\r\n\r\n        return None\r\n\r\n\r\n__all__ = ['BaoStockChinaStockKdataRecorder']\r\n\r\nif __name__ == '__main__':\r\n    # parser = argparse.ArgumentParser()\r\n    # parser.add_argument('--level', help='trading level', default='1d', choices=[item.value for item in IntervalLevel])\r\n    # parser.add_argument('--codes', help='codes', default=['000001'], nargs='+')\r\n    #\r\n    # args = parser.parse_args()\r\n    #\r\n    # level = IntervalLevel(args.level)\r\n    # codes = args.codes\r\n\r\n    # init_log('baostock_china_stock_{}_kdata.log'.format(args.level))\r\n    # BaoStockChinaStockKdataRecorder(level=IntervalLevel.LEVEL_1DAY, sleeping_time=0, codes=['000001'], real_time=False,\r\n    #                           adjust_type=AdjustType.qfq).run()\r\n\r\n    Stock1dKdata.record_data(provider='baostock', sleeping_time=1)\r\n\r\n    # print(get_kdata(entity_id='stock_sz_000001', limit=10, order=Stock1dHfqKdata.timestamp.desc(),\r\n    #                 adjust_type=AdjustType.hfq))\r\n```\r\n```\r\ndef to_bs_trading_level(trading_level: IntervalLevel):\r\n    if trading_level < IntervalLevel.LEVEL_1HOUR:\r\n        return trading_level.value\r\n\r\n    if trading_level == IntervalLevel.LEVEL_1HOUR:\r\n        return '60'\r\n    if trading_level == IntervalLevel.LEVEL_4HOUR:\r\n        return '240'\r\n    if trading_level == IntervalLevel.LEVEL_1DAY:\r\n        return 'd'\r\n    if trading_level == IntervalLevel.LEVEL_1WEEK:\r\n        return 'w'\r\n    if trading_level == IntervalLevel.LEVEL_1MON:\r\n        return 'm'\r\n\r\n\r\ndef to_bs_entity_id(security_item):\r\n    if security_item.entity_type == 'stock' or security_item.entity_type == 'index':\r\n        if security_item.exchange == 'sh':\r\n            return 'sh.{}'.format(security_item.code)\r\n        if security_item.exchange == 'sz':\r\n            return 'sz.{}'.format(security_item.code)\r\n\r\n```\r\n尝试直接修改zvt/domain/quotes/stock/stock_1d_kdata.py\r\n```\r\n# -*- coding: utf-8 -*-\r\n# this file is generated by gen_kdata_schema function, dont't change it\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\n\r\nfrom zvt.contract.register import register_schema\r\nfrom zvt.domain.quotes import StockKdataCommon\r\n\r\nKdataBase = declarative_base()\r\n\r\n\r\nclass Stock1dKdata(KdataBase, StockKdataCommon):\r\n    __tablename__ = 'stock_1d_kdata'\r\n\r\n\r\nregister_schema(providers=['joinquant'], db_name='stock_1d_kdata', schema_base=KdataBase)\r\n+ register_schema(providers=['baostock'], db_name='stock_1d_kdata', schema_base=KdataBase)//加了这句\r\n\r\n__all__ = ['Stock1dKdata']\r\n\r\n```\r\n抓取数据正常，使用factor没问题\r\n```\r\n factor = ImprovedMaFactor(entity_schema=Stock, start_timestamp='2020-01-01',\r\n                              end_timestamp=now_pd_timestamp(), need_persist=False, provider='baostock',entity_provider='eastmoney',\r\n                              level=IntervalLevel.LEVEL_1DAY)\r\n    print(factor.result_df)\r\n```\r\n尝试将\r\n```\r\nregister_schema(providers=['baostock'], db_name='stock_1d_kdata', schema_base=KdataBase)\r\n```\r\n移动到单独插件，则出现问题。\r\n\r\n报错堆栈\r\n```\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 1, in <module>\r\n  File \"/Users/xxx/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-P/ch-0/201.8538.36/PyCharm.app/Contents/plugins/python/helpers/pydev/_pydev_bundle/pydev_umd.py\", line 197, in runfile\r\n    pydev_imports.execfile(filename, global_vars, local_vars)  # execute the script\r\n  File \"/Users/xxx/Library/Application Support/JetBrains/Toolbox/apps/PyCharm-P/ch-0/201.8538.36/PyCharm.app/Contents/plugins/python/helpers/pydev/_pydev_imps/_pydev_execfile.py\", line 18, in execfile\r\n    exec(compile(contents+\"\\n\", file, 'exec'), glob, loc)\r\n  File \"/Users/xxx/zvt-tm/zvt_tm/reports/report_crypto_tm.py\", line 79, in <module>\r\n    level=IntervalLevel.LEVEL_1DAY)\r\n  File \"/usr/local/lib/python3.7/site-packages/zvt/factors/ma/ma_factor.py\", line 122, in __init__\r\n    accumulator, need_persist, dry_run)\r\n  File \"/usr/local/lib/python3.7/site-packages/zvt/factors/technical_factor.py\", line 49, in __init__\r\n    effective_number, transformer, accumulator, need_persist, dry_run)\r\n  File \"/usr/local/lib/python3.7/site-packages/zvt/factors/factor.py\", line 120, in __init__\r\n    category_field, time_field, computing_window)\r\n  File \"/usr/local/lib/python3.7/site-packages/zvt/contract/reader.py\", line 139, in __init__\r\n    self.load_data()\r\n  File \"/usr/local/lib/python3.7/site-packages/zvt/contract/reader.py\", line 170, in load_data\r\n    time_field=self.time_field)\r\n  File \"/usr/local/lib/python3.7/site-packages/zvt/contract/schema.py\", line 85, in query_data\r\n    filters=filters, session=session, order=order, limit=limit, index=index, time_field=time_field)\r\n  File \"/usr/local/lib/python3.7/site-packages/zvt/contract/api.py\", line 328, in get_data\r\n    df = pd.read_sql(query.statement, query.session.bind)\r\n  File \"/usr/local/lib/python3.7/site-packages/pandas/io/sql.py\", line 410, in read_sql\r\n    chunksize=chunksize,\r\n  File \"/usr/local/lib/python3.7/site-packages/pandas/io/sql.py\", line 1645, in read_query\r\n    cursor = self.execute(*args)\r\n  File \"/usr/local/lib/python3.7/site-packages/pandas/io/sql.py\", line 1590, in execute\r\n    cur = self.con.cursor()\r\nAttributeError: 'NoneType' object has no attribute 'cursor'\r\n```\r\n调试信息如下\r\n![image](https://user-images.githubusercontent.com/5444033/90787800-ae961800-e337-11ea-9573-295e500b2235.png)\r\nsession的bind为空，正常应该不为空","closed_by":{"login":"lowwor","id":5444033,"node_id":"MDQ6VXNlcjU0NDQwMzM=","avatar_url":"https://avatars.githubusercontent.com/u/5444033?v=4","gravatar_id":"","url":"https://api.github.com/users/lowwor","html_url":"https://github.com/lowwor","followers_url":"https://api.github.com/users/lowwor/followers","following_url":"https://api.github.com/users/lowwor/following{/other_user}","gists_url":"https://api.github.com/users/lowwor/gists{/gist_id}","starred_url":"https://api.github.com/users/lowwor/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lowwor/subscriptions","organizations_url":"https://api.github.com/users/lowwor/orgs","repos_url":"https://api.github.com/users/lowwor/repos","events_url":"https://api.github.com/users/lowwor/events{/privacy}","received_events_url":"https://api.github.com/users/lowwor/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/zvtvz/zvt/issues/99/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/zvtvz/zvt/issues/99/timeline","performed_via_github_app":null,"state_reason":"completed"}