{"url":"https://api.github.com/repos/neo-ai/neo-ai-dlr/issues/46","repository_url":"https://api.github.com/repos/neo-ai/neo-ai-dlr","labels_url":"https://api.github.com/repos/neo-ai/neo-ai-dlr/issues/46/labels{/name}","comments_url":"https://api.github.com/repos/neo-ai/neo-ai-dlr/issues/46/comments","events_url":"https://api.github.com/repos/neo-ai/neo-ai-dlr/issues/46/events","html_url":"https://github.com/neo-ai/neo-ai-dlr/issues/46","id":435045356,"node_id":"MDU6SXNzdWU0MzUwNDUzNTY=","number":46,"title":"[RFC] Support alternative runtimes","user":{"login":"apivovarov","id":218087,"node_id":"MDQ6VXNlcjIxODA4Nw==","avatar_url":"https://avatars.githubusercontent.com/u/218087?v=4","gravatar_id":"","url":"https://api.github.com/users/apivovarov","html_url":"https://github.com/apivovarov","followers_url":"https://api.github.com/users/apivovarov/followers","following_url":"https://api.github.com/users/apivovarov/following{/other_user}","gists_url":"https://api.github.com/users/apivovarov/gists{/gist_id}","starred_url":"https://api.github.com/users/apivovarov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apivovarov/subscriptions","organizations_url":"https://api.github.com/users/apivovarov/orgs","repos_url":"https://api.github.com/users/apivovarov/repos","events_url":"https://api.github.com/users/apivovarov/events{/privacy}","received_events_url":"https://api.github.com/users/apivovarov/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-04-19T04:28:05Z","updated_at":"2020-04-03T07:02:39Z","closed_at":"2020-04-03T07:02:21Z","author_association":"MEMBER","active_lock_reason":null,"body":"I'd like to discuss how DLR can support alternative runtimes. e.g. Tensorflow, Tensorflow Lite, etc.\r\n\r\nCurrently we have `DLRModel` class which accepts `model_path` and `device` parameters. \r\nWe can use model files format to determine what runtime should be used. E.g. if model is represented by `.pb` file then it indicates that DLR needs to use `tensorflow` runtime.\r\n\r\nIn order to support for Tensorflow runtime and at the same time preserve current API we can do the following refactoring:\r\n- add IDLRModel abstract class with `@abc.abstractmethod run(self, input_data)` and other \"public\" method\r\n- move all DLRModel implementation to DLRModelImpl class\r\n- make DLRModelImpl to be sub-class of IDLRModel\r\n- add `TFModelImpl(IDLRModel)` class which incapsulates details on how to run tensorflow models.\r\n- make DLRModel to be a wrapper on top of particular implementation. __init__ method will decide which impl to create based on format of the model files.\r\n\r\nThe diagram and the code below illustrate the idea\r\n### Diagram\r\n![DLRModel](https://user-images.githubusercontent.com/218087/56775105-6930fd00-677a-11e9-82fe-913ea0903af8.png)\r\n\r\n### Code Example\r\n```\r\nimport abc\r\n\r\n# Interface\r\nclass IDLRModel:\r\n    __metaclass__=abc.ABCMeta\r\n\r\n    @abc.abstractmethod\r\n    def get_input_names(self):\r\n        return\r\n\r\n\r\n    @abc.abstractmethod\r\n    def get_input(self, name, shape=None):\r\n        return\r\n\r\n\r\n    @abc.abstractmethod\r\n    def run(self, input_data):\r\n        return\r\n\r\n# Wrapper class\r\nclass DLRModel(IDLRModel):\r\n    def __init__(self, model_path, device):\r\n        if model_path.endswith(\".pb\"):\r\n            self._impl = TFModelImpl(model_path, device)\r\n        else:\r\n            self._impl = DLRModelImpl(model_path, device) \r\n\r\n\r\n    def run(self, input_data):\r\n        return self._impl.run(input_data)\r\n\r\n\r\n# Current DLRModel code will be moved to  DLRModelImpl\r\nclass DLRModelImpl(IDLRModel):\r\n    def __init__(self, model_path, device):\r\n        self.model_path = model_path\r\n        self.device = device\r\n\r\n\r\n    def run(self, input_data):\r\n        return \"TVM/Treelite model run {}\".format(input_data)\r\n\r\n\r\n# New class which support .pb models execution on tensorflow runtime\r\nclass TFModelImpl(IDLRModel):\r\n    def __init__(self, model_path, device):\r\n        self.model_path = model_path\r\n        self.device = device\r\n\r\n\r\n    def run(self, input_data):\r\n        # import tensorflow as tf\r\n        # res = sess.run(output_tensors, feed_dict={input_tensor: np_input})\r\n        # return res\r\n        return \"TF model run {}\".format(input_data)\r\n```\r\nTest run\r\n```\r\n# Test original DLR models\r\nd = DLRModel(\"mymodel\", \"cpu\")\r\nprint(type(d))\r\nprint(d.run(\"test\"))\r\n\r\n# Test TF models\r\nd = DLRModel(\"mymodel.pb\", \"cpu\")\r\nprint(type(d))\r\nprint(d.run(\"test\"))\r\n\r\n<class '__main__.DLRModel'>\r\nTVM/Treelite model run test\r\n<class '__main__.DLRModel'>\r\nTF model run test\r\n```\r\n\r\n","closed_by":{"login":"apivovarov","id":218087,"node_id":"MDQ6VXNlcjIxODA4Nw==","avatar_url":"https://avatars.githubusercontent.com/u/218087?v=4","gravatar_id":"","url":"https://api.github.com/users/apivovarov","html_url":"https://github.com/apivovarov","followers_url":"https://api.github.com/users/apivovarov/followers","following_url":"https://api.github.com/users/apivovarov/following{/other_user}","gists_url":"https://api.github.com/users/apivovarov/gists{/gist_id}","starred_url":"https://api.github.com/users/apivovarov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/apivovarov/subscriptions","organizations_url":"https://api.github.com/users/apivovarov/orgs","repos_url":"https://api.github.com/users/apivovarov/repos","events_url":"https://api.github.com/users/apivovarov/events{/privacy}","received_events_url":"https://api.github.com/users/apivovarov/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/neo-ai/neo-ai-dlr/issues/46/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/neo-ai/neo-ai-dlr/issues/46/timeline","performed_via_github_app":null,"state_reason":"completed"}