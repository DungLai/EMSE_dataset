{"url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/5","repository_url":"https://api.github.com/repos/NUAA-AL/ALiPy","labels_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/5/labels{/name}","comments_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/5/comments","events_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/5/events","html_url":"https://github.com/NUAA-AL/ALiPy/issues/5","id":415967906,"node_id":"MDU6SXNzdWU0MTU5Njc5MDY=","number":5,"title":"The AL algorithms didn't work","user":{"login":"evanzhu2013","id":7533756,"node_id":"MDQ6VXNlcjc1MzM3NTY=","avatar_url":"https://avatars.githubusercontent.com/u/7533756?v=4","gravatar_id":"","url":"https://api.github.com/users/evanzhu2013","html_url":"https://github.com/evanzhu2013","followers_url":"https://api.github.com/users/evanzhu2013/followers","following_url":"https://api.github.com/users/evanzhu2013/following{/other_user}","gists_url":"https://api.github.com/users/evanzhu2013/gists{/gist_id}","starred_url":"https://api.github.com/users/evanzhu2013/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanzhu2013/subscriptions","organizations_url":"https://api.github.com/users/evanzhu2013/orgs","repos_url":"https://api.github.com/users/evanzhu2013/repos","events_url":"https://api.github.com/users/evanzhu2013/events{/privacy}","received_events_url":"https://api.github.com/users/evanzhu2013/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-03-01T06:58:54Z","updated_at":"2019-03-04T06:43:59Z","closed_at":"2019-03-04T06:43:59Z","author_association":"NONE","active_lock_reason":null,"body":"**Thanks so much for your great work.**\r\n\r\nIt seems that the AL algorithms  had no better score.  Compared to random sampling , the Uncertainty and QBD had no better accuracy. The datasets are sklearn's load_breast_cancer. \r\n\r\n![image](https://user-images.githubusercontent.com/7533756/53621301-07985a80-3c31-11e9-8c38-bfe219fddf14.png)\r\n\r\nBesides, the random_query has one more point with the same stoping criterion.\r\n\r\nLooking forward your reply. \r\n\r\nCode is shown below : \r\n\r\n```\r\n# coding: utf-8\r\n\r\nfrom sklearn.datasets import load_breast_cancer\r\n# Ploting\r\nfrom matplotlib.pylab import plt\r\nget_ipython().run_line_magic('matplotlib', 'inline')\r\nget_ipython().run_line_magic('config', \"InlineBackend.figure_format = 'retina'\")\r\nfrom sklearn.ensemble import RandomForestClassifier\r\n\r\nimport xgboost\r\nimport pandas as pd\r\nimport warnings\r\nwarnings.filterwarnings('ignore')\r\nfrom sklearn.datasets import load_iris,load_breast_cancer\r\nfrom alipy.experiment.al_experiment import AlExperiment\r\n\r\nimport copy\r\nfrom sklearn.datasets import make_classification\r\nfrom alipy import ToolBox\r\nfrom alipy.query_strategy.query_labels import QueryInstanceGraphDensity, QueryInstanceQBC,     QueryInstanceQUIRE, QueryRandom, QueryInstanceUncertainty, QureyExpectedErrorReduction, QueryInstanceLAL\r\n\r\ndataset = load_breast_cancer()\r\nX = dataset.data\r\ny = dataset.target\r\nalibox = ToolBox(X=X, y=y, query_type='AllLabels', saving_path='.')\r\n\r\n# Split data\r\nalibox.split_AL(test_ratio=0.2, initial_label_rate=0.2, split_count=5)\r\n\r\n\r\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5,random_state=0)\r\n\r\n\r\nstopping_criterion = alibox.get_stopping_criterion('num_of_queries', 8)\r\ndef main_loop(alibox, strategy, round):\r\n    # Get the data split of one fold experiment\r\n    train_idx, test_idx, label_ind, unlab_ind = alibox.get_split(round)\r\n    # Get intermediate results saver for one fold experiment\r\n    saver = alibox.get_stateio(round)\r\n    while not stopping_criterion.is_stop():\r\n        # Select a subset of Uind according to the query strategy\r\n        # Passing model=None to use the default model for evaluating the committees' disagreement\r\n        select_ind = strategy.select(label_ind, unlab_ind,batch_size=50)\r\n#         print(len(select_ind))\r\n        label_ind.update(select_ind)\r\n        unlab_ind.difference_update(select_ind)\r\n\r\n        # Update model and calc performance according to the model you are using\r\n        model.fit(X=X[label_ind.index, :], y=y[label_ind.index])\r\n        pred = model.predict(X[test_idx, :])\r\n        accuracy = alibox.calc_performance_metric(y_true=y[test_idx],\r\n                                                  y_pred=pred,\r\n                                                  performance_metric='roc_auc_score')\r\n\r\n        # Save intermediate results to file\r\n        st = alibox.State(select_index=select_ind, performance=accuracy)\r\n        saver.add_state(st)\r\n\r\n        # Passing the current progress to stopping criterion object\r\n        stopping_criterion.update_information(saver)\r\n    # Reset the progress in stopping criterion object\r\n    stopping_criterion.reset()\r\n    return saver\r\n\r\nunc_result = []\r\nqbc_result = []\r\neer_result = []\r\nquire_result = []\r\ndensity_result = []\r\n\r\n\r\nfor round in range(3):\r\n    train_idx, test_idx, label_ind, unlab_ind = alibox.get_split(round)\r\n\r\n    # Use pre-defined strategy\r\n    unc = QueryInstanceUncertainty(X, y)\r\n    qbc = QueryInstanceQBC(X, y)\r\n\r\n    unc_result.append(copy.deepcopy(main_loop(alibox, unc, round)))\r\n    qbc_result.append(copy.deepcopy(main_loop(alibox, qbc, round)))\r\n\r\n\r\nrandom = QueryRandom(X, y)\r\nrandom_result = []\r\n\r\nfor round in range(3):\r\n    # Get the data split of one fold experiment\r\n    train_idx, test_idx, label_ind, unlab_ind = alibox.get_split(round)\r\n    # Get intermediate results saver for one fold experiment\r\n    saver = alibox.get_stateio(round)\r\n    # calc the initial point\r\n    model.fit(X=X[label_ind.index, :], y=y[label_ind.index])\r\n    pred = model.predict(X[test_idx, :])\r\n    accuracy = sum(pred == y[test_idx]) / len(test_idx)\r\n    saver.set_initial_point(accuracy)\r\n\r\n    while not stopping_criterion.is_stop():\r\n        # Select a subset of Uind according to the query strategy\r\n        # Passing model=None to use the default model for evaluating the committees' disagreement\r\n        select_ind = random.select(unlab_ind, batch_size=50)\r\n        label_ind.update(select_ind)\r\n        unlab_ind.difference_update(select_ind)\r\n\r\n        # Update model and calc performance according to the model you are using\r\n        model.fit(X=X[label_ind.index, :], y=y[label_ind.index])\r\n        pred = model.predict(X[test_idx, :])\r\n        accuracy = alibox.calc_performance_metric(y_true=y[test_idx],\r\n                                                y_pred=pred,\r\n                                                performance_metric='roc_auc_score')\r\n\r\n        # Save intermediate results to file\r\n        st = alibox.State(select_index=select_ind, performance=accuracy)\r\n        saver.add_state(st)\r\n        saver.save()\r\n\r\n        # Passing the current progress to stopping criterion object\r\n        stopping_criterion.update_information(saver)\r\n    # Reset the progress in stopping criterion object\r\n    stopping_criterion.reset()\r\n    random_result.append(copy.deepcopy(saver))\r\n    \r\nanalyser = alibox.get_experiment_analyser(x_axis='num_of_queries')\r\nanalyser.add_method(method_name='Unc', method_results=unc_result)\r\nanalyser.add_method(method_name='Rnd', method_results=random_result)\r\nanalyser.add_method(method_name='QBC', method_results=qbc_result)\r\n\r\nprint(analyser)\r\nanalyser.plot_learning_curves(title='Example of alipy', std_area=False)\r\n```","closed_by":{"login":"evanzhu2013","id":7533756,"node_id":"MDQ6VXNlcjc1MzM3NTY=","avatar_url":"https://avatars.githubusercontent.com/u/7533756?v=4","gravatar_id":"","url":"https://api.github.com/users/evanzhu2013","html_url":"https://github.com/evanzhu2013","followers_url":"https://api.github.com/users/evanzhu2013/followers","following_url":"https://api.github.com/users/evanzhu2013/following{/other_user}","gists_url":"https://api.github.com/users/evanzhu2013/gists{/gist_id}","starred_url":"https://api.github.com/users/evanzhu2013/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanzhu2013/subscriptions","organizations_url":"https://api.github.com/users/evanzhu2013/orgs","repos_url":"https://api.github.com/users/evanzhu2013/repos","events_url":"https://api.github.com/users/evanzhu2013/events{/privacy}","received_events_url":"https://api.github.com/users/evanzhu2013/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/5/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/5/timeline","performed_via_github_app":null,"state_reason":"completed"}