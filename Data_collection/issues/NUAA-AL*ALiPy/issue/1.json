{"url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/1","repository_url":"https://api.github.com/repos/NUAA-AL/ALiPy","labels_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/1/labels{/name}","comments_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/1/comments","events_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/1/events","html_url":"https://github.com/NUAA-AL/ALiPy/issues/1","id":410574112,"node_id":"MDU6SXNzdWU0MTA1NzQxMTI=","number":1,"title":"QueryRandom strategy didn't work.","user":{"login":"evanzhu2013","id":7533756,"node_id":"MDQ6VXNlcjc1MzM3NTY=","avatar_url":"https://avatars.githubusercontent.com/u/7533756?v=4","gravatar_id":"","url":"https://api.github.com/users/evanzhu2013","html_url":"https://github.com/evanzhu2013","followers_url":"https://api.github.com/users/evanzhu2013/followers","following_url":"https://api.github.com/users/evanzhu2013/following{/other_user}","gists_url":"https://api.github.com/users/evanzhu2013/gists{/gist_id}","starred_url":"https://api.github.com/users/evanzhu2013/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanzhu2013/subscriptions","organizations_url":"https://api.github.com/users/evanzhu2013/orgs","repos_url":"https://api.github.com/users/evanzhu2013/repos","events_url":"https://api.github.com/users/evanzhu2013/events{/privacy}","received_events_url":"https://api.github.com/users/evanzhu2013/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-02-15T02:12:07Z","updated_at":"2019-02-15T02:54:17Z","closed_at":"2019-02-15T02:49:57Z","author_association":"NONE","active_lock_reason":null,"body":"**Thanks for your work. The most comprehensive AL package I've seen.**\r\n\r\n**Issue:**\r\n```\r\nfrom sklearn.datasets import load_iris,load_breast_cancer\r\nfrom alipy.experiment.al_experiment import AlExperiment\r\n\r\nimport warnings\r\nwarnings.filterwarnings('ignore')\r\n\r\nimport copy\r\nfrom sklearn.datasets import make_classification\r\nfrom alipy import ToolBox\r\nfrom alipy.query_strategy.query_labels import QueryInstanceGraphDensity, QueryInstanceQBC, \\\r\n    QueryInstanceQUIRE, QueryRandom, QueryInstanceUncertainty, QureyExpectedErrorReduction, QueryInstanceLAL\r\n\r\nX, y = make_classification(n_samples=500, n_features=20, n_informative=2, n_redundant=2,\r\n    n_repeated=0, n_classes=2, n_clusters_per_class=2, weights=None, flip_y=0.01, class_sep=1.0,\r\n    hypercube=True, shift=0.0, scale=1.0, shuffle=True, random_state=None)\r\n\r\nalibox = ToolBox(X=X, y=y, query_type='AllLabels', saving_path='.')\r\n\r\n# Split data\r\nalibox.split_AL(test_ratio=0.3, initial_label_rate=0.1, split_count=10)\r\n\r\n# Use the default Logistic Regression classifier\r\nmodel = alibox.get_default_model()\r\n\r\n# The cost budget is 50 times querying\r\nstopping_criterion = alibox.get_stopping_criterion('num_of_queries', 50)\r\n\r\n\r\ndef main_loop(alibox, strategy, round):\r\n    # Get the data split of one fold experiment\r\n    train_idx, test_idx, label_ind, unlab_ind = alibox.get_split(round)\r\n    # Get intermediate results saver for one fold experiment\r\n    saver = alibox.get_stateio(round)\r\n    while not stopping_criterion.is_stop():\r\n        # Select a subset of Uind according to the query strategy\r\n        # Passing model=None to use the default model for evaluating the committees' disagreement\r\n        select_ind = strategy.select(label_ind, unlab_ind, batch_size=1)\r\n        label_ind.update(select_ind)\r\n        unlab_ind.difference_update(select_ind)\r\n\r\n        # Update model and calc performance according to the model you are using\r\n        model.fit(X=X[label_ind.index, :], y=y[label_ind.index])\r\n        pred = model.predict(X[test_idx, :])\r\n        accuracy = alibox.calc_performance_metric(y_true=y[test_idx],\r\n                                                  y_pred=pred,\r\n                                                  performance_metric='accuracy_score')\r\n\r\n        # Save intermediate results to file\r\n        st = alibox.State(select_index=select_ind, performance=accuracy)\r\n        saver.add_state(st)\r\n\r\n        # Passing the current progress to stopping criterion object\r\n        stopping_criterion.update_information(saver)\r\n    # Reset the progress in stopping criterion object\r\n    stopping_criterion.reset()\r\n    return saver\r\n\r\nunc_result = []\r\nqbc_result = []\r\nrandom_result = []\r\n\r\nfor round in range(5):\r\n    train_idx, test_idx, label_ind, unlab_ind = alibox.get_split(round)\r\n\r\n    # Use pre-defined strategy\r\n    unc = QueryInstanceUncertainty(X, y)\r\n    qbc = QueryInstanceQBC(X, y)\r\n    rnd = QueryRandom(X,y)\r\n\r\n    unc_result.append(copy.deepcopy(main_loop(alibox, unc, round)))\r\n    qbc_result.append(copy.deepcopy(main_loop(alibox, qbc, round)))\r\n    random_result.append(copy.deepcopy(main_loop(alibox, rnd, round)))\r\n\r\nanalyser = alibox.get_experiment_analyser(x_axis='num_of_queries')\r\n\r\nanalyser.add_method(method_name='QBC', method_results=qbc_result)\r\nanalyser.add_method(method_name='Unc', method_results=unc_result)\r\nanalyser.add_method(method_name='RANDOM', method_results=random_result)\r\n\r\nprint(analyser)\r\nanalyser.plot_learning_curves(title='Example of alipy', std_area=False)\r\n```\r\n\r\n### Error is below: \r\n```\r\n| round | initially labeled data | number of queries | cost | Performance: |\r\n|   0   |   35 (10.00% of all)   |         50        |  0   | 0.846 ± 0.02 |\r\n| round | initially labeled data | number of queries | cost | Performance: |\r\n|   0   |   35 (10.00% of all)   |         50        |  0   | 0.841 ± 0.01 |\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-15-5d0ada1f815d> in <module>\r\n     70     unc_result.append(copy.deepcopy(main_loop(alibox, unc, round)))\r\n     71     qbc_result.append(copy.deepcopy(main_loop(alibox, qbc, round)))\r\n---> 72     random_result.append(copy.deepcopy(main_loop(alibox, rnd, round)))\r\n     73 \r\n     74 analyser = alibox.get_experiment_analyser(x_axis='num_of_queries')\r\n\r\n<ipython-input-15-5d0ada1f815d> in main_loop(alibox, strategy, round)\r\n     35         # Select a subset of Uind according to the query strategy\r\n     36         # Passing model=None to use the default model for evaluating the committees' disagreement\r\n---> 37         select_ind = strategy.select(label_ind, unlab_ind, batch_size=1)\r\n     38         label_ind.update(select_ind)\r\n     39         unlab_ind.difference_update(select_ind)\r\n\r\nTypeError: select() got multiple values for argument 'batch_size'\r\n```","closed_by":{"login":"evanzhu2013","id":7533756,"node_id":"MDQ6VXNlcjc1MzM3NTY=","avatar_url":"https://avatars.githubusercontent.com/u/7533756?v=4","gravatar_id":"","url":"https://api.github.com/users/evanzhu2013","html_url":"https://github.com/evanzhu2013","followers_url":"https://api.github.com/users/evanzhu2013/followers","following_url":"https://api.github.com/users/evanzhu2013/following{/other_user}","gists_url":"https://api.github.com/users/evanzhu2013/gists{/gist_id}","starred_url":"https://api.github.com/users/evanzhu2013/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanzhu2013/subscriptions","organizations_url":"https://api.github.com/users/evanzhu2013/orgs","repos_url":"https://api.github.com/users/evanzhu2013/repos","events_url":"https://api.github.com/users/evanzhu2013/events{/privacy}","received_events_url":"https://api.github.com/users/evanzhu2013/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/1/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/1/timeline","performed_via_github_app":null,"state_reason":"completed"}