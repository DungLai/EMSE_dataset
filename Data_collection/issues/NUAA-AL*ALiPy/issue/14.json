{"url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/14","repository_url":"https://api.github.com/repos/NUAA-AL/ALiPy","labels_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/14/labels{/name}","comments_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/14/comments","events_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/14/events","html_url":"https://github.com/NUAA-AL/ALiPy/issues/14","id":423714326,"node_id":"MDU6SXNzdWU0MjM3MTQzMjY=","number":14,"title":"运行报错：ZeroDivisionError: division by zero","user":{"login":"serend1p1ty","id":39628662,"node_id":"MDQ6VXNlcjM5NjI4NjYy","avatar_url":"https://avatars.githubusercontent.com/u/39628662?v=4","gravatar_id":"","url":"https://api.github.com/users/serend1p1ty","html_url":"https://github.com/serend1p1ty","followers_url":"https://api.github.com/users/serend1p1ty/followers","following_url":"https://api.github.com/users/serend1p1ty/following{/other_user}","gists_url":"https://api.github.com/users/serend1p1ty/gists{/gist_id}","starred_url":"https://api.github.com/users/serend1p1ty/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/serend1p1ty/subscriptions","organizations_url":"https://api.github.com/users/serend1p1ty/orgs","repos_url":"https://api.github.com/users/serend1p1ty/repos","events_url":"https://api.github.com/users/serend1p1ty/events{/privacy}","received_events_url":"https://api.github.com/users/serend1p1ty/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2019-03-21T12:53:01Z","updated_at":"2020-09-13T02:17:37Z","closed_at":"2019-03-23T08:48:00Z","author_association":"NONE","active_lock_reason":null,"body":"您好，我使用alipy在scene数据集(多标签数据集)上比较MMC和Random的性能。但是不知为何，总是报错`ZeroDivisionError: division by zero`。我把alipy的文档再三看过了，我认为我的代码是没有问题的。\r\n```\r\nimport numpy as np\r\nimport copy\r\nfrom alipy import ToolBox\r\nfrom alipy.index import get_Xy_in_multilabel\r\nfrom alipy.query_strategy.multi_label import QueryMultiLabelAUDI, QueryMultiLabelMMC, \\\r\n                        QueryMultiLabelAdaptive, QueryMultiLabelRandom, LabelRankingModel\r\n\r\nimport arff\r\ndataset = arff.load(open('scene.arff', 'r'))\r\ndata = np.array(dataset['data'])\r\nX = data[:, :294].astype('float64')\r\nmult_y = data[:, 294:]\r\nmult_y[mult_y == 0] = -1\r\nmult_y = mult_y.astype('float64')\r\n\r\nalibox = ToolBox(X=X, y=mult_y, query_type='PartLabels')\r\nalibox.split_AL(test_ratio=0.2, initial_label_rate=0.05, all_class=False)\r\n\r\n\r\ndef main_loop(alibox, round, strategy):\r\n    train_idx, test_idx, label_ind, unlab_ind = alibox.get_split(round)\r\n    # Get intermediate results saver for one fold experiment\r\n    saver = alibox.get_stateio(round)\r\n    # base model\r\n    model = LabelRankingModel()\r\n\r\n    # A simple stopping criterion to specify the query budget.\r\n    while len(label_ind) <= 1500:\r\n        # query and update\r\n        import ipdb; ipdb.set_trace(context=7)\r\n        select_labs = strategy.select(label_ind, unlab_ind)\r\n        # use cost to record the amount of queried instance-label pairs\r\n        if len(select_labs[0]) == 1:\r\n            cost = mult_y.shape[1]\r\n        else:\r\n            cost = len(select_labs)\r\n        label_ind.update(select_labs)\r\n        unlab_ind.difference_update(select_labs)\r\n\r\n        # train/test\r\n        X_tr, y_tr, _ = get_Xy_in_multilabel(label_ind, X=X, y=mult_y, unknown_element=0)\r\n        model.fit(X=X_tr, y=y_tr)\r\n        pres, pred = model.predict(X[test_idx])\r\n        perf = alibox.calc_performance_metric(y_true=mult_y[test_idx], y_pred=pred, performance_metric='hamming_loss')\r\n\r\n        # save\r\n        st = alibox.State(select_index=select_labs, performance=perf, cost=cost)\r\n        saver.add_state(st)\r\n\r\n    return copy.deepcopy(saver)\r\n\r\n\r\naudi_result = []\r\nrandom_result = []\r\nmmc_result = []\r\nadaptive_result = []\r\n\r\nfor round in range(5):\r\n    # init strategies\r\n    # audi = QueryMultiLabelAUDI(X, mult_y)\r\n    mmc = QueryMultiLabelMMC(X, mult_y)\r\n    # adaptive = QueryMultiLabelAdaptive(X, mult_y)\r\n    random = QueryMultiLabelRandom()\r\n\r\n    # audi_result.append(main_loop(alibox, round, strategy=audi))\r\n    mmc_result.append(main_loop(alibox, round, strategy=mmc))\r\n    # adaptive_result.append(main_loop(alibox, round, strategy=adaptive))\r\n    random_result.append(main_loop(alibox, round, strategy=random))\r\n\r\nanalyser = alibox.get_experiment_analyser(x_axis='cost')\r\n# analyser.add_method(method_name='AUDI', method_results=audi_result)\r\nanalyser.add_method(method_name='RANDOM', method_results=random_result)\r\nanalyser.add_method(method_name='MMC', method_results=mmc_result)\r\n# analyser.add_method(method_name='Adaptive', method_results=adaptive_result)\r\nanalyser.plot_learning_curves()\r\n\r\n```\r\n\r\nDebug显示问题就出在\r\n```\r\n# train/test\r\nX_tr, y_tr, _ = get_Xy_in_multilabel(label_ind, X=X, y=mult_y, unknown_element=0)\r\nmodel.fit(X=X_tr, y=y_tr)\r\npres, pred = model.predict(X[test_idx])\r\nperf = alibox.calc_performance_metric(y_true=mult_y[test_idx], y_pred=pred, performance_metric='hamming_loss')\r\n```\r\n里面的\r\n```\r\npres, pred = model.predict(X[test_idx])\r\n```\r\n这一句。\r\n我对于LabelRank算法实在不熟悉，只是大致知道这个是通过对标签排序来预测未标记数据的一个方法。我认为问题出在LabelRank算法的实现上，因为我在debug的过程中没有发现任何问题。\r\n[scene数据集下载地址](https://github.com/tsoumakas/mulan/blob/master/data/multi-label/scene/scene.arff)\r\n我是通过[libac-arff](https://github.com/renatopp/liac-arff)读取的arff文件，我确定数据读取没有问题。\r\nlibac-arff安装方式为：`pip install liac-arff`\r\n运行我上面的代码就可以重现这个问题。\r\n请问您可以帮帮我吗？这个问题我已经花了很久时间但没有解决。\r\n\r\n","closed_by":{"login":"serend1p1ty","id":39628662,"node_id":"MDQ6VXNlcjM5NjI4NjYy","avatar_url":"https://avatars.githubusercontent.com/u/39628662?v=4","gravatar_id":"","url":"https://api.github.com/users/serend1p1ty","html_url":"https://github.com/serend1p1ty","followers_url":"https://api.github.com/users/serend1p1ty/followers","following_url":"https://api.github.com/users/serend1p1ty/following{/other_user}","gists_url":"https://api.github.com/users/serend1p1ty/gists{/gist_id}","starred_url":"https://api.github.com/users/serend1p1ty/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/serend1p1ty/subscriptions","organizations_url":"https://api.github.com/users/serend1p1ty/orgs","repos_url":"https://api.github.com/users/serend1p1ty/repos","events_url":"https://api.github.com/users/serend1p1ty/events{/privacy}","received_events_url":"https://api.github.com/users/serend1p1ty/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/14/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/14/timeline","performed_via_github_app":null,"state_reason":"completed"}