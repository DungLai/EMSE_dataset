[{"url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/comments/468577593","html_url":"https://github.com/NUAA-AL/ALiPy/issues/5#issuecomment-468577593","issue_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/5","id":468577593,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2ODU3NzU5Mw==","user":{"login":"tangypnuaa","id":40466308,"node_id":"MDQ6VXNlcjQwNDY2MzA4","avatar_url":"https://avatars.githubusercontent.com/u/40466308?v=4","gravatar_id":"","url":"https://api.github.com/users/tangypnuaa","html_url":"https://github.com/tangypnuaa","followers_url":"https://api.github.com/users/tangypnuaa/followers","following_url":"https://api.github.com/users/tangypnuaa/following{/other_user}","gists_url":"https://api.github.com/users/tangypnuaa/gists{/gist_id}","starred_url":"https://api.github.com/users/tangypnuaa/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tangypnuaa/subscriptions","organizations_url":"https://api.github.com/users/tangypnuaa/orgs","repos_url":"https://api.github.com/users/tangypnuaa/repos","events_url":"https://api.github.com/users/tangypnuaa/events{/privacy}","received_events_url":"https://api.github.com/users/tangypnuaa/received_events","type":"User","site_admin":false},"created_at":"2019-03-01T07:59:16Z","updated_at":"2019-03-01T07:59:16Z","author_association":"COLLABORATOR","body":"Hi, evanzhu2013.\r\n\r\nThe reason that can cause the first issue can be plentiful. Such as:\r\n1. The initially labeled ratio is too high.\r\n2. The number of experiments with different data split is not enough.\r\n3. The classifier can not fit the data well even with all the data in the current performance metric. (Try to use another model or dataset, or another kernel function if your model can be kernelized, or use another performance metric.)\r\n4. The interval between 2 performance point is too small. (Try to add a state in every 3 queries or more.)\r\n\r\nIn your case, I think it is the performance metric problem.\r\nYou want to use accuracy but pass a `performance_metric='roc_auc_score'` when calculating the performance.\r\n\r\nFor the 2nd issue, the random_query has one more point with the same stoping criterion.\r\nThat is because you set the initial point for random strategy by `\r\nsaver.set_initial_point(accuracy)` but not for uncertainty and QBC strategies.\r\n\r\n\r\nActually, you can use the same `main_loop` function for random strategy even in an old version of ALiPy, just replace the code `\r\nselect_ind = strategy.select(label_ind, unlab_ind,batch_size=50)` with `select_ind = strategy.select(label_index=label_ind, unlabel_index=unlab_ind, batch_size=50)`.\r\n\r\nHere is an example modification of your code to tackle the issues:\r\n\r\n![image](https://user-images.githubusercontent.com/40466308/53624075-ebe58200-3c39-11e9-85b7-bd7aa42f0afd.png)\r\n\r\n```\r\n# coding: utf-8\r\n\r\n# Ploting\r\nimport warnings\r\n\r\nfrom sklearn.ensemble import RandomForestClassifier\r\n\r\nwarnings.filterwarnings('ignore')\r\nfrom sklearn.datasets import load_breast_cancer\r\n\r\nimport copy\r\nfrom alipy import ToolBox\r\nfrom alipy.query_strategy.query_labels import QueryInstanceQBC, QueryRandom, QueryInstanceUncertainty\r\n\r\ndataset = load_breast_cancer()\r\nX = dataset.data\r\ny = dataset.target\r\nalibox = ToolBox(X=X, y=y, query_type='AllLabels', saving_path='.')\r\n\r\n# Split data\r\nalibox.split_AL(test_ratio=0.2, initial_label_rate=0.2, split_count=5)\r\n\r\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=0)\r\n\r\nstopping_criterion = alibox.get_stopping_criterion('num_of_queries', 8)\r\n\r\n\r\ndef main_loop(alibox, strategy, round):\r\n    # Get the data split of one fold experiment\r\n    train_idx, test_idx, label_ind, unlab_ind = alibox.get_split(round)\r\n    # Get intermediate results saver for one fold experiment\r\n    saver = alibox.get_stateio(round)\r\n    model.fit(X=X[label_ind.index, :], y=y[label_ind.index])\r\n    pred = model.predict(X[test_idx, :])\r\n    accuracy = alibox.calc_performance_metric(y_true=y[test_idx],\r\n                                              y_pred=pred,\r\n                                              performance_metric='accuracy_score')\r\n    saver.set_initial_point(accuracy)\r\n    while not stopping_criterion.is_stop():\r\n        # Select a subset of Uind according to the query strategy\r\n        # Passing model=None to use the default model for evaluating the committees' disagreement\r\n        select_ind = strategy.select(label_index=label_ind, unlabel_index=unlab_ind, batch_size=50)\r\n        #         print(len(select_ind))\r\n        label_ind.update(select_ind)\r\n        unlab_ind.difference_update(select_ind)\r\n\r\n        # Update model and calc performance according to the model you are using\r\n        model.fit(X=X[label_ind.index, :], y=y[label_ind.index])\r\n        pred = model.predict(X[test_idx, :])\r\n        accuracy = alibox.calc_performance_metric(y_true=y[test_idx],\r\n                                                  y_pred=pred,\r\n                                                  performance_metric='accuracy_score')\r\n\r\n        # Save intermediate results to file\r\n        st = alibox.State(select_index=select_ind, performance=accuracy)\r\n        saver.add_state(st)\r\n\r\n        # Passing the current progress to stopping criterion object\r\n        stopping_criterion.update_information(saver)\r\n    # Reset the progress in stopping criterion object\r\n    stopping_criterion.reset()\r\n    return saver\r\n\r\n\r\nunc_result = []\r\nqbc_result = []\r\neer_result = []\r\nquire_result = []\r\ndensity_result = []\r\n\r\nrandom_result = []\r\n\r\nfor round in range(3):\r\n    train_idx, test_idx, label_ind, unlab_ind = alibox.get_split(round)\r\n\r\n    # Use pre-defined strategy\r\n    unc = QueryInstanceUncertainty(X, y)\r\n    qbc = QueryInstanceQBC(X, y)\r\n    random = QueryRandom(X, y)\r\n\r\n    unc_result.append(copy.deepcopy(main_loop(alibox, unc, round)))\r\n    qbc_result.append(copy.deepcopy(main_loop(alibox, qbc, round)))\r\n    random_result.append(copy.deepcopy(main_loop(alibox, random, round)))\r\n\r\nanalyser = alibox.get_experiment_analyser(x_axis='num_of_queries')\r\nanalyser.add_method(method_name='Unc', method_results=unc_result)\r\nanalyser.add_method(method_name='Rnd', method_results=random_result)\r\nanalyser.add_method(method_name='QBC', method_results=qbc_result)\r\n\r\nprint(analyser)\r\nanalyser.plot_learning_curves(title='Example of alipy', std_area=False)\r\n```","reactions":{"url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/comments/468577593/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"tangypnuaa","id":40466308,"node_id":"MDQ6VXNlcjQwNDY2MzA4","avatar_url":"https://avatars.githubusercontent.com/u/40466308?v=4","gravatar_id":"","url":"https://api.github.com/users/tangypnuaa","html_url":"https://github.com/tangypnuaa","followers_url":"https://api.github.com/users/tangypnuaa/followers","following_url":"https://api.github.com/users/tangypnuaa/following{/other_user}","gists_url":"https://api.github.com/users/tangypnuaa/gists{/gist_id}","starred_url":"https://api.github.com/users/tangypnuaa/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/tangypnuaa/subscriptions","organizations_url":"https://api.github.com/users/tangypnuaa/orgs","repos_url":"https://api.github.com/users/tangypnuaa/repos","events_url":"https://api.github.com/users/tangypnuaa/events{/privacy}","received_events_url":"https://api.github.com/users/tangypnuaa/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/comments/469137127","html_url":"https://github.com/NUAA-AL/ALiPy/issues/5#issuecomment-469137127","issue_url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/5","id":469137127,"node_id":"MDEyOklzc3VlQ29tbWVudDQ2OTEzNzEyNw==","user":{"login":"evanzhu2013","id":7533756,"node_id":"MDQ6VXNlcjc1MzM3NTY=","avatar_url":"https://avatars.githubusercontent.com/u/7533756?v=4","gravatar_id":"","url":"https://api.github.com/users/evanzhu2013","html_url":"https://github.com/evanzhu2013","followers_url":"https://api.github.com/users/evanzhu2013/followers","following_url":"https://api.github.com/users/evanzhu2013/following{/other_user}","gists_url":"https://api.github.com/users/evanzhu2013/gists{/gist_id}","starred_url":"https://api.github.com/users/evanzhu2013/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanzhu2013/subscriptions","organizations_url":"https://api.github.com/users/evanzhu2013/orgs","repos_url":"https://api.github.com/users/evanzhu2013/repos","events_url":"https://api.github.com/users/evanzhu2013/events{/privacy}","received_events_url":"https://api.github.com/users/evanzhu2013/received_events","type":"User","site_admin":false},"created_at":"2019-03-04T06:43:59Z","updated_at":"2019-03-04T06:43:59Z","author_association":"NONE","body":"Thanks so much for detailed explain.  The minor plotting problem is solved.","reactions":{"url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/comments/469137127/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"evanzhu2013","id":7533756,"node_id":"MDQ6VXNlcjc1MzM3NTY=","avatar_url":"https://avatars.githubusercontent.com/u/7533756?v=4","gravatar_id":"","url":"https://api.github.com/users/evanzhu2013","html_url":"https://github.com/evanzhu2013","followers_url":"https://api.github.com/users/evanzhu2013/followers","following_url":"https://api.github.com/users/evanzhu2013/following{/other_user}","gists_url":"https://api.github.com/users/evanzhu2013/gists{/gist_id}","starred_url":"https://api.github.com/users/evanzhu2013/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanzhu2013/subscriptions","organizations_url":"https://api.github.com/users/evanzhu2013/orgs","repos_url":"https://api.github.com/users/evanzhu2013/repos","events_url":"https://api.github.com/users/evanzhu2013/events{/privacy}","received_events_url":"https://api.github.com/users/evanzhu2013/received_events","type":"User","site_admin":false}},{"id":2176992102,"node_id":"MDExOkNsb3NlZEV2ZW50MjE3Njk5MjEwMg==","url":"https://api.github.com/repos/NUAA-AL/ALiPy/issues/events/2176992102","actor":{"login":"evanzhu2013","id":7533756,"node_id":"MDQ6VXNlcjc1MzM3NTY=","avatar_url":"https://avatars.githubusercontent.com/u/7533756?v=4","gravatar_id":"","url":"https://api.github.com/users/evanzhu2013","html_url":"https://github.com/evanzhu2013","followers_url":"https://api.github.com/users/evanzhu2013/followers","following_url":"https://api.github.com/users/evanzhu2013/following{/other_user}","gists_url":"https://api.github.com/users/evanzhu2013/gists{/gist_id}","starred_url":"https://api.github.com/users/evanzhu2013/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanzhu2013/subscriptions","organizations_url":"https://api.github.com/users/evanzhu2013/orgs","repos_url":"https://api.github.com/users/evanzhu2013/repos","events_url":"https://api.github.com/users/evanzhu2013/events{/privacy}","received_events_url":"https://api.github.com/users/evanzhu2013/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2019-03-04T06:43:59Z","state_reason":null,"performed_via_github_app":null}]