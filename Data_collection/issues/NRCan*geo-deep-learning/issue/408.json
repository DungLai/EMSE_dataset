{"url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/408","repository_url":"https://api.github.com/repos/NRCan/geo-deep-learning","labels_url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/408/labels{/name}","comments_url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/408/comments","events_url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/408/events","html_url":"https://github.com/NRCan/geo-deep-learning/issues/408","id":1482286505,"node_id":"I_kwDOCNASdM5YWeWp","number":408,"title":"[feature request] Use pytest fixtures with scope=\"session\" to access test data during testing","user":{"login":"remtav","id":34774759,"node_id":"MDQ6VXNlcjM0Nzc0NzU5","avatar_url":"https://avatars.githubusercontent.com/u/34774759?v=4","gravatar_id":"","url":"https://api.github.com/users/remtav","html_url":"https://github.com/remtav","followers_url":"https://api.github.com/users/remtav/followers","following_url":"https://api.github.com/users/remtav/following{/other_user}","gists_url":"https://api.github.com/users/remtav/gists{/gist_id}","starred_url":"https://api.github.com/users/remtav/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/remtav/subscriptions","organizations_url":"https://api.github.com/users/remtav/orgs","repos_url":"https://api.github.com/users/remtav/repos","events_url":"https://api.github.com/users/remtav/events{/privacy}","received_events_url":"https://api.github.com/users/remtav/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-12-07T16:10:53Z","updated_at":"2022-12-07T16:14:08Z","closed_at":null,"author_association":"COLLABORATOR","active_lock_reason":null,"body":"Multiple tests in our test suite use test data under the `tests/data/`, referenced by different csvs in `tests/tiling/`\r\nThis test data could be made accessible for all tests via pytest fixtures by creating a `conftest.py` ([reference](https://betterprogramming.pub/understand-5-scopes-of-pytest-fixtures-1b607b5c19ed), see \"conftest.py\" section)\r\n\r\nThis `conftest.py` could be parametrized to return requested data based on selection between 'binary' or 'multiclass', 'singleband' or 'multiband', etc. \r\nTo parametrize a fixture, the fixture function can itself return a function rather than the data directly ([reference](https://stackoverflow.com/questions/44677426/can-i-pass-arguments-to-pytest-fixtures)).\r\n\r\nHere's a example of what the `tests/conftest.py` could look like:\r\n```python\r\nfrom typing import Dict, List\r\n\r\nimport pytest\r\nfrom torchgeo.datasets.utils import extract_archive\r\n\r\nfrom utils.utils import read_csv\r\n\r\n\r\n@pytest.fixture(scope=\"session\")\r\ndef test_data():\r\n    def _method(classes_type: str = 'binary', bands_type: str = 'singleband', other_suffix: List = []) -> Dict:\r\n        if not isinstance(classes_type, str) and not isinstance(bands_type, str):\r\n            raise ValueError(f\"Classes type and bands type should be strings\")\r\n        if not isinstance(other_suffix, List):\r\n            raise ValueError(f\"Additionnal suffixes should be a list of strings\")\r\n        extract_archive(src=\"tests/data/massachusetts_buildings_kaggle.zip\")\r\n        extract_archive(src=\"tests/data/new_brunswick_aerial.zip\")\r\n        extract_archive(src=\"tests/data/spacenet.zip\")\r\n        bands_type = \"-\" + bands_type if bands_type else \"\"\r\n        other_suffix_str = \"_\" + \"_\".join(other_suffix) if other_suffix else \"\"\r\n        csv_path = f\"tests/tiling/tiling_segmentation_{classes_type}{bands_type}{other_suffix_str}_ci.csv\"\r\n        data = read_csv(csv_path)\r\n        return data\r\n    return _method\r\n```\r\n\r\nThis fixture can then be called for any test under `tests/` directory (including subdirectories). For example, in `tests/utils/test_foo.py`:\r\n```python\r\ndef test_foo(test_data):\r\n    data = test_data(classes_type='binary', bands_type='multiband')\r\n```\r\n\r\nBefore implementing this:\r\n- csvs referring to test data should be moved from `tests/tiling` to `tests/data`, since they're used for more than just tiling-related tests;\r\n- csvs should be renamed with a logic making them easy to select, for example:\r\n`data_segmentation_{bands_type}_{classes_type}_{other_suffix1}_{other_suffix2}_{other_suffixn}.csv`\r\n\r\n","closed_by":null,"reactions":{"url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/408/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/408/timeline","performed_via_github_app":null,"state_reason":null}