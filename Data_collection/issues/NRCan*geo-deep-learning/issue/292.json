{"url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/292","repository_url":"https://api.github.com/repos/NRCan/geo-deep-learning","labels_url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/292/labels{/name}","comments_url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/292/comments","events_url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/292/events","html_url":"https://github.com/NRCan/geo-deep-learning/issues/292","id":1175595366,"node_id":"I_kwDOCNASdM5GEilm","number":292,"title":"Model_choice.py: refactor model, loss and optimizer instantiation and loading","user":{"login":"remtav","id":34774759,"node_id":"MDQ6VXNlcjM0Nzc0NzU5","avatar_url":"https://avatars.githubusercontent.com/u/34774759?v=4","gravatar_id":"","url":"https://api.github.com/users/remtav","html_url":"https://github.com/remtav","followers_url":"https://api.github.com/users/remtav/followers","following_url":"https://api.github.com/users/remtav/following{/other_user}","gists_url":"https://api.github.com/users/remtav/gists{/gist_id}","starred_url":"https://api.github.com/users/remtav/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/remtav/subscriptions","organizations_url":"https://api.github.com/users/remtav/orgs","repos_url":"https://api.github.com/users/remtav/repos","events_url":"https://api.github.com/users/remtav/events{/privacy}","received_events_url":"https://api.github.com/users/remtav/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-03-21T15:58:45Z","updated_at":"2022-03-22T15:05:39Z","closed_at":"2022-03-22T15:05:39Z","author_association":"COLLABORATOR","active_lock_reason":null,"body":"Model_choice.py has gotten messy and cluttered over the years and needs a bit of refactoring. This refactoring should be done before addressing #246 and #152. \r\n\r\n# Current state of things\r\n- [set_hyperparamers()](https://github.com/NRCan/geo-deep-learning/blob/develop/models/model_choice.py#L108) function has very vague prupose of \"set[ting] hyperparameters based on values provided in yaml config file\";\r\n- [net()](https://github.com/NRCan/geo-deep-learning/blob/develop/models/model_choice.py#L153) function is supposed to \"Define the neural net\", but in reality it's an all-in-one vague function that does the following:\r\n1. Defines net architecture;\r\n2. Reads a checkpoint to memory with [load_checkpoint()](https://github.com/NRCan/geo-deep-learning/blob/63796c8d9e848ac5bc23786386a09e2e5a96430a/models/model_choice.py#L72) (from a .pth.tar file as created by torch.save);\r\n3. Returns if net() is called from inference or continues with the following if net() is called from train mode:\r\n4. If more than one gpu is requested, determines [which gpus are available](https://github.com/NRCan/geo-deep-learning/blob/develop/models/model_choice.py#L206) based on user-inputted threshold for GPU's available RAM and usage %;\r\n3.  [Sets model to DataParallel](https://github.com/NRCan/geo-deep-learning/blob/develop/models/model_choice.py#L215) if more than one gpu is requested and available;\r\n5. Sets main device with [set_device()](https://github.com/NRCan/geo-deep-learning/blob/develop/models/model_choice.py#L224) function;\r\n5. [Pushes model to main device](https://github.com/NRCan/geo-deep-learning/blob/develop/models/model_choice.py#L225);\r\n6. Calls set_hyperparamters() (see above);\r\n7. [Pushes loss to device](https://github.com/NRCan/geo-deep-learning/blob/develop/models/model_choice.py#L234);\r\n8. Returns 7 (!!) objects: model, model_name, loss, etc.\r\n\r\n# Suggested solution (high level)\r\nAll these steps could be better separated in small, dedicated functions of their own:\r\n- read_checkpoint(): renamed version of load_checkpoint (prevents confusion with load_state_dict function). Although it derives from torch.load(checkpoint)'s function, this function really just reads a checkpoint in memory from a .pth.tar file to a Python dict containing weights, optimizer, etc.\r\n- define_net_architecture(): define the model architecture from config parameters (i.e. create model with randomly initialized weights)\r\n- adapt_checkpoint_to_dp_model(): for use at test loop during training only, adapts a generic checkpoint to be loaded to a DataParallel model as is done in [load_from_checkpoint](https://github.com/NRCan/geo-deep-learning/blob/develop/utils/utils.py#L65) (if model is DataParallel object)\r\n- define_loss(): calls [verify_weights()](https://github.com/NRCan/geo-deep-learning/blob/develop/models/model_choice.py#L94) and instantiates a loss criterion\r\n- define_optimizer(): instantiates optimizer with learning rate, weight decay, etc.\r\n\r\nThese functions would be called only when necessary in 3 main places:\r\n1. Beginning of train_segmentation: \r\n- read checkpoint to be [loaded checkpoint for model weights and optimizer](https://pytorch.org/tutorials/beginner/saving_loading_models.html#load);\r\n- define net architecture;\r\n- load model weights with pytorch's [model_object].load_state_dict() method;\r\n- define loss;\r\n- define optimizer;\r\n- load optimizer from checkpoint;\r\n2. Test loop in train_segmentation: \r\n- Load best checkpoint to model (adapt checkpoint keys if model is a nn.DataParallel instance using dedicated function);\r\n3. Beginning of inference: \r\n- override architecture, input bands, output classes from checkpoint's params;\r\n- define net architecture\r\n- load weights from provided checkpoint to model using pytorch's [model_object].load_state_dict() method","closed_by":{"login":"remtav","id":34774759,"node_id":"MDQ6VXNlcjM0Nzc0NzU5","avatar_url":"https://avatars.githubusercontent.com/u/34774759?v=4","gravatar_id":"","url":"https://api.github.com/users/remtav","html_url":"https://github.com/remtav","followers_url":"https://api.github.com/users/remtav/followers","following_url":"https://api.github.com/users/remtav/following{/other_user}","gists_url":"https://api.github.com/users/remtav/gists{/gist_id}","starred_url":"https://api.github.com/users/remtav/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/remtav/subscriptions","organizations_url":"https://api.github.com/users/remtav/orgs","repos_url":"https://api.github.com/users/remtav/repos","events_url":"https://api.github.com/users/remtav/events{/privacy}","received_events_url":"https://api.github.com/users/remtav/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/292/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/NRCan/geo-deep-learning/issues/292/timeline","performed_via_github_app":null,"state_reason":"completed"}