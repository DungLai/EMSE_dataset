{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/90","repository_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch","labels_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/90/labels{/name}","comments_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/90/comments","events_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/90/events","html_url":"https://github.com/ajbrock/BigGAN-PyTorch/issues/90","id":1014291133,"node_id":"I_kwDOCe-X-s48dNq9","number":90,"title":"Query about orthogonal regularization implementation","user":{"login":"TanYingHao","id":78861611,"node_id":"MDQ6VXNlcjc4ODYxNjEx","avatar_url":"https://avatars.githubusercontent.com/u/78861611?v=4","gravatar_id":"","url":"https://api.github.com/users/TanYingHao","html_url":"https://github.com/TanYingHao","followers_url":"https://api.github.com/users/TanYingHao/followers","following_url":"https://api.github.com/users/TanYingHao/following{/other_user}","gists_url":"https://api.github.com/users/TanYingHao/gists{/gist_id}","starred_url":"https://api.github.com/users/TanYingHao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TanYingHao/subscriptions","organizations_url":"https://api.github.com/users/TanYingHao/orgs","repos_url":"https://api.github.com/users/TanYingHao/repos","events_url":"https://api.github.com/users/TanYingHao/events{/privacy}","received_events_url":"https://api.github.com/users/TanYingHao/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-03T07:08:03Z","updated_at":"2021-10-03T07:08:03Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi, I was looking through this code for reimplementation for a separate task, but I noticed that the orthogonal regularization is implemented by adding the gradient of modified orthogonal regularization loss to the parameters. Shouldn't it be a subtraction for gradient descent. Appreciate any advice :)\r\n\r\nI am looking at specifically this code snippet in utils.py\r\nw = param.view(param.shape[0], -1)\r\ngrad = (2 * torch.mm(torch.mm(w, w.t()) \r\n        * (1. - torch.eye(w.shape[0], device=w.device)), w))\r\nparam.grad.data += strength * grad.view(param.shape)","closed_by":null,"reactions":{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/90/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":1},"timeline_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/90/timeline","performed_via_github_app":null,"state_reason":null}