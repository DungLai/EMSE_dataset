{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/8","repository_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch","labels_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/8/labels{/name}","comments_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/8/comments","events_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/8/events","html_url":"https://github.com/ajbrock/BigGAN-PyTorch/issues/8","id":426195728,"node_id":"MDU6SXNzdWU0MjYxOTU3Mjg=","number":8,"title":"Minimal working example for sampling from pre-trained BigGAN?","user":{"login":"qilimk","id":31877208,"node_id":"MDQ6VXNlcjMxODc3MjA4","avatar_url":"https://avatars.githubusercontent.com/u/31877208?v=4","gravatar_id":"","url":"https://api.github.com/users/qilimk","html_url":"https://github.com/qilimk","followers_url":"https://api.github.com/users/qilimk/followers","following_url":"https://api.github.com/users/qilimk/following{/other_user}","gists_url":"https://api.github.com/users/qilimk/gists{/gist_id}","starred_url":"https://api.github.com/users/qilimk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qilimk/subscriptions","organizations_url":"https://api.github.com/users/qilimk/orgs","repos_url":"https://api.github.com/users/qilimk/repos","events_url":"https://api.github.com/users/qilimk/events{/privacy}","received_events_url":"https://api.github.com/users/qilimk/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-03-27T21:39:39Z","updated_at":"2020-02-11T16:27:22Z","closed_at":"2019-03-27T22:00:27Z","author_association":"NONE","active_lock_reason":null,"body":"Hi ajbrock, \r\nI am so excited that you released the Pytorch version of BigGAN. I am trying to sample some results. Could you provide a minimal working example for sampling from pre-trained BigGAN? @airalcorn2 and I wrote a piece of code for sampling, but the results look bad. \r\nHere is our sample code.\r\n```\r\nimport functools\r\nimport numpy as np\r\nimport torch\r\nimport utils\r\n\r\nfrom PIL import Image\r\n\r\nparser = utils.prepare_parser()\r\nparser = utils.add_sample_parser(parser)\r\nconfig = vars(parser.parse_args())\r\n\r\n# update config (see train.py for explanation)\r\nconfig[\"resolution\"] = utils.imsize_dict[config[\"dataset\"]]\r\nconfig[\"n_classes\"] = utils.nclass_dict[config[\"dataset\"]]\r\nconfig[\"G_activation\"] = utils.activation_dict[config[\"G_nl\"]]\r\nconfig[\"D_activation\"] = utils.activation_dict[config[\"D_nl\"]]\r\nconfig = utils.update_config_roots(config)\r\nconfig[\"skip_init\"] = True\r\nconfig[\"no_optim\"] = True\r\ndevice = \"cuda:7\"\r\n\r\n# Seed RNG\r\nutils.seed_rng(config[\"seed\"])\r\n\r\n# Setup cudnn.benchmark for free speed\r\ntorch.backends.cudnn.benchmark = True\r\n\r\n# Import the model--this line allows us to dynamically select different files.\r\nmodel = __import__(config[\"model\"])\r\nexperiment_name = utils.name_from_config(config)\r\nG = model.Generator(**config).to(device)\r\nutils.count_parameters(G)\r\n\r\n# Load weights\r\nG.load_state_dict(torch.load(\"/mnt/raid/qi/biggan_weighs/G_optim.pth\"), strict=False)\r\n\r\n# Update batch size setting used for G\r\nG_batch_size = max(config[\"G_batch_size\"], config[\"batch_size\"])\r\n(z_, y_) = utils.prepare_z_y(\r\n    G_batch_size,\r\n    G.dim_z,\r\n    config[\"n_classes\"],\r\n    device=device,\r\n    fp16=config[\"G_fp16\"],\r\n    z_var=config[\"z_var\"],\r\n)\r\n\r\nG.eval()\r\n\r\n# Sample function\r\nsample = functools.partial(utils.sample, G=G, z_=z_, y_=y_, config=config)\r\n\r\nwith torch.no_grad():\r\n    z_.sample_()\r\n    y_.sample_()\r\n    image_tensors = G(z_, G.shared(y_))\r\n\r\n\r\nfor i in range(len(image_tensors)):\r\n    image_array = image_tensors[i].permute(1, 2, 0).detach().cpu().numpy()\r\n    image_array = np.uint8(255 * (1 + image_array) / 2)\r\n    image = Image.fromarray(image_array).save(\"./test_images/{i}.png\")\r\n```\r\n\r\nHere is one of our results.\r\n![59](https://user-images.githubusercontent.com/31877208/55113364-f0704f80-50ac-11e9-8ffa-33351aaf19f7.png)\r\n\r\nThanks a lot.","closed_by":{"login":"ajbrock","id":7751273,"node_id":"MDQ6VXNlcjc3NTEyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7751273?v=4","gravatar_id":"","url":"https://api.github.com/users/ajbrock","html_url":"https://github.com/ajbrock","followers_url":"https://api.github.com/users/ajbrock/followers","following_url":"https://api.github.com/users/ajbrock/following{/other_user}","gists_url":"https://api.github.com/users/ajbrock/gists{/gist_id}","starred_url":"https://api.github.com/users/ajbrock/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajbrock/subscriptions","organizations_url":"https://api.github.com/users/ajbrock/orgs","repos_url":"https://api.github.com/users/ajbrock/repos","events_url":"https://api.github.com/users/ajbrock/events{/privacy}","received_events_url":"https://api.github.com/users/ajbrock/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/8/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/8/timeline","performed_via_github_app":null,"state_reason":"completed"}