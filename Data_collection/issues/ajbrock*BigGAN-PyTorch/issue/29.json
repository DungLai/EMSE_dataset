{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/29","repository_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch","labels_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/29/labels{/name}","comments_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/29/comments","events_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/29/events","html_url":"https://github.com/ajbrock/BigGAN-PyTorch/issues/29","id":454849334,"node_id":"MDU6SXNzdWU0NTQ4NDkzMzQ=","number":29,"title":"Using grayscale input images instead of RGB.","user":{"login":"kseuro","id":18079465,"node_id":"MDQ6VXNlcjE4MDc5NDY1","avatar_url":"https://avatars.githubusercontent.com/u/18079465?v=4","gravatar_id":"","url":"https://api.github.com/users/kseuro","html_url":"https://github.com/kseuro","followers_url":"https://api.github.com/users/kseuro/followers","following_url":"https://api.github.com/users/kseuro/following{/other_user}","gists_url":"https://api.github.com/users/kseuro/gists{/gist_id}","starred_url":"https://api.github.com/users/kseuro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kseuro/subscriptions","organizations_url":"https://api.github.com/users/kseuro/orgs","repos_url":"https://api.github.com/users/kseuro/repos","events_url":"https://api.github.com/users/kseuro/events{/privacy}","received_events_url":"https://api.github.com/users/kseuro/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2019-06-11T18:52:08Z","updated_at":"2019-06-24T14:42:52Z","closed_at":"2019-06-13T20:58:39Z","author_association":"NONE","active_lock_reason":null,"body":"Hello @ajbrock! Thank you so much for making your model available for others to use. I'm trying to re-purpose it at the moment for a research project.\r\n\r\nI have a two-fold issue: one piece is data-related, the other architecture-related.\r\n\r\n1) I am trying to use a dataset of .png grayscale images produced by an analogue-to-digital converter. The image dimensions are 512x512 and there is only 1 class. I have made the following modifications in order to get the dataset loaded: (larcv is the dataset name)\r\n\r\nIn `utils.py`\r\n```\r\n# Convenience dicts\r\ndset_dict = {'larcv_png': dset.ImageFolder, 'larcv_hdf5': dset.ILSVRC_HDF5,\r\n             'I32': dset.ImageFolder, 'I64': dset.ImageFolder,\r\n             'I128': dset.ImageFolder, 'I256': dset.ImageFolder,\r\n             'I32_hdf5': dset.ILSVRC_HDF5, 'I64_hdf5': dset.ILSVRC_HDF5,\r\n             'I128_hdf5': dset.ILSVRC_HDF5, 'I256_hdf5': dset.ILSVRC_HDF5,\r\n             'C10': dset.CIFAR10, 'C100': dset.CIFAR100}\r\nimsize_dict = {'larcv_png': 512, 'larcv_hdf5': 512,\r\n               'I32': 32, 'I32_hdf5': 32,\r\n               'I64': 64, 'I64_hdf5': 64,\r\n               'I128': 128,\r\n               'I128_hdf5': 128,\r\n               'I256': 256, 'I256_hdf5': 256,\r\n               'C10': 32, 'C100': 32}\r\nroot_dict = {'larcv_png': 'larcv_png', 'larcv_hdf5': 'ILSVRC512.hdf5',\r\n             'I32': 'ImageNet', 'I32_hdf5': 'ILSVRC32.hdf5',\r\n             'I64': 'ImageNet', 'I64_hdf5': 'ILSVRC64.hdf5',\r\n             'I128': 'ImageNet', 'I128_hdf5': 'ILSVRC128.hdf5',\r\n             'I256': 'ImageNet', 'I256_hdf5': 'ILSVRC256.hdf5',\r\n             'C10': 'cifar', 'C100': 'cifar'}\r\nnclass_dict = {'larcv_png': 1, 'larcv_hdf5': 1,\r\n               'I32': 1000, 'I32_hdf5': 1000,\r\n               'I64': 1000, 'I64_hdf5': 1000,\r\n               'I128': 1000, 'I128_hdf5': 1000,\r\n               'I256': 1000, 'I256_hdf5': 1000,\r\n               'C10': 10, 'C100': 100}\r\n# Number of classes to put per sample sheet\r\nclasses_per_sheet_dict = {'larcv_png': 1, 'larcv_hdf5': 1,\r\n                          'I32': 50, 'I32_hdf5': 50,\r\n                          'I64': 50, 'I64_hdf5': 50,\r\n                          'I128': 20, 'I128_hdf5': 20,\r\n                          'I256': 20, 'I256_hdf5': 20,\r\n                          'C10': 10, 'C100': 100}\r\n```\r\n\r\nThe dataset does serialize and load successfully, but when I check the dimensions of the images inside of the `ILSVRC_HDF5`class in `datasets.py` using `img.shape`, the dimensions show as `[3, 512, 512]`. \r\n\r\nThis leads to a size-mismatch in the forward function of G_D at the line:\r\n`D_input = torch.cat([G_z, x], 0) if x is not None else G_z` where `G_z.shape = [4, 1, 512, 512]` and `x.shape = [4, 3, 512, 512]`\r\n\r\n2) I've made the following changes to the `D_arch` dictionary in order to accommodate the 512x512 images:\r\n\r\n```\r\n  arch[512] = {'in_channels' :  [1] + [ch*item for item in [1, 2, 4, 8, 8, 16, 16]],\r\n               'out_channels' : [item * ch for item in [1, 2, 4, 4, 8, 8, 16, 16]],\r\n               'downsample' : [True] * 7 + [False],\r\n               'resolution' : [512, 256, 128, 64, 32, 16, 8, 4],\r\n               'attention' : {2**i: 2**i in [int(item) for item in attention.split('_')]\r\n                              for i in range(2,10)}}\r\n```\r\n\r\nI have also modified the last layer of the Generator to output 1-channel images:\r\n\r\n```\r\n    # output layer: batchnorm-relu-conv.\r\n    # Consider using a non-spectral conv here\r\n    self.output_layer = nn.Sequential(layers.bn(self.arch['out_channels'][-1],\r\n                                                cross_replica=self.cross_replica,\r\n                                                mybn=self.mybn),\r\n                                    self.activation,\r\n                                    self.which_conv(self.arch['out_channels'][-1], 1))\r\n```\r\n\r\nMy questions are:\r\n\r\n- How can I get the images to load with only 1 channel?\r\n- Are the architecture modifications I've made appropriate?\r\n\r\nThank you so much.","closed_by":{"login":"kseuro","id":18079465,"node_id":"MDQ6VXNlcjE4MDc5NDY1","avatar_url":"https://avatars.githubusercontent.com/u/18079465?v=4","gravatar_id":"","url":"https://api.github.com/users/kseuro","html_url":"https://github.com/kseuro","followers_url":"https://api.github.com/users/kseuro/followers","following_url":"https://api.github.com/users/kseuro/following{/other_user}","gists_url":"https://api.github.com/users/kseuro/gists{/gist_id}","starred_url":"https://api.github.com/users/kseuro/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kseuro/subscriptions","organizations_url":"https://api.github.com/users/kseuro/orgs","repos_url":"https://api.github.com/users/kseuro/repos","events_url":"https://api.github.com/users/kseuro/events{/privacy}","received_events_url":"https://api.github.com/users/kseuro/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/29/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/29/timeline","performed_via_github_app":null,"state_reason":"completed"}