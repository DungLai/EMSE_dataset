[{"id":2234582385,"node_id":"MDE0Ok1lbnRpb25lZEV2ZW50MjIzNDU4MjM4NQ==","url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/events/2234582385","actor":{"login":"airalcorn2","id":1927770,"node_id":"MDQ6VXNlcjE5Mjc3NzA=","avatar_url":"https://avatars.githubusercontent.com/u/1927770?v=4","gravatar_id":"","url":"https://api.github.com/users/airalcorn2","html_url":"https://github.com/airalcorn2","followers_url":"https://api.github.com/users/airalcorn2/followers","following_url":"https://api.github.com/users/airalcorn2/following{/other_user}","gists_url":"https://api.github.com/users/airalcorn2/gists{/gist_id}","starred_url":"https://api.github.com/users/airalcorn2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/airalcorn2/subscriptions","organizations_url":"https://api.github.com/users/airalcorn2/orgs","repos_url":"https://api.github.com/users/airalcorn2/repos","events_url":"https://api.github.com/users/airalcorn2/events{/privacy}","received_events_url":"https://api.github.com/users/airalcorn2/received_events","type":"User","site_admin":false},"event":"mentioned","commit_id":null,"commit_url":null,"created_at":"2019-03-27T21:39:39Z","performed_via_github_app":null},{"id":2234582386,"node_id":"MDE1OlN1YnNjcmliZWRFdmVudDIyMzQ1ODIzODY=","url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/events/2234582386","actor":{"login":"airalcorn2","id":1927770,"node_id":"MDQ6VXNlcjE5Mjc3NzA=","avatar_url":"https://avatars.githubusercontent.com/u/1927770?v=4","gravatar_id":"","url":"https://api.github.com/users/airalcorn2","html_url":"https://github.com/airalcorn2","followers_url":"https://api.github.com/users/airalcorn2/followers","following_url":"https://api.github.com/users/airalcorn2/following{/other_user}","gists_url":"https://api.github.com/users/airalcorn2/gists{/gist_id}","starred_url":"https://api.github.com/users/airalcorn2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/airalcorn2/subscriptions","organizations_url":"https://api.github.com/users/airalcorn2/orgs","repos_url":"https://api.github.com/users/airalcorn2/repos","events_url":"https://api.github.com/users/airalcorn2/events{/privacy}","received_events_url":"https://api.github.com/users/airalcorn2/received_events","type":"User","site_admin":false},"event":"subscribed","commit_id":null,"commit_url":null,"created_at":"2019-03-27T21:39:39Z","performed_via_github_app":null},{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/comments/477358969","html_url":"https://github.com/ajbrock/BigGAN-PyTorch/issues/8#issuecomment-477358969","issue_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/8","id":477358969,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NzM1ODk2OQ==","user":{"login":"ajbrock","id":7751273,"node_id":"MDQ6VXNlcjc3NTEyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7751273?v=4","gravatar_id":"","url":"https://api.github.com/users/ajbrock","html_url":"https://github.com/ajbrock","followers_url":"https://api.github.com/users/ajbrock/followers","following_url":"https://api.github.com/users/ajbrock/following{/other_user}","gists_url":"https://api.github.com/users/ajbrock/gists{/gist_id}","starred_url":"https://api.github.com/users/ajbrock/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajbrock/subscriptions","organizations_url":"https://api.github.com/users/ajbrock/orgs","repos_url":"https://api.github.com/users/ajbrock/repos","events_url":"https://api.github.com/users/ajbrock/events{/privacy}","received_events_url":"https://api.github.com/users/ajbrock/received_events","type":"User","site_admin":false},"created_at":"2019-03-27T21:43:09Z","updated_at":"2019-03-27T21:44:23Z","author_association":"OWNER","body":"Hi Milan,\r\n\r\nPlease see the included [sample script](https://github.com/ajbrock/BigGAN-PyTorch/blob/master/scripts/sample_BigGAN_bs256x8.sh) provided in the scripts folder. \r\n\r\nAs to your snippet, the line `G.load_state_dict(torch.load(\"/mnt/raid/qi/biggan_weighs/G_optim.pth\"), strict=False)` is incorrect, you appear to be attempting to load G with the state dict for G's optimizer. Use G_ema.pth or G.pth, and consider turning strict=True on to help catch mistakes like this--I have it as false in there for a variety of reasons but it it's generally better for strict to be True. \r\n","reactions":{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/comments/477358969/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"ajbrock","id":7751273,"node_id":"MDQ6VXNlcjc3NTEyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7751273?v=4","gravatar_id":"","url":"https://api.github.com/users/ajbrock","html_url":"https://github.com/ajbrock","followers_url":"https://api.github.com/users/ajbrock/followers","following_url":"https://api.github.com/users/ajbrock/following{/other_user}","gists_url":"https://api.github.com/users/ajbrock/gists{/gist_id}","starred_url":"https://api.github.com/users/ajbrock/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajbrock/subscriptions","organizations_url":"https://api.github.com/users/ajbrock/orgs","repos_url":"https://api.github.com/users/ajbrock/repos","events_url":"https://api.github.com/users/ajbrock/events{/privacy}","received_events_url":"https://api.github.com/users/ajbrock/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/comments/477360418","html_url":"https://github.com/ajbrock/BigGAN-PyTorch/issues/8#issuecomment-477360418","issue_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/8","id":477360418,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NzM2MDQxOA==","user":{"login":"qilimk","id":31877208,"node_id":"MDQ6VXNlcjMxODc3MjA4","avatar_url":"https://avatars.githubusercontent.com/u/31877208?v=4","gravatar_id":"","url":"https://api.github.com/users/qilimk","html_url":"https://github.com/qilimk","followers_url":"https://api.github.com/users/qilimk/followers","following_url":"https://api.github.com/users/qilimk/following{/other_user}","gists_url":"https://api.github.com/users/qilimk/gists{/gist_id}","starred_url":"https://api.github.com/users/qilimk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qilimk/subscriptions","organizations_url":"https://api.github.com/users/qilimk/orgs","repos_url":"https://api.github.com/users/qilimk/repos","events_url":"https://api.github.com/users/qilimk/events{/privacy}","received_events_url":"https://api.github.com/users/qilimk/received_events","type":"User","site_admin":false},"created_at":"2019-03-27T21:48:08Z","updated_at":"2019-03-27T21:48:08Z","author_association":"NONE","body":"Thanks for replying so fast. I tried \r\n`G.load_state_dict(torch.load(\"/mnt/raid/qi/biggan_weighs/G.pth\"), strict=True)`\r\nbut I got the error like this\r\n```\r\nRuntimeError: Error(s) in loading state_dict for Generator:\r\n\tUnexpected key(s) in state_dict: \"shared.weight\", \"blocks.0.0.bn1.gain.u0\", \"blocks.0.0.bn1.gain.sv0\", \"blocks.0.0.bn1.bias.u0\", \"blocks.0.0.bn1.bias.sv0\", \"blocks.0.0.bn2.gain.u0\", \"blocks.0.0.bn2.gain.sv0\", \"blocks.0.0.bn2.bias.u0\", \"blocks.0.0.bn2.bias.sv0\", \"blocks.1.0.bn1.gain.u0\", \"blocks.1.0.bn1.gain.sv0\", \"blocks.1.0.bn1.bias.u0\", \"blocks.1.0.bn1.bias.sv0\", \"blocks.1.0.bn2.gain.u0\", \"blocks.1.0.bn2.gain.sv0\", \"blocks.1.0.bn2.bias.u0\", \"blocks.1.0.bn2.bias.sv0\", \"blocks.2.0.bn1.gain.u0\", \"blocks.2.0.bn1.gain.sv0\", \"blocks.2.0.bn1.bias.u0\", \"blocks.2.0.bn1.bias.sv0\", \"blocks.2.0.bn2.gain.u0\", \"blocks.2.0.bn2.gain.sv0\", \"blocks.2.0.bn2.bias.u0\", \"blocks.2.0.bn2.bias.sv0\", \"blocks.3.0.bn1.gain.u0\", \"blocks.3.0.bn1.gain.sv0\", \"blocks.3.0.bn1.bias.u0\", \"blocks.3.0.bn1.bias.sv0\", \"blocks.3.0.bn2.gain.u0\", \"blocks.3.0.bn2.gain.sv0\", \"blocks.3.0.bn2.bias.u0\", \"blocks.3.0.bn2.bias.sv0\", \"blocks.4.0.bn1.gain.u0\", \"blocks.4.0.bn1.gain.sv0\", \"blocks.4.0.bn1.bias.u0\", \"blocks.4.0.bn1.bias.sv0\", \"blocks.4.0.bn2.gain.u0\", \"blocks.4.0.bn2.gain.sv0\", \"blocks.4.0.bn2.bias.u0\", \"blocks.4.0.bn2.bias.sv0\".\r\n\tsize mismatch for linear.weight: copying a param with shape torch.Size([24576, 20]) from checkpoint, the shape in current model is torch.Size([16384, 128]).\r\n\tsize mismatch for linear.bias: copying a param with shape torch.Size([24576]) from checkpoint, the shape in current model is torch.Size([16384]).\r\n\tsize mismatch for linear.u0: copying a param with shape torch.Size([1, 24576]) from checkpoint, the shape in current model is torch.Size([1, 16384]).\r\n\tsize mismatch for blocks.0.0.conv1.weight: copying a param with shape torch.Size([1536, 1536, 3, 3]) from checkpoint, the shape in current model is torch.Size([1024, 1024, 3, 3]).\r\n\tsize mismatch for blocks.0.0.conv1.bias: copying a param with shape torch.Size([1536]) from checkpoint, the shape in current model is torch.Size([1024]).\r\n\tsize mismatch for blocks.0.0.conv1.u0: copying a param with shape torch.Size([1, 1536]) from checkpoint, the shape in current model is torch.Size([1, 1024]).\r\n\tsize mismatch for blocks.0.0.conv2.weight: copying a param with shape torch.Size([1536, 1536, 3, 3]) from checkpoint, the shape in current model is torch.Size([1024, 1024, 3, 3]).\r\n\tsize mismatch for blocks.0.0.conv2.bias: copying a param with shape torch.Size([1536]) from checkpoint, the shape in current model is torch.Size([1024]).\r\n\tsize mismatch for blocks.0.0.conv2.u0: copying a param with shape torch.Size([1, 1536]) from checkpoint, the shape in current model is torch.Size([1, 1024]).\r\n\tsize mismatch for blocks.0.0.conv_sc.weight: copying a param with shape torch.Size([1536, 1536, 1, 1]) from checkpoint, the shape in current model is torch.Size([1024, 1024, 1, 1]).\r\n\tsize mismatch for blocks.0.0.conv_sc.bias: copying a param with shape torch.Size([1536]) from checkpoint, the shape in current model is torch.Size([1024]).\r\n\tsize mismatch for blocks.0.0.conv_sc.u0: copying a param with shape torch.Size([1, 1536]) from checkpoint, the shape in current model is torch.Size([1, 1024]).\r\n\tsize mismatch for blocks.0.0.bn1.stored_mean: copying a param with shape torch.Size([1536]) from checkpoint, the shape in current model is torch.Size([1024]).\r\n\tsize mismatch for blocks.0.0.bn1.stored_var: copying a param with shape torch.Size([1536]) from checkpoint, the shape in current model is torch.Size([1024]).\r\n\tsize mismatch for blocks.0.0.bn1.gain.weight: copying a param with shape torch.Size([1536, 148]) from checkpoint, the shape in current model is torch.Size([1000, 1024]).\r\n\tsize mismatch for blocks.0.0.bn1.bias.weight: copying a param with shape torch.Size([1536, 148]) from checkpoint, the shape in current model is torch.Size([1000, 1024]).\r\n\tsize mismatch for blocks.0.0.bn2.stored_mean: copying a param with shape torch.Size([1536]) from checkpoint, the shape in current model is torch.Size([1024]).\r\n\tsize mismatch for blocks.0.0.bn2.stored_var: copying a param with shape torch.Size([1536]) from checkpoint, the shape in current model is torch.Size([1024]).\r\n\tsize mismatch for blocks.0.0.bn2.gain.weight: copying a param with shape torch.Size([1536, 148]) from checkpoint, the shape in current model is torch.Size([1000, 1024]).\r\n\tsize mismatch for blocks.0.0.bn2.bias.weight: copying a param with shape torch.Size([1536, 148]) from checkpoint, the shape in current model is torch.Size([1000, 1024]).\r\n\tsize mismatch for blocks.1.0.conv1.weight: copying a param with shape torch.Size([768, 1536, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 1024, 3, 3]).\r\n\tsize mismatch for blocks.1.0.conv1.bias: copying a param with shape torch.Size([768]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for blocks.1.0.conv1.u0: copying a param with shape torch.Size([1, 768]) from checkpoint, the shape in current model is torch.Size([1, 512]).\r\n\tsize mismatch for blocks.1.0.conv2.weight: copying a param with shape torch.Size([768, 768, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 512, 3, 3]).\r\n\tsize mismatch for blocks.1.0.conv2.bias: copying a param with shape torch.Size([768]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for blocks.1.0.conv2.u0: copying a param with shape torch.Size([1, 768]) from checkpoint, the shape in current model is torch.Size([1, 512]).\r\n\tsize mismatch for blocks.1.0.conv_sc.weight: copying a param with shape torch.Size([768, 1536, 1, 1]) from checkpoint, the shape in current model is torch.Size([512, 1024, 1, 1]).\r\n\tsize mismatch for blocks.1.0.conv_sc.bias: copying a param with shape torch.Size([768]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for blocks.1.0.conv_sc.u0: copying a param with shape torch.Size([1, 768]) from checkpoint, the shape in current model is torch.Size([1, 512]).\r\n\tsize mismatch for blocks.1.0.bn1.stored_mean: copying a param with shape torch.Size([1536]) from checkpoint, the shape in current model is torch.Size([1024]).\r\n\tsize mismatch for blocks.1.0.bn1.stored_var: copying a param with shape torch.Size([1536]) from checkpoint, the shape in current model is torch.Size([1024]).\r\n\tsize mismatch for blocks.1.0.bn1.gain.weight: copying a param with shape torch.Size([1536, 148]) from checkpoint, the shape in current model is torch.Size([1000, 1024]).\r\n\tsize mismatch for blocks.1.0.bn1.bias.weight: copying a param with shape torch.Size([1536, 148]) from checkpoint, the shape in current model is torch.Size([1000, 1024]).\r\n\tsize mismatch for blocks.1.0.bn2.stored_mean: copying a param with shape torch.Size([768]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for blocks.1.0.bn2.stored_var: copying a param with shape torch.Size([768]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for blocks.1.0.bn2.gain.weight: copying a param with shape torch.Size([768, 148]) from checkpoint, the shape in current model is torch.Size([1000, 512]).\r\n\tsize mismatch for blocks.1.0.bn2.bias.weight: copying a param with shape torch.Size([768, 148]) from checkpoint, the shape in current model is torch.Size([1000, 512]).\r\n\tsize mismatch for blocks.2.0.conv1.weight: copying a param with shape torch.Size([384, 768, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 512, 3, 3]).\r\n\tsize mismatch for blocks.2.0.conv1.bias: copying a param with shape torch.Size([384]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for blocks.2.0.conv1.u0: copying a param with shape torch.Size([1, 384]) from checkpoint, the shape in current model is torch.Size([1, 256]).\r\n\tsize mismatch for blocks.2.0.conv2.weight: copying a param with shape torch.Size([384, 384, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).\r\n\tsize mismatch for blocks.2.0.conv2.bias: copying a param with shape torch.Size([384]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for blocks.2.0.conv2.u0: copying a param with shape torch.Size([1, 384]) from checkpoint, the shape in current model is torch.Size([1, 256]).\r\n\tsize mismatch for blocks.2.0.conv_sc.weight: copying a param with shape torch.Size([384, 768, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).\r\n\tsize mismatch for blocks.2.0.conv_sc.bias: copying a param with shape torch.Size([384]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for blocks.2.0.conv_sc.u0: copying a param with shape torch.Size([1, 384]) from checkpoint, the shape in current model is torch.Size([1, 256]).\r\n\tsize mismatch for blocks.2.0.bn1.stored_mean: copying a param with shape torch.Size([768]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for blocks.2.0.bn1.stored_var: copying a param with shape torch.Size([768]) from checkpoint, the shape in current model is torch.Size([512]).\r\n\tsize mismatch for blocks.2.0.bn1.gain.weight: copying a param with shape torch.Size([768, 148]) from checkpoint, the shape in current model is torch.Size([1000, 512]).\r\n\tsize mismatch for blocks.2.0.bn1.bias.weight: copying a param with shape torch.Size([768, 148]) from checkpoint, the shape in current model is torch.Size([1000, 512]).\r\n\tsize mismatch for blocks.2.0.bn2.stored_mean: copying a param with shape torch.Size([384]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for blocks.2.0.bn2.stored_var: copying a param with shape torch.Size([384]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for blocks.2.0.bn2.gain.weight: copying a param with shape torch.Size([384, 148]) from checkpoint, the shape in current model is torch.Size([1000, 256]).\r\n\tsize mismatch for blocks.2.0.bn2.bias.weight: copying a param with shape torch.Size([384, 148]) from checkpoint, the shape in current model is torch.Size([1000, 256]).\r\n\tsize mismatch for blocks.3.0.conv1.weight: copying a param with shape torch.Size([192, 384, 3, 3]) from checkpoint, the shape in current model is torch.Size([128, 256, 3, 3]).\r\n\tsize mismatch for blocks.3.0.conv1.bias: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([128]).\r\n\tsize mismatch for blocks.3.0.conv1.u0: copying a param with shape torch.Size([1, 192]) from checkpoint, the shape in current model is torch.Size([1, 128]).\r\n\tsize mismatch for blocks.3.0.conv2.weight: copying a param with shape torch.Size([192, 192, 3, 3]) from checkpoint, the shape in current model is torch.Size([128, 128, 3, 3]).\r\n\tsize mismatch for blocks.3.0.conv2.bias: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([128]).\r\n\tsize mismatch for blocks.3.0.conv2.u0: copying a param with shape torch.Size([1, 192]) from checkpoint, the shape in current model is torch.Size([1, 128]).\r\n\tsize mismatch for blocks.3.0.conv_sc.weight: copying a param with shape torch.Size([192, 384, 1, 1]) from checkpoint, the shape in current model is torch.Size([128, 256, 1, 1]).\r\n\tsize mismatch for blocks.3.0.conv_sc.bias: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([128]).\r\n\tsize mismatch for blocks.3.0.conv_sc.u0: copying a param with shape torch.Size([1, 192]) from checkpoint, the shape in current model is torch.Size([1, 128]).\r\n\tsize mismatch for blocks.3.0.bn1.stored_mean: copying a param with shape torch.Size([384]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for blocks.3.0.bn1.stored_var: copying a param with shape torch.Size([384]) from checkpoint, the shape in current model is torch.Size([256]).\r\n\tsize mismatch for blocks.3.0.bn1.gain.weight: copying a param with shape torch.Size([384, 148]) from checkpoint, the shape in current model is torch.Size([1000, 256]).\r\n\tsize mismatch for blocks.3.0.bn1.bias.weight: copying a param with shape torch.Size([384, 148]) from checkpoint, the shape in current model is torch.Size([1000, 256]).\r\n\tsize mismatch for blocks.3.0.bn2.stored_mean: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([128]).\r\n\tsize mismatch for blocks.3.0.bn2.stored_var: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([128]).\r\n\tsize mismatch for blocks.3.0.bn2.gain.weight: copying a param with shape torch.Size([192, 148]) from checkpoint, the shape in current model is torch.Size([1000, 128]).\r\n\tsize mismatch for blocks.3.0.bn2.bias.weight: copying a param with shape torch.Size([192, 148]) from checkpoint, the shape in current model is torch.Size([1000, 128]).\r\n\tsize mismatch for blocks.3.1.theta.weight: copying a param with shape torch.Size([24, 192, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 128, 1, 1]).\r\n\tsize mismatch for blocks.3.1.theta.u0: copying a param with shape torch.Size([1, 24]) from checkpoint, the shape in current model is torch.Size([1, 16]).\r\n\tsize mismatch for blocks.3.1.phi.weight: copying a param with shape torch.Size([24, 192, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 128, 1, 1]).\r\n\tsize mismatch for blocks.3.1.phi.u0: copying a param with shape torch.Size([1, 24]) from checkpoint, the shape in current model is torch.Size([1, 16]).\r\n\tsize mismatch for blocks.3.1.g.weight: copying a param with shape torch.Size([96, 192, 1, 1]) from checkpoint, the shape in current model is torch.Size([64, 128, 1, 1]).\r\n\tsize mismatch for blocks.3.1.g.u0: copying a param with shape torch.Size([1, 96]) from checkpoint, the shape in current model is torch.Size([1, 64]).\r\n\tsize mismatch for blocks.3.1.o.weight: copying a param with shape torch.Size([192, 96, 1, 1]) from checkpoint, the shape in current model is torch.Size([128, 64, 1, 1]).\r\n\tsize mismatch for blocks.3.1.o.u0: copying a param with shape torch.Size([1, 192]) from checkpoint, the shape in current model is torch.Size([1, 128]).\r\n\tsize mismatch for blocks.4.0.conv1.weight: copying a param with shape torch.Size([96, 192, 3, 3]) from checkpoint, the shape in current model is torch.Size([64, 128, 3, 3]).\r\n\tsize mismatch for blocks.4.0.conv1.bias: copying a param with shape torch.Size([96]) from checkpoint, the shape in current model is torch.Size([64]).\r\n\tsize mismatch for blocks.4.0.conv1.u0: copying a param with shape torch.Size([1, 96]) from checkpoint, the shape in current model is torch.Size([1, 64]).\r\n\tsize mismatch for blocks.4.0.conv2.weight: copying a param with shape torch.Size([96, 96, 3, 3]) from checkpoint, the shape in current model is torch.Size([64, 64, 3, 3]).\r\n\tsize mismatch for blocks.4.0.conv2.bias: copying a param with shape torch.Size([96]) from checkpoint, the shape in current model is torch.Size([64]).\r\n\tsize mismatch for blocks.4.0.conv2.u0: copying a param with shape torch.Size([1, 96]) from checkpoint, the shape in current model is torch.Size([1, 64]).\r\n\tsize mismatch for blocks.4.0.conv_sc.weight: copying a param with shape torch.Size([96, 192, 1, 1]) from checkpoint, the shape in current model is torch.Size([64, 128, 1, 1]).\r\n\tsize mismatch for blocks.4.0.conv_sc.bias: copying a param with shape torch.Size([96]) from checkpoint, the shape in current model is torch.Size([64]).\r\n\tsize mismatch for blocks.4.0.conv_sc.u0: copying a param with shape torch.Size([1, 96]) from checkpoint, the shape in current model is torch.Size([1, 64]).\r\n\tsize mismatch for blocks.4.0.bn1.stored_mean: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([128]).\r\n\tsize mismatch for blocks.4.0.bn1.stored_var: copying a param with shape torch.Size([192]) from checkpoint, the shape in current model is torch.Size([128]).\r\n\tsize mismatch for blocks.4.0.bn1.gain.weight: copying a param with shape torch.Size([192, 148]) from checkpoint, the shape in current model is torch.Size([1000, 128]).\r\n\tsize mismatch for blocks.4.0.bn1.bias.weight: copying a param with shape torch.Size([192, 148]) from checkpoint, the shape in current model is torch.Size([1000, 128]).\r\n\tsize mismatch for blocks.4.0.bn2.stored_mean: copying a param with shape torch.Size([96]) from checkpoint, the shape in current model is torch.Size([64]).\r\n\tsize mismatch for blocks.4.0.bn2.stored_var: copying a param with shape torch.Size([96]) from checkpoint, the shape in current model is torch.Size([64]).\r\n\tsize mismatch for blocks.4.0.bn2.gain.weight: copying a param with shape torch.Size([96, 148]) from checkpoint, the shape in current model is torch.Size([1000, 64]).\r\n\tsize mismatch for blocks.4.0.bn2.bias.weight: copying a param with shape torch.Size([96, 148]) from checkpoint, the shape in current model is torch.Size([1000, 64]).\r\n\tsize mismatch for output_layer.0.gain: copying a param with shape torch.Size([96]) from checkpoint, the shape in current model is torch.Size([64]).\r\n\tsize mismatch for output_layer.0.bias: copying a param with shape torch.Size([96]) from checkpoint, the shape in current model is torch.Size([64]).\r\n\tsize mismatch for output_layer.0.stored_mean: copying a param with shape torch.Size([96]) from checkpoint, the shape in current model is torch.Size([64]).\r\n\tsize mismatch for output_layer.0.stored_var: copying a param with shape torch.Size([96]) from checkpoint, the shape in current model is torch.Size([64]).\r\n\tsize mismatch for output_layer.2.weight: copying a param with shape torch.Size([3, 96, 3, 3]) from checkpoint, the shape in current model is torch.Size([3, 64, 3, 3]).\r\n```\r\n","reactions":{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/comments/477360418/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"qilimk","id":31877208,"node_id":"MDQ6VXNlcjMxODc3MjA4","avatar_url":"https://avatars.githubusercontent.com/u/31877208?v=4","gravatar_id":"","url":"https://api.github.com/users/qilimk","html_url":"https://github.com/qilimk","followers_url":"https://api.github.com/users/qilimk/followers","following_url":"https://api.github.com/users/qilimk/following{/other_user}","gists_url":"https://api.github.com/users/qilimk/gists{/gist_id}","starred_url":"https://api.github.com/users/qilimk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/qilimk/subscriptions","organizations_url":"https://api.github.com/users/qilimk/orgs","repos_url":"https://api.github.com/users/qilimk/repos","events_url":"https://api.github.com/users/qilimk/events{/privacy}","received_events_url":"https://api.github.com/users/qilimk/received_events","type":"User","site_admin":false}},{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/comments/477363612","html_url":"https://github.com/ajbrock/BigGAN-PyTorch/issues/8#issuecomment-477363612","issue_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/8","id":477363612,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NzM2MzYxMg==","user":{"login":"ajbrock","id":7751273,"node_id":"MDQ6VXNlcjc3NTEyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7751273?v=4","gravatar_id":"","url":"https://api.github.com/users/ajbrock","html_url":"https://github.com/ajbrock","followers_url":"https://api.github.com/users/ajbrock/followers","following_url":"https://api.github.com/users/ajbrock/following{/other_user}","gists_url":"https://api.github.com/users/ajbrock/gists{/gist_id}","starred_url":"https://api.github.com/users/ajbrock/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajbrock/subscriptions","organizations_url":"https://api.github.com/users/ajbrock/orgs","repos_url":"https://api.github.com/users/ajbrock/repos","events_url":"https://api.github.com/users/ajbrock/events{/privacy}","received_events_url":"https://api.github.com/users/ajbrock/received_events","type":"User","site_admin":false},"created_at":"2019-03-27T21:59:17Z","updated_at":"2019-03-27T21:59:17Z","author_association":"OWNER","body":"You need to create a Generator which has the same parameters as the model in the pretrained checkpoint. Again, please look at the bash script I linked.","reactions":{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/comments/477363612/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"ajbrock","id":7751273,"node_id":"MDQ6VXNlcjc3NTEyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7751273?v=4","gravatar_id":"","url":"https://api.github.com/users/ajbrock","html_url":"https://github.com/ajbrock","followers_url":"https://api.github.com/users/ajbrock/followers","following_url":"https://api.github.com/users/ajbrock/following{/other_user}","gists_url":"https://api.github.com/users/ajbrock/gists{/gist_id}","starred_url":"https://api.github.com/users/ajbrock/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajbrock/subscriptions","organizations_url":"https://api.github.com/users/ajbrock/orgs","repos_url":"https://api.github.com/users/ajbrock/repos","events_url":"https://api.github.com/users/ajbrock/events{/privacy}","received_events_url":"https://api.github.com/users/ajbrock/received_events","type":"User","site_admin":false}},{"id":2234624862,"node_id":"MDExOkNsb3NlZEV2ZW50MjIzNDYyNDg2Mg==","url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/events/2234624862","actor":{"login":"ajbrock","id":7751273,"node_id":"MDQ6VXNlcjc3NTEyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7751273?v=4","gravatar_id":"","url":"https://api.github.com/users/ajbrock","html_url":"https://github.com/ajbrock","followers_url":"https://api.github.com/users/ajbrock/followers","following_url":"https://api.github.com/users/ajbrock/following{/other_user}","gists_url":"https://api.github.com/users/ajbrock/gists{/gist_id}","starred_url":"https://api.github.com/users/ajbrock/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajbrock/subscriptions","organizations_url":"https://api.github.com/users/ajbrock/orgs","repos_url":"https://api.github.com/users/ajbrock/repos","events_url":"https://api.github.com/users/ajbrock/events{/privacy}","received_events_url":"https://api.github.com/users/ajbrock/received_events","type":"User","site_admin":false},"event":"closed","commit_id":null,"commit_url":null,"created_at":"2019-03-27T22:00:27Z","state_reason":null,"performed_via_github_app":null},{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/comments/477370625","html_url":"https://github.com/ajbrock/BigGAN-PyTorch/issues/8#issuecomment-477370625","issue_url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/8","id":477370625,"node_id":"MDEyOklzc3VlQ29tbWVudDQ3NzM3MDYyNQ==","user":{"login":"airalcorn2","id":1927770,"node_id":"MDQ6VXNlcjE5Mjc3NzA=","avatar_url":"https://avatars.githubusercontent.com/u/1927770?v=4","gravatar_id":"","url":"https://api.github.com/users/airalcorn2","html_url":"https://github.com/airalcorn2","followers_url":"https://api.github.com/users/airalcorn2/followers","following_url":"https://api.github.com/users/airalcorn2/following{/other_user}","gists_url":"https://api.github.com/users/airalcorn2/gists{/gist_id}","starred_url":"https://api.github.com/users/airalcorn2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/airalcorn2/subscriptions","organizations_url":"https://api.github.com/users/airalcorn2/orgs","repos_url":"https://api.github.com/users/airalcorn2/repos","events_url":"https://api.github.com/users/airalcorn2/events{/privacy}","received_events_url":"https://api.github.com/users/airalcorn2/received_events","type":"User","site_admin":false},"created_at":"2019-03-27T22:25:22Z","updated_at":"2020-02-11T16:27:22Z","author_association":"NONE","body":"Thanks for pointing us to that shell script @ajbrock. In case it helps someone else, here is a minimal working example:\r\n```python\r\nimport torch\r\nimport torchvision\r\nimport utils\r\n\r\nparser = utils.prepare_parser()\r\nparser = utils.add_sample_parser(parser)\r\nconfig = vars(parser.parse_args())\r\n\r\n# See: https://github.com/ajbrock/BigGAN-PyTorch/blob/master/scripts/sample_BigGAN_bs256x8.sh.\r\nconfig[\"resolution\"] = utils.imsize_dict[\"I128_hdf5\"]\r\nconfig[\"n_classes\"] = utils.nclass_dict[\"I128_hdf5\"]\r\nconfig[\"G_activation\"] = utils.activation_dict[\"inplace_relu\"]\r\nconfig[\"D_activation\"] = utils.activation_dict[\"inplace_relu\"]\r\nconfig[\"G_attn\"] = \"64\"\r\nconfig[\"D_attn\"] = \"64\"\r\nconfig[\"G_ch\"] = 96\r\nconfig[\"D_ch\"] = 96\r\nconfig[\"hier\"] = True\r\nconfig[\"dim_z\"] = 120\r\nconfig[\"shared_dim\"] = 128\r\nconfig[\"G_shared\"] = True\r\nconfig = utils.update_config_roots(config)\r\nconfig[\"skip_init\"] = True\r\nconfig[\"no_optim\"] = True\r\nconfig[\"device\"] = \"cuda\"\r\n\r\n# Seed RNG.\r\nutils.seed_rng(config[\"seed\"])\r\n\r\n# Set up cudnn.benchmark for free speed.\r\ntorch.backends.cudnn.benchmark = True\r\n\r\n# Import the model.\r\nmodel = __import__(config[\"model\"])\r\nG = model.Generator(**config).to(config[\"device\"])\r\nutils.count_parameters(G)\r\n\r\n# Load weights.\r\nweights_path = \"/mnt/raid/qi/biggan_weights/G_ema.pth\"  # Change this.\r\nG.load_state_dict(torch.load(weights_path))\r\n\r\n# Update batch size setting used for G.\r\nG_batch_size = max(config[\"G_batch_size\"], config[\"batch_size\"])\r\n(z_, y_) = utils.prepare_z_y(\r\n    G_batch_size,\r\n    G.dim_z,\r\n    config[\"n_classes\"],\r\n    device=config[\"device\"],\r\n    fp16=config[\"G_fp16\"],\r\n    z_var=config[\"z_var\"],\r\n)\r\n\r\nG.eval()\r\n\r\nout_path = \"/home/michael/test_imgs/random_samples.jpg\"  # Change this.\r\nwith torch.no_grad():\r\n    z_.sample_()\r\n    y_.sample_()\r\n    image_tensors = G(z_, G.shared(y_))\r\n    torchvision.utils.save_image(\r\n        image_tensors,\r\n        out_path,\r\n        nrow=int(G_batch_size ** 0.5),\r\n        normalize=True,\r\n    )\r\n```\r\nthat produces the following output:\r\n\r\n![random_samples](https://user-images.githubusercontent.com/1927770/55116434-3cbf8d80-50b5-11e9-95aa-b6067d847046.jpg)","reactions":{"url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/comments/477370625/reactions","total_count":9,"+1":9,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"performed_via_github_app":null,"event":"commented","actor":{"login":"airalcorn2","id":1927770,"node_id":"MDQ6VXNlcjE5Mjc3NzA=","avatar_url":"https://avatars.githubusercontent.com/u/1927770?v=4","gravatar_id":"","url":"https://api.github.com/users/airalcorn2","html_url":"https://github.com/airalcorn2","followers_url":"https://api.github.com/users/airalcorn2/followers","following_url":"https://api.github.com/users/airalcorn2/following{/other_user}","gists_url":"https://api.github.com/users/airalcorn2/gists{/gist_id}","starred_url":"https://api.github.com/users/airalcorn2/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/airalcorn2/subscriptions","organizations_url":"https://api.github.com/users/airalcorn2/orgs","repos_url":"https://api.github.com/users/airalcorn2/repos","events_url":"https://api.github.com/users/airalcorn2/events{/privacy}","received_events_url":"https://api.github.com/users/airalcorn2/received_events","type":"User","site_admin":false}},{"id":2234669257,"node_id":"MDE0Ok1lbnRpb25lZEV2ZW50MjIzNDY2OTI1Nw==","url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/events/2234669257","actor":{"login":"ajbrock","id":7751273,"node_id":"MDQ6VXNlcjc3NTEyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7751273?v=4","gravatar_id":"","url":"https://api.github.com/users/ajbrock","html_url":"https://github.com/ajbrock","followers_url":"https://api.github.com/users/ajbrock/followers","following_url":"https://api.github.com/users/ajbrock/following{/other_user}","gists_url":"https://api.github.com/users/ajbrock/gists{/gist_id}","starred_url":"https://api.github.com/users/ajbrock/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajbrock/subscriptions","organizations_url":"https://api.github.com/users/ajbrock/orgs","repos_url":"https://api.github.com/users/ajbrock/repos","events_url":"https://api.github.com/users/ajbrock/events{/privacy}","received_events_url":"https://api.github.com/users/ajbrock/received_events","type":"User","site_admin":false},"event":"mentioned","commit_id":null,"commit_url":null,"created_at":"2019-03-27T22:25:22Z","performed_via_github_app":null},{"id":2234669258,"node_id":"MDE1OlN1YnNjcmliZWRFdmVudDIyMzQ2NjkyNTg=","url":"https://api.github.com/repos/ajbrock/BigGAN-PyTorch/issues/events/2234669258","actor":{"login":"ajbrock","id":7751273,"node_id":"MDQ6VXNlcjc3NTEyNzM=","avatar_url":"https://avatars.githubusercontent.com/u/7751273?v=4","gravatar_id":"","url":"https://api.github.com/users/ajbrock","html_url":"https://github.com/ajbrock","followers_url":"https://api.github.com/users/ajbrock/followers","following_url":"https://api.github.com/users/ajbrock/following{/other_user}","gists_url":"https://api.github.com/users/ajbrock/gists{/gist_id}","starred_url":"https://api.github.com/users/ajbrock/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ajbrock/subscriptions","organizations_url":"https://api.github.com/users/ajbrock/orgs","repos_url":"https://api.github.com/users/ajbrock/repos","events_url":"https://api.github.com/users/ajbrock/events{/privacy}","received_events_url":"https://api.github.com/users/ajbrock/received_events","type":"User","site_admin":false},"event":"subscribed","commit_id":null,"commit_url":null,"created_at":"2019-03-27T22:25:22Z","performed_via_github_app":null}]