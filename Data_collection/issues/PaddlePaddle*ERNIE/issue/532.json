{"url":"https://api.github.com/repos/PaddlePaddle/ERNIE/issues/532","repository_url":"https://api.github.com/repos/PaddlePaddle/ERNIE","labels_url":"https://api.github.com/repos/PaddlePaddle/ERNIE/issues/532/labels{/name}","comments_url":"https://api.github.com/repos/PaddlePaddle/ERNIE/issues/532/comments","events_url":"https://api.github.com/repos/PaddlePaddle/ERNIE/issues/532/events","html_url":"https://github.com/PaddlePaddle/ERNIE/issues/532","id":667695010,"node_id":"MDU6SXNzdWU2Njc2OTUwMTA=","number":532,"title":"完型填空的例子能正确运行，导出推理模型不报错，但是推理模型为无效模型。","user":{"login":"hello-web","id":4251586,"node_id":"MDQ6VXNlcjQyNTE1ODY=","avatar_url":"https://avatars.githubusercontent.com/u/4251586?v=4","gravatar_id":"","url":"https://api.github.com/users/hello-web","html_url":"https://github.com/hello-web","followers_url":"https://api.github.com/users/hello-web/followers","following_url":"https://api.github.com/users/hello-web/following{/other_user}","gists_url":"https://api.github.com/users/hello-web/gists{/gist_id}","starred_url":"https://api.github.com/users/hello-web/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hello-web/subscriptions","organizations_url":"https://api.github.com/users/hello-web/orgs","repos_url":"https://api.github.com/users/hello-web/repos","events_url":"https://api.github.com/users/hello-web/events{/privacy}","received_events_url":"https://api.github.com/users/hello-web/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2020-07-29T09:30:37Z","updated_at":"2020-08-01T08:40:25Z","closed_at":"2020-08-01T08:40:25Z","author_association":"NONE","active_lock_reason":null,"body":"\r\n\r\n# coding=gbk\r\n\r\nimport os\r\nimport re\r\nimport time\r\nimport logging\r\nimport json\r\nfrom random import random\r\nfrom tqdm import tqdm\r\nfrom functools import reduce, partial\r\n\r\nimport numpy as np\r\nimport logging\r\nimport argparse\r\n\r\nimport paddle\r\nimport paddle.fluid as F\r\nimport paddle.fluid.dygraph as FD\r\nimport paddle.fluid.layers as L\r\n\r\nfrom propeller import log\r\nimport propeller.paddle as propeller\r\n\r\nlog.setLevel(logging.DEBUG)\r\nlogging.getLogger().setLevel(logging.DEBUG)\r\n\r\n\r\n#from model.bert import BertConfig, BertModelLayer\r\n#from ernie.modeling_ernie import ErnieModel, ErnieModelForSequenceClassification\r\nfrom ernie.tokenizing_ernie import ErnieTokenizer, ErnieTinyTokenizer\r\nfrom ernie.optimization import AdamW, LinearDecay\r\nfrom ernie.modeling_ernie import ErnieModelForPretraining, ErnieModel\r\n\r\n\r\nif __name__ == '__main__':\r\n    parser = argparse.ArgumentParser('save_inference_model with ERNIE')\r\n    parser.add_argument('--from_pretrained', type=str, required=True, help='pretrained model directory or tag')\r\n    parser.add_argument('--inference_model_dir', type=str, default=None, help='inference model output directory')\r\n\r\n\r\n    args = parser.parse_args()\r\n\r\n    tokenizer = ErnieTokenizer.from_pretrained(args.from_pretrained)\r\n    rev_dict = {v: k for k, v in tokenizer.vocab.items()}\r\n    rev_dict[tokenizer.pad_id] = '' # replace [PAD]\r\n    rev_dict[tokenizer.sep_id] = '' # replace [PAD]\r\n    rev_dict[tokenizer.unk_id] = '' # replace [PAD]\r\n\r\n    @np.vectorize\r\n    def rev_lookup(i):\r\n        return rev_dict[i]\r\n\r\n    place = F.CPUPlace()\r\n    with FD.guard(place):\r\n        model = ErnieModelForPretraining.from_pretrained(args.from_pretrained)\r\n\r\n        src, _ = tokenizer.encode('戊戌变法，又称百日维新，是 [MASK] [MASK] [MASK] 、梁启超等维新派人士通过光绪帝进行 的一场资产阶级改良。')\r\n        print(src)\r\n        src_ids = np.expand_dims(src, 0)\r\n        src_ids = FD.to_variable(src_ids)\r\n\r\n        if args.inference_model_dir is not None:\r\n            log.debug('saving inference model')\r\n            class InferemceModel(ErnieModelForPretraining):\r\n                def __init__(self, *args, **kwargs):\r\n                    super(InferemceModel, self).__init__(*args, **kwargs)\r\n                    #del self.pooler_heads\r\n                def forward(self, src_ids, *args, **kwargs):\r\n                    #mlm_pos = kwargs.pop('mlm_pos', np.int64(3))\r\n                    pooled, encoded = ErnieModel.forward(self, src_ids, *args, **kwargs)\r\n                    encoded_2d = L.gather_nd(encoded, L.where(src_ids == 3))\r\n                    encoded_2d = self.mlm(encoded_2d)\r\n                    encoded_2d = self.mlm_ln(encoded_2d)\r\n                    logits_2d = L.matmul(encoded_2d, self.word_emb.weight, transpose_y=True) + self.mlm_bias\r\n                    return logits_2d\r\n\r\n            model.__class__ = InferemceModel \r\n            logits = model(src_ids)\r\n            _, static_model = FD.TracedLayer.trace(model, inputs=[src_ids])\r\n            static_model.save_inference_model(args.inference_model_dir)\r\n            \r\n            logits = logits.numpy()\r\n            output_ids = np.argmax(logits, -1)\r\n            seg_txt = rev_lookup(output_ids)\r\n            print(''.join(seg_txt))\r\n\r\n以上为复现代码\r\n问题：完型填空的例子能正确运行，导出推理模型不报错，但是推理模型为无效模型，不能进行正确推理。\r\n导出的模型文件参考文件名：\r\n__model__\r\ncreate_parameter_0.b_0\r\nembedding_[0-2].w_0\r\nlayer_norm_[0-25].b_0\r\nlayer_norm_[0-25].w_0\r\nlinear_[0-74].b_0\r\nlinear_[0-74].w_0","closed_by":{"login":"hello-web","id":4251586,"node_id":"MDQ6VXNlcjQyNTE1ODY=","avatar_url":"https://avatars.githubusercontent.com/u/4251586?v=4","gravatar_id":"","url":"https://api.github.com/users/hello-web","html_url":"https://github.com/hello-web","followers_url":"https://api.github.com/users/hello-web/followers","following_url":"https://api.github.com/users/hello-web/following{/other_user}","gists_url":"https://api.github.com/users/hello-web/gists{/gist_id}","starred_url":"https://api.github.com/users/hello-web/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hello-web/subscriptions","organizations_url":"https://api.github.com/users/hello-web/orgs","repos_url":"https://api.github.com/users/hello-web/repos","events_url":"https://api.github.com/users/hello-web/events{/privacy}","received_events_url":"https://api.github.com/users/hello-web/received_events","type":"User","site_admin":false},"reactions":{"url":"https://api.github.com/repos/PaddlePaddle/ERNIE/issues/532/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/PaddlePaddle/ERNIE/issues/532/timeline","performed_via_github_app":null,"state_reason":"completed"}