{"url":"https://api.github.com/repos/1adrianb/pytorch-estimate-flops/issues/2","repository_url":"https://api.github.com/repos/1adrianb/pytorch-estimate-flops","labels_url":"https://api.github.com/repos/1adrianb/pytorch-estimate-flops/issues/2/labels{/name}","comments_url":"https://api.github.com/repos/1adrianb/pytorch-estimate-flops/issues/2/comments","events_url":"https://api.github.com/repos/1adrianb/pytorch-estimate-flops/issues/2/events","html_url":"https://github.com/1adrianb/pytorch-estimate-flops/issues/2","id":508446452,"node_id":"MDU6SXNzdWU1MDg0NDY0NTI=","number":2,"title":"LSTM support","user":{"login":"hajix","id":8940780,"node_id":"MDQ6VXNlcjg5NDA3ODA=","avatar_url":"https://avatars.githubusercontent.com/u/8940780?v=4","gravatar_id":"","url":"https://api.github.com/users/hajix","html_url":"https://github.com/hajix","followers_url":"https://api.github.com/users/hajix/followers","following_url":"https://api.github.com/users/hajix/following{/other_user}","gists_url":"https://api.github.com/users/hajix/gists{/gist_id}","starred_url":"https://api.github.com/users/hajix/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hajix/subscriptions","organizations_url":"https://api.github.com/users/hajix/orgs","repos_url":"https://api.github.com/users/hajix/repos","events_url":"https://api.github.com/users/hajix/events{/privacy}","received_events_url":"https://api.github.com/users/hajix/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-10-17T12:37:11Z","updated_at":"2019-10-17T12:37:11Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"Hi\r\n\r\nMy model has some LSTM layers and the `count_ops` thrown the following error:\r\n\r\n```\r\nIn [37]: count_ops(model, x)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-37-846862382dff> in <module>\r\n----> 1 count_ops(model, x)\r\n\r\n/usr/local/lib/python3.5/dist-packages/pthflops/ops.py in count_ops(model, input, custom_ops, ignore_layers, print_readable, verbose, *args)\r\n    212     # Convert pytorch module to ONNX\r\n    213     trace, _ = torch.jit.get_trace_graph(model, input, *args)\r\n--> 214     torch.onnx._optimize_trace(trace, torch.onnx.OperatorExportTypes.ONNX)\r\n    215     graph = trace.graph()\r\n    216\r\n\r\n/usr/local/lib/python3.5/dist-packages/torch/onnx/__init__.py in _optimize_trace(trace, operator_export_type)\r\n     40 def _optimize_trace(trace, operator_export_type):\r\n     41     from torch.onnx import utils\r\n---> 42     trace.set_graph(utils._optimize_graph(trace.graph(), operator_export_type))\r\n     43\r\n     44\r\n\r\n/usr/local/lib/python3.5/dist-packages/torch/onnx/utils.py in _optimize_graph(graph, operator_export_type)\r\n    153 \r\n    154     if operator_export_type != OperatorExportTypes.RAW:\r\n--> 155         graph = torch._C._jit_pass_onnx(graph, operator_export_type)\r\n    156         torch._C._jit_pass_lint(graph)\r\n    157         torch._C._jit_pass_onnx_peephole(graph)\r\n\r\n/usr/local/lib/python3.5/dist-packages/torch/onnx/__init__.py in _run_symbolic_function(*args, **kwargs)\r\n     50 def _run_symbolic_function(*args, **kwargs):\r\n     51     from torch.onnx import utils\r\n---> 52     return utils._run_symbolic_function(*args, **kwargs)\r\n     53 \r\n     54 \r\n\r\n/usr/local/lib/python3.5/dist-packages/torch/onnx/utils.py in _run_symbolic_function(g, n, inputs, env, operator_export_type)\r\n    502                     return None\r\n    503                 fn = getattr(torch.onnx.symbolic, op_name)\r\n--> 504                 return fn(g, *inputs, **attrs)\r\n    505 \r\n    506         elif ns == \"prim\":\r\n\r\n/usr/local/lib/python3.5/dist-packages/torch/onnx/symbolic.py in lstm(g, *args)\r\n   1274         return _lstm_packed(g, *args)\r\n   1275     else:\r\n-> 1276         return _lstm_full(g, *args)\r\n   1277\r\n   1278\r\n\r\n/usr/local/lib/python3.5/dist-packages/torch/onnx/symbolic.py in wrapper(g, *args)\r\n     87             assert len(arg_descriptors) == len(args)\r\n     88             args = [_parse_arg(arg, arg_desc) for arg, arg_desc in zip(args, arg_descriptors)]\r\n---> 89             return fn(g, *args)\r\n     90         # In Python 2 functools.wraps chokes on partially applied functions, so we need this as a workaround\r\n     91         try:\r\n\r\n/usr/local/lib/python3.5/dist-packages/torch/onnx/symbolic.py in _lstm_full(g, input, hidden_v, weight_v, has_biases, num_layers, dropout, train, bidirectional, batch_first)\r\n   1260     hidden, weight = _unpack_list(hidden_v), _unpack_list(weight_v)\r\n   1261     return _generic_rnn(g, 'LSTM', input, hidden, weight, has_biases, num_layers,\r\n-> 1262                         dropout, train, bidirectional, batch_first)\r\n   1263\r\n   1264\r\n\r\n/usr/local/lib/python3.5/dist-packages/torch/onnx/symbolic.py in _generic_rnn(g, variant, input, initial_states, all_weights, has_biases, num_layers, dropout, train, bidirectional, batch_first, batch_sizes)\r\n   1201             state_indices = i, i + 1\r\n   1202         else:\r\n-> 1203             weight_ih_f, weight_hh_f, bias_f = transform_weights(2 * i)\r\n   1204             weight_ih_b, weight_hh_b, bias_b = transform_weights(2 * i + 1)\r\n   1205\r\n\r\n/usr/local/lib/python3.5/dist-packages/torch/onnx/symbolic.py in transform_weights(layer_index)\r\n   1188         elif variant == 'GRU' or variant == 'LSTM':\r\n   1189             weight_ih, weight_hh, bias_ih, bias_hh = \\\r\n-> 1190                 [reform_weights(g, w, hidden_size, reform_permutation) for w in layer_weights[layer_index]]\r\n   1191         bias_concat = g.op('Concat', bias_ih, bias_hh, axis_i=0)\r\n   1192\r\n\r\nValueError: not enough values to unpack (expected 4, got 2)\r\n\r\n\r\n```","closed_by":null,"reactions":{"url":"https://api.github.com/repos/1adrianb/pytorch-estimate-flops/issues/2/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/1adrianb/pytorch-estimate-flops/issues/2/timeline","performed_via_github_app":null,"state_reason":null}