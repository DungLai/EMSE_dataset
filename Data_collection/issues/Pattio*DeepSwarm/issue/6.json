{"url":"https://api.github.com/repos/Pattio/DeepSwarm/issues/6","repository_url":"https://api.github.com/repos/Pattio/DeepSwarm","labels_url":"https://api.github.com/repos/Pattio/DeepSwarm/issues/6/labels{/name}","comments_url":"https://api.github.com/repos/Pattio/DeepSwarm/issues/6/comments","events_url":"https://api.github.com/repos/Pattio/DeepSwarm/issues/6/events","html_url":"https://github.com/Pattio/DeepSwarm/issues/6","id":448334296,"node_id":"MDU6SXNzdWU0NDgzMzQyOTY=","number":6,"title":"[feature request] Add new evaluate_model function which can return a more generalized metric","user":{"login":"isaacgerg","id":11971499,"node_id":"MDQ6VXNlcjExOTcxNDk5","avatar_url":"https://avatars.githubusercontent.com/u/11971499?v=4","gravatar_id":"","url":"https://api.github.com/users/isaacgerg","html_url":"https://github.com/isaacgerg","followers_url":"https://api.github.com/users/isaacgerg/followers","following_url":"https://api.github.com/users/isaacgerg/following{/other_user}","gists_url":"https://api.github.com/users/isaacgerg/gists{/gist_id}","starred_url":"https://api.github.com/users/isaacgerg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/isaacgerg/subscriptions","organizations_url":"https://api.github.com/users/isaacgerg/orgs","repos_url":"https://api.github.com/users/isaacgerg/repos","events_url":"https://api.github.com/users/isaacgerg/events{/privacy}","received_events_url":"https://api.github.com/users/isaacgerg/received_events","type":"User","site_admin":false},"labels":[{"id":1377729936,"node_id":"MDU6TGFiZWwxMzc3NzI5OTM2","url":"https://api.github.com/repos/Pattio/DeepSwarm/labels/Type:%20Enhancement","name":"Type: Enhancement","color":"74b9ff","default":false,"description":""},{"id":1377732719,"node_id":"MDU6TGFiZWwxMzc3NzMyNzE5","url":"https://api.github.com/repos/Pattio/DeepSwarm/labels/Status:%20Accepted","name":"Status: Accepted","color":"2ecc71","default":false,"description":""},{"id":1377733135,"node_id":"MDU6TGFiZWwxMzc3NzMzMTM1","url":"https://api.github.com/repos/Pattio/DeepSwarm/labels/Priority:%20Medium","name":"Priority: Medium","color":"f1c40f","default":false,"description":""}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-05-24T20:05:55Z","updated_at":"2019-05-26T14:00:07Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"In evaluate_model, the code below can be used to return metrics which can only be computed on all of the data as opposed to averaged by batches as currently done.  For simplicity, you can set numThreads and qSize to 1.\r\n\r\n```\r\ndef evaluate(model, generator, steps, numThreads=2, qSize=5):\r\n    numItemsPushed_predict = 0\r\n    dataQueue = queue.Queue(maxsize=qSize)\r\n    mutex = threading.Lock()\r\n\r\n    def producer(steps):\r\n        nonlocal numItemsPushed_predict\r\n        killMe = False\r\n        while True:\r\n            mutex.acquire()\r\n            if numItemsPushed_predict < steps:\r\n                numItemsPushed_predict += 1\r\n            else:\r\n                killMe = True\r\n            myUid = numItemsPushed_predict\r\n            mutex.release()\r\n            if killMe:\r\n                return\r\n            #\r\n            x, y = generator.next(myUid-1)\r\n            dataQueue.put((x,y,myUid-1))\r\n            #\r\n        #\r\n    #\r\n\r\n    tVec = []\r\n    for k in range(numThreads):\r\n        t = threading.Thread(target=producer, args=(steps,))\r\n        t.daemon = True\r\n        t.start()\r\n        tVec.append(t)\r\n\r\n    resultVec = []\r\n    batchSize = None\r\n    pBar = tqdm.tqdm(range(steps), desc='EVALUATE')\r\n    for k in pBar:\r\n        currentQSize = dataQueue.qsize()\r\n        item = dataQueue.get()\r\n        x = item[0]\r\n        y = item[1]\r\n        uid = item[2] # For debug\r\n        if batchSize is None:\r\n            if type(x) is list:\r\n                batchSize = x[0].shape[0]\r\n            else:\r\n                batchSize = x.shape[0]\r\n            #\r\n            resultVec = np.zeros(steps)\r\n        r = model.evaluate(x, y, batch_size = batchSize, verbose=0)\r\n        resultVec[k] = r\r\n        #if type(y_pred) is list:\r\n        #    predVec[k*batchSize : (k+1)*batchSize] = y_pred[0].flatten()\r\n        #else:\r\n        #    predVec[k*batchSize : (k+1)*batchSize] = y_pred.flatten()\r\n        pBar.set_description('EVALUATE | QSize: {0}/{1}'.format(currentQSize, qSize))\r\n    #\r\n\r\n    return resultVec\r\n```\r\n\r\nevaluate_model(self, model) becomes:\r\n\r\ny_true, y_pred = evaluate(model, data -- will have to convert from generator (easy), 1, 1)\r\nloss = lossFunction(y_true, y_pred)\r\naccuracy can be computed from sklearn.accuracy_score\r\n\r\nYou could also support losses like AUC now.","closed_by":null,"reactions":{"url":"https://api.github.com/repos/Pattio/DeepSwarm/issues/6/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/Pattio/DeepSwarm/issues/6/timeline","performed_via_github_app":null,"state_reason":null}