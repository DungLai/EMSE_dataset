{"url":"https://api.github.com/repos/ProGamerGov/neural-style-pt/issues/11","repository_url":"https://api.github.com/repos/ProGamerGov/neural-style-pt","labels_url":"https://api.github.com/repos/ProGamerGov/neural-style-pt/issues/11/labels{/name}","comments_url":"https://api.github.com/repos/ProGamerGov/neural-style-pt/issues/11/comments","events_url":"https://api.github.com/repos/ProGamerGov/neural-style-pt/issues/11/events","html_url":"https://github.com/ProGamerGov/neural-style-pt/issues/11","id":403296670,"node_id":"MDU6SXNzdWU0MDMyOTY2NzA=","number":11,"title":"Feature: Play with Covariance instead of Gram?","user":{"login":"fabricatedmath","id":36798976,"node_id":"MDQ6VXNlcjM2Nzk4OTc2","avatar_url":"https://avatars.githubusercontent.com/u/36798976?v=4","gravatar_id":"","url":"https://api.github.com/users/fabricatedmath","html_url":"https://github.com/fabricatedmath","followers_url":"https://api.github.com/users/fabricatedmath/followers","following_url":"https://api.github.com/users/fabricatedmath/following{/other_user}","gists_url":"https://api.github.com/users/fabricatedmath/gists{/gist_id}","starred_url":"https://api.github.com/users/fabricatedmath/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fabricatedmath/subscriptions","organizations_url":"https://api.github.com/users/fabricatedmath/orgs","repos_url":"https://api.github.com/users/fabricatedmath/repos","events_url":"https://api.github.com/users/fabricatedmath/events{/privacy}","received_events_url":"https://api.github.com/users/fabricatedmath/received_events","type":"User","site_admin":false},"labels":[],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-01-25T19:14:50Z","updated_at":"2019-01-25T19:14:50Z","closed_at":null,"author_association":"NONE","active_lock_reason":null,"body":"I watched a presentation from Artomatix and they have some arguments for using a covariance loss instead of a gram loss. You can flip between the two (I think it's correct..) by doing\r\n```python\r\nclass GramMatrix(nn.Module):\r\n\r\n    def forward(self, input):\r\n        B, C, H, W = input.size()\r\n        x_flat = input.view(C, H * W)\r\n\r\n        #Add this for covariance loss\r\n        x_flat = x_flat - x_flat.mean(1).unsqueeze(1)\r\n\r\n        return torch.mm(x_flat, x_flat.t())\r\n```\r\n\r\nI didn't experiment with it much, but using the default content/style at 1024, you get these:\r\nGram Loss:\r\n![gram](https://user-images.githubusercontent.com/36798976/51767404-3dcf4100-20ab-11e9-89c9-d9c186098c18.png)\r\n\r\nCovariance Loss:\r\n![cov](https://user-images.githubusercontent.com/36798976/51767408-4162c800-20ab-11e9-9e23-29ed99a1a75d.png)\r\n\r\nI wouldn't say it's better, but it is interesting it adds more texture to the sky. Might have some utility for more textured styles?\r\n\r\nThoughts?\r\n\r\np.s. Nice implementation! Happy there's a true to jcjohson, cuda 10, pytorch impl","closed_by":null,"reactions":{"url":"https://api.github.com/repos/ProGamerGov/neural-style-pt/issues/11/reactions","total_count":3,"+1":3,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/ProGamerGov/neural-style-pt/issues/11/timeline","performed_via_github_app":null,"state_reason":null}